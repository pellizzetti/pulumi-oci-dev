// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.ApiGateway.Outputs
{

    [OutputType]
    public sealed class GetApiDeploymentSpecificationRouteRequestPoliciesResult
    {
        /// <summary>
        /// If authentication has been performed, validate whether the request scope (if any) applies to this route. If no RouteAuthorizationPolicy is defined for a route, a policy with a type of AUTHENTICATION_ONLY is applied.
        /// </summary>
        public readonly Outputs.GetApiDeploymentSpecificationRouteRequestPoliciesAuthorizationResult Authorization;
        /// <summary>
        /// Validate the payload body of the incoming API requests on a specific route.
        /// </summary>
        public readonly Outputs.GetApiDeploymentSpecificationRouteRequestPoliciesBodyValidationResult BodyValidation;
        /// <summary>
        /// Enable CORS (Cross-Origin-Resource-Sharing) request handling.
        /// </summary>
        public readonly Outputs.GetApiDeploymentSpecificationRouteRequestPoliciesCorsResult Cors;
        /// <summary>
        /// A set of transformations to apply to HTTP headers that pass through the gateway.
        /// </summary>
        public readonly Outputs.GetApiDeploymentSpecificationRouteRequestPoliciesHeaderTransformationsResult HeaderTransformations;
        /// <summary>
        /// Validate the HTTP headers on the incoming API requests on a specific route.
        /// </summary>
        public readonly Outputs.GetApiDeploymentSpecificationRouteRequestPoliciesHeaderValidationsResult HeaderValidations;
        /// <summary>
        /// A set of transformations to apply to query parameters that pass through the gateway.
        /// </summary>
        public readonly Outputs.GetApiDeploymentSpecificationRouteRequestPoliciesQueryParameterTransformationsResult QueryParameterTransformations;
        /// <summary>
        /// Validate the URL query parameters on the incoming API requests on a specific route.
        /// </summary>
        public readonly Outputs.GetApiDeploymentSpecificationRouteRequestPoliciesQueryParameterValidationsResult QueryParameterValidations;
        /// <summary>
        /// Base policy for Response Cache lookup.
        /// </summary>
        public readonly Outputs.GetApiDeploymentSpecificationRouteRequestPoliciesResponseCacheLookupResult ResponseCacheLookup;

        [OutputConstructor]
        private GetApiDeploymentSpecificationRouteRequestPoliciesResult(
            Outputs.GetApiDeploymentSpecificationRouteRequestPoliciesAuthorizationResult authorization,

            Outputs.GetApiDeploymentSpecificationRouteRequestPoliciesBodyValidationResult bodyValidation,

            Outputs.GetApiDeploymentSpecificationRouteRequestPoliciesCorsResult cors,

            Outputs.GetApiDeploymentSpecificationRouteRequestPoliciesHeaderTransformationsResult headerTransformations,

            Outputs.GetApiDeploymentSpecificationRouteRequestPoliciesHeaderValidationsResult headerValidations,

            Outputs.GetApiDeploymentSpecificationRouteRequestPoliciesQueryParameterTransformationsResult queryParameterTransformations,

            Outputs.GetApiDeploymentSpecificationRouteRequestPoliciesQueryParameterValidationsResult queryParameterValidations,

            Outputs.GetApiDeploymentSpecificationRouteRequestPoliciesResponseCacheLookupResult responseCacheLookup)
        {
            Authorization = authorization;
            BodyValidation = bodyValidation;
            Cors = cors;
            HeaderTransformations = headerTransformations;
            HeaderValidations = headerValidations;
            QueryParameterTransformations = queryParameterTransformations;
            QueryParameterValidations = queryParameterValidations;
            ResponseCacheLookup = responseCacheLookup;
        }
    }
}
