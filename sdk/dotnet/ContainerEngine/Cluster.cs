// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.ContainerEngine
{
    /// <summary>
    /// This resource provides the Cluster resource in Oracle Cloud Infrastructure Container Engine service.
    /// 
    /// Create a new cluster.
    /// 
    /// ## Import
    /// 
    /// Clusters can be imported using the `id`, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import oci:containerengine/cluster:Cluster test_cluster "id"
    /// ```
    /// </summary>
    [OciResourceType("oci:containerengine/cluster:Cluster")]
    public partial class Cluster : Pulumi.CustomResource
    {
        /// <summary>
        /// Available Kubernetes versions to which the clusters masters may be upgraded.
        /// </summary>
        [Output("availableKubernetesUpgrades")]
        public Output<ImmutableArray<string>> AvailableKubernetesUpgrades { get; private set; } = null!;

        /// <summary>
        /// The OCID of the compartment in which to create the cluster.
        /// </summary>
        [Output("compartmentId")]
        public Output<string> CompartmentId { get; private set; } = null!;

        /// <summary>
        /// The network configuration for access to the Cluster control plane.
        /// </summary>
        [Output("endpointConfig")]
        public Output<Outputs.ClusterEndpointConfig?> EndpointConfig { get; private set; } = null!;

        /// <summary>
        /// Endpoints served up by the cluster masters.
        /// </summary>
        [Output("endpoints")]
        public Output<Outputs.ClusterEndpoints> Endpoints { get; private set; } = null!;

        /// <summary>
        /// (Updatable) The image verification policy for signature validation. Once a policy is created and enabled with one or more kms keys, the policy will ensure all images deployed has been signed with the key(s) attached to the policy.
        /// </summary>
        [Output("imagePolicyConfig")]
        public Output<Outputs.ClusterImagePolicyConfig> ImagePolicyConfig { get; private set; } = null!;

        /// <summary>
        /// The OCID of the KMS key to be used as the master encryption key for Kubernetes secret encryption. When used, `kubernetesVersion` must be at least `v1.13.0`.
        /// </summary>
        [Output("kmsKeyId")]
        public Output<string> KmsKeyId { get; private set; } = null!;

        /// <summary>
        /// (Updatable) The version of Kubernetes to install into the cluster masters.
        /// </summary>
        [Output("kubernetesVersion")]
        public Output<string> KubernetesVersion { get; private set; } = null!;

        /// <summary>
        /// Details about the state of the cluster masters.
        /// </summary>
        [Output("lifecycleDetails")]
        public Output<string> LifecycleDetails { get; private set; } = null!;

        /// <summary>
        /// Metadata about the cluster.
        /// </summary>
        [Output("metadata")]
        public Output<Outputs.ClusterMetadata> Metadata { get; private set; } = null!;

        /// <summary>
        /// (Updatable) The name of the cluster. Avoid entering confidential information.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// (Updatable) Optional attributes for the cluster.
        /// </summary>
        [Output("options")]
        public Output<Outputs.ClusterOptions> Options { get; private set; } = null!;

        /// <summary>
        /// The state of the cluster masters.
        /// </summary>
        [Output("state")]
        public Output<string> State { get; private set; } = null!;

        /// <summary>
        /// The OCID of the virtual cloud network (VCN) in which to create the cluster.
        /// </summary>
        [Output("vcnId")]
        public Output<string> VcnId { get; private set; } = null!;


        /// <summary>
        /// Create a Cluster resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Cluster(string name, ClusterArgs args, CustomResourceOptions? options = null)
            : base("oci:containerengine/cluster:Cluster", name, args ?? new ClusterArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Cluster(string name, Input<string> id, ClusterState? state = null, CustomResourceOptions? options = null)
            : base("oci:containerengine/cluster:Cluster", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Cluster resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Cluster Get(string name, Input<string> id, ClusterState? state = null, CustomResourceOptions? options = null)
        {
            return new Cluster(name, id, state, options);
        }
    }

    public sealed class ClusterArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The OCID of the compartment in which to create the cluster.
        /// </summary>
        [Input("compartmentId", required: true)]
        public Input<string> CompartmentId { get; set; } = null!;

        /// <summary>
        /// The network configuration for access to the Cluster control plane.
        /// </summary>
        [Input("endpointConfig")]
        public Input<Inputs.ClusterEndpointConfigArgs>? EndpointConfig { get; set; }

        /// <summary>
        /// (Updatable) The image verification policy for signature validation. Once a policy is created and enabled with one or more kms keys, the policy will ensure all images deployed has been signed with the key(s) attached to the policy.
        /// </summary>
        [Input("imagePolicyConfig")]
        public Input<Inputs.ClusterImagePolicyConfigArgs>? ImagePolicyConfig { get; set; }

        /// <summary>
        /// The OCID of the KMS key to be used as the master encryption key for Kubernetes secret encryption. When used, `kubernetesVersion` must be at least `v1.13.0`.
        /// </summary>
        [Input("kmsKeyId")]
        public Input<string>? KmsKeyId { get; set; }

        /// <summary>
        /// (Updatable) The version of Kubernetes to install into the cluster masters.
        /// </summary>
        [Input("kubernetesVersion", required: true)]
        public Input<string> KubernetesVersion { get; set; } = null!;

        /// <summary>
        /// (Updatable) The name of the cluster. Avoid entering confidential information.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// (Updatable) Optional attributes for the cluster.
        /// </summary>
        [Input("options")]
        public Input<Inputs.ClusterOptionsArgs>? Options { get; set; }

        /// <summary>
        /// The OCID of the virtual cloud network (VCN) in which to create the cluster.
        /// </summary>
        [Input("vcnId", required: true)]
        public Input<string> VcnId { get; set; } = null!;

        public ClusterArgs()
        {
        }
    }

    public sealed class ClusterState : Pulumi.ResourceArgs
    {
        [Input("availableKubernetesUpgrades")]
        private InputList<string>? _availableKubernetesUpgrades;

        /// <summary>
        /// Available Kubernetes versions to which the clusters masters may be upgraded.
        /// </summary>
        public InputList<string> AvailableKubernetesUpgrades
        {
            get => _availableKubernetesUpgrades ?? (_availableKubernetesUpgrades = new InputList<string>());
            set => _availableKubernetesUpgrades = value;
        }

        /// <summary>
        /// The OCID of the compartment in which to create the cluster.
        /// </summary>
        [Input("compartmentId")]
        public Input<string>? CompartmentId { get; set; }

        /// <summary>
        /// The network configuration for access to the Cluster control plane.
        /// </summary>
        [Input("endpointConfig")]
        public Input<Inputs.ClusterEndpointConfigGetArgs>? EndpointConfig { get; set; }

        /// <summary>
        /// Endpoints served up by the cluster masters.
        /// </summary>
        [Input("endpoints")]
        public Input<Inputs.ClusterEndpointsGetArgs>? Endpoints { get; set; }

        /// <summary>
        /// (Updatable) The image verification policy for signature validation. Once a policy is created and enabled with one or more kms keys, the policy will ensure all images deployed has been signed with the key(s) attached to the policy.
        /// </summary>
        [Input("imagePolicyConfig")]
        public Input<Inputs.ClusterImagePolicyConfigGetArgs>? ImagePolicyConfig { get; set; }

        /// <summary>
        /// The OCID of the KMS key to be used as the master encryption key for Kubernetes secret encryption. When used, `kubernetesVersion` must be at least `v1.13.0`.
        /// </summary>
        [Input("kmsKeyId")]
        public Input<string>? KmsKeyId { get; set; }

        /// <summary>
        /// (Updatable) The version of Kubernetes to install into the cluster masters.
        /// </summary>
        [Input("kubernetesVersion")]
        public Input<string>? KubernetesVersion { get; set; }

        /// <summary>
        /// Details about the state of the cluster masters.
        /// </summary>
        [Input("lifecycleDetails")]
        public Input<string>? LifecycleDetails { get; set; }

        /// <summary>
        /// Metadata about the cluster.
        /// </summary>
        [Input("metadata")]
        public Input<Inputs.ClusterMetadataGetArgs>? Metadata { get; set; }

        /// <summary>
        /// (Updatable) The name of the cluster. Avoid entering confidential information.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// (Updatable) Optional attributes for the cluster.
        /// </summary>
        [Input("options")]
        public Input<Inputs.ClusterOptionsGetArgs>? Options { get; set; }

        /// <summary>
        /// The state of the cluster masters.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        /// <summary>
        /// The OCID of the virtual cloud network (VCN) in which to create the cluster.
        /// </summary>
        [Input("vcnId")]
        public Input<string>? VcnId { get; set; }

        public ClusterState()
        {
        }
    }
}
