// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.ContainerEngine
{
    public static class GetNodePool
    {
        /// <summary>
        /// This data source provides details about a specific Node Pool resource in Oracle Cloud Infrastructure Container Engine service.
        /// 
        /// Get the details of a node pool.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var testNodePool = Output.Create(Oci.ContainerEngine.GetNodePool.InvokeAsync(new Oci.ContainerEngine.GetNodePoolArgs
        ///         {
        ///             NodePoolId = oci_containerengine_node_pool.Test_node_pool.Id,
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetNodePoolResult> InvokeAsync(GetNodePoolArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetNodePoolResult>("oci:containerengine/getNodePool:getNodePool", args ?? new GetNodePoolArgs(), options.WithVersion());
    }


    public sealed class GetNodePoolArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The OCID of the node pool.
        /// </summary>
        [Input("nodePoolId", required: true)]
        public string NodePoolId { get; set; } = null!;

        public GetNodePoolArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetNodePoolResult
    {
        /// <summary>
        /// The OCID of the cluster to which this node pool is attached.
        /// </summary>
        public readonly string ClusterId;
        /// <summary>
        /// The OCID of the compartment in which the node pool exists.
        /// </summary>
        public readonly string CompartmentId;
        /// <summary>
        /// The OCID of the compute instance backing this node.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// A list of key/value pairs to add to nodes after they join the Kubernetes cluster.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetNodePoolInitialNodeLabelResult> InitialNodeLabels;
        /// <summary>
        /// The version of Kubernetes this node is running.
        /// </summary>
        public readonly string KubernetesVersion;
        /// <summary>
        /// The name of the node.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The configuration of nodes in the node pool.
        /// </summary>
        public readonly Outputs.GetNodePoolNodeConfigDetailsResult NodeConfigDetails;
        /// <summary>
        /// Deprecated. see `nodeSource`. The OCID of the image running on the nodes in the node pool.
        /// </summary>
        public readonly string NodeImageId;
        /// <summary>
        /// Deprecated. see `nodeSource`. The name of the image running on the nodes in the node pool.
        /// </summary>
        public readonly string NodeImageName;
        /// <summary>
        /// A list of key/value pairs to add to each underlying Oracle Cloud Infrastructure instance in the node pool on launch.
        /// </summary>
        public readonly ImmutableDictionary<string, object> NodeMetadata;
        /// <summary>
        /// The OCID of the node pool to which this node belongs.
        /// </summary>
        public readonly string NodePoolId;
        /// <summary>
        /// The name of the node shape of the nodes in the node pool.
        /// </summary>
        public readonly string NodeShape;
        /// <summary>
        /// The shape configuration of the nodes.
        /// </summary>
        public readonly Outputs.GetNodePoolNodeShapeConfigResult NodeShapeConfig;
        /// <summary>
        /// Deprecated. see `nodeSourceDetails`. Source running on the nodes in the node pool.
        /// </summary>
        public readonly Outputs.GetNodePoolNodeSourceResult NodeSource;
        /// <summary>
        /// Source running on the nodes in the node pool.
        /// </summary>
        public readonly Outputs.GetNodePoolNodeSourceDetailsResult NodeSourceDetails;
        /// <summary>
        /// The nodes in the node pool.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetNodePoolNodeResult> Nodes;
        /// <summary>
        /// The number of nodes in each subnet.
        /// </summary>
        public readonly int QuantityPerSubnet;
        /// <summary>
        /// The SSH public key on each node in the node pool on launch.
        /// </summary>
        public readonly string SshPublicKey;
        /// <summary>
        /// The OCIDs of the subnets in which to place nodes for this node pool.
        /// </summary>
        public readonly ImmutableArray<string> SubnetIds;

        [OutputConstructor]
        private GetNodePoolResult(
            string clusterId,

            string compartmentId,

            string id,

            ImmutableArray<Outputs.GetNodePoolInitialNodeLabelResult> initialNodeLabels,

            string kubernetesVersion,

            string name,

            Outputs.GetNodePoolNodeConfigDetailsResult nodeConfigDetails,

            string nodeImageId,

            string nodeImageName,

            ImmutableDictionary<string, object> nodeMetadata,

            string nodePoolId,

            string nodeShape,

            Outputs.GetNodePoolNodeShapeConfigResult nodeShapeConfig,

            Outputs.GetNodePoolNodeSourceResult nodeSource,

            Outputs.GetNodePoolNodeSourceDetailsResult nodeSourceDetails,

            ImmutableArray<Outputs.GetNodePoolNodeResult> nodes,

            int quantityPerSubnet,

            string sshPublicKey,

            ImmutableArray<string> subnetIds)
        {
            ClusterId = clusterId;
            CompartmentId = compartmentId;
            Id = id;
            InitialNodeLabels = initialNodeLabels;
            KubernetesVersion = kubernetesVersion;
            Name = name;
            NodeConfigDetails = nodeConfigDetails;
            NodeImageId = nodeImageId;
            NodeImageName = nodeImageName;
            NodeMetadata = nodeMetadata;
            NodePoolId = nodePoolId;
            NodeShape = nodeShape;
            NodeShapeConfig = nodeShapeConfig;
            NodeSource = nodeSource;
            NodeSourceDetails = nodeSourceDetails;
            Nodes = nodes;
            QuantityPerSubnet = quantityPerSubnet;
            SshPublicKey = sshPublicKey;
            SubnetIds = subnetIds;
        }
    }
}
