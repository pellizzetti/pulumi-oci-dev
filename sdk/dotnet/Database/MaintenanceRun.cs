// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.Database
{
    /// <summary>
    /// This resource provides the Maintenance Run resource in Oracle Cloud Infrastructure Database service.
    /// 
    /// Updates the properties of a maintenance run, such as the state of a maintenance run.
    /// 
    /// ## Import
    /// 
    /// MaintenanceRuns can be imported using the `id`, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import oci:database/maintenanceRun:MaintenanceRun test_maintenance_run "id"
    /// ```
    /// </summary>
    [OciResourceType("oci:database/maintenanceRun:MaintenanceRun")]
    public partial class MaintenanceRun : Pulumi.CustomResource
    {
        /// <summary>
        /// The OCID of the compartment.
        /// </summary>
        [Output("compartmentId")]
        public Output<string> CompartmentId { get; private set; } = null!;

        /// <summary>
        /// Description of the maintenance run.
        /// </summary>
        [Output("description")]
        public Output<string> Description { get; private set; } = null!;

        /// <summary>
        /// The user-friendly name for the maintenance run.
        /// </summary>
        [Output("displayName")]
        public Output<string> DisplayName { get; private set; } = null!;

        /// <summary>
        /// (Updatable) If `FALSE`, skips the maintenance run.
        /// </summary>
        [Output("isEnabled")]
        public Output<bool> IsEnabled { get; private set; } = null!;

        /// <summary>
        /// (Updatable) If set to `TRUE`, starts patching immediately.
        /// </summary>
        [Output("isPatchNowEnabled")]
        public Output<bool> IsPatchNowEnabled { get; private set; } = null!;

        /// <summary>
        /// Additional information about the current lifecycle state.
        /// </summary>
        [Output("lifecycleDetails")]
        public Output<string> LifecycleDetails { get; private set; } = null!;

        /// <summary>
        /// The maintenance run OCID.
        /// </summary>
        [Output("maintenanceRunId")]
        public Output<string> MaintenanceRunId { get; private set; } = null!;

        /// <summary>
        /// Maintenance sub-type.
        /// </summary>
        [Output("maintenanceSubtype")]
        public Output<string> MaintenanceSubtype { get; private set; } = null!;

        /// <summary>
        /// Maintenance type.
        /// </summary>
        [Output("maintenanceType")]
        public Output<string> MaintenanceType { get; private set; } = null!;

        /// <summary>
        /// Contain the patch failure count.
        /// </summary>
        [Output("patchFailureCount")]
        public Output<int> PatchFailureCount { get; private set; } = null!;

        /// <summary>
        /// (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the patch to be applied in the maintenance run.
        /// </summary>
        [Output("patchId")]
        public Output<string> PatchId { get; private set; } = null!;

        /// <summary>
        /// (Updatable) Cloud Exadata infrastructure node patching method, either "ROLLING" or "NONROLLING". Default value is ROLLING.
        /// </summary>
        [Output("patchingMode")]
        public Output<string> PatchingMode { get; private set; } = null!;

        /// <summary>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the maintenance run for the Autonomous Data Guard association's peer container database.
        /// </summary>
        [Output("peerMaintenanceRunId")]
        public Output<string> PeerMaintenanceRunId { get; private set; } = null!;

        /// <summary>
        /// The current state of the maintenance run. For Autonomous Database on shared Exadata infrastructure, valid states are IN_PROGRESS, SUCCEEDED and FAILED.
        /// </summary>
        [Output("state")]
        public Output<string> State { get; private set; } = null!;

        /// <summary>
        /// The ID of the target resource on which the maintenance run occurs.
        /// </summary>
        [Output("targetResourceId")]
        public Output<string> TargetResourceId { get; private set; } = null!;

        /// <summary>
        /// The type of the target resource on which the maintenance run occurs.
        /// </summary>
        [Output("targetResourceType")]
        public Output<string> TargetResourceType { get; private set; } = null!;

        /// <summary>
        /// The date and time the maintenance run was completed.
        /// </summary>
        [Output("timeEnded")]
        public Output<string> TimeEnded { get; private set; } = null!;

        /// <summary>
        /// (Updatable) The scheduled date and time of the maintenance run to update.
        /// </summary>
        [Output("timeScheduled")]
        public Output<string> TimeScheduled { get; private set; } = null!;

        /// <summary>
        /// The date and time the maintenance run starts.
        /// </summary>
        [Output("timeStarted")]
        public Output<string> TimeStarted { get; private set; } = null!;


        /// <summary>
        /// Create a MaintenanceRun resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public MaintenanceRun(string name, MaintenanceRunArgs args, CustomResourceOptions? options = null)
            : base("oci:database/maintenanceRun:MaintenanceRun", name, args ?? new MaintenanceRunArgs(), MakeResourceOptions(options, ""))
        {
        }

        private MaintenanceRun(string name, Input<string> id, MaintenanceRunState? state = null, CustomResourceOptions? options = null)
            : base("oci:database/maintenanceRun:MaintenanceRun", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing MaintenanceRun resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static MaintenanceRun Get(string name, Input<string> id, MaintenanceRunState? state = null, CustomResourceOptions? options = null)
        {
            return new MaintenanceRun(name, id, state, options);
        }
    }

    public sealed class MaintenanceRunArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// (Updatable) If `FALSE`, skips the maintenance run.
        /// </summary>
        [Input("isEnabled")]
        public Input<bool>? IsEnabled { get; set; }

        /// <summary>
        /// (Updatable) If set to `TRUE`, starts patching immediately.
        /// </summary>
        [Input("isPatchNowEnabled")]
        public Input<bool>? IsPatchNowEnabled { get; set; }

        /// <summary>
        /// The maintenance run OCID.
        /// </summary>
        [Input("maintenanceRunId", required: true)]
        public Input<string> MaintenanceRunId { get; set; } = null!;

        /// <summary>
        /// (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the patch to be applied in the maintenance run.
        /// </summary>
        [Input("patchId")]
        public Input<string>? PatchId { get; set; }

        /// <summary>
        /// (Updatable) Cloud Exadata infrastructure node patching method, either "ROLLING" or "NONROLLING". Default value is ROLLING.
        /// </summary>
        [Input("patchingMode")]
        public Input<string>? PatchingMode { get; set; }

        /// <summary>
        /// (Updatable) The scheduled date and time of the maintenance run to update.
        /// </summary>
        [Input("timeScheduled")]
        public Input<string>? TimeScheduled { get; set; }

        public MaintenanceRunArgs()
        {
        }
    }

    public sealed class MaintenanceRunState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The OCID of the compartment.
        /// </summary>
        [Input("compartmentId")]
        public Input<string>? CompartmentId { get; set; }

        /// <summary>
        /// Description of the maintenance run.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The user-friendly name for the maintenance run.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        /// <summary>
        /// (Updatable) If `FALSE`, skips the maintenance run.
        /// </summary>
        [Input("isEnabled")]
        public Input<bool>? IsEnabled { get; set; }

        /// <summary>
        /// (Updatable) If set to `TRUE`, starts patching immediately.
        /// </summary>
        [Input("isPatchNowEnabled")]
        public Input<bool>? IsPatchNowEnabled { get; set; }

        /// <summary>
        /// Additional information about the current lifecycle state.
        /// </summary>
        [Input("lifecycleDetails")]
        public Input<string>? LifecycleDetails { get; set; }

        /// <summary>
        /// The maintenance run OCID.
        /// </summary>
        [Input("maintenanceRunId")]
        public Input<string>? MaintenanceRunId { get; set; }

        /// <summary>
        /// Maintenance sub-type.
        /// </summary>
        [Input("maintenanceSubtype")]
        public Input<string>? MaintenanceSubtype { get; set; }

        /// <summary>
        /// Maintenance type.
        /// </summary>
        [Input("maintenanceType")]
        public Input<string>? MaintenanceType { get; set; }

        /// <summary>
        /// Contain the patch failure count.
        /// </summary>
        [Input("patchFailureCount")]
        public Input<int>? PatchFailureCount { get; set; }

        /// <summary>
        /// (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the patch to be applied in the maintenance run.
        /// </summary>
        [Input("patchId")]
        public Input<string>? PatchId { get; set; }

        /// <summary>
        /// (Updatable) Cloud Exadata infrastructure node patching method, either "ROLLING" or "NONROLLING". Default value is ROLLING.
        /// </summary>
        [Input("patchingMode")]
        public Input<string>? PatchingMode { get; set; }

        /// <summary>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the maintenance run for the Autonomous Data Guard association's peer container database.
        /// </summary>
        [Input("peerMaintenanceRunId")]
        public Input<string>? PeerMaintenanceRunId { get; set; }

        /// <summary>
        /// The current state of the maintenance run. For Autonomous Database on shared Exadata infrastructure, valid states are IN_PROGRESS, SUCCEEDED and FAILED.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        /// <summary>
        /// The ID of the target resource on which the maintenance run occurs.
        /// </summary>
        [Input("targetResourceId")]
        public Input<string>? TargetResourceId { get; set; }

        /// <summary>
        /// The type of the target resource on which the maintenance run occurs.
        /// </summary>
        [Input("targetResourceType")]
        public Input<string>? TargetResourceType { get; set; }

        /// <summary>
        /// The date and time the maintenance run was completed.
        /// </summary>
        [Input("timeEnded")]
        public Input<string>? TimeEnded { get; set; }

        /// <summary>
        /// (Updatable) The scheduled date and time of the maintenance run to update.
        /// </summary>
        [Input("timeScheduled")]
        public Input<string>? TimeScheduled { get; set; }

        /// <summary>
        /// The date and time the maintenance run starts.
        /// </summary>
        [Input("timeStarted")]
        public Input<string>? TimeStarted { get; set; }

        public MaintenanceRunState()
        {
        }
    }
}
