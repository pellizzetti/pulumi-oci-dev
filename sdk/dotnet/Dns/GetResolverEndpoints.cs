// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.Dns
{
    public static class GetResolverEndpoints
    {
        /// <summary>
        /// This data source provides the list of Resolver Endpoints in Oracle Cloud Infrastructure DNS service.
        /// 
        /// Gets a list of all endpoints within a resolver. The collection can be filtered by name or lifecycle state.
        /// It can be sorted on creation time or name both in ASC or DESC order. Note that when no lifecycleState
        /// query parameter is provided, the collection does not include resolver endpoints in the DELETED
        /// lifecycle state to be consistent with other operations of the API. Requires a `PRIVATE` scope query parameter.
        /// 
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var testResolverEndpoints = Output.Create(Oci.Dns.GetResolverEndpoints.InvokeAsync(new Oci.Dns.GetResolverEndpointsArgs
        ///         {
        ///             ResolverId = oci_dns_resolver.Test_resolver.Id,
        ///             Scope = "PRIVATE",
        ///             Name = @var.Resolver_endpoint_name,
        ///             State = @var.Resolver_endpoint_state,
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetResolverEndpointsResult> InvokeAsync(GetResolverEndpointsArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetResolverEndpointsResult>("oci:dns/getResolverEndpoints:getResolverEndpoints", args ?? new GetResolverEndpointsArgs(), options.WithVersion());
    }


    public sealed class GetResolverEndpointsArgs : Pulumi.InvokeArgs
    {
        [Input("filters")]
        private List<Inputs.GetResolverEndpointsFilterArgs>? _filters;
        public List<Inputs.GetResolverEndpointsFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetResolverEndpointsFilterArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// The name of a resource.
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        /// <summary>
        /// The OCID of the target resolver.
        /// </summary>
        [Input("resolverId", required: true)]
        public string ResolverId { get; set; } = null!;

        /// <summary>
        /// Value must be `PRIVATE` when listing private name resolver endpoints.
        /// </summary>
        [Input("scope", required: true)]
        public string Scope { get; set; } = null!;

        /// <summary>
        /// The state of a resource.
        /// </summary>
        [Input("state")]
        public string? State { get; set; }

        public GetResolverEndpointsArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetResolverEndpointsResult
    {
        public readonly ImmutableArray<Outputs.GetResolverEndpointsFilterResult> Filters;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The name of the resolver endpoint. Must be unique, case-insensitive, within the resolver.
        /// </summary>
        public readonly string? Name;
        /// <summary>
        /// The list of resolver_endpoints.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetResolverEndpointsResolverEndpointResult> ResolverEndpoints;
        public readonly string ResolverId;
        public readonly string Scope;
        /// <summary>
        /// The current state of the resource.
        /// </summary>
        public readonly string? State;

        [OutputConstructor]
        private GetResolverEndpointsResult(
            ImmutableArray<Outputs.GetResolverEndpointsFilterResult> filters,

            string id,

            string? name,

            ImmutableArray<Outputs.GetResolverEndpointsResolverEndpointResult> resolverEndpoints,

            string resolverId,

            string scope,

            string? state)
        {
            Filters = filters;
            Id = id;
            Name = name;
            ResolverEndpoints = resolverEndpoints;
            ResolverId = resolverId;
            Scope = scope;
            State = state;
        }
    }
}
