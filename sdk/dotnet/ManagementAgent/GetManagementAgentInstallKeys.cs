// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.ManagementAgent
{
    public static class GetManagementAgentInstallKeys
    {
        /// <summary>
        /// This data source provides the list of Management Agent Install Keys in Oracle Cloud Infrastructure Management Agent service.
        /// 
        /// Returns a list of Management Agent installed Keys.
        /// 
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var testManagementAgentInstallKeys = Output.Create(Oci.ManagementAgent.GetManagementAgentInstallKeys.InvokeAsync(new Oci.ManagementAgent.GetManagementAgentInstallKeysArgs
        ///         {
        ///             CompartmentId = @var.Compartment_id,
        ///             AccessLevel = @var.Management_agent_install_key_access_level,
        ///             CompartmentIdInSubtree = @var.Management_agent_install_key_compartment_id_in_subtree,
        ///             DisplayName = @var.Management_agent_install_key_display_name,
        ///             State = @var.Management_agent_install_key_state,
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetManagementAgentInstallKeysResult> InvokeAsync(GetManagementAgentInstallKeysArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetManagementAgentInstallKeysResult>("oci:managementagent/getManagementAgentInstallKeys:getManagementAgentInstallKeys", args ?? new GetManagementAgentInstallKeysArgs(), options.WithVersion());
    }


    public sealed class GetManagementAgentInstallKeysArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// Value of this is always "ACCESSIBLE" and any other value is not supported.
        /// </summary>
        [Input("accessLevel")]
        public string? AccessLevel { get; set; }

        /// <summary>
        /// The ID of the compartment from which the Management Agents to be listed.
        /// </summary>
        [Input("compartmentId", required: true)]
        public string CompartmentId { get; set; } = null!;

        /// <summary>
        /// if set to true then it fetches install key for all compartments where user has access to else only on the compartment specified.
        /// </summary>
        [Input("compartmentIdInSubtree")]
        public bool? CompartmentIdInSubtree { get; set; }

        /// <summary>
        /// The display name for which the Key needs to be listed.
        /// </summary>
        [Input("displayName")]
        public string? DisplayName { get; set; }

        [Input("filters")]
        private List<Inputs.GetManagementAgentInstallKeysFilterArgs>? _filters;
        public List<Inputs.GetManagementAgentInstallKeysFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetManagementAgentInstallKeysFilterArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// Filter to return only Management Agents in the particular lifecycle state.
        /// </summary>
        [Input("state")]
        public string? State { get; set; }

        public GetManagementAgentInstallKeysArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetManagementAgentInstallKeysResult
    {
        public readonly string? AccessLevel;
        /// <summary>
        /// Compartment Identifier
        /// </summary>
        public readonly string CompartmentId;
        public readonly bool? CompartmentIdInSubtree;
        /// <summary>
        /// Management Agent Install Key Name
        /// </summary>
        public readonly string? DisplayName;
        public readonly ImmutableArray<Outputs.GetManagementAgentInstallKeysFilterResult> Filters;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The list of management_agent_install_keys.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetManagementAgentInstallKeysManagementAgentInstallKeyResult> ManagementAgentInstallKeys;
        /// <summary>
        /// Status of Key
        /// </summary>
        public readonly string? State;

        [OutputConstructor]
        private GetManagementAgentInstallKeysResult(
            string? accessLevel,

            string compartmentId,

            bool? compartmentIdInSubtree,

            string? displayName,

            ImmutableArray<Outputs.GetManagementAgentInstallKeysFilterResult> filters,

            string id,

            ImmutableArray<Outputs.GetManagementAgentInstallKeysManagementAgentInstallKeyResult> managementAgentInstallKeys,

            string? state)
        {
            AccessLevel = accessLevel;
            CompartmentId = compartmentId;
            CompartmentIdInSubtree = compartmentIdInSubtree;
            DisplayName = displayName;
            Filters = filters;
            Id = id;
            ManagementAgentInstallKeys = managementAgentInstallKeys;
            State = state;
        }
    }
}
