// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.Marketplace
{
    public static class GetListings
    {
        /// <summary>
        /// This data source provides the list of Listings in Oracle Cloud Infrastructure Marketplace service.
        /// 
        /// Gets a list of listings from Oracle Cloud Infrastructure Marketplace by searching keywords and
        /// filtering according to listing attributes.
        /// 
        /// If you plan to launch an instance from an image listing, you must first subscribe to the listing. When
        /// you launch the instance, you also need to provide the image ID of the listing resource version that you want.
        /// 
        /// Subscribing to the listing requires you to first get a signature from the terms of use agreement for the
        /// listing resource version. To get the signature, issue a [GetAppCatalogListingAgreements](https://docs.cloud.oracle.com/en-us/iaas/api/#/en/iaas/latest/AppCatalogListingResourceVersionAgreements/GetAppCatalogListingAgreements) API call.
        /// The [AppCatalogListingResourceVersionAgreements](https://docs.cloud.oracle.com/en-us/iaas/api/#/en/iaas/latest/AppCatalogListingResourceVersionAgreements) object, including
        /// its signature, is returned in the response. With the signature for the terms of use agreement for the desired
        /// listing resource version, create a subscription by issuing a
        /// [CreateAppCatalogSubscription](https://docs.cloud.oracle.com/en-us/iaas/api/#/en/iaas/latest/AppCatalogSubscription/CreateAppCatalogSubscription) API call.
        /// 
        /// To get the image ID to launch an instance, issue a [GetAppCatalogListingResourceVersion](https://docs.cloud.oracle.com/en-us/iaas/api/#/en/iaas/latest/AppCatalogListingResourceVersion/GetAppCatalogListingResourceVersion) API call.
        /// Lastly, to launch the instance, use the image ID of the listing resource version to issue a [LaunchInstance](https://docs.cloud.oracle.com/en-us/iaas/api/#/en/iaas/latest/Instance/LaunchInstance) API call.
        /// 
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var testListings = Output.Create(Oci.Marketplace.GetListings.InvokeAsync(new Oci.Marketplace.GetListingsArgs
        ///         {
        ///             Categories = @var.Listing_category,
        ///             CompartmentId = @var.Compartment_id,
        ///             IsFeatured = @var.Listing_is_featured,
        ///             ListingId = oci_marketplace_listing.Test_listing.Id,
        ///             ListingTypes = @var.Listing_listing_types,
        ///             Names = @var.Listing_name,
        ///             OperatingSystems = @var.Listing_operating_systems,
        ///             PackageType = @var.Listing_package_type,
        ///             Pricings = @var.Listing_pricing,
        ///             PublisherId = oci_marketplace_publisher.Test_publisher.Id,
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetListingsResult> InvokeAsync(GetListingsArgs? args = null, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetListingsResult>("oci:marketplace/getListings:getListings", args ?? new GetListingsArgs(), options.WithVersion());
    }


    public sealed class GetListingsArgs : Pulumi.InvokeArgs
    {
        [Input("categories")]
        private List<string>? _categories;

        /// <summary>
        /// Name of the product category or categories. If you specify multiple categories, then Marketplace returns any listing with one or more matching categories.
        /// </summary>
        public List<string> Categories
        {
            get => _categories ?? (_categories = new List<string>());
            set => _categories = value;
        }

        /// <summary>
        /// The unique identifier for the compartment.
        /// </summary>
        [Input("compartmentId")]
        public string? CompartmentId { get; set; }

        [Input("filters")]
        private List<Inputs.GetListingsFilterArgs>? _filters;
        public List<Inputs.GetListingsFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetListingsFilterArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// Indicates whether to show only featured listings. If this is set to `false` or is omitted, then all listings will be returned.
        /// </summary>
        [Input("isFeatured")]
        public bool? IsFeatured { get; set; }

        /// <summary>
        /// The unique identifier for the listing.
        /// </summary>
        [Input("listingId")]
        public string? ListingId { get; set; }

        [Input("listingTypes")]
        private List<string>? _listingTypes;

        /// <summary>
        /// The type of the listing
        /// </summary>
        public List<string> ListingTypes
        {
            get => _listingTypes ?? (_listingTypes = new List<string>());
            set => _listingTypes = value;
        }

        [Input("names")]
        private List<string>? _names;

        /// <summary>
        /// The name of the listing.
        /// </summary>
        public List<string> Names
        {
            get => _names ?? (_names = new List<string>());
            set => _names = value;
        }

        [Input("operatingSystems")]
        private List<string>? _operatingSystems;

        /// <summary>
        /// OS of the listing.
        /// </summary>
        public List<string> OperatingSystems
        {
            get => _operatingSystems ?? (_operatingSystems = new List<string>());
            set => _operatingSystems = value;
        }

        /// <summary>
        /// A filter to return only packages that match the given package type exactly.
        /// </summary>
        [Input("packageType")]
        public string? PackageType { get; set; }

        [Input("pricings")]
        private List<string>? _pricings;

        /// <summary>
        /// Name of the pricing type. If multiple pricing types are provided, then any listing with one or more matching pricing models will be returned.
        /// </summary>
        public List<string> Pricings
        {
            get => _pricings ?? (_pricings = new List<string>());
            set => _pricings = value;
        }

        /// <summary>
        /// Limit results to just this publisher.
        /// </summary>
        [Input("publisherId")]
        public string? PublisherId { get; set; }

        public GetListingsArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetListingsResult
    {
        public readonly ImmutableArray<string> Categories;
        public readonly string? CompartmentId;
        public readonly ImmutableArray<Outputs.GetListingsFilterResult> Filters;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Indicates whether the listing is included in Featured Listings.
        /// </summary>
        public readonly bool? IsFeatured;
        public readonly string? ListingId;
        public readonly ImmutableArray<string> ListingTypes;
        /// <summary>
        /// The list of listings.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetListingsListingResult> Listings;
        /// <summary>
        /// Text that describes the resource.
        /// </summary>
        public readonly ImmutableArray<string> Names;
        public readonly ImmutableArray<string> OperatingSystems;
        /// <summary>
        /// The listing's package type.
        /// </summary>
        public readonly string? PackageType;
        public readonly ImmutableArray<string> Pricings;
        public readonly string? PublisherId;

        [OutputConstructor]
        private GetListingsResult(
            ImmutableArray<string> categories,

            string? compartmentId,

            ImmutableArray<Outputs.GetListingsFilterResult> filters,

            string id,

            bool? isFeatured,

            string? listingId,

            ImmutableArray<string> listingTypes,

            ImmutableArray<Outputs.GetListingsListingResult> listings,

            ImmutableArray<string> names,

            ImmutableArray<string> operatingSystems,

            string? packageType,

            ImmutableArray<string> pricings,

            string? publisherId)
        {
            Categories = categories;
            CompartmentId = compartmentId;
            Filters = filters;
            Id = id;
            IsFeatured = isFeatured;
            ListingId = listingId;
            ListingTypes = listingTypes;
            Listings = listings;
            Names = names;
            OperatingSystems = operatingSystems;
            PackageType = packageType;
            Pricings = pricings;
            PublisherId = publisherId;
        }
    }
}
