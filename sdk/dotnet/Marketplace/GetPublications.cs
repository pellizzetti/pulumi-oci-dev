// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.Marketplace
{
    public static class GetPublications
    {
        /// <summary>
        /// This data source provides the list of Publications in Oracle Cloud Infrastructure Marketplace service.
        /// 
        /// Lists the publications in the given compartment
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var testPublications = Output.Create(Oci.Marketplace.GetPublications.InvokeAsync(new Oci.Marketplace.GetPublicationsArgs
        ///         {
        ///             CompartmentId = @var.Compartment_id,
        ///             ListingType = @var.Publication_listing_type,
        ///             Names = @var.Publication_name,
        ///             OperatingSystems = @var.Publication_operating_systems,
        ///             PublicationId = oci_marketplace_publication.Test_publication.Id,
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetPublicationsResult> InvokeAsync(GetPublicationsArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetPublicationsResult>("oci:marketplace/getPublications:getPublications", args ?? new GetPublicationsArgs(), options.WithVersion());
    }


    public sealed class GetPublicationsArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The unique identifier for the compartment.
        /// </summary>
        [Input("compartmentId", required: true)]
        public string CompartmentId { get; set; } = null!;

        [Input("filters")]
        private List<Inputs.GetPublicationsFilterArgs>? _filters;
        public List<Inputs.GetPublicationsFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetPublicationsFilterArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// The type of the listing
        /// </summary>
        [Input("listingType", required: true)]
        public string ListingType { get; set; } = null!;

        [Input("names")]
        private List<string>? _names;

        /// <summary>
        /// The name of the listing.
        /// </summary>
        public List<string> Names
        {
            get => _names ?? (_names = new List<string>());
            set => _names = value;
        }

        [Input("operatingSystems")]
        private List<string>? _operatingSystems;

        /// <summary>
        /// OS of the listing.
        /// </summary>
        public List<string> OperatingSystems
        {
            get => _operatingSystems ?? (_operatingSystems = new List<string>());
            set => _operatingSystems = value;
        }

        /// <summary>
        /// The unique identifier for the listing.
        /// </summary>
        [Input("publicationId")]
        public string? PublicationId { get; set; }

        public GetPublicationsArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetPublicationsResult
    {
        /// <summary>
        /// The Compartment id where the listings exists
        /// </summary>
        public readonly string CompartmentId;
        public readonly ImmutableArray<Outputs.GetPublicationsFilterResult> Filters;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// In which catalog the listing should exist.
        /// </summary>
        public readonly string ListingType;
        /// <summary>
        /// name of the operating system
        /// </summary>
        public readonly ImmutableArray<string> Names;
        public readonly ImmutableArray<string> OperatingSystems;
        public readonly string? PublicationId;
        /// <summary>
        /// The list of publications.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetPublicationsPublicationResult> Publications;

        [OutputConstructor]
        private GetPublicationsResult(
            string compartmentId,

            ImmutableArray<Outputs.GetPublicationsFilterResult> filters,

            string id,

            string listingType,

            ImmutableArray<string> names,

            ImmutableArray<string> operatingSystems,

            string? publicationId,

            ImmutableArray<Outputs.GetPublicationsPublicationResult> publications)
        {
            CompartmentId = compartmentId;
            Filters = filters;
            Id = id;
            ListingType = listingType;
            Names = names;
            OperatingSystems = operatingSystems;
            PublicationId = publicationId;
            Publications = publications;
        }
    }
}
