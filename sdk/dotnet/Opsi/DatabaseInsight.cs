// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.Opsi
{
    /// <summary>
    /// ## Import
    /// 
    /// DatabaseInsights can be imported using the `id`, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import oci:opsi/databaseInsight:DatabaseInsight test_database_insight "id"
    /// ```
    /// </summary>
    [OciResourceType("oci:opsi/databaseInsight:DatabaseInsight")]
    public partial class DatabaseInsight : Pulumi.CustomResource
    {
        /// <summary>
        /// (Updatable) Compartment Identifier of database
        /// </summary>
        [Output("compartmentId")]
        public Output<string> CompartmentId { get; private set; } = null!;

        /// <summary>
        /// Display name of database
        /// </summary>
        [Output("databaseDisplayName")]
        public Output<string> DatabaseDisplayName { get; private set; } = null!;

        /// <summary>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the database.
        /// </summary>
        [Output("databaseId")]
        public Output<string> DatabaseId { get; private set; } = null!;

        /// <summary>
        /// Name of database
        /// </summary>
        [Output("databaseName")]
        public Output<string> DatabaseName { get; private set; } = null!;

        /// <summary>
        /// Operations Insights internal representation of the database type.
        /// </summary>
        [Output("databaseType")]
        public Output<string> DatabaseType { get; private set; } = null!;

        /// <summary>
        /// The version of the database.
        /// </summary>
        [Output("databaseVersion")]
        public Output<string> DatabaseVersion { get; private set; } = null!;

        /// <summary>
        /// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        /// </summary>
        [Output("definedTags")]
        public Output<ImmutableDictionary<string, object>> DefinedTags { get; private set; } = null!;

        /// <summary>
        /// OPSI Enterprise Manager Bridge OCID
        /// </summary>
        [Output("enterpriseManagerBridgeId")]
        public Output<string> EnterpriseManagerBridgeId { get; private set; } = null!;

        /// <summary>
        /// Enterprise Manager Entity Display Name
        /// </summary>
        [Output("enterpriseManagerEntityDisplayName")]
        public Output<string> EnterpriseManagerEntityDisplayName { get; private set; } = null!;

        /// <summary>
        /// Enterprise Manager Entity Unique Identifier
        /// </summary>
        [Output("enterpriseManagerEntityIdentifier")]
        public Output<string> EnterpriseManagerEntityIdentifier { get; private set; } = null!;

        /// <summary>
        /// Enterprise Manager Entity Name
        /// </summary>
        [Output("enterpriseManagerEntityName")]
        public Output<string> EnterpriseManagerEntityName { get; private set; } = null!;

        /// <summary>
        /// Enterprise Manager Entity Type
        /// </summary>
        [Output("enterpriseManagerEntityType")]
        public Output<string> EnterpriseManagerEntityType { get; private set; } = null!;

        /// <summary>
        /// Enterprise Manager Unqiue Identifier
        /// </summary>
        [Output("enterpriseManagerIdentifier")]
        public Output<string> EnterpriseManagerIdentifier { get; private set; } = null!;

        /// <summary>
        /// (Updatable) Source of the database entity. The supported type is "EM_MANAGED_EXTERNAL_DATABASE"
        /// </summary>
        [Output("entitySource")]
        public Output<string> EntitySource { get; private set; } = null!;

        /// <summary>
        /// (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        /// </summary>
        [Output("freeformTags")]
        public Output<ImmutableDictionary<string, object>> FreeformTags { get; private set; } = null!;

        /// <summary>
        /// A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
        /// </summary>
        [Output("lifecycleDetails")]
        public Output<string> LifecycleDetails { get; private set; } = null!;

        /// <summary>
        /// Processor count.
        /// </summary>
        [Output("processorCount")]
        public Output<int> ProcessorCount { get; private set; } = null!;

        /// <summary>
        /// The current state of the database.
        /// </summary>
        [Output("state")]
        public Output<string> State { get; private set; } = null!;

        /// <summary>
        /// (Updatable) Status of the resource. Example: "ENABLED", "DISABLED". Resource can be either enabled or disabled by updating the value of status field to either "ENABLED" or "DISABLED"
        /// </summary>
        [Output("status")]
        public Output<string> Status { get; private set; } = null!;

        /// <summary>
        /// System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        /// </summary>
        [Output("systemTags")]
        public Output<ImmutableDictionary<string, object>> SystemTags { get; private set; } = null!;

        /// <summary>
        /// The time the the database insight was first enabled. An RFC3339 formatted datetime string
        /// </summary>
        [Output("timeCreated")]
        public Output<string> TimeCreated { get; private set; } = null!;

        /// <summary>
        /// The time the database insight was updated. An RFC3339 formatted datetime string
        /// </summary>
        [Output("timeUpdated")]
        public Output<string> TimeUpdated { get; private set; } = null!;


        /// <summary>
        /// Create a DatabaseInsight resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public DatabaseInsight(string name, DatabaseInsightArgs args, CustomResourceOptions? options = null)
            : base("oci:opsi/databaseInsight:DatabaseInsight", name, args ?? new DatabaseInsightArgs(), MakeResourceOptions(options, ""))
        {
        }

        private DatabaseInsight(string name, Input<string> id, DatabaseInsightState? state = null, CustomResourceOptions? options = null)
            : base("oci:opsi/databaseInsight:DatabaseInsight", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing DatabaseInsight resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static DatabaseInsight Get(string name, Input<string> id, DatabaseInsightState? state = null, CustomResourceOptions? options = null)
        {
            return new DatabaseInsight(name, id, state, options);
        }
    }

    public sealed class DatabaseInsightArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// (Updatable) Compartment Identifier of database
        /// </summary>
        [Input("compartmentId", required: true)]
        public Input<string> CompartmentId { get; set; } = null!;

        [Input("definedTags")]
        private InputMap<object>? _definedTags;

        /// <summary>
        /// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        /// </summary>
        public InputMap<object> DefinedTags
        {
            get => _definedTags ?? (_definedTags = new InputMap<object>());
            set => _definedTags = value;
        }

        /// <summary>
        /// OPSI Enterprise Manager Bridge OCID
        /// </summary>
        [Input("enterpriseManagerBridgeId", required: true)]
        public Input<string> EnterpriseManagerBridgeId { get; set; } = null!;

        /// <summary>
        /// Enterprise Manager Entity Unique Identifier
        /// </summary>
        [Input("enterpriseManagerEntityIdentifier", required: true)]
        public Input<string> EnterpriseManagerEntityIdentifier { get; set; } = null!;

        /// <summary>
        /// Enterprise Manager Unqiue Identifier
        /// </summary>
        [Input("enterpriseManagerIdentifier", required: true)]
        public Input<string> EnterpriseManagerIdentifier { get; set; } = null!;

        /// <summary>
        /// (Updatable) Source of the database entity. The supported type is "EM_MANAGED_EXTERNAL_DATABASE"
        /// </summary>
        [Input("entitySource", required: true)]
        public Input<string> EntitySource { get; set; } = null!;

        [Input("freeformTags")]
        private InputMap<object>? _freeformTags;

        /// <summary>
        /// (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        /// </summary>
        public InputMap<object> FreeformTags
        {
            get => _freeformTags ?? (_freeformTags = new InputMap<object>());
            set => _freeformTags = value;
        }

        /// <summary>
        /// (Updatable) Status of the resource. Example: "ENABLED", "DISABLED". Resource can be either enabled or disabled by updating the value of status field to either "ENABLED" or "DISABLED"
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        public DatabaseInsightArgs()
        {
        }
    }

    public sealed class DatabaseInsightState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// (Updatable) Compartment Identifier of database
        /// </summary>
        [Input("compartmentId")]
        public Input<string>? CompartmentId { get; set; }

        /// <summary>
        /// Display name of database
        /// </summary>
        [Input("databaseDisplayName")]
        public Input<string>? DatabaseDisplayName { get; set; }

        /// <summary>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the database.
        /// </summary>
        [Input("databaseId")]
        public Input<string>? DatabaseId { get; set; }

        /// <summary>
        /// Name of database
        /// </summary>
        [Input("databaseName")]
        public Input<string>? DatabaseName { get; set; }

        /// <summary>
        /// Operations Insights internal representation of the database type.
        /// </summary>
        [Input("databaseType")]
        public Input<string>? DatabaseType { get; set; }

        /// <summary>
        /// The version of the database.
        /// </summary>
        [Input("databaseVersion")]
        public Input<string>? DatabaseVersion { get; set; }

        [Input("definedTags")]
        private InputMap<object>? _definedTags;

        /// <summary>
        /// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        /// </summary>
        public InputMap<object> DefinedTags
        {
            get => _definedTags ?? (_definedTags = new InputMap<object>());
            set => _definedTags = value;
        }

        /// <summary>
        /// OPSI Enterprise Manager Bridge OCID
        /// </summary>
        [Input("enterpriseManagerBridgeId")]
        public Input<string>? EnterpriseManagerBridgeId { get; set; }

        /// <summary>
        /// Enterprise Manager Entity Display Name
        /// </summary>
        [Input("enterpriseManagerEntityDisplayName")]
        public Input<string>? EnterpriseManagerEntityDisplayName { get; set; }

        /// <summary>
        /// Enterprise Manager Entity Unique Identifier
        /// </summary>
        [Input("enterpriseManagerEntityIdentifier")]
        public Input<string>? EnterpriseManagerEntityIdentifier { get; set; }

        /// <summary>
        /// Enterprise Manager Entity Name
        /// </summary>
        [Input("enterpriseManagerEntityName")]
        public Input<string>? EnterpriseManagerEntityName { get; set; }

        /// <summary>
        /// Enterprise Manager Entity Type
        /// </summary>
        [Input("enterpriseManagerEntityType")]
        public Input<string>? EnterpriseManagerEntityType { get; set; }

        /// <summary>
        /// Enterprise Manager Unqiue Identifier
        /// </summary>
        [Input("enterpriseManagerIdentifier")]
        public Input<string>? EnterpriseManagerIdentifier { get; set; }

        /// <summary>
        /// (Updatable) Source of the database entity. The supported type is "EM_MANAGED_EXTERNAL_DATABASE"
        /// </summary>
        [Input("entitySource")]
        public Input<string>? EntitySource { get; set; }

        [Input("freeformTags")]
        private InputMap<object>? _freeformTags;

        /// <summary>
        /// (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        /// </summary>
        public InputMap<object> FreeformTags
        {
            get => _freeformTags ?? (_freeformTags = new InputMap<object>());
            set => _freeformTags = value;
        }

        /// <summary>
        /// A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
        /// </summary>
        [Input("lifecycleDetails")]
        public Input<string>? LifecycleDetails { get; set; }

        /// <summary>
        /// Processor count.
        /// </summary>
        [Input("processorCount")]
        public Input<int>? ProcessorCount { get; set; }

        /// <summary>
        /// The current state of the database.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        /// <summary>
        /// (Updatable) Status of the resource. Example: "ENABLED", "DISABLED". Resource can be either enabled or disabled by updating the value of status field to either "ENABLED" or "DISABLED"
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        [Input("systemTags")]
        private InputMap<object>? _systemTags;

        /// <summary>
        /// System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        /// </summary>
        public InputMap<object> SystemTags
        {
            get => _systemTags ?? (_systemTags = new InputMap<object>());
            set => _systemTags = value;
        }

        /// <summary>
        /// The time the the database insight was first enabled. An RFC3339 formatted datetime string
        /// </summary>
        [Input("timeCreated")]
        public Input<string>? TimeCreated { get; set; }

        /// <summary>
        /// The time the database insight was updated. An RFC3339 formatted datetime string
        /// </summary>
        [Input("timeUpdated")]
        public Input<string>? TimeUpdated { get; set; }

        public DatabaseInsightState()
        {
        }
    }
}
