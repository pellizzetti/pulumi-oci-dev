// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.Optimizer
{
    public static class GetCategory
    {
        /// <summary>
        /// This data source provides details about a specific Category resource in Oracle Cloud Infrastructure Optimizer service.
        /// 
        /// Gets the category that corresponds to the specified OCID.
        /// 
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var testCategory = Output.Create(Oci.Optimizer.GetCategory.InvokeAsync(new Oci.Optimizer.GetCategoryArgs
        ///         {
        ///             CategoryId = oci_optimizer_category.Test_category.Id,
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetCategoryResult> InvokeAsync(GetCategoryArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetCategoryResult>("oci:optimizer/getCategory:getCategory", args ?? new GetCategoryArgs(), options.WithVersion());
    }


    public sealed class GetCategoryArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The unique OCID associated with the category.
        /// </summary>
        [Input("categoryId", required: true)]
        public string CategoryId { get; set; } = null!;

        public GetCategoryArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetCategoryResult
    {
        public readonly string CategoryId;
        /// <summary>
        /// The OCID of the tenancy. The tenancy is the root compartment.
        /// </summary>
        public readonly string CompartmentId;
        /// <summary>
        /// Text describing the category. Avoid entering confidential information.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// The estimated cost savings, in dollars, for the category.
        /// </summary>
        public readonly double EstimatedCostSaving;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The name assigned to the category. Avoid entering confidential information.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// An array of `RecommendationCount` objects grouped by the level of importance assigned to the recommendation.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetCategoryRecommendationCountResult> RecommendationCounts;
        /// <summary>
        /// An array of `ResourceCount` objects grouped by the status of the recommendation.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetCategoryResourceCountResult> ResourceCounts;
        /// <summary>
        /// The category's current state.
        /// </summary>
        public readonly string State;
        /// <summary>
        /// The date and time the category details were created, in the format defined by RFC3339.
        /// </summary>
        public readonly string TimeCreated;
        /// <summary>
        /// The date and time the category details were last updated, in the format defined by RFC3339.
        /// </summary>
        public readonly string TimeUpdated;

        [OutputConstructor]
        private GetCategoryResult(
            string categoryId,

            string compartmentId,

            string description,

            double estimatedCostSaving,

            string id,

            string name,

            ImmutableArray<Outputs.GetCategoryRecommendationCountResult> recommendationCounts,

            ImmutableArray<Outputs.GetCategoryResourceCountResult> resourceCounts,

            string state,

            string timeCreated,

            string timeUpdated)
        {
            CategoryId = categoryId;
            CompartmentId = compartmentId;
            Description = description;
            EstimatedCostSaving = estimatedCostSaving;
            Id = id;
            Name = name;
            RecommendationCounts = recommendationCounts;
            ResourceCounts = resourceCounts;
            State = state;
            TimeCreated = timeCreated;
            TimeUpdated = timeUpdated;
        }
    }
}
