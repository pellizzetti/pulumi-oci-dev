// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package artifacts

import (
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This data source provides the list of Container Repositories in Oracle Cloud Infrastructure Artifacts service.
//
// List container repositories in a compartment.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-oci/sdk/go/oci/artifacts"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		opt0 := _var.Container_repository_compartment_id_in_subtree
// 		opt1 := _var.Container_repository_display_name
// 		opt2 := _var.Container_repository_is_public
// 		opt3 := oci_artifacts_repository.Test_repository.Id
// 		opt4 := _var.Container_repository_state
// 		_, err := artifacts.GetContainerRepositories(ctx, &artifacts.GetContainerRepositoriesArgs{
// 			CompartmentId:          _var.Compartment_id,
// 			CompartmentIdInSubtree: &opt0,
// 			DisplayName:            &opt1,
// 			IsPublic:               &opt2,
// 			RepositoryId:           &opt3,
// 			State:                  &opt4,
// 		}, nil)
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
func GetContainerRepositories(ctx *pulumi.Context, args *GetContainerRepositoriesArgs, opts ...pulumi.InvokeOption) (*GetContainerRepositoriesResult, error) {
	var rv GetContainerRepositoriesResult
	err := ctx.Invoke("oci:artifacts/getContainerRepositories:getContainerRepositories", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getContainerRepositories.
type GetContainerRepositoriesArgs struct {
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
	CompartmentId string `pulumi:"compartmentId"`
	// When set to true, the hierarchy of compartments is traversed and all compartments and subcompartments in the tenancy are inspected depending on the the setting of `accessLevel`. Default is false. Can only be set to true when calling the API on the tenancy (root compartment).
	CompartmentIdInSubtree *bool `pulumi:"compartmentIdInSubtree"`
	// A filter to return only resources that match the given display name exactly.
	DisplayName *string                          `pulumi:"displayName"`
	Filters     []GetContainerRepositoriesFilter `pulumi:"filters"`
	// A filter to return resources that match the isPublic value.
	IsPublic *bool `pulumi:"isPublic"`
	// A filter to return container images only for the specified container repository OCID.
	RepositoryId *string `pulumi:"repositoryId"`
	// A filter to return only resources that match the given lifecycle state name exactly.
	State *string `pulumi:"state"`
}

// A collection of values returned by getContainerRepositories.
type GetContainerRepositoriesResult struct {
	// The OCID of the compartment in which the container repository exists.
	CompartmentId          string `pulumi:"compartmentId"`
	CompartmentIdInSubtree *bool  `pulumi:"compartmentIdInSubtree"`
	// The list of container_repository_collection.
	ContainerRepositoryCollections []GetContainerRepositoriesContainerRepositoryCollection `pulumi:"containerRepositoryCollections"`
	// The container repository name.
	DisplayName *string                          `pulumi:"displayName"`
	Filters     []GetContainerRepositoriesFilter `pulumi:"filters"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Whether the repository is public. A public repository allows unauthenticated access.
	IsPublic     *bool   `pulumi:"isPublic"`
	RepositoryId *string `pulumi:"repositoryId"`
	// The current state of the container repository.
	State *string `pulumi:"state"`
}
