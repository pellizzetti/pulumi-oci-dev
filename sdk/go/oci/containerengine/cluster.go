// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package containerengine

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource provides the Cluster resource in Oracle Cloud Infrastructure Container Engine service.
//
// Create a new cluster.
//
// ## Import
//
// Clusters can be imported using the `id`, e.g.
//
// ```sh
//  $ pulumi import oci:containerengine/cluster:Cluster test_cluster "id"
// ```
type Cluster struct {
	pulumi.CustomResourceState

	// Available Kubernetes versions to which the clusters masters may be upgraded.
	AvailableKubernetesUpgrades pulumi.StringArrayOutput `pulumi:"availableKubernetesUpgrades"`
	// The OCID of the compartment in which to create the cluster.
	CompartmentId pulumi.StringOutput `pulumi:"compartmentId"`
	// The network configuration for access to the Cluster control plane.
	EndpointConfig ClusterEndpointConfigPtrOutput `pulumi:"endpointConfig"`
	// Endpoints served up by the cluster masters.
	Endpoints ClusterEndpointsOutput `pulumi:"endpoints"`
	// (Updatable) The image verification policy for signature validation. Once a policy is created and enabled with one or more kms keys, the policy will ensure all images deployed has been signed with the key(s) attached to the policy.
	ImagePolicyConfig ClusterImagePolicyConfigOutput `pulumi:"imagePolicyConfig"`
	// The OCID of the KMS key to be used as the master encryption key for Kubernetes secret encryption. When used, `kubernetesVersion` must be at least `v1.13.0`.
	KmsKeyId pulumi.StringOutput `pulumi:"kmsKeyId"`
	// (Updatable) The version of Kubernetes to install into the cluster masters.
	KubernetesVersion pulumi.StringOutput `pulumi:"kubernetesVersion"`
	// Details about the state of the cluster masters.
	LifecycleDetails pulumi.StringOutput `pulumi:"lifecycleDetails"`
	// Metadata about the cluster.
	Metadata ClusterMetadataOutput `pulumi:"metadata"`
	// (Updatable) The name of the cluster. Avoid entering confidential information.
	Name pulumi.StringOutput `pulumi:"name"`
	// (Updatable) Optional attributes for the cluster.
	Options ClusterOptionsOutput `pulumi:"options"`
	// The state of the cluster masters.
	State pulumi.StringOutput `pulumi:"state"`
	// The OCID of the virtual cloud network (VCN) in which to create the cluster.
	VcnId pulumi.StringOutput `pulumi:"vcnId"`
}

// NewCluster registers a new resource with the given unique name, arguments, and options.
func NewCluster(ctx *pulumi.Context,
	name string, args *ClusterArgs, opts ...pulumi.ResourceOption) (*Cluster, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CompartmentId == nil {
		return nil, errors.New("invalid value for required argument 'CompartmentId'")
	}
	if args.KubernetesVersion == nil {
		return nil, errors.New("invalid value for required argument 'KubernetesVersion'")
	}
	if args.VcnId == nil {
		return nil, errors.New("invalid value for required argument 'VcnId'")
	}
	var resource Cluster
	err := ctx.RegisterResource("oci:containerengine/cluster:Cluster", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCluster gets an existing Cluster resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCluster(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ClusterState, opts ...pulumi.ResourceOption) (*Cluster, error) {
	var resource Cluster
	err := ctx.ReadResource("oci:containerengine/cluster:Cluster", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Cluster resources.
type clusterState struct {
	// Available Kubernetes versions to which the clusters masters may be upgraded.
	AvailableKubernetesUpgrades []string `pulumi:"availableKubernetesUpgrades"`
	// The OCID of the compartment in which to create the cluster.
	CompartmentId *string `pulumi:"compartmentId"`
	// The network configuration for access to the Cluster control plane.
	EndpointConfig *ClusterEndpointConfig `pulumi:"endpointConfig"`
	// Endpoints served up by the cluster masters.
	Endpoints *ClusterEndpoints `pulumi:"endpoints"`
	// (Updatable) The image verification policy for signature validation. Once a policy is created and enabled with one or more kms keys, the policy will ensure all images deployed has been signed with the key(s) attached to the policy.
	ImagePolicyConfig *ClusterImagePolicyConfig `pulumi:"imagePolicyConfig"`
	// The OCID of the KMS key to be used as the master encryption key for Kubernetes secret encryption. When used, `kubernetesVersion` must be at least `v1.13.0`.
	KmsKeyId *string `pulumi:"kmsKeyId"`
	// (Updatable) The version of Kubernetes to install into the cluster masters.
	KubernetesVersion *string `pulumi:"kubernetesVersion"`
	// Details about the state of the cluster masters.
	LifecycleDetails *string `pulumi:"lifecycleDetails"`
	// Metadata about the cluster.
	Metadata *ClusterMetadata `pulumi:"metadata"`
	// (Updatable) The name of the cluster. Avoid entering confidential information.
	Name *string `pulumi:"name"`
	// (Updatable) Optional attributes for the cluster.
	Options *ClusterOptions `pulumi:"options"`
	// The state of the cluster masters.
	State *string `pulumi:"state"`
	// The OCID of the virtual cloud network (VCN) in which to create the cluster.
	VcnId *string `pulumi:"vcnId"`
}

type ClusterState struct {
	// Available Kubernetes versions to which the clusters masters may be upgraded.
	AvailableKubernetesUpgrades pulumi.StringArrayInput
	// The OCID of the compartment in which to create the cluster.
	CompartmentId pulumi.StringPtrInput
	// The network configuration for access to the Cluster control plane.
	EndpointConfig ClusterEndpointConfigPtrInput
	// Endpoints served up by the cluster masters.
	Endpoints ClusterEndpointsPtrInput
	// (Updatable) The image verification policy for signature validation. Once a policy is created and enabled with one or more kms keys, the policy will ensure all images deployed has been signed with the key(s) attached to the policy.
	ImagePolicyConfig ClusterImagePolicyConfigPtrInput
	// The OCID of the KMS key to be used as the master encryption key for Kubernetes secret encryption. When used, `kubernetesVersion` must be at least `v1.13.0`.
	KmsKeyId pulumi.StringPtrInput
	// (Updatable) The version of Kubernetes to install into the cluster masters.
	KubernetesVersion pulumi.StringPtrInput
	// Details about the state of the cluster masters.
	LifecycleDetails pulumi.StringPtrInput
	// Metadata about the cluster.
	Metadata ClusterMetadataPtrInput
	// (Updatable) The name of the cluster. Avoid entering confidential information.
	Name pulumi.StringPtrInput
	// (Updatable) Optional attributes for the cluster.
	Options ClusterOptionsPtrInput
	// The state of the cluster masters.
	State pulumi.StringPtrInput
	// The OCID of the virtual cloud network (VCN) in which to create the cluster.
	VcnId pulumi.StringPtrInput
}

func (ClusterState) ElementType() reflect.Type {
	return reflect.TypeOf((*clusterState)(nil)).Elem()
}

type clusterArgs struct {
	// The OCID of the compartment in which to create the cluster.
	CompartmentId string `pulumi:"compartmentId"`
	// The network configuration for access to the Cluster control plane.
	EndpointConfig *ClusterEndpointConfig `pulumi:"endpointConfig"`
	// (Updatable) The image verification policy for signature validation. Once a policy is created and enabled with one or more kms keys, the policy will ensure all images deployed has been signed with the key(s) attached to the policy.
	ImagePolicyConfig *ClusterImagePolicyConfig `pulumi:"imagePolicyConfig"`
	// The OCID of the KMS key to be used as the master encryption key for Kubernetes secret encryption. When used, `kubernetesVersion` must be at least `v1.13.0`.
	KmsKeyId *string `pulumi:"kmsKeyId"`
	// (Updatable) The version of Kubernetes to install into the cluster masters.
	KubernetesVersion string `pulumi:"kubernetesVersion"`
	// (Updatable) The name of the cluster. Avoid entering confidential information.
	Name *string `pulumi:"name"`
	// (Updatable) Optional attributes for the cluster.
	Options *ClusterOptions `pulumi:"options"`
	// The OCID of the virtual cloud network (VCN) in which to create the cluster.
	VcnId string `pulumi:"vcnId"`
}

// The set of arguments for constructing a Cluster resource.
type ClusterArgs struct {
	// The OCID of the compartment in which to create the cluster.
	CompartmentId pulumi.StringInput
	// The network configuration for access to the Cluster control plane.
	EndpointConfig ClusterEndpointConfigPtrInput
	// (Updatable) The image verification policy for signature validation. Once a policy is created and enabled with one or more kms keys, the policy will ensure all images deployed has been signed with the key(s) attached to the policy.
	ImagePolicyConfig ClusterImagePolicyConfigPtrInput
	// The OCID of the KMS key to be used as the master encryption key for Kubernetes secret encryption. When used, `kubernetesVersion` must be at least `v1.13.0`.
	KmsKeyId pulumi.StringPtrInput
	// (Updatable) The version of Kubernetes to install into the cluster masters.
	KubernetesVersion pulumi.StringInput
	// (Updatable) The name of the cluster. Avoid entering confidential information.
	Name pulumi.StringPtrInput
	// (Updatable) Optional attributes for the cluster.
	Options ClusterOptionsPtrInput
	// The OCID of the virtual cloud network (VCN) in which to create the cluster.
	VcnId pulumi.StringInput
}

func (ClusterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*clusterArgs)(nil)).Elem()
}

type ClusterInput interface {
	pulumi.Input

	ToClusterOutput() ClusterOutput
	ToClusterOutputWithContext(ctx context.Context) ClusterOutput
}

func (*Cluster) ElementType() reflect.Type {
	return reflect.TypeOf((*Cluster)(nil))
}

func (i *Cluster) ToClusterOutput() ClusterOutput {
	return i.ToClusterOutputWithContext(context.Background())
}

func (i *Cluster) ToClusterOutputWithContext(ctx context.Context) ClusterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterOutput)
}

func (i *Cluster) ToClusterPtrOutput() ClusterPtrOutput {
	return i.ToClusterPtrOutputWithContext(context.Background())
}

func (i *Cluster) ToClusterPtrOutputWithContext(ctx context.Context) ClusterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterPtrOutput)
}

type ClusterPtrInput interface {
	pulumi.Input

	ToClusterPtrOutput() ClusterPtrOutput
	ToClusterPtrOutputWithContext(ctx context.Context) ClusterPtrOutput
}

type clusterPtrType ClusterArgs

func (*clusterPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Cluster)(nil))
}

func (i *clusterPtrType) ToClusterPtrOutput() ClusterPtrOutput {
	return i.ToClusterPtrOutputWithContext(context.Background())
}

func (i *clusterPtrType) ToClusterPtrOutputWithContext(ctx context.Context) ClusterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterPtrOutput)
}

// ClusterArrayInput is an input type that accepts ClusterArray and ClusterArrayOutput values.
// You can construct a concrete instance of `ClusterArrayInput` via:
//
//          ClusterArray{ ClusterArgs{...} }
type ClusterArrayInput interface {
	pulumi.Input

	ToClusterArrayOutput() ClusterArrayOutput
	ToClusterArrayOutputWithContext(context.Context) ClusterArrayOutput
}

type ClusterArray []ClusterInput

func (ClusterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Cluster)(nil)).Elem()
}

func (i ClusterArray) ToClusterArrayOutput() ClusterArrayOutput {
	return i.ToClusterArrayOutputWithContext(context.Background())
}

func (i ClusterArray) ToClusterArrayOutputWithContext(ctx context.Context) ClusterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterArrayOutput)
}

// ClusterMapInput is an input type that accepts ClusterMap and ClusterMapOutput values.
// You can construct a concrete instance of `ClusterMapInput` via:
//
//          ClusterMap{ "key": ClusterArgs{...} }
type ClusterMapInput interface {
	pulumi.Input

	ToClusterMapOutput() ClusterMapOutput
	ToClusterMapOutputWithContext(context.Context) ClusterMapOutput
}

type ClusterMap map[string]ClusterInput

func (ClusterMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Cluster)(nil)).Elem()
}

func (i ClusterMap) ToClusterMapOutput() ClusterMapOutput {
	return i.ToClusterMapOutputWithContext(context.Background())
}

func (i ClusterMap) ToClusterMapOutputWithContext(ctx context.Context) ClusterMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterMapOutput)
}

type ClusterOutput struct {
	*pulumi.OutputState
}

func (ClusterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Cluster)(nil))
}

func (o ClusterOutput) ToClusterOutput() ClusterOutput {
	return o
}

func (o ClusterOutput) ToClusterOutputWithContext(ctx context.Context) ClusterOutput {
	return o
}

func (o ClusterOutput) ToClusterPtrOutput() ClusterPtrOutput {
	return o.ToClusterPtrOutputWithContext(context.Background())
}

func (o ClusterOutput) ToClusterPtrOutputWithContext(ctx context.Context) ClusterPtrOutput {
	return o.ApplyT(func(v Cluster) *Cluster {
		return &v
	}).(ClusterPtrOutput)
}

type ClusterPtrOutput struct {
	*pulumi.OutputState
}

func (ClusterPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Cluster)(nil))
}

func (o ClusterPtrOutput) ToClusterPtrOutput() ClusterPtrOutput {
	return o
}

func (o ClusterPtrOutput) ToClusterPtrOutputWithContext(ctx context.Context) ClusterPtrOutput {
	return o
}

type ClusterArrayOutput struct{ *pulumi.OutputState }

func (ClusterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Cluster)(nil))
}

func (o ClusterArrayOutput) ToClusterArrayOutput() ClusterArrayOutput {
	return o
}

func (o ClusterArrayOutput) ToClusterArrayOutputWithContext(ctx context.Context) ClusterArrayOutput {
	return o
}

func (o ClusterArrayOutput) Index(i pulumi.IntInput) ClusterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Cluster {
		return vs[0].([]Cluster)[vs[1].(int)]
	}).(ClusterOutput)
}

type ClusterMapOutput struct{ *pulumi.OutputState }

func (ClusterMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]Cluster)(nil))
}

func (o ClusterMapOutput) ToClusterMapOutput() ClusterMapOutput {
	return o
}

func (o ClusterMapOutput) ToClusterMapOutputWithContext(ctx context.Context) ClusterMapOutput {
	return o
}

func (o ClusterMapOutput) MapIndex(k pulumi.StringInput) ClusterOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) Cluster {
		return vs[0].(map[string]Cluster)[vs[1].(string)]
	}).(ClusterOutput)
}

func init() {
	pulumi.RegisterOutputType(ClusterOutput{})
	pulumi.RegisterOutputType(ClusterPtrOutput{})
	pulumi.RegisterOutputType(ClusterArrayOutput{})
	pulumi.RegisterOutputType(ClusterMapOutput{})
}
