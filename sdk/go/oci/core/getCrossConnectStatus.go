// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package core

import (
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This data source provides details about a specific Cross Connect Status resource in Oracle Cloud Infrastructure Core service.
//
// Gets the status of the specified cross-connect.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-oci/sdk/go/oci/core"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := core.GetCrossConnectStatus(ctx, &core.GetCrossConnectStatusArgs{
// 			CrossConnectId: oci_core_cross_connect.Test_cross_connect.Id,
// 		}, nil)
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
func GetCrossConnectStatus(ctx *pulumi.Context, args *GetCrossConnectStatusArgs, opts ...pulumi.InvokeOption) (*GetCrossConnectStatusResult, error) {
	var rv GetCrossConnectStatusResult
	err := ctx.Invoke("oci:core/getCrossConnectStatus:getCrossConnectStatus", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getCrossConnectStatus.
type GetCrossConnectStatusArgs struct {
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the cross-connect.
	CrossConnectId string `pulumi:"crossConnectId"`
}

// A collection of values returned by getCrossConnectStatus.
type GetCrossConnectStatusResult struct {
	// The OCID of the cross-connect.
	CrossConnectId string `pulumi:"crossConnectId"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Whether Oracle's side of the interface is up or down.
	InterfaceState string `pulumi:"interfaceState"`
	// The light level of the cross-connect (in dBm).  Example: `14.0`
	LightLevelIndBm float64 `pulumi:"lightLevelIndBm"`
	// Status indicator corresponding to the light level.
	// * **NO_LIGHT:** No measurable light
	// * **LOW_WARN:** There's measurable light but it's too low
	// * **HIGH_WARN:** Light level is too high
	// * **BAD:** There's measurable light but the signal-to-noise ratio is bad
	// * **GOOD:** Good light level
	LightLevelIndicator string `pulumi:"lightLevelIndicator"`
}
