// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package core

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource provides the Vcn resource in Oracle Cloud Infrastructure Core service.
//
// The VCN automatically comes with a default route table, default security list, and default set of DHCP options.
// For managing these resources, see [Managing Default VCN Resources](https://www.terraform.io/docs/providers/oci/guides/managing_default_resources.html)
//
// Creates a new Virtual Cloud Network (VCN). For more information, see
// [VCNs and Subnets](https://docs.cloud.oracle.com/iaas/Content/Network/Tasks/managingVCNs.htm).
//
// For the VCN, you specify a list of one or more IPv4 CIDR blocks that meet the following criteria:
//
// - The CIDR blocks must be valid.
// - They must not overlap with each other or with the on-premises network CIDR block.
// - The number of CIDR blocks does not exceed the limit of CIDR blocks allowed per VCN.
//
// For a CIDR block, Oracle recommends that you use one of the private IP address ranges specified in [RFC 1918](https://tools.ietf.org/html/rfc1918) (10.0.0.0/8, 172.16/12, and 192.168/16). Example:
// 172.16.0.0/16. The CIDR blocks can range from /16 to /30.
//
// For the purposes of access control, you must provide the OCID of the compartment where you want the VCN to
// reside. Consult an Oracle Cloud Infrastructure administrator in your organization if you're not sure which
// compartment to use. Notice that the VCN doesn't have to be in the same compartment as the subnets or other
// Networking Service components. For more information about compartments and access control, see
// [Overview of the IAM Service](https://docs.cloud.oracle.com/iaas/Content/Identity/Concepts/overview.htm). For information about OCIDs, see
// [Resource Identifiers](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
//
// You may optionally specify a *display name* for the VCN, otherwise a default is provided. It does not have to
// be unique, and you can change it. Avoid entering confidential information.
//
// You can also add a DNS label for the VCN, which is required if you want the instances to use the
// Interent and VCN Resolver option for DNS in the VCN. For more information, see
// [DNS in Your Virtual Cloud Network](https://docs.cloud.oracle.com/iaas/Content/Network/Concepts/dns.htm).
//
// The VCN automatically comes with a default route table, default security list, and default set of DHCP options.
// The OCID for each is returned in the response. You can't delete these default objects, but you can change their
// contents (that is, change the route rules, security list rules, and so on).
//
// The VCN and subnets you create are not accessible until you attach an internet gateway or set up an IPSec VPN
// or FastConnect. For more information, see
// [Overview of the Networking Service](https://docs.cloud.oracle.com/iaas/Content/Network/Concepts/overview.htm).
//
// ## Supported Aliases
//
// * `ociCoreVirtualNetwork`
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-oci/sdk/go/oci/core"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := core.NewVcn(ctx, "testVcn", &core.VcnArgs{
// 			CompartmentId: pulumi.Any(_var.Compartment_id),
// 			CidrBlock:     pulumi.Any(_var.Vcn_cidr_block),
// 			CidrBlocks:    pulumi.Any(_var.Vcn_cidr_blocks),
// 			DefinedTags: pulumi.AnyMap{
// 				"Operations.CostCenter": pulumi.Any("42"),
// 			},
// 			DisplayName: pulumi.Any(_var.Vcn_display_name),
// 			DnsLabel:    pulumi.Any(_var.Vcn_dns_label),
// 			FreeformTags: pulumi.AnyMap{
// 				"Department": pulumi.Any("Finance"),
// 			},
// 			IsIpv6enabled: pulumi.Any(_var.Vcn_is_ipv6enabled),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// Vcns can be imported using the `id`, e.g.
//
// ```sh
//  $ pulumi import oci:core/vcn:Vcn test_vcn "id"
// ```
type Vcn struct {
	pulumi.CustomResourceState

	// **Deprecated.** Do *not* set this value. Use `cidrBlocks` instead. Example: `10.0.0.0/16`
	CidrBlock pulumi.StringOutput `pulumi:"cidrBlock"`
	// (Updatable) The list of one or more IPv4 CIDR blocks for the VCN that meet the following criteria:
	// * The CIDR blocks must be valid.
	// * They must not overlap with each other or with the on-premises network CIDR block.
	// * The number of CIDR blocks must not exceed the limit of CIDR blocks allowed per VCN. It is an error to set both cidrBlock and cidrBlocks. Note: cidrBlocks update must be restricted to one operation at a time (either add/remove or modify one single cidr_block) or the operation will be declined. new cidrBlock to be added must be placed at the end of the list. Once you migrate to using `cidrBlocks` from `cidrBlock`, you will not be able to switch back.
	//   **Important:** Do *not* specify a value for `cidrBlock`. Use this parameter instead.
	CidrBlocks pulumi.StringArrayOutput `pulumi:"cidrBlocks"`
	// (Updatable) The OCID of the compartment to contain the VCN.
	CompartmentId pulumi.StringOutput `pulumi:"compartmentId"`
	// The OCID for the VCN's default set of DHCP options.
	DefaultDhcpOptionsId pulumi.StringOutput `pulumi:"defaultDhcpOptionsId"`
	// The OCID for the VCN's default route table.
	DefaultRouteTableId pulumi.StringOutput `pulumi:"defaultRouteTableId"`
	// The OCID for the VCN's default security list.
	DefaultSecurityListId pulumi.StringOutput `pulumi:"defaultSecurityListId"`
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Operations.CostCenter": "42"}`
	DefinedTags pulumi.MapOutput `pulumi:"definedTags"`
	// (Updatable) A user-friendly name. Does not have to be unique, and it's changeable. Avoid entering confidential information.
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// A DNS label for the VCN, used in conjunction with the VNIC's hostname and subnet's DNS label to form a fully qualified domain name (FQDN) for each VNIC within this subnet (for example, `bminstance-1.subnet123.vcn1.oraclevcn.com`). Not required to be unique, but it's a best practice to set unique DNS labels for VCNs in your tenancy. Must be an alphanumeric string that begins with a letter. The value cannot be changed.
	DnsLabel pulumi.StringOutput `pulumi:"dnsLabel"`
	// (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Department": "Finance"}`
	FreeformTags pulumi.MapOutput `pulumi:"freeformTags"`
	// For an IPv6-enabled VCN, this is the list of IPv6 CIDR blocks for the VCN's IP address space. The CIDRs are provided by Oracle and the sizes are always /56.
	Ipv6cidrBlocks pulumi.StringArrayOutput `pulumi:"ipv6cidrBlocks"`
	// Whether IPv6 is enabled for the VCN. Default is `false`. If enabled, Oracle will assign the VCN a IPv6 /56 CIDR block. For important details about IPv6 addressing in a VCN, see [IPv6 Addresses](https://docs.cloud.oracle.com/iaas/Content/Network/Concepts/ipv6.htm).  Example: `true`
	IsIpv6enabled pulumi.BoolOutput `pulumi:"isIpv6enabled"`
	// The VCN's current state.
	State pulumi.StringOutput `pulumi:"state"`
	// The date and time the VCN was created, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).  Example: `2016-08-25T21:10:29.600Z`
	TimeCreated pulumi.StringOutput `pulumi:"timeCreated"`
	// The VCN's domain name, which consists of the VCN's DNS label, and the `oraclevcn.com` domain.
	VcnDomainName pulumi.StringOutput `pulumi:"vcnDomainName"`
}

// NewVcn registers a new resource with the given unique name, arguments, and options.
func NewVcn(ctx *pulumi.Context,
	name string, args *VcnArgs, opts ...pulumi.ResourceOption) (*Vcn, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CompartmentId == nil {
		return nil, errors.New("invalid value for required argument 'CompartmentId'")
	}
	var resource Vcn
	err := ctx.RegisterResource("oci:core/vcn:Vcn", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVcn gets an existing Vcn resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVcn(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VcnState, opts ...pulumi.ResourceOption) (*Vcn, error) {
	var resource Vcn
	err := ctx.ReadResource("oci:core/vcn:Vcn", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Vcn resources.
type vcnState struct {
	// **Deprecated.** Do *not* set this value. Use `cidrBlocks` instead. Example: `10.0.0.0/16`
	CidrBlock *string `pulumi:"cidrBlock"`
	// (Updatable) The list of one or more IPv4 CIDR blocks for the VCN that meet the following criteria:
	// * The CIDR blocks must be valid.
	// * They must not overlap with each other or with the on-premises network CIDR block.
	// * The number of CIDR blocks must not exceed the limit of CIDR blocks allowed per VCN. It is an error to set both cidrBlock and cidrBlocks. Note: cidrBlocks update must be restricted to one operation at a time (either add/remove or modify one single cidr_block) or the operation will be declined. new cidrBlock to be added must be placed at the end of the list. Once you migrate to using `cidrBlocks` from `cidrBlock`, you will not be able to switch back.
	//   **Important:** Do *not* specify a value for `cidrBlock`. Use this parameter instead.
	CidrBlocks []string `pulumi:"cidrBlocks"`
	// (Updatable) The OCID of the compartment to contain the VCN.
	CompartmentId *string `pulumi:"compartmentId"`
	// The OCID for the VCN's default set of DHCP options.
	DefaultDhcpOptionsId *string `pulumi:"defaultDhcpOptionsId"`
	// The OCID for the VCN's default route table.
	DefaultRouteTableId *string `pulumi:"defaultRouteTableId"`
	// The OCID for the VCN's default security list.
	DefaultSecurityListId *string `pulumi:"defaultSecurityListId"`
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Operations.CostCenter": "42"}`
	DefinedTags map[string]interface{} `pulumi:"definedTags"`
	// (Updatable) A user-friendly name. Does not have to be unique, and it's changeable. Avoid entering confidential information.
	DisplayName *string `pulumi:"displayName"`
	// A DNS label for the VCN, used in conjunction with the VNIC's hostname and subnet's DNS label to form a fully qualified domain name (FQDN) for each VNIC within this subnet (for example, `bminstance-1.subnet123.vcn1.oraclevcn.com`). Not required to be unique, but it's a best practice to set unique DNS labels for VCNs in your tenancy. Must be an alphanumeric string that begins with a letter. The value cannot be changed.
	DnsLabel *string `pulumi:"dnsLabel"`
	// (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Department": "Finance"}`
	FreeformTags map[string]interface{} `pulumi:"freeformTags"`
	// For an IPv6-enabled VCN, this is the list of IPv6 CIDR blocks for the VCN's IP address space. The CIDRs are provided by Oracle and the sizes are always /56.
	Ipv6cidrBlocks []string `pulumi:"ipv6cidrBlocks"`
	// Whether IPv6 is enabled for the VCN. Default is `false`. If enabled, Oracle will assign the VCN a IPv6 /56 CIDR block. For important details about IPv6 addressing in a VCN, see [IPv6 Addresses](https://docs.cloud.oracle.com/iaas/Content/Network/Concepts/ipv6.htm).  Example: `true`
	IsIpv6enabled *bool `pulumi:"isIpv6enabled"`
	// The VCN's current state.
	State *string `pulumi:"state"`
	// The date and time the VCN was created, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).  Example: `2016-08-25T21:10:29.600Z`
	TimeCreated *string `pulumi:"timeCreated"`
	// The VCN's domain name, which consists of the VCN's DNS label, and the `oraclevcn.com` domain.
	VcnDomainName *string `pulumi:"vcnDomainName"`
}

type VcnState struct {
	// **Deprecated.** Do *not* set this value. Use `cidrBlocks` instead. Example: `10.0.0.0/16`
	CidrBlock pulumi.StringPtrInput
	// (Updatable) The list of one or more IPv4 CIDR blocks for the VCN that meet the following criteria:
	// * The CIDR blocks must be valid.
	// * They must not overlap with each other or with the on-premises network CIDR block.
	// * The number of CIDR blocks must not exceed the limit of CIDR blocks allowed per VCN. It is an error to set both cidrBlock and cidrBlocks. Note: cidrBlocks update must be restricted to one operation at a time (either add/remove or modify one single cidr_block) or the operation will be declined. new cidrBlock to be added must be placed at the end of the list. Once you migrate to using `cidrBlocks` from `cidrBlock`, you will not be able to switch back.
	//   **Important:** Do *not* specify a value for `cidrBlock`. Use this parameter instead.
	CidrBlocks pulumi.StringArrayInput
	// (Updatable) The OCID of the compartment to contain the VCN.
	CompartmentId pulumi.StringPtrInput
	// The OCID for the VCN's default set of DHCP options.
	DefaultDhcpOptionsId pulumi.StringPtrInput
	// The OCID for the VCN's default route table.
	DefaultRouteTableId pulumi.StringPtrInput
	// The OCID for the VCN's default security list.
	DefaultSecurityListId pulumi.StringPtrInput
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Operations.CostCenter": "42"}`
	DefinedTags pulumi.MapInput
	// (Updatable) A user-friendly name. Does not have to be unique, and it's changeable. Avoid entering confidential information.
	DisplayName pulumi.StringPtrInput
	// A DNS label for the VCN, used in conjunction with the VNIC's hostname and subnet's DNS label to form a fully qualified domain name (FQDN) for each VNIC within this subnet (for example, `bminstance-1.subnet123.vcn1.oraclevcn.com`). Not required to be unique, but it's a best practice to set unique DNS labels for VCNs in your tenancy. Must be an alphanumeric string that begins with a letter. The value cannot be changed.
	DnsLabel pulumi.StringPtrInput
	// (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Department": "Finance"}`
	FreeformTags pulumi.MapInput
	// For an IPv6-enabled VCN, this is the list of IPv6 CIDR blocks for the VCN's IP address space. The CIDRs are provided by Oracle and the sizes are always /56.
	Ipv6cidrBlocks pulumi.StringArrayInput
	// Whether IPv6 is enabled for the VCN. Default is `false`. If enabled, Oracle will assign the VCN a IPv6 /56 CIDR block. For important details about IPv6 addressing in a VCN, see [IPv6 Addresses](https://docs.cloud.oracle.com/iaas/Content/Network/Concepts/ipv6.htm).  Example: `true`
	IsIpv6enabled pulumi.BoolPtrInput
	// The VCN's current state.
	State pulumi.StringPtrInput
	// The date and time the VCN was created, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).  Example: `2016-08-25T21:10:29.600Z`
	TimeCreated pulumi.StringPtrInput
	// The VCN's domain name, which consists of the VCN's DNS label, and the `oraclevcn.com` domain.
	VcnDomainName pulumi.StringPtrInput
}

func (VcnState) ElementType() reflect.Type {
	return reflect.TypeOf((*vcnState)(nil)).Elem()
}

type vcnArgs struct {
	// **Deprecated.** Do *not* set this value. Use `cidrBlocks` instead. Example: `10.0.0.0/16`
	CidrBlock *string `pulumi:"cidrBlock"`
	// (Updatable) The list of one or more IPv4 CIDR blocks for the VCN that meet the following criteria:
	// * The CIDR blocks must be valid.
	// * They must not overlap with each other or with the on-premises network CIDR block.
	// * The number of CIDR blocks must not exceed the limit of CIDR blocks allowed per VCN. It is an error to set both cidrBlock and cidrBlocks. Note: cidrBlocks update must be restricted to one operation at a time (either add/remove or modify one single cidr_block) or the operation will be declined. new cidrBlock to be added must be placed at the end of the list. Once you migrate to using `cidrBlocks` from `cidrBlock`, you will not be able to switch back.
	//   **Important:** Do *not* specify a value for `cidrBlock`. Use this parameter instead.
	CidrBlocks []string `pulumi:"cidrBlocks"`
	// (Updatable) The OCID of the compartment to contain the VCN.
	CompartmentId string `pulumi:"compartmentId"`
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Operations.CostCenter": "42"}`
	DefinedTags map[string]interface{} `pulumi:"definedTags"`
	// (Updatable) A user-friendly name. Does not have to be unique, and it's changeable. Avoid entering confidential information.
	DisplayName *string `pulumi:"displayName"`
	// A DNS label for the VCN, used in conjunction with the VNIC's hostname and subnet's DNS label to form a fully qualified domain name (FQDN) for each VNIC within this subnet (for example, `bminstance-1.subnet123.vcn1.oraclevcn.com`). Not required to be unique, but it's a best practice to set unique DNS labels for VCNs in your tenancy. Must be an alphanumeric string that begins with a letter. The value cannot be changed.
	DnsLabel *string `pulumi:"dnsLabel"`
	// (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Department": "Finance"}`
	FreeformTags map[string]interface{} `pulumi:"freeformTags"`
	// Whether IPv6 is enabled for the VCN. Default is `false`. If enabled, Oracle will assign the VCN a IPv6 /56 CIDR block. For important details about IPv6 addressing in a VCN, see [IPv6 Addresses](https://docs.cloud.oracle.com/iaas/Content/Network/Concepts/ipv6.htm).  Example: `true`
	IsIpv6enabled *bool `pulumi:"isIpv6enabled"`
}

// The set of arguments for constructing a Vcn resource.
type VcnArgs struct {
	// **Deprecated.** Do *not* set this value. Use `cidrBlocks` instead. Example: `10.0.0.0/16`
	CidrBlock pulumi.StringPtrInput
	// (Updatable) The list of one or more IPv4 CIDR blocks for the VCN that meet the following criteria:
	// * The CIDR blocks must be valid.
	// * They must not overlap with each other or with the on-premises network CIDR block.
	// * The number of CIDR blocks must not exceed the limit of CIDR blocks allowed per VCN. It is an error to set both cidrBlock and cidrBlocks. Note: cidrBlocks update must be restricted to one operation at a time (either add/remove or modify one single cidr_block) or the operation will be declined. new cidrBlock to be added must be placed at the end of the list. Once you migrate to using `cidrBlocks` from `cidrBlock`, you will not be able to switch back.
	//   **Important:** Do *not* specify a value for `cidrBlock`. Use this parameter instead.
	CidrBlocks pulumi.StringArrayInput
	// (Updatable) The OCID of the compartment to contain the VCN.
	CompartmentId pulumi.StringInput
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Operations.CostCenter": "42"}`
	DefinedTags pulumi.MapInput
	// (Updatable) A user-friendly name. Does not have to be unique, and it's changeable. Avoid entering confidential information.
	DisplayName pulumi.StringPtrInput
	// A DNS label for the VCN, used in conjunction with the VNIC's hostname and subnet's DNS label to form a fully qualified domain name (FQDN) for each VNIC within this subnet (for example, `bminstance-1.subnet123.vcn1.oraclevcn.com`). Not required to be unique, but it's a best practice to set unique DNS labels for VCNs in your tenancy. Must be an alphanumeric string that begins with a letter. The value cannot be changed.
	DnsLabel pulumi.StringPtrInput
	// (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Department": "Finance"}`
	FreeformTags pulumi.MapInput
	// Whether IPv6 is enabled for the VCN. Default is `false`. If enabled, Oracle will assign the VCN a IPv6 /56 CIDR block. For important details about IPv6 addressing in a VCN, see [IPv6 Addresses](https://docs.cloud.oracle.com/iaas/Content/Network/Concepts/ipv6.htm).  Example: `true`
	IsIpv6enabled pulumi.BoolPtrInput
}

func (VcnArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*vcnArgs)(nil)).Elem()
}

type VcnInput interface {
	pulumi.Input

	ToVcnOutput() VcnOutput
	ToVcnOutputWithContext(ctx context.Context) VcnOutput
}

func (*Vcn) ElementType() reflect.Type {
	return reflect.TypeOf((*Vcn)(nil))
}

func (i *Vcn) ToVcnOutput() VcnOutput {
	return i.ToVcnOutputWithContext(context.Background())
}

func (i *Vcn) ToVcnOutputWithContext(ctx context.Context) VcnOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VcnOutput)
}

func (i *Vcn) ToVcnPtrOutput() VcnPtrOutput {
	return i.ToVcnPtrOutputWithContext(context.Background())
}

func (i *Vcn) ToVcnPtrOutputWithContext(ctx context.Context) VcnPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VcnPtrOutput)
}

type VcnPtrInput interface {
	pulumi.Input

	ToVcnPtrOutput() VcnPtrOutput
	ToVcnPtrOutputWithContext(ctx context.Context) VcnPtrOutput
}

type vcnPtrType VcnArgs

func (*vcnPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Vcn)(nil))
}

func (i *vcnPtrType) ToVcnPtrOutput() VcnPtrOutput {
	return i.ToVcnPtrOutputWithContext(context.Background())
}

func (i *vcnPtrType) ToVcnPtrOutputWithContext(ctx context.Context) VcnPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VcnPtrOutput)
}

// VcnArrayInput is an input type that accepts VcnArray and VcnArrayOutput values.
// You can construct a concrete instance of `VcnArrayInput` via:
//
//          VcnArray{ VcnArgs{...} }
type VcnArrayInput interface {
	pulumi.Input

	ToVcnArrayOutput() VcnArrayOutput
	ToVcnArrayOutputWithContext(context.Context) VcnArrayOutput
}

type VcnArray []VcnInput

func (VcnArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Vcn)(nil)).Elem()
}

func (i VcnArray) ToVcnArrayOutput() VcnArrayOutput {
	return i.ToVcnArrayOutputWithContext(context.Background())
}

func (i VcnArray) ToVcnArrayOutputWithContext(ctx context.Context) VcnArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VcnArrayOutput)
}

// VcnMapInput is an input type that accepts VcnMap and VcnMapOutput values.
// You can construct a concrete instance of `VcnMapInput` via:
//
//          VcnMap{ "key": VcnArgs{...} }
type VcnMapInput interface {
	pulumi.Input

	ToVcnMapOutput() VcnMapOutput
	ToVcnMapOutputWithContext(context.Context) VcnMapOutput
}

type VcnMap map[string]VcnInput

func (VcnMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Vcn)(nil)).Elem()
}

func (i VcnMap) ToVcnMapOutput() VcnMapOutput {
	return i.ToVcnMapOutputWithContext(context.Background())
}

func (i VcnMap) ToVcnMapOutputWithContext(ctx context.Context) VcnMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VcnMapOutput)
}

type VcnOutput struct {
	*pulumi.OutputState
}

func (VcnOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Vcn)(nil))
}

func (o VcnOutput) ToVcnOutput() VcnOutput {
	return o
}

func (o VcnOutput) ToVcnOutputWithContext(ctx context.Context) VcnOutput {
	return o
}

func (o VcnOutput) ToVcnPtrOutput() VcnPtrOutput {
	return o.ToVcnPtrOutputWithContext(context.Background())
}

func (o VcnOutput) ToVcnPtrOutputWithContext(ctx context.Context) VcnPtrOutput {
	return o.ApplyT(func(v Vcn) *Vcn {
		return &v
	}).(VcnPtrOutput)
}

type VcnPtrOutput struct {
	*pulumi.OutputState
}

func (VcnPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Vcn)(nil))
}

func (o VcnPtrOutput) ToVcnPtrOutput() VcnPtrOutput {
	return o
}

func (o VcnPtrOutput) ToVcnPtrOutputWithContext(ctx context.Context) VcnPtrOutput {
	return o
}

type VcnArrayOutput struct{ *pulumi.OutputState }

func (VcnArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Vcn)(nil))
}

func (o VcnArrayOutput) ToVcnArrayOutput() VcnArrayOutput {
	return o
}

func (o VcnArrayOutput) ToVcnArrayOutputWithContext(ctx context.Context) VcnArrayOutput {
	return o
}

func (o VcnArrayOutput) Index(i pulumi.IntInput) VcnOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Vcn {
		return vs[0].([]Vcn)[vs[1].(int)]
	}).(VcnOutput)
}

type VcnMapOutput struct{ *pulumi.OutputState }

func (VcnMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]Vcn)(nil))
}

func (o VcnMapOutput) ToVcnMapOutput() VcnMapOutput {
	return o
}

func (o VcnMapOutput) ToVcnMapOutputWithContext(ctx context.Context) VcnMapOutput {
	return o
}

func (o VcnMapOutput) MapIndex(k pulumi.StringInput) VcnOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) Vcn {
		return vs[0].(map[string]Vcn)[vs[1].(string)]
	}).(VcnOutput)
}

func init() {
	pulumi.RegisterOutputType(VcnOutput{})
	pulumi.RegisterOutputType(VcnPtrOutput{})
	pulumi.RegisterOutputType(VcnArrayOutput{})
	pulumi.RegisterOutputType(VcnMapOutput{})
}
