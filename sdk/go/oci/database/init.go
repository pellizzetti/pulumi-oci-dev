// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package database

import (
	"fmt"

	"github.com/blang/semver"
	"github.com/pulumi/pulumi-oci/sdk/go/oci"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type module struct {
	version semver.Version
}

func (m *module) Version() semver.Version {
	return m.version
}

func (m *module) Construct(ctx *pulumi.Context, name, typ, urn string) (r pulumi.Resource, err error) {
	switch typ {
	case "oci:database/autonomousContainerDatabase:AutonomousContainerDatabase":
		r = &AutonomousContainerDatabase{}
	case "oci:database/autonomousContainerDatabaseDataguardAssociationOperation:AutonomousContainerDatabaseDataguardAssociationOperation":
		r = &AutonomousContainerDatabaseDataguardAssociationOperation{}
	case "oci:database/autonomousDatabase:AutonomousDatabase":
		r = &AutonomousDatabase{}
	case "oci:database/autonomousDatabaseBackup:AutonomousDatabaseBackup":
		r = &AutonomousDatabaseBackup{}
	case "oci:database/autonomousDatabaseInstanceWalletManagement:AutonomousDatabaseInstanceWalletManagement":
		r = &AutonomousDatabaseInstanceWalletManagement{}
	case "oci:database/autonomousDatabaseRegionalWalletManagement:AutonomousDatabaseRegionalWalletManagement":
		r = &AutonomousDatabaseRegionalWalletManagement{}
	case "oci:database/autonomousDatabaseWallet:AutonomousDatabaseWallet":
		r = &AutonomousDatabaseWallet{}
	case "oci:database/autonomousExadataInfrastructure:AutonomousExadataInfrastructure":
		r = &AutonomousExadataInfrastructure{}
	case "oci:database/autonomousVmCluster:AutonomousVmCluster":
		r = &AutonomousVmCluster{}
	case "oci:database/backup:Backup":
		r = &Backup{}
	case "oci:database/backupDestination:BackupDestination":
		r = &BackupDestination{}
	case "oci:database/cloudExadataInfrastructure:CloudExadataInfrastructure":
		r = &CloudExadataInfrastructure{}
	case "oci:database/cloudVmCluster:CloudVmCluster":
		r = &CloudVmCluster{}
	case "oci:database/dataGuardAssociation:DataGuardAssociation":
		r = &DataGuardAssociation{}
	case "oci:database/database:Database":
		r = &Database{}
	case "oci:database/databaseSoftwareImage:DatabaseSoftwareImage":
		r = &DatabaseSoftwareImage{}
	case "oci:database/databaseUpgrade:DatabaseUpgrade":
		r = &DatabaseUpgrade{}
	case "oci:database/dbHome:DbHome":
		r = &DbHome{}
	case "oci:database/dbNodeConsoleConnection:DbNodeConsoleConnection":
		r = &DbNodeConsoleConnection{}
	case "oci:database/dbSystem:DbSystem":
		r = &DbSystem{}
	case "oci:database/exadataInfrastructure:ExadataInfrastructure":
		r = &ExadataInfrastructure{}
	case "oci:database/exadataIormConfig:ExadataIormConfig":
		r = &ExadataIormConfig{}
	case "oci:database/externalContainerDatabase:ExternalContainerDatabase":
		r = &ExternalContainerDatabase{}
	case "oci:database/externalContainerDatabaseManagement:ExternalContainerDatabaseManagement":
		r = &ExternalContainerDatabaseManagement{}
	case "oci:database/externalDatabaseConnector:ExternalDatabaseConnector":
		r = &ExternalDatabaseConnector{}
	case "oci:database/externalNonContainerDatabase:ExternalNonContainerDatabase":
		r = &ExternalNonContainerDatabase{}
	case "oci:database/externalNonContainerDatabaseManagement:ExternalNonContainerDatabaseManagement":
		r = &ExternalNonContainerDatabaseManagement{}
	case "oci:database/externalNonContainerDatabaseOperationsInsightsManagement:ExternalNonContainerDatabaseOperationsInsightsManagement":
		r = &ExternalNonContainerDatabaseOperationsInsightsManagement{}
	case "oci:database/externalPluggableDatabase:ExternalPluggableDatabase":
		r = &ExternalPluggableDatabase{}
	case "oci:database/externalPluggableDatabaseManagement:ExternalPluggableDatabaseManagement":
		r = &ExternalPluggableDatabaseManagement{}
	case "oci:database/externalPluggableDatabaseOperationsInsightsManagement:ExternalPluggableDatabaseOperationsInsightsManagement":
		r = &ExternalPluggableDatabaseOperationsInsightsManagement{}
	case "oci:database/keyStore:KeyStore":
		r = &KeyStore{}
	case "oci:database/maintenanceRun:MaintenanceRun":
		r = &MaintenanceRun{}
	case "oci:database/migration:Migration":
		r = &Migration{}
	case "oci:database/pluggableDatabase:PluggableDatabase":
		r = &PluggableDatabase{}
	case "oci:database/pluggableDatabasesLocalClone:PluggableDatabasesLocalClone":
		r = &PluggableDatabasesLocalClone{}
	case "oci:database/pluggableDatabasesRemoteClone:PluggableDatabasesRemoteClone":
		r = &PluggableDatabasesRemoteClone{}
	case "oci:database/vmCluster:VmCluster":
		r = &VmCluster{}
	case "oci:database/vmClusterNetwork:VmClusterNetwork":
		r = &VmClusterNetwork{}
	default:
		return nil, fmt.Errorf("unknown resource type: %s", typ)
	}

	err = ctx.RegisterResource(typ, name, nil, r, pulumi.URN_(urn))
	return
}

func init() {
	version, err := oci.PkgVersion()
	if err != nil {
		fmt.Printf("failed to determine package version. defaulting to v1: %v\n", err)
	}
	pulumi.RegisterResourceModule(
		"oci",
		"database/autonomousContainerDatabase",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"oci",
		"database/autonomousContainerDatabaseDataguardAssociationOperation",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"oci",
		"database/autonomousDatabase",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"oci",
		"database/autonomousDatabaseBackup",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"oci",
		"database/autonomousDatabaseInstanceWalletManagement",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"oci",
		"database/autonomousDatabaseRegionalWalletManagement",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"oci",
		"database/autonomousDatabaseWallet",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"oci",
		"database/autonomousExadataInfrastructure",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"oci",
		"database/autonomousVmCluster",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"oci",
		"database/backup",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"oci",
		"database/backupDestination",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"oci",
		"database/cloudExadataInfrastructure",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"oci",
		"database/cloudVmCluster",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"oci",
		"database/dataGuardAssociation",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"oci",
		"database/database",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"oci",
		"database/databaseSoftwareImage",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"oci",
		"database/databaseUpgrade",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"oci",
		"database/dbHome",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"oci",
		"database/dbNodeConsoleConnection",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"oci",
		"database/dbSystem",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"oci",
		"database/exadataInfrastructure",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"oci",
		"database/exadataIormConfig",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"oci",
		"database/externalContainerDatabase",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"oci",
		"database/externalContainerDatabaseManagement",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"oci",
		"database/externalDatabaseConnector",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"oci",
		"database/externalNonContainerDatabase",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"oci",
		"database/externalNonContainerDatabaseManagement",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"oci",
		"database/externalNonContainerDatabaseOperationsInsightsManagement",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"oci",
		"database/externalPluggableDatabase",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"oci",
		"database/externalPluggableDatabaseManagement",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"oci",
		"database/externalPluggableDatabaseOperationsInsightsManagement",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"oci",
		"database/keyStore",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"oci",
		"database/maintenanceRun",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"oci",
		"database/migration",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"oci",
		"database/pluggableDatabase",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"oci",
		"database/pluggableDatabasesLocalClone",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"oci",
		"database/pluggableDatabasesRemoteClone",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"oci",
		"database/vmCluster",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"oci",
		"database/vmClusterNetwork",
		&module{version},
	)
}
