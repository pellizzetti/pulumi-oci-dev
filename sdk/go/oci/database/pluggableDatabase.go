// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package database

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource provides the Pluggable Database resource in Oracle Cloud Infrastructure Database service.
//
// Creates and starts a pluggable database in the specified container database.
// Use the [StartPluggableDatabase](#/en/database/latest/PluggableDatabase/StartPluggableDatabase] and [StopPluggableDatabase](#/en/database/latest/PluggableDatabase/StopPluggableDatabase] APIs to start and stop the pluggable database.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-oci/sdk/go/oci/database"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := database.NewPluggableDatabase(ctx, "testPluggableDatabase", &database.PluggableDatabaseArgs{
// 			ContainerDatabaseId: pulumi.Any(oci_database_database.Test_database.Id),
// 			PdbAdminPassword:    pulumi.Any(_var.Pluggable_database_pdb_admin_password),
// 			PdbName:             pulumi.Any(_var.Pluggable_database_pdb_name),
// 			TdeWalletPassword:   pulumi.Any(_var.Pluggable_database_tde_wallet_password),
// 			DefinedTags:         pulumi.Any(_var.Pluggable_database_defined_tags),
// 			FreeformTags: pulumi.AnyMap{
// 				"Department": pulumi.Any("Finance"),
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// PluggableDatabases can be imported using the `id`, e.g.
//
// ```sh
//  $ pulumi import oci:database/pluggableDatabase:PluggableDatabase test_pluggable_database "id"
// ```
type PluggableDatabase struct {
	pulumi.CustomResourceState

	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
	CompartmentId pulumi.StringOutput `pulumi:"compartmentId"`
	// Connection strings to connect to an Oracle Pluggable Database.
	ConnectionStrings PluggableDatabaseConnectionStringsOutput `pulumi:"connectionStrings"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the CDB
	ContainerDatabaseId pulumi.StringOutput `pulumi:"containerDatabaseId"`
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
	DefinedTags pulumi.MapOutput `pulumi:"definedTags"`
	// (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Department": "Finance"}`
	FreeformTags pulumi.MapOutput `pulumi:"freeformTags"`
	// The restricted mode of the pluggable database. If a pluggable database is opened in restricted mode, the user needs both create a session and have restricted session privileges to connect to it.
	IsRestricted pulumi.BoolOutput `pulumi:"isRestricted"`
	// Detailed message for the lifecycle state.
	LifecycleDetails pulumi.StringOutput `pulumi:"lifecycleDetails"`
	// The mode that pluggable database is in. Open mode can only be changed to READ_ONLY or MIGRATE directly from the backend (within the Oracle Database software).
	OpenMode pulumi.StringOutput `pulumi:"openMode"`
	// A strong password for PDB Admin. The password must be at least nine characters and contain at least two uppercase, two lowercase, two numbers, and two special characters. The special characters must be _, \#, or -.
	PdbAdminPassword pulumi.StringOutput `pulumi:"pdbAdminPassword"`
	// The name for the pluggable database (PDB). The name is unique in the context of a [container database](https://docs.cloud.oracle.com/iaas/api/#/en/database/latest/Database/). The name must begin with an alphabetic character and can contain a maximum of thirty alphanumeric characters. Special characters are not permitted. The pluggable database name should not be same as the container database name.
	PdbName pulumi.StringOutput `pulumi:"pdbName"`
	// The current state of the pluggable database.
	State pulumi.StringOutput `pulumi:"state"`
	// The existing TDE wallet password of the CDB.
	TdeWalletPassword pulumi.StringOutput `pulumi:"tdeWalletPassword"`
	// The date and time the pluggable database was created.
	TimeCreated pulumi.StringOutput `pulumi:"timeCreated"`
}

// NewPluggableDatabase registers a new resource with the given unique name, arguments, and options.
func NewPluggableDatabase(ctx *pulumi.Context,
	name string, args *PluggableDatabaseArgs, opts ...pulumi.ResourceOption) (*PluggableDatabase, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ContainerDatabaseId == nil {
		return nil, errors.New("invalid value for required argument 'ContainerDatabaseId'")
	}
	if args.PdbAdminPassword == nil {
		return nil, errors.New("invalid value for required argument 'PdbAdminPassword'")
	}
	if args.PdbName == nil {
		return nil, errors.New("invalid value for required argument 'PdbName'")
	}
	if args.TdeWalletPassword == nil {
		return nil, errors.New("invalid value for required argument 'TdeWalletPassword'")
	}
	var resource PluggableDatabase
	err := ctx.RegisterResource("oci:database/pluggableDatabase:PluggableDatabase", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPluggableDatabase gets an existing PluggableDatabase resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPluggableDatabase(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PluggableDatabaseState, opts ...pulumi.ResourceOption) (*PluggableDatabase, error) {
	var resource PluggableDatabase
	err := ctx.ReadResource("oci:database/pluggableDatabase:PluggableDatabase", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PluggableDatabase resources.
type pluggableDatabaseState struct {
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
	CompartmentId *string `pulumi:"compartmentId"`
	// Connection strings to connect to an Oracle Pluggable Database.
	ConnectionStrings *PluggableDatabaseConnectionStrings `pulumi:"connectionStrings"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the CDB
	ContainerDatabaseId *string `pulumi:"containerDatabaseId"`
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
	DefinedTags map[string]interface{} `pulumi:"definedTags"`
	// (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Department": "Finance"}`
	FreeformTags map[string]interface{} `pulumi:"freeformTags"`
	// The restricted mode of the pluggable database. If a pluggable database is opened in restricted mode, the user needs both create a session and have restricted session privileges to connect to it.
	IsRestricted *bool `pulumi:"isRestricted"`
	// Detailed message for the lifecycle state.
	LifecycleDetails *string `pulumi:"lifecycleDetails"`
	// The mode that pluggable database is in. Open mode can only be changed to READ_ONLY or MIGRATE directly from the backend (within the Oracle Database software).
	OpenMode *string `pulumi:"openMode"`
	// A strong password for PDB Admin. The password must be at least nine characters and contain at least two uppercase, two lowercase, two numbers, and two special characters. The special characters must be _, \#, or -.
	PdbAdminPassword *string `pulumi:"pdbAdminPassword"`
	// The name for the pluggable database (PDB). The name is unique in the context of a [container database](https://docs.cloud.oracle.com/iaas/api/#/en/database/latest/Database/). The name must begin with an alphabetic character and can contain a maximum of thirty alphanumeric characters. Special characters are not permitted. The pluggable database name should not be same as the container database name.
	PdbName *string `pulumi:"pdbName"`
	// The current state of the pluggable database.
	State *string `pulumi:"state"`
	// The existing TDE wallet password of the CDB.
	TdeWalletPassword *string `pulumi:"tdeWalletPassword"`
	// The date and time the pluggable database was created.
	TimeCreated *string `pulumi:"timeCreated"`
}

type PluggableDatabaseState struct {
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
	CompartmentId pulumi.StringPtrInput
	// Connection strings to connect to an Oracle Pluggable Database.
	ConnectionStrings PluggableDatabaseConnectionStringsPtrInput
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the CDB
	ContainerDatabaseId pulumi.StringPtrInput
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
	DefinedTags pulumi.MapInput
	// (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Department": "Finance"}`
	FreeformTags pulumi.MapInput
	// The restricted mode of the pluggable database. If a pluggable database is opened in restricted mode, the user needs both create a session and have restricted session privileges to connect to it.
	IsRestricted pulumi.BoolPtrInput
	// Detailed message for the lifecycle state.
	LifecycleDetails pulumi.StringPtrInput
	// The mode that pluggable database is in. Open mode can only be changed to READ_ONLY or MIGRATE directly from the backend (within the Oracle Database software).
	OpenMode pulumi.StringPtrInput
	// A strong password for PDB Admin. The password must be at least nine characters and contain at least two uppercase, two lowercase, two numbers, and two special characters. The special characters must be _, \#, or -.
	PdbAdminPassword pulumi.StringPtrInput
	// The name for the pluggable database (PDB). The name is unique in the context of a [container database](https://docs.cloud.oracle.com/iaas/api/#/en/database/latest/Database/). The name must begin with an alphabetic character and can contain a maximum of thirty alphanumeric characters. Special characters are not permitted. The pluggable database name should not be same as the container database name.
	PdbName pulumi.StringPtrInput
	// The current state of the pluggable database.
	State pulumi.StringPtrInput
	// The existing TDE wallet password of the CDB.
	TdeWalletPassword pulumi.StringPtrInput
	// The date and time the pluggable database was created.
	TimeCreated pulumi.StringPtrInput
}

func (PluggableDatabaseState) ElementType() reflect.Type {
	return reflect.TypeOf((*pluggableDatabaseState)(nil)).Elem()
}

type pluggableDatabaseArgs struct {
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the CDB
	ContainerDatabaseId string `pulumi:"containerDatabaseId"`
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
	DefinedTags map[string]interface{} `pulumi:"definedTags"`
	// (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Department": "Finance"}`
	FreeformTags map[string]interface{} `pulumi:"freeformTags"`
	// A strong password for PDB Admin. The password must be at least nine characters and contain at least two uppercase, two lowercase, two numbers, and two special characters. The special characters must be _, \#, or -.
	PdbAdminPassword string `pulumi:"pdbAdminPassword"`
	// The name for the pluggable database (PDB). The name is unique in the context of a [container database](https://docs.cloud.oracle.com/iaas/api/#/en/database/latest/Database/). The name must begin with an alphabetic character and can contain a maximum of thirty alphanumeric characters. Special characters are not permitted. The pluggable database name should not be same as the container database name.
	PdbName string `pulumi:"pdbName"`
	// The existing TDE wallet password of the CDB.
	TdeWalletPassword string `pulumi:"tdeWalletPassword"`
}

// The set of arguments for constructing a PluggableDatabase resource.
type PluggableDatabaseArgs struct {
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the CDB
	ContainerDatabaseId pulumi.StringInput
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
	DefinedTags pulumi.MapInput
	// (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Department": "Finance"}`
	FreeformTags pulumi.MapInput
	// A strong password for PDB Admin. The password must be at least nine characters and contain at least two uppercase, two lowercase, two numbers, and two special characters. The special characters must be _, \#, or -.
	PdbAdminPassword pulumi.StringInput
	// The name for the pluggable database (PDB). The name is unique in the context of a [container database](https://docs.cloud.oracle.com/iaas/api/#/en/database/latest/Database/). The name must begin with an alphabetic character and can contain a maximum of thirty alphanumeric characters. Special characters are not permitted. The pluggable database name should not be same as the container database name.
	PdbName pulumi.StringInput
	// The existing TDE wallet password of the CDB.
	TdeWalletPassword pulumi.StringInput
}

func (PluggableDatabaseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*pluggableDatabaseArgs)(nil)).Elem()
}

type PluggableDatabaseInput interface {
	pulumi.Input

	ToPluggableDatabaseOutput() PluggableDatabaseOutput
	ToPluggableDatabaseOutputWithContext(ctx context.Context) PluggableDatabaseOutput
}

func (*PluggableDatabase) ElementType() reflect.Type {
	return reflect.TypeOf((*PluggableDatabase)(nil))
}

func (i *PluggableDatabase) ToPluggableDatabaseOutput() PluggableDatabaseOutput {
	return i.ToPluggableDatabaseOutputWithContext(context.Background())
}

func (i *PluggableDatabase) ToPluggableDatabaseOutputWithContext(ctx context.Context) PluggableDatabaseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PluggableDatabaseOutput)
}

func (i *PluggableDatabase) ToPluggableDatabasePtrOutput() PluggableDatabasePtrOutput {
	return i.ToPluggableDatabasePtrOutputWithContext(context.Background())
}

func (i *PluggableDatabase) ToPluggableDatabasePtrOutputWithContext(ctx context.Context) PluggableDatabasePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PluggableDatabasePtrOutput)
}

type PluggableDatabasePtrInput interface {
	pulumi.Input

	ToPluggableDatabasePtrOutput() PluggableDatabasePtrOutput
	ToPluggableDatabasePtrOutputWithContext(ctx context.Context) PluggableDatabasePtrOutput
}

type pluggableDatabasePtrType PluggableDatabaseArgs

func (*pluggableDatabasePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PluggableDatabase)(nil))
}

func (i *pluggableDatabasePtrType) ToPluggableDatabasePtrOutput() PluggableDatabasePtrOutput {
	return i.ToPluggableDatabasePtrOutputWithContext(context.Background())
}

func (i *pluggableDatabasePtrType) ToPluggableDatabasePtrOutputWithContext(ctx context.Context) PluggableDatabasePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PluggableDatabasePtrOutput)
}

// PluggableDatabaseArrayInput is an input type that accepts PluggableDatabaseArray and PluggableDatabaseArrayOutput values.
// You can construct a concrete instance of `PluggableDatabaseArrayInput` via:
//
//          PluggableDatabaseArray{ PluggableDatabaseArgs{...} }
type PluggableDatabaseArrayInput interface {
	pulumi.Input

	ToPluggableDatabaseArrayOutput() PluggableDatabaseArrayOutput
	ToPluggableDatabaseArrayOutputWithContext(context.Context) PluggableDatabaseArrayOutput
}

type PluggableDatabaseArray []PluggableDatabaseInput

func (PluggableDatabaseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PluggableDatabase)(nil)).Elem()
}

func (i PluggableDatabaseArray) ToPluggableDatabaseArrayOutput() PluggableDatabaseArrayOutput {
	return i.ToPluggableDatabaseArrayOutputWithContext(context.Background())
}

func (i PluggableDatabaseArray) ToPluggableDatabaseArrayOutputWithContext(ctx context.Context) PluggableDatabaseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PluggableDatabaseArrayOutput)
}

// PluggableDatabaseMapInput is an input type that accepts PluggableDatabaseMap and PluggableDatabaseMapOutput values.
// You can construct a concrete instance of `PluggableDatabaseMapInput` via:
//
//          PluggableDatabaseMap{ "key": PluggableDatabaseArgs{...} }
type PluggableDatabaseMapInput interface {
	pulumi.Input

	ToPluggableDatabaseMapOutput() PluggableDatabaseMapOutput
	ToPluggableDatabaseMapOutputWithContext(context.Context) PluggableDatabaseMapOutput
}

type PluggableDatabaseMap map[string]PluggableDatabaseInput

func (PluggableDatabaseMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PluggableDatabase)(nil)).Elem()
}

func (i PluggableDatabaseMap) ToPluggableDatabaseMapOutput() PluggableDatabaseMapOutput {
	return i.ToPluggableDatabaseMapOutputWithContext(context.Background())
}

func (i PluggableDatabaseMap) ToPluggableDatabaseMapOutputWithContext(ctx context.Context) PluggableDatabaseMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PluggableDatabaseMapOutput)
}

type PluggableDatabaseOutput struct {
	*pulumi.OutputState
}

func (PluggableDatabaseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PluggableDatabase)(nil))
}

func (o PluggableDatabaseOutput) ToPluggableDatabaseOutput() PluggableDatabaseOutput {
	return o
}

func (o PluggableDatabaseOutput) ToPluggableDatabaseOutputWithContext(ctx context.Context) PluggableDatabaseOutput {
	return o
}

func (o PluggableDatabaseOutput) ToPluggableDatabasePtrOutput() PluggableDatabasePtrOutput {
	return o.ToPluggableDatabasePtrOutputWithContext(context.Background())
}

func (o PluggableDatabaseOutput) ToPluggableDatabasePtrOutputWithContext(ctx context.Context) PluggableDatabasePtrOutput {
	return o.ApplyT(func(v PluggableDatabase) *PluggableDatabase {
		return &v
	}).(PluggableDatabasePtrOutput)
}

type PluggableDatabasePtrOutput struct {
	*pulumi.OutputState
}

func (PluggableDatabasePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PluggableDatabase)(nil))
}

func (o PluggableDatabasePtrOutput) ToPluggableDatabasePtrOutput() PluggableDatabasePtrOutput {
	return o
}

func (o PluggableDatabasePtrOutput) ToPluggableDatabasePtrOutputWithContext(ctx context.Context) PluggableDatabasePtrOutput {
	return o
}

type PluggableDatabaseArrayOutput struct{ *pulumi.OutputState }

func (PluggableDatabaseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PluggableDatabase)(nil))
}

func (o PluggableDatabaseArrayOutput) ToPluggableDatabaseArrayOutput() PluggableDatabaseArrayOutput {
	return o
}

func (o PluggableDatabaseArrayOutput) ToPluggableDatabaseArrayOutputWithContext(ctx context.Context) PluggableDatabaseArrayOutput {
	return o
}

func (o PluggableDatabaseArrayOutput) Index(i pulumi.IntInput) PluggableDatabaseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PluggableDatabase {
		return vs[0].([]PluggableDatabase)[vs[1].(int)]
	}).(PluggableDatabaseOutput)
}

type PluggableDatabaseMapOutput struct{ *pulumi.OutputState }

func (PluggableDatabaseMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]PluggableDatabase)(nil))
}

func (o PluggableDatabaseMapOutput) ToPluggableDatabaseMapOutput() PluggableDatabaseMapOutput {
	return o
}

func (o PluggableDatabaseMapOutput) ToPluggableDatabaseMapOutputWithContext(ctx context.Context) PluggableDatabaseMapOutput {
	return o
}

func (o PluggableDatabaseMapOutput) MapIndex(k pulumi.StringInput) PluggableDatabaseOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) PluggableDatabase {
		return vs[0].(map[string]PluggableDatabase)[vs[1].(string)]
	}).(PluggableDatabaseOutput)
}

func init() {
	pulumi.RegisterOutputType(PluggableDatabaseOutput{})
	pulumi.RegisterOutputType(PluggableDatabasePtrOutput{})
	pulumi.RegisterOutputType(PluggableDatabaseArrayOutput{})
	pulumi.RegisterOutputType(PluggableDatabaseMapOutput{})
}
