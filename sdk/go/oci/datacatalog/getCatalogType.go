// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package datacatalog

import (
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This data source provides details about a specific Catalog Type resource in Oracle Cloud Infrastructure Data Catalog service.
//
// Gets a specific type by key within a data catalog.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-oci/sdk/go/oci/datacatalog"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := datacatalog.GetCatalogType(ctx, &datacatalog.GetCatalogTypeArgs{
// 			CatalogId: oci_datacatalog_catalog.Test_catalog.Id,
// 			TypeKey:   _var.Catalog_type_type_key,
// 			Fields:    _var.Catalog_type_fields,
// 		}, nil)
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
func GetCatalogType(ctx *pulumi.Context, args *GetCatalogTypeArgs, opts ...pulumi.InvokeOption) (*GetCatalogTypeResult, error) {
	var rv GetCatalogTypeResult
	err := ctx.Invoke("oci:datacatalog/getCatalogType:getCatalogType", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getCatalogType.
type GetCatalogTypeArgs struct {
	// Unique catalog identifier.
	CatalogId string `pulumi:"catalogId"`
	// Specifies the fields to return in a type response.
	Fields []string `pulumi:"fields"`
	// Unique type key.
	TypeKey string `pulumi:"typeKey"`
}

// A collection of values returned by getCatalogType.
type GetCatalogTypeResult struct {
	// The data catalog's OCID.
	CatalogId string `pulumi:"catalogId"`
	// Detailed description of the type.
	Description string `pulumi:"description"`
	// Mapping type equivalence in the external system.
	ExternalTypeName string   `pulumi:"externalTypeName"`
	Fields           []string `pulumi:"fields"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Indicates whether the type is approved for use as a classifying object.
	IsApproved bool `pulumi:"isApproved"`
	// Indicates whether the type is internal, making it unavailable for use by metadata elements.
	IsInternal bool `pulumi:"isInternal"`
	// Indicates whether the type can be used for tagging metadata elements.
	IsTag bool `pulumi:"isTag"`
	// Unique type key that is immutable.
	Key string `pulumi:"key"`
	// The immutable name of the type.
	Name string `pulumi:"name"`
	// A map of arrays which defines the type specific properties, both required and optional. The map keys are category names and the values are arrays contiaing all property details. Every property is contained inside of a category. Most types have required properties within the "default" category. Example: `{ "properties": { "default": { "attributes:": [ { "name": "host", "type": "string", "isRequired": true, "isUpdatable": false }, ... ] } } }`
	Properties map[string]interface{} `pulumi:"properties"`
	// The current state of the type.
	State string `pulumi:"state"`
	// Indicates the category this type belongs to. For instance, data assets, connections.
	TypeCategory string `pulumi:"typeCategory"`
	TypeKey      string `pulumi:"typeKey"`
	// URI to the type instance in the API.
	Uri string `pulumi:"uri"`
}
