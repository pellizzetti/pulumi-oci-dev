// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package identity

import (
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This data source provides the list of Compartments in Oracle Cloud Infrastructure Identity service.
//
// Lists the compartments in a specified compartment. The members of the list
// returned depends on the values set for several parameters.
//
// With the exception of the tenancy (root compartment), the ListCompartments operation
// returns only the first-level child compartments in the parent compartment specified in
// `compartmentId`. The list does not include any subcompartments of the child
// compartments (grandchildren).
//
// The parameter `accessLevel` specifies whether to return only those compartments for which the
// requestor has INSPECT permissions on at least one resource directly
// or indirectly (the resource can be in a subcompartment).
//
// The parameter `compartmentIdInSubtree` applies only when you perform ListCompartments on the
// tenancy (root compartment). When set to true, the entire hierarchy of compartments can be returned.
// To get a full list of all compartments and subcompartments in the tenancy (root compartment),
// set the parameter `compartmentIdInSubtree` to true and `accessLevel` to ANY.
//
// See [Where to Get the Tenancy's OCID and User's OCID](https://docs.cloud.oracle.com/iaas/Content/API/Concepts/apisigningkey.htm#five).
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-oci/sdk/go/oci/identity"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		opt0 := _var.Compartment_access_level
// 		opt1 := _var.Compartment_compartment_id_in_subtree
// 		opt2 := _var.Compartment_name
// 		opt3 := _var.Compartment_state
// 		_, err := identity.GetCompartments(ctx, &identity.GetCompartmentsArgs{
// 			CompartmentId:          _var.Compartment_id,
// 			AccessLevel:            &opt0,
// 			CompartmentIdInSubtree: &opt1,
// 			Name:                   &opt2,
// 			State:                  &opt3,
// 		}, nil)
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
func GetCompartments(ctx *pulumi.Context, args *GetCompartmentsArgs, opts ...pulumi.InvokeOption) (*GetCompartmentsResult, error) {
	var rv GetCompartmentsResult
	err := ctx.Invoke("oci:identity/getCompartments:getCompartments", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getCompartments.
type GetCompartmentsArgs struct {
	// Valid values are `ANY` and `ACCESSIBLE`. Default is `ANY`. Setting this to `ACCESSIBLE` returns only those compartments for which the user has INSPECT permissions directly or indirectly (permissions can be on a resource in a subcompartment). For the compartments on which the user indirectly has INSPECT permissions, a restricted set of fields is returned.
	AccessLevel *string `pulumi:"accessLevel"`
	// The OCID of the compartment (remember that the tenancy is simply the root compartment).
	CompartmentId string `pulumi:"compartmentId"`
	// Default is false. Can only be set to true when performing ListCompartments on the tenancy (root compartment). When set to true, the hierarchy of compartments is traversed and all compartments and subcompartments in the tenancy are returned depending on the the setting of `accessLevel`.
	CompartmentIdInSubtree *bool                   `pulumi:"compartmentIdInSubtree"`
	Filters                []GetCompartmentsFilter `pulumi:"filters"`
	// A filter to only return resources that match the given name exactly.
	Name *string `pulumi:"name"`
	// A filter to only return resources that match the given lifecycle state.  The state value is case-insensitive.
	State *string `pulumi:"state"`
}

// A collection of values returned by getCompartments.
type GetCompartmentsResult struct {
	AccessLevel *string `pulumi:"accessLevel"`
	// The OCID of the parent compartment containing the compartment.
	CompartmentId          string `pulumi:"compartmentId"`
	CompartmentIdInSubtree *bool  `pulumi:"compartmentIdInSubtree"`
	// The list of compartments.
	Compartments []GetCompartmentsCompartment `pulumi:"compartments"`
	Filters      []GetCompartmentsFilter      `pulumi:"filters"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// The name you assign to the compartment during creation. The name must be unique across all compartments in the parent. Avoid entering confidential information.
	Name *string `pulumi:"name"`
	// The compartment's current state.
	State *string `pulumi:"state"`
}
