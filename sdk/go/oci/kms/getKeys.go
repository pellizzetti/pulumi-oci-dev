// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package kms

import (
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This data source provides the list of Keys in Oracle Cloud Infrastructure Kms service.
//
// Lists the master encryption keys in the specified vault and compartment.
//
// As a management operation, this call is subject to a Key Management limit that applies to the total number
// of requests across all management read operations. Key Management might throttle this call to reject an
// otherwise valid request when the total rate of management read operations exceeds 10 requests per second
// for a given tenancy.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-oci/sdk/go/oci/kms"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		opt0 := _var.Key_algorithm
// 		opt1 := _var.Key_length
// 		opt2 := oci_kms_curve.Test_curve.Id
// 		opt3 := _var.Key_protection_mode
// 		_, err := kms.GetKeys(ctx, &kms.GetKeysArgs{
// 			CompartmentId:      _var.Compartment_id,
// 			ManagementEndpoint: _var.Key_management_endpoint,
// 			Algorithm:          &opt0,
// 			Length:             &opt1,
// 			CurveId:            &opt2,
// 			ProtectionMode:     &opt3,
// 		}, nil)
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
func GetKeys(ctx *pulumi.Context, args *GetKeysArgs, opts ...pulumi.InvokeOption) (*GetKeysResult, error) {
	var rv GetKeysResult
	err := ctx.Invoke("oci:kms/getKeys:getKeys", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getKeys.
type GetKeysArgs struct {
	// The algorithm used by a key's key versions to encrypt or decrypt data. Currently, support includes AES, RSA, and ECDSA algorithms.
	Algorithm *string `pulumi:"algorithm"`
	// The OCID of the compartment.
	CompartmentId string `pulumi:"compartmentId"`
	// The curve ID of the keys. (This pertains only to ECDSA keys.)
	CurveId *string         `pulumi:"curveId"`
	Filters []GetKeysFilter `pulumi:"filters"`
	// The length of the key in bytes, expressed as an integer. Supported values include 16, 24, or 32.
	Length *int `pulumi:"length"`
	// The service endpoint to perform management operations against. Management operations include 'Create,' 'Update,' 'List,' 'Get,' and 'Delete' operations. See Vault Management endpoint.
	ManagementEndpoint string `pulumi:"managementEndpoint"`
	// A key's protection mode indicates how the key persists and where cryptographic operations that use the key are performed. A  protection mode of `HSM` means that the key persists on a hardware security module (HSM) and all cryptographic operations are  performed inside the HSM. A protection mode of `SOFTWARE` means that the key persists on the server, protected by the vault's  RSA wrapping key which persists on the HSM. All cryptographic operations that use a key with a protection mode of  `SOFTWARE` are performed on the server.
	ProtectionMode *string `pulumi:"protectionMode"`
}

// A collection of values returned by getKeys.
type GetKeysResult struct {
	// The algorithm used by a key's key versions to encrypt or decrypt.
	Algorithm *string `pulumi:"algorithm"`
	// The OCID of the compartment that contains this master encryption key.
	CompartmentId string `pulumi:"compartmentId"`
	// Supported curve IDs for ECDSA keys.
	CurveId *string         `pulumi:"curveId"`
	Filters []GetKeysFilter `pulumi:"filters"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// The list of keys.
	Keys []GetKeysKey `pulumi:"keys"`
	// The length of the key in bytes, expressed as an integer. Supported values include the following:
	// * AES: 16, 24, or 32
	// * RSA: 256, 384, or 512
	// * ECDSA: 32, 48, or 66
	Length             *int   `pulumi:"length"`
	ManagementEndpoint string `pulumi:"managementEndpoint"`
	// The key's protection mode indicates how the key persists and where cryptographic operations that use the key are performed. A protection mode of `HSM` means that the key persists on a hardware security module (HSM) and all cryptographic operations are performed inside the HSM. A protection mode of `SOFTWARE` means that the key persists on the server, protected by the vault's RSA wrapping key which persists  on the HSM. All cryptographic operations that use a key with a protection mode of `SOFTWARE` are performed on the server. By default,  a key's protection mode is set to `HSM`. You can't change a key's protection mode after the key is created or imported.
	ProtectionMode *string `pulumi:"protectionMode"`
}
