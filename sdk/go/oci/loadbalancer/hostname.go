// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package loadbalancer

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Import
//
// Hostnames can be imported using the `id`, e.g.
//
// ```sh
//  $ pulumi import oci:loadbalancer/hostname:Hostname test_hostname "loadBalancers/{loadBalancerId}/hostnames/{name}"
// ```
type Hostname struct {
	pulumi.CustomResourceState

	// (Updatable) A virtual hostname. For more information about virtual hostname string construction, see [Managing Request Routing](https://docs.cloud.oracle.com/iaas/Content/Balance/Tasks/managingrequest.htm#routing).  Example: `app.example.com`
	Hostname pulumi.StringOutput `pulumi:"hostname"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the load balancer to add the hostname to.
	LoadBalancerId pulumi.StringOutput `pulumi:"loadBalancerId"`
	// A friendly name for the hostname resource. It must be unique and it cannot be changed. Avoid entering confidential information.  Example: `exampleHostname001`
	Name  pulumi.StringOutput `pulumi:"name"`
	State pulumi.StringOutput `pulumi:"state"`
}

// NewHostname registers a new resource with the given unique name, arguments, and options.
func NewHostname(ctx *pulumi.Context,
	name string, args *HostnameArgs, opts ...pulumi.ResourceOption) (*Hostname, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Hostname == nil {
		return nil, errors.New("invalid value for required argument 'Hostname'")
	}
	if args.LoadBalancerId == nil {
		return nil, errors.New("invalid value for required argument 'LoadBalancerId'")
	}
	var resource Hostname
	err := ctx.RegisterResource("oci:loadbalancer/hostname:Hostname", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetHostname gets an existing Hostname resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetHostname(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *HostnameState, opts ...pulumi.ResourceOption) (*Hostname, error) {
	var resource Hostname
	err := ctx.ReadResource("oci:loadbalancer/hostname:Hostname", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Hostname resources.
type hostnameState struct {
	// (Updatable) A virtual hostname. For more information about virtual hostname string construction, see [Managing Request Routing](https://docs.cloud.oracle.com/iaas/Content/Balance/Tasks/managingrequest.htm#routing).  Example: `app.example.com`
	Hostname *string `pulumi:"hostname"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the load balancer to add the hostname to.
	LoadBalancerId *string `pulumi:"loadBalancerId"`
	// A friendly name for the hostname resource. It must be unique and it cannot be changed. Avoid entering confidential information.  Example: `exampleHostname001`
	Name  *string `pulumi:"name"`
	State *string `pulumi:"state"`
}

type HostnameState struct {
	// (Updatable) A virtual hostname. For more information about virtual hostname string construction, see [Managing Request Routing](https://docs.cloud.oracle.com/iaas/Content/Balance/Tasks/managingrequest.htm#routing).  Example: `app.example.com`
	Hostname pulumi.StringPtrInput
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the load balancer to add the hostname to.
	LoadBalancerId pulumi.StringPtrInput
	// A friendly name for the hostname resource. It must be unique and it cannot be changed. Avoid entering confidential information.  Example: `exampleHostname001`
	Name  pulumi.StringPtrInput
	State pulumi.StringPtrInput
}

func (HostnameState) ElementType() reflect.Type {
	return reflect.TypeOf((*hostnameState)(nil)).Elem()
}

type hostnameArgs struct {
	// (Updatable) A virtual hostname. For more information about virtual hostname string construction, see [Managing Request Routing](https://docs.cloud.oracle.com/iaas/Content/Balance/Tasks/managingrequest.htm#routing).  Example: `app.example.com`
	Hostname string `pulumi:"hostname"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the load balancer to add the hostname to.
	LoadBalancerId string `pulumi:"loadBalancerId"`
	// A friendly name for the hostname resource. It must be unique and it cannot be changed. Avoid entering confidential information.  Example: `exampleHostname001`
	Name *string `pulumi:"name"`
}

// The set of arguments for constructing a Hostname resource.
type HostnameArgs struct {
	// (Updatable) A virtual hostname. For more information about virtual hostname string construction, see [Managing Request Routing](https://docs.cloud.oracle.com/iaas/Content/Balance/Tasks/managingrequest.htm#routing).  Example: `app.example.com`
	Hostname pulumi.StringInput
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the load balancer to add the hostname to.
	LoadBalancerId pulumi.StringInput
	// A friendly name for the hostname resource. It must be unique and it cannot be changed. Avoid entering confidential information.  Example: `exampleHostname001`
	Name pulumi.StringPtrInput
}

func (HostnameArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*hostnameArgs)(nil)).Elem()
}

type HostnameInput interface {
	pulumi.Input

	ToHostnameOutput() HostnameOutput
	ToHostnameOutputWithContext(ctx context.Context) HostnameOutput
}

func (*Hostname) ElementType() reflect.Type {
	return reflect.TypeOf((*Hostname)(nil))
}

func (i *Hostname) ToHostnameOutput() HostnameOutput {
	return i.ToHostnameOutputWithContext(context.Background())
}

func (i *Hostname) ToHostnameOutputWithContext(ctx context.Context) HostnameOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HostnameOutput)
}

func (i *Hostname) ToHostnamePtrOutput() HostnamePtrOutput {
	return i.ToHostnamePtrOutputWithContext(context.Background())
}

func (i *Hostname) ToHostnamePtrOutputWithContext(ctx context.Context) HostnamePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HostnamePtrOutput)
}

type HostnamePtrInput interface {
	pulumi.Input

	ToHostnamePtrOutput() HostnamePtrOutput
	ToHostnamePtrOutputWithContext(ctx context.Context) HostnamePtrOutput
}

type hostnamePtrType HostnameArgs

func (*hostnamePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Hostname)(nil))
}

func (i *hostnamePtrType) ToHostnamePtrOutput() HostnamePtrOutput {
	return i.ToHostnamePtrOutputWithContext(context.Background())
}

func (i *hostnamePtrType) ToHostnamePtrOutputWithContext(ctx context.Context) HostnamePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HostnamePtrOutput)
}

// HostnameArrayInput is an input type that accepts HostnameArray and HostnameArrayOutput values.
// You can construct a concrete instance of `HostnameArrayInput` via:
//
//          HostnameArray{ HostnameArgs{...} }
type HostnameArrayInput interface {
	pulumi.Input

	ToHostnameArrayOutput() HostnameArrayOutput
	ToHostnameArrayOutputWithContext(context.Context) HostnameArrayOutput
}

type HostnameArray []HostnameInput

func (HostnameArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Hostname)(nil)).Elem()
}

func (i HostnameArray) ToHostnameArrayOutput() HostnameArrayOutput {
	return i.ToHostnameArrayOutputWithContext(context.Background())
}

func (i HostnameArray) ToHostnameArrayOutputWithContext(ctx context.Context) HostnameArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HostnameArrayOutput)
}

// HostnameMapInput is an input type that accepts HostnameMap and HostnameMapOutput values.
// You can construct a concrete instance of `HostnameMapInput` via:
//
//          HostnameMap{ "key": HostnameArgs{...} }
type HostnameMapInput interface {
	pulumi.Input

	ToHostnameMapOutput() HostnameMapOutput
	ToHostnameMapOutputWithContext(context.Context) HostnameMapOutput
}

type HostnameMap map[string]HostnameInput

func (HostnameMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Hostname)(nil)).Elem()
}

func (i HostnameMap) ToHostnameMapOutput() HostnameMapOutput {
	return i.ToHostnameMapOutputWithContext(context.Background())
}

func (i HostnameMap) ToHostnameMapOutputWithContext(ctx context.Context) HostnameMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HostnameMapOutput)
}

type HostnameOutput struct {
	*pulumi.OutputState
}

func (HostnameOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Hostname)(nil))
}

func (o HostnameOutput) ToHostnameOutput() HostnameOutput {
	return o
}

func (o HostnameOutput) ToHostnameOutputWithContext(ctx context.Context) HostnameOutput {
	return o
}

func (o HostnameOutput) ToHostnamePtrOutput() HostnamePtrOutput {
	return o.ToHostnamePtrOutputWithContext(context.Background())
}

func (o HostnameOutput) ToHostnamePtrOutputWithContext(ctx context.Context) HostnamePtrOutput {
	return o.ApplyT(func(v Hostname) *Hostname {
		return &v
	}).(HostnamePtrOutput)
}

type HostnamePtrOutput struct {
	*pulumi.OutputState
}

func (HostnamePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Hostname)(nil))
}

func (o HostnamePtrOutput) ToHostnamePtrOutput() HostnamePtrOutput {
	return o
}

func (o HostnamePtrOutput) ToHostnamePtrOutputWithContext(ctx context.Context) HostnamePtrOutput {
	return o
}

type HostnameArrayOutput struct{ *pulumi.OutputState }

func (HostnameArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Hostname)(nil))
}

func (o HostnameArrayOutput) ToHostnameArrayOutput() HostnameArrayOutput {
	return o
}

func (o HostnameArrayOutput) ToHostnameArrayOutputWithContext(ctx context.Context) HostnameArrayOutput {
	return o
}

func (o HostnameArrayOutput) Index(i pulumi.IntInput) HostnameOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Hostname {
		return vs[0].([]Hostname)[vs[1].(int)]
	}).(HostnameOutput)
}

type HostnameMapOutput struct{ *pulumi.OutputState }

func (HostnameMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]Hostname)(nil))
}

func (o HostnameMapOutput) ToHostnameMapOutput() HostnameMapOutput {
	return o
}

func (o HostnameMapOutput) ToHostnameMapOutputWithContext(ctx context.Context) HostnameMapOutput {
	return o
}

func (o HostnameMapOutput) MapIndex(k pulumi.StringInput) HostnameOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) Hostname {
		return vs[0].(map[string]Hostname)[vs[1].(string)]
	}).(HostnameOutput)
}

func init() {
	pulumi.RegisterOutputType(HostnameOutput{})
	pulumi.RegisterOutputType(HostnamePtrOutput{})
	pulumi.RegisterOutputType(HostnameArrayOutput{})
	pulumi.RegisterOutputType(HostnameMapOutput{})
}
