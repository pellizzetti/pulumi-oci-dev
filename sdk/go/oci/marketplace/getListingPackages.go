// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package marketplace

import (
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This data source provides the list of Listing Packages in Oracle Cloud Infrastructure Marketplace service.
//
// Gets the list of packages for a listing.
//
// If you plan to launch an instance from an image listing, you must first subscribe to the listing. When
// you launch the instance, you also need to provide the image ID of the listing resource version that you want.
//
// Subscribing to the listing requires you to first get a signature from the terms of use agreement for the
// listing resource version. To get the signature, issue a [GetAppCatalogListingAgreements](https://docs.cloud.oracle.com/en-us/iaas/api/#/en/iaas/latest/AppCatalogListingResourceVersionAgreements/GetAppCatalogListingAgreements) API call.
// The [AppCatalogListingResourceVersionAgreements](https://docs.cloud.oracle.com/en-us/iaas/api/#/en/iaas/latest/AppCatalogListingResourceVersionAgreements) object, including
// its signature, is returned in the response. With the signature for the terms of use agreement for the desired
// listing resource version, create a subscription by issuing a
// [CreateAppCatalogSubscription](https://docs.cloud.oracle.com/en-us/iaas/api/#/en/iaas/latest/AppCatalogSubscription/CreateAppCatalogSubscription) API call.
//
// To get the image ID to launch an instance, issue a [GetAppCatalogListingResourceVersion](https://docs.cloud.oracle.com/en-us/iaas/api/#/en/iaas/latest/AppCatalogListingResourceVersion/GetAppCatalogListingResourceVersion) API call.
// Lastly, to launch the instance, use the image ID of the listing resource version to issue a [LaunchInstance](https://docs.cloud.oracle.com/en-us/iaas/api/#/en/iaas/latest/Instance/LaunchInstance) API call.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-oci/sdk/go/oci/marketplace"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		opt0 := _var.Compartment_id
// 		opt1 := _var.Listing_package_package_type
// 		opt2 := _var.Listing_package_package_version
// 		_, err := marketplace.GetListingPackages(ctx, &marketplace.GetListingPackagesArgs{
// 			ListingId:      oci_marketplace_listing.Test_listing.Id,
// 			CompartmentId:  &opt0,
// 			PackageType:    &opt1,
// 			PackageVersion: &opt2,
// 		}, nil)
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
func GetListingPackages(ctx *pulumi.Context, args *GetListingPackagesArgs, opts ...pulumi.InvokeOption) (*GetListingPackagesResult, error) {
	var rv GetListingPackagesResult
	err := ctx.Invoke("oci:marketplace/getListingPackages:getListingPackages", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getListingPackages.
type GetListingPackagesArgs struct {
	// The unique identifier for the compartment.
	CompartmentId *string                    `pulumi:"compartmentId"`
	Filters       []GetListingPackagesFilter `pulumi:"filters"`
	// The unique identifier for the listing.
	ListingId string `pulumi:"listingId"`
	// A filter to return only packages that match the given package type exactly.
	PackageType *string `pulumi:"packageType"`
	// The version of the package. Package versions are unique within a listing.
	PackageVersion *string `pulumi:"packageVersion"`
}

// A collection of values returned by getListingPackages.
type GetListingPackagesResult struct {
	CompartmentId *string                    `pulumi:"compartmentId"`
	Filters       []GetListingPackagesFilter `pulumi:"filters"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// The ID of the listing that the specified package belongs to.
	ListingId string `pulumi:"listingId"`
	// The list of listing_packages.
	ListingPackages []GetListingPackagesListingPackage `pulumi:"listingPackages"`
	// The specified package's type.
	PackageType    *string `pulumi:"packageType"`
	PackageVersion *string `pulumi:"packageVersion"`
}
