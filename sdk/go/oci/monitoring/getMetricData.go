// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package monitoring

import (
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This data source provides the list of Metric Data in Oracle Cloud Infrastructure Monitoring service.
//
// Returns aggregated data that match the criteria specified in the request. Compartment OCID required.
// For information on metric queries, see [Building Metric Queries](https://docs.cloud.oracle.com/iaas/Content/Monitoring/Tasks/buildingqueries.htm).
// For important limits information, see [Limits on Monitoring](https://docs.cloud.oracle.com/iaas/Content/Monitoring/Concepts/monitoringoverview.htm#Limits).
//
// Transactions Per Second (TPS) per-tenancy limit for this operation: 10.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-oci/sdk/go/oci/monitoring"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		opt0 := _var.Metric_data_compartment_id_in_subtree
// 		opt1 := _var.Metric_data_end_time
// 		opt2 := _var.Metric_data_resolution
// 		opt3 := _var.Metric_data_resource_group
// 		opt4 := _var.Metric_data_start_time
// 		_, err := monitoring.GetMetricData(ctx, &monitoring.GetMetricDataArgs{
// 			CompartmentId:          _var.Compartment_id,
// 			Namespace:              _var.Metric_data_namespace,
// 			Query:                  _var.Metric_data_query,
// 			CompartmentIdInSubtree: &opt0,
// 			EndTime:                &opt1,
// 			Resolution:             &opt2,
// 			ResourceGroup:          &opt3,
// 			StartTime:              &opt4,
// 		}, nil)
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
func GetMetricData(ctx *pulumi.Context, args *GetMetricDataArgs, opts ...pulumi.InvokeOption) (*GetMetricDataResult, error) {
	var rv GetMetricDataResult
	err := ctx.Invoke("oci:monitoring/getMetricData:getMetricData", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getMetricData.
type GetMetricDataArgs struct {
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment containing the resources monitored by the metric that you are searching for. Use tenancyId to search in the root compartment.  Example: `ocid1.compartment.oc1..exampleuniqueID`
	CompartmentId string `pulumi:"compartmentId"`
	// When true, returns resources from all compartments and subcompartments. The parameter can only be set to true when compartmentId is the tenancy OCID (the tenancy is the root compartment). A true value requires the user to have tenancy-level permissions. If this requirement is not met, then the call is rejected. When false, returns resources from only the compartment specified in compartmentId. Default is false.
	CompartmentIdInSubtree *bool `pulumi:"compartmentIdInSubtree"`
	// The end of the time range to use when searching for metric data points. Format is defined by RFC3339. The response excludes metric data points for the endTime. Default value: the timestamp representing when the call was sent.  Example: `2019-02-01T02:02:29.600Z`
	EndTime *string               `pulumi:"endTime"`
	Filters []GetMetricDataFilter `pulumi:"filters"`
	// The source service or application to use when searching for metric data points to aggregate.  Example: `ociComputeagent`
	Namespace string `pulumi:"namespace"`
	// The Monitoring Query Language (MQL) expression to use when searching for metric data points to aggregate. The query must specify a metric, statistic, and interval. Supported values for  interval: `1m`-`60m` (also `1h`). You can optionally specify dimensions and grouping functions. Supported grouping functions: `grouping()`, `groupBy()`.
	Query string `pulumi:"query"`
	// The time between calculated aggregation windows. Use with the query interval to vary the frequency at which aggregated data points are returned. For example, use a query interval of 5 minutes with a resolution of 1 minute to retrieve five-minute aggregations at a one-minute frequency. The resolution must be equal or less than the interval in the query. The default resolution is 1m (one minute). Supported values: `1m`-`60m` (also `1h`).  Example: `5m`
	Resolution *string `pulumi:"resolution"`
	// Resource group that you want to use as a filter. The specified resource group must exist in the definition of the posted metric. Only one resource group can be applied per metric. A valid resourceGroup value starts with an alphabetical character and includes only alphanumeric characters, periods (.), underscores (_), hyphens (-), and dollar signs ($). Avoid entering confidential information.  Example: `frontend-fleet`
	ResourceGroup *string `pulumi:"resourceGroup"`
	// The beginning of the time range to use when searching for metric data points. Format is defined by RFC3339. The response includes metric data points for the startTime. Default value: the timestamp 3 hours before the call was sent.  Example: `2019-02-01T01:02:29.600Z`
	StartTime *string `pulumi:"startTime"`
}

// A collection of values returned by getMetricData.
type GetMetricDataResult struct {
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment containing the resources from which the aggregated data was returned.
	CompartmentId          string                `pulumi:"compartmentId"`
	CompartmentIdInSubtree *bool                 `pulumi:"compartmentIdInSubtree"`
	EndTime                *string               `pulumi:"endTime"`
	Filters                []GetMetricDataFilter `pulumi:"filters"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// The list of metric_data.
	MetricDatas []GetMetricDataMetricData `pulumi:"metricDatas"`
	// The reference provided in a metric definition to indicate the source service or application that emitted the metric.  Example: `ociComputeagent`
	Namespace string `pulumi:"namespace"`
	Query     string `pulumi:"query"`
	// The time between calculated aggregation windows. Use with the query interval to vary the frequency at which aggregated data points are returned. For example, use a query interval of 5 minutes with a resolution of 1 minute to retrieve five-minute aggregations at a one-minute frequency. The resolution must be equal or less than the interval in the query. The default resolution is 1m (one minute). Supported values: `1m`-`60m` (also `1h`).  Example: `5m`
	Resolution *string `pulumi:"resolution"`
	// Resource group provided with the posted metric. A resource group is a custom string that can be used as a filter. Only one resource group can be applied per metric. A valid resourceGroup value starts with an alphabetical character and includes only alphanumeric characters, periods (.), underscores (_), hyphens (-), and dollar signs ($). Avoid entering confidential information.  Example: `frontend-fleet`
	ResourceGroup *string `pulumi:"resourceGroup"`
	StartTime     *string `pulumi:"startTime"`
}
