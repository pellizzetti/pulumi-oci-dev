// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package mysql

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type AnalyticsClusterClusterNode struct {
	// The ID of the node within MySQL Analytics Cluster.
	NodeId *string `pulumi:"nodeId"`
	// (Updatable) The target state for the Analytics Cluster. Could be set to `ACTIVE` or `INACTIVE`.
	State *string `pulumi:"state"`
	// The date and time the Analytics Cluster was created, as described by [RFC 3339](https://tools.ietf.org/rfc/rfc3339).
	TimeCreated *string `pulumi:"timeCreated"`
	// The time the Analytics Cluster was last updated, as described by [RFC 3339](https://tools.ietf.org/rfc/rfc3339).
	TimeUpdated *string `pulumi:"timeUpdated"`
}

// AnalyticsClusterClusterNodeInput is an input type that accepts AnalyticsClusterClusterNodeArgs and AnalyticsClusterClusterNodeOutput values.
// You can construct a concrete instance of `AnalyticsClusterClusterNodeInput` via:
//
//          AnalyticsClusterClusterNodeArgs{...}
type AnalyticsClusterClusterNodeInput interface {
	pulumi.Input

	ToAnalyticsClusterClusterNodeOutput() AnalyticsClusterClusterNodeOutput
	ToAnalyticsClusterClusterNodeOutputWithContext(context.Context) AnalyticsClusterClusterNodeOutput
}

type AnalyticsClusterClusterNodeArgs struct {
	// The ID of the node within MySQL Analytics Cluster.
	NodeId pulumi.StringPtrInput `pulumi:"nodeId"`
	// (Updatable) The target state for the Analytics Cluster. Could be set to `ACTIVE` or `INACTIVE`.
	State pulumi.StringPtrInput `pulumi:"state"`
	// The date and time the Analytics Cluster was created, as described by [RFC 3339](https://tools.ietf.org/rfc/rfc3339).
	TimeCreated pulumi.StringPtrInput `pulumi:"timeCreated"`
	// The time the Analytics Cluster was last updated, as described by [RFC 3339](https://tools.ietf.org/rfc/rfc3339).
	TimeUpdated pulumi.StringPtrInput `pulumi:"timeUpdated"`
}

func (AnalyticsClusterClusterNodeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AnalyticsClusterClusterNode)(nil)).Elem()
}

func (i AnalyticsClusterClusterNodeArgs) ToAnalyticsClusterClusterNodeOutput() AnalyticsClusterClusterNodeOutput {
	return i.ToAnalyticsClusterClusterNodeOutputWithContext(context.Background())
}

func (i AnalyticsClusterClusterNodeArgs) ToAnalyticsClusterClusterNodeOutputWithContext(ctx context.Context) AnalyticsClusterClusterNodeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnalyticsClusterClusterNodeOutput)
}

// AnalyticsClusterClusterNodeArrayInput is an input type that accepts AnalyticsClusterClusterNodeArray and AnalyticsClusterClusterNodeArrayOutput values.
// You can construct a concrete instance of `AnalyticsClusterClusterNodeArrayInput` via:
//
//          AnalyticsClusterClusterNodeArray{ AnalyticsClusterClusterNodeArgs{...} }
type AnalyticsClusterClusterNodeArrayInput interface {
	pulumi.Input

	ToAnalyticsClusterClusterNodeArrayOutput() AnalyticsClusterClusterNodeArrayOutput
	ToAnalyticsClusterClusterNodeArrayOutputWithContext(context.Context) AnalyticsClusterClusterNodeArrayOutput
}

type AnalyticsClusterClusterNodeArray []AnalyticsClusterClusterNodeInput

func (AnalyticsClusterClusterNodeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AnalyticsClusterClusterNode)(nil)).Elem()
}

func (i AnalyticsClusterClusterNodeArray) ToAnalyticsClusterClusterNodeArrayOutput() AnalyticsClusterClusterNodeArrayOutput {
	return i.ToAnalyticsClusterClusterNodeArrayOutputWithContext(context.Background())
}

func (i AnalyticsClusterClusterNodeArray) ToAnalyticsClusterClusterNodeArrayOutputWithContext(ctx context.Context) AnalyticsClusterClusterNodeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnalyticsClusterClusterNodeArrayOutput)
}

type AnalyticsClusterClusterNodeOutput struct{ *pulumi.OutputState }

func (AnalyticsClusterClusterNodeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AnalyticsClusterClusterNode)(nil)).Elem()
}

func (o AnalyticsClusterClusterNodeOutput) ToAnalyticsClusterClusterNodeOutput() AnalyticsClusterClusterNodeOutput {
	return o
}

func (o AnalyticsClusterClusterNodeOutput) ToAnalyticsClusterClusterNodeOutputWithContext(ctx context.Context) AnalyticsClusterClusterNodeOutput {
	return o
}

// The ID of the node within MySQL Analytics Cluster.
func (o AnalyticsClusterClusterNodeOutput) NodeId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AnalyticsClusterClusterNode) *string { return v.NodeId }).(pulumi.StringPtrOutput)
}

// (Updatable) The target state for the Analytics Cluster. Could be set to `ACTIVE` or `INACTIVE`.
func (o AnalyticsClusterClusterNodeOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AnalyticsClusterClusterNode) *string { return v.State }).(pulumi.StringPtrOutput)
}

// The date and time the Analytics Cluster was created, as described by [RFC 3339](https://tools.ietf.org/rfc/rfc3339).
func (o AnalyticsClusterClusterNodeOutput) TimeCreated() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AnalyticsClusterClusterNode) *string { return v.TimeCreated }).(pulumi.StringPtrOutput)
}

// The time the Analytics Cluster was last updated, as described by [RFC 3339](https://tools.ietf.org/rfc/rfc3339).
func (o AnalyticsClusterClusterNodeOutput) TimeUpdated() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AnalyticsClusterClusterNode) *string { return v.TimeUpdated }).(pulumi.StringPtrOutput)
}

type AnalyticsClusterClusterNodeArrayOutput struct{ *pulumi.OutputState }

func (AnalyticsClusterClusterNodeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AnalyticsClusterClusterNode)(nil)).Elem()
}

func (o AnalyticsClusterClusterNodeArrayOutput) ToAnalyticsClusterClusterNodeArrayOutput() AnalyticsClusterClusterNodeArrayOutput {
	return o
}

func (o AnalyticsClusterClusterNodeArrayOutput) ToAnalyticsClusterClusterNodeArrayOutputWithContext(ctx context.Context) AnalyticsClusterClusterNodeArrayOutput {
	return o
}

func (o AnalyticsClusterClusterNodeArrayOutput) Index(i pulumi.IntInput) AnalyticsClusterClusterNodeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AnalyticsClusterClusterNode {
		return vs[0].([]AnalyticsClusterClusterNode)[vs[1].(int)]
	}).(AnalyticsClusterClusterNodeOutput)
}

type ChannelSource struct {
	// (Updatable) The network address of the MySQL instance.
	Hostname string `pulumi:"hostname"`
	// (Updatable) The password for the replication user. The password must be between 8 and 32 characters long, and must contain at least 1 numeric character, 1 lowercase character, 1 uppercase character, and 1 special (nonalphanumeric) character.
	Password string `pulumi:"password"`
	// (Updatable) The port the source MySQL instance listens on.
	Port *int `pulumi:"port"`
	// (Updatable) The specific source identifier.
	SourceType string `pulumi:"sourceType"`
	// (Updatable) The CA certificate of the server used for VERIFY_IDENTITY and VERIFY_CA ssl modes.
	SslCaCertificate *ChannelSourceSslCaCertificate `pulumi:"sslCaCertificate"`
	// (Updatable) The SSL mode of the Channel.
	SslMode string `pulumi:"sslMode"`
	// (Updatable) The name of the replication user on the source MySQL instance. The username has a maximum length of 96 characters. For more information, please see the [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/change-master-to.html)
	Username string `pulumi:"username"`
}

// ChannelSourceInput is an input type that accepts ChannelSourceArgs and ChannelSourceOutput values.
// You can construct a concrete instance of `ChannelSourceInput` via:
//
//          ChannelSourceArgs{...}
type ChannelSourceInput interface {
	pulumi.Input

	ToChannelSourceOutput() ChannelSourceOutput
	ToChannelSourceOutputWithContext(context.Context) ChannelSourceOutput
}

type ChannelSourceArgs struct {
	// (Updatable) The network address of the MySQL instance.
	Hostname pulumi.StringInput `pulumi:"hostname"`
	// (Updatable) The password for the replication user. The password must be between 8 and 32 characters long, and must contain at least 1 numeric character, 1 lowercase character, 1 uppercase character, and 1 special (nonalphanumeric) character.
	Password pulumi.StringInput `pulumi:"password"`
	// (Updatable) The port the source MySQL instance listens on.
	Port pulumi.IntPtrInput `pulumi:"port"`
	// (Updatable) The specific source identifier.
	SourceType pulumi.StringInput `pulumi:"sourceType"`
	// (Updatable) The CA certificate of the server used for VERIFY_IDENTITY and VERIFY_CA ssl modes.
	SslCaCertificate ChannelSourceSslCaCertificatePtrInput `pulumi:"sslCaCertificate"`
	// (Updatable) The SSL mode of the Channel.
	SslMode pulumi.StringInput `pulumi:"sslMode"`
	// (Updatable) The name of the replication user on the source MySQL instance. The username has a maximum length of 96 characters. For more information, please see the [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/change-master-to.html)
	Username pulumi.StringInput `pulumi:"username"`
}

func (ChannelSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelSource)(nil)).Elem()
}

func (i ChannelSourceArgs) ToChannelSourceOutput() ChannelSourceOutput {
	return i.ToChannelSourceOutputWithContext(context.Background())
}

func (i ChannelSourceArgs) ToChannelSourceOutputWithContext(ctx context.Context) ChannelSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChannelSourceOutput)
}

func (i ChannelSourceArgs) ToChannelSourcePtrOutput() ChannelSourcePtrOutput {
	return i.ToChannelSourcePtrOutputWithContext(context.Background())
}

func (i ChannelSourceArgs) ToChannelSourcePtrOutputWithContext(ctx context.Context) ChannelSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChannelSourceOutput).ToChannelSourcePtrOutputWithContext(ctx)
}

// ChannelSourcePtrInput is an input type that accepts ChannelSourceArgs, ChannelSourcePtr and ChannelSourcePtrOutput values.
// You can construct a concrete instance of `ChannelSourcePtrInput` via:
//
//          ChannelSourceArgs{...}
//
//  or:
//
//          nil
type ChannelSourcePtrInput interface {
	pulumi.Input

	ToChannelSourcePtrOutput() ChannelSourcePtrOutput
	ToChannelSourcePtrOutputWithContext(context.Context) ChannelSourcePtrOutput
}

type channelSourcePtrType ChannelSourceArgs

func ChannelSourcePtr(v *ChannelSourceArgs) ChannelSourcePtrInput {
	return (*channelSourcePtrType)(v)
}

func (*channelSourcePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ChannelSource)(nil)).Elem()
}

func (i *channelSourcePtrType) ToChannelSourcePtrOutput() ChannelSourcePtrOutput {
	return i.ToChannelSourcePtrOutputWithContext(context.Background())
}

func (i *channelSourcePtrType) ToChannelSourcePtrOutputWithContext(ctx context.Context) ChannelSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChannelSourcePtrOutput)
}

type ChannelSourceOutput struct{ *pulumi.OutputState }

func (ChannelSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelSource)(nil)).Elem()
}

func (o ChannelSourceOutput) ToChannelSourceOutput() ChannelSourceOutput {
	return o
}

func (o ChannelSourceOutput) ToChannelSourceOutputWithContext(ctx context.Context) ChannelSourceOutput {
	return o
}

func (o ChannelSourceOutput) ToChannelSourcePtrOutput() ChannelSourcePtrOutput {
	return o.ToChannelSourcePtrOutputWithContext(context.Background())
}

func (o ChannelSourceOutput) ToChannelSourcePtrOutputWithContext(ctx context.Context) ChannelSourcePtrOutput {
	return o.ApplyT(func(v ChannelSource) *ChannelSource {
		return &v
	}).(ChannelSourcePtrOutput)
}

// (Updatable) The network address of the MySQL instance.
func (o ChannelSourceOutput) Hostname() pulumi.StringOutput {
	return o.ApplyT(func(v ChannelSource) string { return v.Hostname }).(pulumi.StringOutput)
}

// (Updatable) The password for the replication user. The password must be between 8 and 32 characters long, and must contain at least 1 numeric character, 1 lowercase character, 1 uppercase character, and 1 special (nonalphanumeric) character.
func (o ChannelSourceOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v ChannelSource) string { return v.Password }).(pulumi.StringOutput)
}

// (Updatable) The port the source MySQL instance listens on.
func (o ChannelSourceOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ChannelSource) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// (Updatable) The specific source identifier.
func (o ChannelSourceOutput) SourceType() pulumi.StringOutput {
	return o.ApplyT(func(v ChannelSource) string { return v.SourceType }).(pulumi.StringOutput)
}

// (Updatable) The CA certificate of the server used for VERIFY_IDENTITY and VERIFY_CA ssl modes.
func (o ChannelSourceOutput) SslCaCertificate() ChannelSourceSslCaCertificatePtrOutput {
	return o.ApplyT(func(v ChannelSource) *ChannelSourceSslCaCertificate { return v.SslCaCertificate }).(ChannelSourceSslCaCertificatePtrOutput)
}

// (Updatable) The SSL mode of the Channel.
func (o ChannelSourceOutput) SslMode() pulumi.StringOutput {
	return o.ApplyT(func(v ChannelSource) string { return v.SslMode }).(pulumi.StringOutput)
}

// (Updatable) The name of the replication user on the source MySQL instance. The username has a maximum length of 96 characters. For more information, please see the [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/change-master-to.html)
func (o ChannelSourceOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v ChannelSource) string { return v.Username }).(pulumi.StringOutput)
}

type ChannelSourcePtrOutput struct{ *pulumi.OutputState }

func (ChannelSourcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ChannelSource)(nil)).Elem()
}

func (o ChannelSourcePtrOutput) ToChannelSourcePtrOutput() ChannelSourcePtrOutput {
	return o
}

func (o ChannelSourcePtrOutput) ToChannelSourcePtrOutputWithContext(ctx context.Context) ChannelSourcePtrOutput {
	return o
}

func (o ChannelSourcePtrOutput) Elem() ChannelSourceOutput {
	return o.ApplyT(func(v *ChannelSource) ChannelSource { return *v }).(ChannelSourceOutput)
}

// (Updatable) The network address of the MySQL instance.
func (o ChannelSourcePtrOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ChannelSource) *string {
		if v == nil {
			return nil
		}
		return &v.Hostname
	}).(pulumi.StringPtrOutput)
}

// (Updatable) The password for the replication user. The password must be between 8 and 32 characters long, and must contain at least 1 numeric character, 1 lowercase character, 1 uppercase character, and 1 special (nonalphanumeric) character.
func (o ChannelSourcePtrOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ChannelSource) *string {
		if v == nil {
			return nil
		}
		return &v.Password
	}).(pulumi.StringPtrOutput)
}

// (Updatable) The port the source MySQL instance listens on.
func (o ChannelSourcePtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ChannelSource) *int {
		if v == nil {
			return nil
		}
		return v.Port
	}).(pulumi.IntPtrOutput)
}

// (Updatable) The specific source identifier.
func (o ChannelSourcePtrOutput) SourceType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ChannelSource) *string {
		if v == nil {
			return nil
		}
		return &v.SourceType
	}).(pulumi.StringPtrOutput)
}

// (Updatable) The CA certificate of the server used for VERIFY_IDENTITY and VERIFY_CA ssl modes.
func (o ChannelSourcePtrOutput) SslCaCertificate() ChannelSourceSslCaCertificatePtrOutput {
	return o.ApplyT(func(v *ChannelSource) *ChannelSourceSslCaCertificate {
		if v == nil {
			return nil
		}
		return v.SslCaCertificate
	}).(ChannelSourceSslCaCertificatePtrOutput)
}

// (Updatable) The SSL mode of the Channel.
func (o ChannelSourcePtrOutput) SslMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ChannelSource) *string {
		if v == nil {
			return nil
		}
		return &v.SslMode
	}).(pulumi.StringPtrOutput)
}

// (Updatable) The name of the replication user on the source MySQL instance. The username has a maximum length of 96 characters. For more information, please see the [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/change-master-to.html)
func (o ChannelSourcePtrOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ChannelSource) *string {
		if v == nil {
			return nil
		}
		return &v.Username
	}).(pulumi.StringPtrOutput)
}

type ChannelSourceSslCaCertificate struct {
	// (Updatable) The type of CA certificate.
	CertificateType string `pulumi:"certificateType"`
	// (Updatable) The string containing the CA certificate in PEM format.
	Contents string `pulumi:"contents"`
}

// ChannelSourceSslCaCertificateInput is an input type that accepts ChannelSourceSslCaCertificateArgs and ChannelSourceSslCaCertificateOutput values.
// You can construct a concrete instance of `ChannelSourceSslCaCertificateInput` via:
//
//          ChannelSourceSslCaCertificateArgs{...}
type ChannelSourceSslCaCertificateInput interface {
	pulumi.Input

	ToChannelSourceSslCaCertificateOutput() ChannelSourceSslCaCertificateOutput
	ToChannelSourceSslCaCertificateOutputWithContext(context.Context) ChannelSourceSslCaCertificateOutput
}

type ChannelSourceSslCaCertificateArgs struct {
	// (Updatable) The type of CA certificate.
	CertificateType pulumi.StringInput `pulumi:"certificateType"`
	// (Updatable) The string containing the CA certificate in PEM format.
	Contents pulumi.StringInput `pulumi:"contents"`
}

func (ChannelSourceSslCaCertificateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelSourceSslCaCertificate)(nil)).Elem()
}

func (i ChannelSourceSslCaCertificateArgs) ToChannelSourceSslCaCertificateOutput() ChannelSourceSslCaCertificateOutput {
	return i.ToChannelSourceSslCaCertificateOutputWithContext(context.Background())
}

func (i ChannelSourceSslCaCertificateArgs) ToChannelSourceSslCaCertificateOutputWithContext(ctx context.Context) ChannelSourceSslCaCertificateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChannelSourceSslCaCertificateOutput)
}

func (i ChannelSourceSslCaCertificateArgs) ToChannelSourceSslCaCertificatePtrOutput() ChannelSourceSslCaCertificatePtrOutput {
	return i.ToChannelSourceSslCaCertificatePtrOutputWithContext(context.Background())
}

func (i ChannelSourceSslCaCertificateArgs) ToChannelSourceSslCaCertificatePtrOutputWithContext(ctx context.Context) ChannelSourceSslCaCertificatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChannelSourceSslCaCertificateOutput).ToChannelSourceSslCaCertificatePtrOutputWithContext(ctx)
}

// ChannelSourceSslCaCertificatePtrInput is an input type that accepts ChannelSourceSslCaCertificateArgs, ChannelSourceSslCaCertificatePtr and ChannelSourceSslCaCertificatePtrOutput values.
// You can construct a concrete instance of `ChannelSourceSslCaCertificatePtrInput` via:
//
//          ChannelSourceSslCaCertificateArgs{...}
//
//  or:
//
//          nil
type ChannelSourceSslCaCertificatePtrInput interface {
	pulumi.Input

	ToChannelSourceSslCaCertificatePtrOutput() ChannelSourceSslCaCertificatePtrOutput
	ToChannelSourceSslCaCertificatePtrOutputWithContext(context.Context) ChannelSourceSslCaCertificatePtrOutput
}

type channelSourceSslCaCertificatePtrType ChannelSourceSslCaCertificateArgs

func ChannelSourceSslCaCertificatePtr(v *ChannelSourceSslCaCertificateArgs) ChannelSourceSslCaCertificatePtrInput {
	return (*channelSourceSslCaCertificatePtrType)(v)
}

func (*channelSourceSslCaCertificatePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ChannelSourceSslCaCertificate)(nil)).Elem()
}

func (i *channelSourceSslCaCertificatePtrType) ToChannelSourceSslCaCertificatePtrOutput() ChannelSourceSslCaCertificatePtrOutput {
	return i.ToChannelSourceSslCaCertificatePtrOutputWithContext(context.Background())
}

func (i *channelSourceSslCaCertificatePtrType) ToChannelSourceSslCaCertificatePtrOutputWithContext(ctx context.Context) ChannelSourceSslCaCertificatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChannelSourceSslCaCertificatePtrOutput)
}

type ChannelSourceSslCaCertificateOutput struct{ *pulumi.OutputState }

func (ChannelSourceSslCaCertificateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelSourceSslCaCertificate)(nil)).Elem()
}

func (o ChannelSourceSslCaCertificateOutput) ToChannelSourceSslCaCertificateOutput() ChannelSourceSslCaCertificateOutput {
	return o
}

func (o ChannelSourceSslCaCertificateOutput) ToChannelSourceSslCaCertificateOutputWithContext(ctx context.Context) ChannelSourceSslCaCertificateOutput {
	return o
}

func (o ChannelSourceSslCaCertificateOutput) ToChannelSourceSslCaCertificatePtrOutput() ChannelSourceSslCaCertificatePtrOutput {
	return o.ToChannelSourceSslCaCertificatePtrOutputWithContext(context.Background())
}

func (o ChannelSourceSslCaCertificateOutput) ToChannelSourceSslCaCertificatePtrOutputWithContext(ctx context.Context) ChannelSourceSslCaCertificatePtrOutput {
	return o.ApplyT(func(v ChannelSourceSslCaCertificate) *ChannelSourceSslCaCertificate {
		return &v
	}).(ChannelSourceSslCaCertificatePtrOutput)
}

// (Updatable) The type of CA certificate.
func (o ChannelSourceSslCaCertificateOutput) CertificateType() pulumi.StringOutput {
	return o.ApplyT(func(v ChannelSourceSslCaCertificate) string { return v.CertificateType }).(pulumi.StringOutput)
}

// (Updatable) The string containing the CA certificate in PEM format.
func (o ChannelSourceSslCaCertificateOutput) Contents() pulumi.StringOutput {
	return o.ApplyT(func(v ChannelSourceSslCaCertificate) string { return v.Contents }).(pulumi.StringOutput)
}

type ChannelSourceSslCaCertificatePtrOutput struct{ *pulumi.OutputState }

func (ChannelSourceSslCaCertificatePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ChannelSourceSslCaCertificate)(nil)).Elem()
}

func (o ChannelSourceSslCaCertificatePtrOutput) ToChannelSourceSslCaCertificatePtrOutput() ChannelSourceSslCaCertificatePtrOutput {
	return o
}

func (o ChannelSourceSslCaCertificatePtrOutput) ToChannelSourceSslCaCertificatePtrOutputWithContext(ctx context.Context) ChannelSourceSslCaCertificatePtrOutput {
	return o
}

func (o ChannelSourceSslCaCertificatePtrOutput) Elem() ChannelSourceSslCaCertificateOutput {
	return o.ApplyT(func(v *ChannelSourceSslCaCertificate) ChannelSourceSslCaCertificate { return *v }).(ChannelSourceSslCaCertificateOutput)
}

// (Updatable) The type of CA certificate.
func (o ChannelSourceSslCaCertificatePtrOutput) CertificateType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ChannelSourceSslCaCertificate) *string {
		if v == nil {
			return nil
		}
		return &v.CertificateType
	}).(pulumi.StringPtrOutput)
}

// (Updatable) The string containing the CA certificate in PEM format.
func (o ChannelSourceSslCaCertificatePtrOutput) Contents() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ChannelSourceSslCaCertificate) *string {
		if v == nil {
			return nil
		}
		return &v.Contents
	}).(pulumi.StringPtrOutput)
}

type ChannelTarget struct {
	// (Updatable) The username for the replication applier of the target MySQL DB System.
	ApplierUsername *string `pulumi:"applierUsername"`
	// (Updatable) The case-insensitive name that identifies the replication channel. Channel names must follow the rules defined for [MySQL identifiers](https://dev.mysql.com/doc/refman/8.0/en/identifiers.html). The names of non-Deleted Channels must be unique for each DB System.
	ChannelName *string `pulumi:"channelName"`
	// The OCID of the target DB System.
	DbSystemId string `pulumi:"dbSystemId"`
	// (Updatable) The specific target identifier.
	TargetType string `pulumi:"targetType"`
}

// ChannelTargetInput is an input type that accepts ChannelTargetArgs and ChannelTargetOutput values.
// You can construct a concrete instance of `ChannelTargetInput` via:
//
//          ChannelTargetArgs{...}
type ChannelTargetInput interface {
	pulumi.Input

	ToChannelTargetOutput() ChannelTargetOutput
	ToChannelTargetOutputWithContext(context.Context) ChannelTargetOutput
}

type ChannelTargetArgs struct {
	// (Updatable) The username for the replication applier of the target MySQL DB System.
	ApplierUsername pulumi.StringPtrInput `pulumi:"applierUsername"`
	// (Updatable) The case-insensitive name that identifies the replication channel. Channel names must follow the rules defined for [MySQL identifiers](https://dev.mysql.com/doc/refman/8.0/en/identifiers.html). The names of non-Deleted Channels must be unique for each DB System.
	ChannelName pulumi.StringPtrInput `pulumi:"channelName"`
	// The OCID of the target DB System.
	DbSystemId pulumi.StringInput `pulumi:"dbSystemId"`
	// (Updatable) The specific target identifier.
	TargetType pulumi.StringInput `pulumi:"targetType"`
}

func (ChannelTargetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelTarget)(nil)).Elem()
}

func (i ChannelTargetArgs) ToChannelTargetOutput() ChannelTargetOutput {
	return i.ToChannelTargetOutputWithContext(context.Background())
}

func (i ChannelTargetArgs) ToChannelTargetOutputWithContext(ctx context.Context) ChannelTargetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChannelTargetOutput)
}

func (i ChannelTargetArgs) ToChannelTargetPtrOutput() ChannelTargetPtrOutput {
	return i.ToChannelTargetPtrOutputWithContext(context.Background())
}

func (i ChannelTargetArgs) ToChannelTargetPtrOutputWithContext(ctx context.Context) ChannelTargetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChannelTargetOutput).ToChannelTargetPtrOutputWithContext(ctx)
}

// ChannelTargetPtrInput is an input type that accepts ChannelTargetArgs, ChannelTargetPtr and ChannelTargetPtrOutput values.
// You can construct a concrete instance of `ChannelTargetPtrInput` via:
//
//          ChannelTargetArgs{...}
//
//  or:
//
//          nil
type ChannelTargetPtrInput interface {
	pulumi.Input

	ToChannelTargetPtrOutput() ChannelTargetPtrOutput
	ToChannelTargetPtrOutputWithContext(context.Context) ChannelTargetPtrOutput
}

type channelTargetPtrType ChannelTargetArgs

func ChannelTargetPtr(v *ChannelTargetArgs) ChannelTargetPtrInput {
	return (*channelTargetPtrType)(v)
}

func (*channelTargetPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ChannelTarget)(nil)).Elem()
}

func (i *channelTargetPtrType) ToChannelTargetPtrOutput() ChannelTargetPtrOutput {
	return i.ToChannelTargetPtrOutputWithContext(context.Background())
}

func (i *channelTargetPtrType) ToChannelTargetPtrOutputWithContext(ctx context.Context) ChannelTargetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChannelTargetPtrOutput)
}

type ChannelTargetOutput struct{ *pulumi.OutputState }

func (ChannelTargetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelTarget)(nil)).Elem()
}

func (o ChannelTargetOutput) ToChannelTargetOutput() ChannelTargetOutput {
	return o
}

func (o ChannelTargetOutput) ToChannelTargetOutputWithContext(ctx context.Context) ChannelTargetOutput {
	return o
}

func (o ChannelTargetOutput) ToChannelTargetPtrOutput() ChannelTargetPtrOutput {
	return o.ToChannelTargetPtrOutputWithContext(context.Background())
}

func (o ChannelTargetOutput) ToChannelTargetPtrOutputWithContext(ctx context.Context) ChannelTargetPtrOutput {
	return o.ApplyT(func(v ChannelTarget) *ChannelTarget {
		return &v
	}).(ChannelTargetPtrOutput)
}

// (Updatable) The username for the replication applier of the target MySQL DB System.
func (o ChannelTargetOutput) ApplierUsername() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ChannelTarget) *string { return v.ApplierUsername }).(pulumi.StringPtrOutput)
}

// (Updatable) The case-insensitive name that identifies the replication channel. Channel names must follow the rules defined for [MySQL identifiers](https://dev.mysql.com/doc/refman/8.0/en/identifiers.html). The names of non-Deleted Channels must be unique for each DB System.
func (o ChannelTargetOutput) ChannelName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ChannelTarget) *string { return v.ChannelName }).(pulumi.StringPtrOutput)
}

// The OCID of the target DB System.
func (o ChannelTargetOutput) DbSystemId() pulumi.StringOutput {
	return o.ApplyT(func(v ChannelTarget) string { return v.DbSystemId }).(pulumi.StringOutput)
}

// (Updatable) The specific target identifier.
func (o ChannelTargetOutput) TargetType() pulumi.StringOutput {
	return o.ApplyT(func(v ChannelTarget) string { return v.TargetType }).(pulumi.StringOutput)
}

type ChannelTargetPtrOutput struct{ *pulumi.OutputState }

func (ChannelTargetPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ChannelTarget)(nil)).Elem()
}

func (o ChannelTargetPtrOutput) ToChannelTargetPtrOutput() ChannelTargetPtrOutput {
	return o
}

func (o ChannelTargetPtrOutput) ToChannelTargetPtrOutputWithContext(ctx context.Context) ChannelTargetPtrOutput {
	return o
}

func (o ChannelTargetPtrOutput) Elem() ChannelTargetOutput {
	return o.ApplyT(func(v *ChannelTarget) ChannelTarget { return *v }).(ChannelTargetOutput)
}

// (Updatable) The username for the replication applier of the target MySQL DB System.
func (o ChannelTargetPtrOutput) ApplierUsername() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ChannelTarget) *string {
		if v == nil {
			return nil
		}
		return v.ApplierUsername
	}).(pulumi.StringPtrOutput)
}

// (Updatable) The case-insensitive name that identifies the replication channel. Channel names must follow the rules defined for [MySQL identifiers](https://dev.mysql.com/doc/refman/8.0/en/identifiers.html). The names of non-Deleted Channels must be unique for each DB System.
func (o ChannelTargetPtrOutput) ChannelName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ChannelTarget) *string {
		if v == nil {
			return nil
		}
		return v.ChannelName
	}).(pulumi.StringPtrOutput)
}

// The OCID of the target DB System.
func (o ChannelTargetPtrOutput) DbSystemId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ChannelTarget) *string {
		if v == nil {
			return nil
		}
		return &v.DbSystemId
	}).(pulumi.StringPtrOutput)
}

// (Updatable) The specific target identifier.
func (o ChannelTargetPtrOutput) TargetType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ChannelTarget) *string {
		if v == nil {
			return nil
		}
		return &v.TargetType
	}).(pulumi.StringPtrOutput)
}

type HeatWaveClusterClusterNode struct {
	// The ID of the node within MySQL HeatWave cluster.
	NodeId *string `pulumi:"nodeId"`
	// (Updatable) The target state for the HeatWave cluster. Could be set to `ACTIVE` or `INACTIVE`.
	State *string `pulumi:"state"`
	// The date and time the HeatWave cluster was created, as described by [RFC 3339](https://tools.ietf.org/rfc/rfc3339).
	TimeCreated *string `pulumi:"timeCreated"`
	// The time the HeatWave cluster was last updated, as described by [RFC 3339](https://tools.ietf.org/rfc/rfc3339).
	TimeUpdated *string `pulumi:"timeUpdated"`
}

// HeatWaveClusterClusterNodeInput is an input type that accepts HeatWaveClusterClusterNodeArgs and HeatWaveClusterClusterNodeOutput values.
// You can construct a concrete instance of `HeatWaveClusterClusterNodeInput` via:
//
//          HeatWaveClusterClusterNodeArgs{...}
type HeatWaveClusterClusterNodeInput interface {
	pulumi.Input

	ToHeatWaveClusterClusterNodeOutput() HeatWaveClusterClusterNodeOutput
	ToHeatWaveClusterClusterNodeOutputWithContext(context.Context) HeatWaveClusterClusterNodeOutput
}

type HeatWaveClusterClusterNodeArgs struct {
	// The ID of the node within MySQL HeatWave cluster.
	NodeId pulumi.StringPtrInput `pulumi:"nodeId"`
	// (Updatable) The target state for the HeatWave cluster. Could be set to `ACTIVE` or `INACTIVE`.
	State pulumi.StringPtrInput `pulumi:"state"`
	// The date and time the HeatWave cluster was created, as described by [RFC 3339](https://tools.ietf.org/rfc/rfc3339).
	TimeCreated pulumi.StringPtrInput `pulumi:"timeCreated"`
	// The time the HeatWave cluster was last updated, as described by [RFC 3339](https://tools.ietf.org/rfc/rfc3339).
	TimeUpdated pulumi.StringPtrInput `pulumi:"timeUpdated"`
}

func (HeatWaveClusterClusterNodeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HeatWaveClusterClusterNode)(nil)).Elem()
}

func (i HeatWaveClusterClusterNodeArgs) ToHeatWaveClusterClusterNodeOutput() HeatWaveClusterClusterNodeOutput {
	return i.ToHeatWaveClusterClusterNodeOutputWithContext(context.Background())
}

func (i HeatWaveClusterClusterNodeArgs) ToHeatWaveClusterClusterNodeOutputWithContext(ctx context.Context) HeatWaveClusterClusterNodeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HeatWaveClusterClusterNodeOutput)
}

// HeatWaveClusterClusterNodeArrayInput is an input type that accepts HeatWaveClusterClusterNodeArray and HeatWaveClusterClusterNodeArrayOutput values.
// You can construct a concrete instance of `HeatWaveClusterClusterNodeArrayInput` via:
//
//          HeatWaveClusterClusterNodeArray{ HeatWaveClusterClusterNodeArgs{...} }
type HeatWaveClusterClusterNodeArrayInput interface {
	pulumi.Input

	ToHeatWaveClusterClusterNodeArrayOutput() HeatWaveClusterClusterNodeArrayOutput
	ToHeatWaveClusterClusterNodeArrayOutputWithContext(context.Context) HeatWaveClusterClusterNodeArrayOutput
}

type HeatWaveClusterClusterNodeArray []HeatWaveClusterClusterNodeInput

func (HeatWaveClusterClusterNodeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HeatWaveClusterClusterNode)(nil)).Elem()
}

func (i HeatWaveClusterClusterNodeArray) ToHeatWaveClusterClusterNodeArrayOutput() HeatWaveClusterClusterNodeArrayOutput {
	return i.ToHeatWaveClusterClusterNodeArrayOutputWithContext(context.Background())
}

func (i HeatWaveClusterClusterNodeArray) ToHeatWaveClusterClusterNodeArrayOutputWithContext(ctx context.Context) HeatWaveClusterClusterNodeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HeatWaveClusterClusterNodeArrayOutput)
}

type HeatWaveClusterClusterNodeOutput struct{ *pulumi.OutputState }

func (HeatWaveClusterClusterNodeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HeatWaveClusterClusterNode)(nil)).Elem()
}

func (o HeatWaveClusterClusterNodeOutput) ToHeatWaveClusterClusterNodeOutput() HeatWaveClusterClusterNodeOutput {
	return o
}

func (o HeatWaveClusterClusterNodeOutput) ToHeatWaveClusterClusterNodeOutputWithContext(ctx context.Context) HeatWaveClusterClusterNodeOutput {
	return o
}

// The ID of the node within MySQL HeatWave cluster.
func (o HeatWaveClusterClusterNodeOutput) NodeId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HeatWaveClusterClusterNode) *string { return v.NodeId }).(pulumi.StringPtrOutput)
}

// (Updatable) The target state for the HeatWave cluster. Could be set to `ACTIVE` or `INACTIVE`.
func (o HeatWaveClusterClusterNodeOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HeatWaveClusterClusterNode) *string { return v.State }).(pulumi.StringPtrOutput)
}

// The date and time the HeatWave cluster was created, as described by [RFC 3339](https://tools.ietf.org/rfc/rfc3339).
func (o HeatWaveClusterClusterNodeOutput) TimeCreated() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HeatWaveClusterClusterNode) *string { return v.TimeCreated }).(pulumi.StringPtrOutput)
}

// The time the HeatWave cluster was last updated, as described by [RFC 3339](https://tools.ietf.org/rfc/rfc3339).
func (o HeatWaveClusterClusterNodeOutput) TimeUpdated() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HeatWaveClusterClusterNode) *string { return v.TimeUpdated }).(pulumi.StringPtrOutput)
}

type HeatWaveClusterClusterNodeArrayOutput struct{ *pulumi.OutputState }

func (HeatWaveClusterClusterNodeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HeatWaveClusterClusterNode)(nil)).Elem()
}

func (o HeatWaveClusterClusterNodeArrayOutput) ToHeatWaveClusterClusterNodeArrayOutput() HeatWaveClusterClusterNodeArrayOutput {
	return o
}

func (o HeatWaveClusterClusterNodeArrayOutput) ToHeatWaveClusterClusterNodeArrayOutputWithContext(ctx context.Context) HeatWaveClusterClusterNodeArrayOutput {
	return o
}

func (o HeatWaveClusterClusterNodeArrayOutput) Index(i pulumi.IntInput) HeatWaveClusterClusterNodeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) HeatWaveClusterClusterNode {
		return vs[0].([]HeatWaveClusterClusterNode)[vs[1].(int)]
	}).(HeatWaveClusterClusterNodeOutput)
}

type MysqlBackupDbSystemSnapshot struct {
	// The username for the administrative user.
	AdminUsername *string `pulumi:"adminUsername"`
	// The Availability Domain where the primary DB System should be located.
	AvailabilityDomain *string `pulumi:"availabilityDomain"`
	// The Backup policy for the DB System.
	BackupPolicy *MysqlBackupDbSystemSnapshotBackupPolicy `pulumi:"backupPolicy"`
	// (Updatable) The OCID of the compartment.
	CompartmentId *string `pulumi:"compartmentId"`
	// The OCID of the Configuration to be used for Instances in this DB System.
	ConfigurationId *string `pulumi:"configurationId"`
	// Initial size of the data volume in GiBs that will be created and attached.
	DataStorageSizeInGb *int `pulumi:"dataStorageSizeInGb"`
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
	DefinedTags map[string]interface{} `pulumi:"definedTags"`
	// (Updatable) A user-supplied description for the backup.
	Description *string `pulumi:"description"`
	// (Updatable) A user-supplied display name for the backup.
	DisplayName *string `pulumi:"displayName"`
	// The network endpoints available for this DB System.
	Endpoints []MysqlBackupDbSystemSnapshotEndpoint `pulumi:"endpoints"`
	// The name of the Fault Domain the DB System is located in.
	FaultDomain *string `pulumi:"faultDomain"`
	// (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
	FreeformTags map[string]interface{} `pulumi:"freeformTags"`
	// The hostname for the primary endpoint of the DB System. Used for DNS. The value is the hostname portion of the primary private IP's fully qualified domain name (FQDN) (for example, "dbsystem-1" in FQDN "dbsystem-1.subnet123.vcn1.oraclevcn.com"). Must be unique across all VNICs in the subnet and comply with RFC 952 and RFC 1123.
	HostnameLabel *string `pulumi:"hostnameLabel"`
	// OCID of the backup itself
	Id *string `pulumi:"id"`
	// The IP address the DB System is configured to listen on. A private IP address of the primary endpoint of the DB System. Must be an available IP address within the subnet's CIDR. This will be a "dotted-quad" style IPv4 address.
	IpAddress *string `pulumi:"ipAddress"`
	// If the policy is to enable high availability of the instance, by maintaining secondary/failover capacity as necessary.
	IsHighlyAvailable *bool `pulumi:"isHighlyAvailable"`
	// The Maintenance Policy for the DB System.
	Maintenance *MysqlBackupDbSystemSnapshotMaintenance `pulumi:"maintenance"`
	// The MySQL server version of the DB System used for backup.
	MysqlVersion *string `pulumi:"mysqlVersion"`
	// The port for primary endpoint of the DB System to listen on.
	Port *int `pulumi:"port"`
	// The network port on which X Plugin listens for TCP/IP connections. This is the X Plugin equivalent of port.
	PortX *int `pulumi:"portX"`
	// The shape of the DB System instance used for backup.
	ShapeName *string `pulumi:"shapeName"`
	// The OCID of the subnet the DB System is associated with.
	SubnetId *string `pulumi:"subnetId"`
}

// MysqlBackupDbSystemSnapshotInput is an input type that accepts MysqlBackupDbSystemSnapshotArgs and MysqlBackupDbSystemSnapshotOutput values.
// You can construct a concrete instance of `MysqlBackupDbSystemSnapshotInput` via:
//
//          MysqlBackupDbSystemSnapshotArgs{...}
type MysqlBackupDbSystemSnapshotInput interface {
	pulumi.Input

	ToMysqlBackupDbSystemSnapshotOutput() MysqlBackupDbSystemSnapshotOutput
	ToMysqlBackupDbSystemSnapshotOutputWithContext(context.Context) MysqlBackupDbSystemSnapshotOutput
}

type MysqlBackupDbSystemSnapshotArgs struct {
	// The username for the administrative user.
	AdminUsername pulumi.StringPtrInput `pulumi:"adminUsername"`
	// The Availability Domain where the primary DB System should be located.
	AvailabilityDomain pulumi.StringPtrInput `pulumi:"availabilityDomain"`
	// The Backup policy for the DB System.
	BackupPolicy MysqlBackupDbSystemSnapshotBackupPolicyPtrInput `pulumi:"backupPolicy"`
	// (Updatable) The OCID of the compartment.
	CompartmentId pulumi.StringPtrInput `pulumi:"compartmentId"`
	// The OCID of the Configuration to be used for Instances in this DB System.
	ConfigurationId pulumi.StringPtrInput `pulumi:"configurationId"`
	// Initial size of the data volume in GiBs that will be created and attached.
	DataStorageSizeInGb pulumi.IntPtrInput `pulumi:"dataStorageSizeInGb"`
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
	DefinedTags pulumi.MapInput `pulumi:"definedTags"`
	// (Updatable) A user-supplied description for the backup.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// (Updatable) A user-supplied display name for the backup.
	DisplayName pulumi.StringPtrInput `pulumi:"displayName"`
	// The network endpoints available for this DB System.
	Endpoints MysqlBackupDbSystemSnapshotEndpointArrayInput `pulumi:"endpoints"`
	// The name of the Fault Domain the DB System is located in.
	FaultDomain pulumi.StringPtrInput `pulumi:"faultDomain"`
	// (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
	FreeformTags pulumi.MapInput `pulumi:"freeformTags"`
	// The hostname for the primary endpoint of the DB System. Used for DNS. The value is the hostname portion of the primary private IP's fully qualified domain name (FQDN) (for example, "dbsystem-1" in FQDN "dbsystem-1.subnet123.vcn1.oraclevcn.com"). Must be unique across all VNICs in the subnet and comply with RFC 952 and RFC 1123.
	HostnameLabel pulumi.StringPtrInput `pulumi:"hostnameLabel"`
	// OCID of the backup itself
	Id pulumi.StringPtrInput `pulumi:"id"`
	// The IP address the DB System is configured to listen on. A private IP address of the primary endpoint of the DB System. Must be an available IP address within the subnet's CIDR. This will be a "dotted-quad" style IPv4 address.
	IpAddress pulumi.StringPtrInput `pulumi:"ipAddress"`
	// If the policy is to enable high availability of the instance, by maintaining secondary/failover capacity as necessary.
	IsHighlyAvailable pulumi.BoolPtrInput `pulumi:"isHighlyAvailable"`
	// The Maintenance Policy for the DB System.
	Maintenance MysqlBackupDbSystemSnapshotMaintenancePtrInput `pulumi:"maintenance"`
	// The MySQL server version of the DB System used for backup.
	MysqlVersion pulumi.StringPtrInput `pulumi:"mysqlVersion"`
	// The port for primary endpoint of the DB System to listen on.
	Port pulumi.IntPtrInput `pulumi:"port"`
	// The network port on which X Plugin listens for TCP/IP connections. This is the X Plugin equivalent of port.
	PortX pulumi.IntPtrInput `pulumi:"portX"`
	// The shape of the DB System instance used for backup.
	ShapeName pulumi.StringPtrInput `pulumi:"shapeName"`
	// The OCID of the subnet the DB System is associated with.
	SubnetId pulumi.StringPtrInput `pulumi:"subnetId"`
}

func (MysqlBackupDbSystemSnapshotArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MysqlBackupDbSystemSnapshot)(nil)).Elem()
}

func (i MysqlBackupDbSystemSnapshotArgs) ToMysqlBackupDbSystemSnapshotOutput() MysqlBackupDbSystemSnapshotOutput {
	return i.ToMysqlBackupDbSystemSnapshotOutputWithContext(context.Background())
}

func (i MysqlBackupDbSystemSnapshotArgs) ToMysqlBackupDbSystemSnapshotOutputWithContext(ctx context.Context) MysqlBackupDbSystemSnapshotOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MysqlBackupDbSystemSnapshotOutput)
}

func (i MysqlBackupDbSystemSnapshotArgs) ToMysqlBackupDbSystemSnapshotPtrOutput() MysqlBackupDbSystemSnapshotPtrOutput {
	return i.ToMysqlBackupDbSystemSnapshotPtrOutputWithContext(context.Background())
}

func (i MysqlBackupDbSystemSnapshotArgs) ToMysqlBackupDbSystemSnapshotPtrOutputWithContext(ctx context.Context) MysqlBackupDbSystemSnapshotPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MysqlBackupDbSystemSnapshotOutput).ToMysqlBackupDbSystemSnapshotPtrOutputWithContext(ctx)
}

// MysqlBackupDbSystemSnapshotPtrInput is an input type that accepts MysqlBackupDbSystemSnapshotArgs, MysqlBackupDbSystemSnapshotPtr and MysqlBackupDbSystemSnapshotPtrOutput values.
// You can construct a concrete instance of `MysqlBackupDbSystemSnapshotPtrInput` via:
//
//          MysqlBackupDbSystemSnapshotArgs{...}
//
//  or:
//
//          nil
type MysqlBackupDbSystemSnapshotPtrInput interface {
	pulumi.Input

	ToMysqlBackupDbSystemSnapshotPtrOutput() MysqlBackupDbSystemSnapshotPtrOutput
	ToMysqlBackupDbSystemSnapshotPtrOutputWithContext(context.Context) MysqlBackupDbSystemSnapshotPtrOutput
}

type mysqlBackupDbSystemSnapshotPtrType MysqlBackupDbSystemSnapshotArgs

func MysqlBackupDbSystemSnapshotPtr(v *MysqlBackupDbSystemSnapshotArgs) MysqlBackupDbSystemSnapshotPtrInput {
	return (*mysqlBackupDbSystemSnapshotPtrType)(v)
}

func (*mysqlBackupDbSystemSnapshotPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MysqlBackupDbSystemSnapshot)(nil)).Elem()
}

func (i *mysqlBackupDbSystemSnapshotPtrType) ToMysqlBackupDbSystemSnapshotPtrOutput() MysqlBackupDbSystemSnapshotPtrOutput {
	return i.ToMysqlBackupDbSystemSnapshotPtrOutputWithContext(context.Background())
}

func (i *mysqlBackupDbSystemSnapshotPtrType) ToMysqlBackupDbSystemSnapshotPtrOutputWithContext(ctx context.Context) MysqlBackupDbSystemSnapshotPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MysqlBackupDbSystemSnapshotPtrOutput)
}

type MysqlBackupDbSystemSnapshotOutput struct{ *pulumi.OutputState }

func (MysqlBackupDbSystemSnapshotOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MysqlBackupDbSystemSnapshot)(nil)).Elem()
}

func (o MysqlBackupDbSystemSnapshotOutput) ToMysqlBackupDbSystemSnapshotOutput() MysqlBackupDbSystemSnapshotOutput {
	return o
}

func (o MysqlBackupDbSystemSnapshotOutput) ToMysqlBackupDbSystemSnapshotOutputWithContext(ctx context.Context) MysqlBackupDbSystemSnapshotOutput {
	return o
}

func (o MysqlBackupDbSystemSnapshotOutput) ToMysqlBackupDbSystemSnapshotPtrOutput() MysqlBackupDbSystemSnapshotPtrOutput {
	return o.ToMysqlBackupDbSystemSnapshotPtrOutputWithContext(context.Background())
}

func (o MysqlBackupDbSystemSnapshotOutput) ToMysqlBackupDbSystemSnapshotPtrOutputWithContext(ctx context.Context) MysqlBackupDbSystemSnapshotPtrOutput {
	return o.ApplyT(func(v MysqlBackupDbSystemSnapshot) *MysqlBackupDbSystemSnapshot {
		return &v
	}).(MysqlBackupDbSystemSnapshotPtrOutput)
}

// The username for the administrative user.
func (o MysqlBackupDbSystemSnapshotOutput) AdminUsername() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MysqlBackupDbSystemSnapshot) *string { return v.AdminUsername }).(pulumi.StringPtrOutput)
}

// The Availability Domain where the primary DB System should be located.
func (o MysqlBackupDbSystemSnapshotOutput) AvailabilityDomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MysqlBackupDbSystemSnapshot) *string { return v.AvailabilityDomain }).(pulumi.StringPtrOutput)
}

// The Backup policy for the DB System.
func (o MysqlBackupDbSystemSnapshotOutput) BackupPolicy() MysqlBackupDbSystemSnapshotBackupPolicyPtrOutput {
	return o.ApplyT(func(v MysqlBackupDbSystemSnapshot) *MysqlBackupDbSystemSnapshotBackupPolicy { return v.BackupPolicy }).(MysqlBackupDbSystemSnapshotBackupPolicyPtrOutput)
}

// (Updatable) The OCID of the compartment.
func (o MysqlBackupDbSystemSnapshotOutput) CompartmentId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MysqlBackupDbSystemSnapshot) *string { return v.CompartmentId }).(pulumi.StringPtrOutput)
}

// The OCID of the Configuration to be used for Instances in this DB System.
func (o MysqlBackupDbSystemSnapshotOutput) ConfigurationId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MysqlBackupDbSystemSnapshot) *string { return v.ConfigurationId }).(pulumi.StringPtrOutput)
}

// Initial size of the data volume in GiBs that will be created and attached.
func (o MysqlBackupDbSystemSnapshotOutput) DataStorageSizeInGb() pulumi.IntPtrOutput {
	return o.ApplyT(func(v MysqlBackupDbSystemSnapshot) *int { return v.DataStorageSizeInGb }).(pulumi.IntPtrOutput)
}

// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
func (o MysqlBackupDbSystemSnapshotOutput) DefinedTags() pulumi.MapOutput {
	return o.ApplyT(func(v MysqlBackupDbSystemSnapshot) map[string]interface{} { return v.DefinedTags }).(pulumi.MapOutput)
}

// (Updatable) A user-supplied description for the backup.
func (o MysqlBackupDbSystemSnapshotOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MysqlBackupDbSystemSnapshot) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// (Updatable) A user-supplied display name for the backup.
func (o MysqlBackupDbSystemSnapshotOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MysqlBackupDbSystemSnapshot) *string { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// The network endpoints available for this DB System.
func (o MysqlBackupDbSystemSnapshotOutput) Endpoints() MysqlBackupDbSystemSnapshotEndpointArrayOutput {
	return o.ApplyT(func(v MysqlBackupDbSystemSnapshot) []MysqlBackupDbSystemSnapshotEndpoint { return v.Endpoints }).(MysqlBackupDbSystemSnapshotEndpointArrayOutput)
}

// The name of the Fault Domain the DB System is located in.
func (o MysqlBackupDbSystemSnapshotOutput) FaultDomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MysqlBackupDbSystemSnapshot) *string { return v.FaultDomain }).(pulumi.StringPtrOutput)
}

// (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
func (o MysqlBackupDbSystemSnapshotOutput) FreeformTags() pulumi.MapOutput {
	return o.ApplyT(func(v MysqlBackupDbSystemSnapshot) map[string]interface{} { return v.FreeformTags }).(pulumi.MapOutput)
}

// The hostname for the primary endpoint of the DB System. Used for DNS. The value is the hostname portion of the primary private IP's fully qualified domain name (FQDN) (for example, "dbsystem-1" in FQDN "dbsystem-1.subnet123.vcn1.oraclevcn.com"). Must be unique across all VNICs in the subnet and comply with RFC 952 and RFC 1123.
func (o MysqlBackupDbSystemSnapshotOutput) HostnameLabel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MysqlBackupDbSystemSnapshot) *string { return v.HostnameLabel }).(pulumi.StringPtrOutput)
}

// OCID of the backup itself
func (o MysqlBackupDbSystemSnapshotOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MysqlBackupDbSystemSnapshot) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The IP address the DB System is configured to listen on. A private IP address of the primary endpoint of the DB System. Must be an available IP address within the subnet's CIDR. This will be a "dotted-quad" style IPv4 address.
func (o MysqlBackupDbSystemSnapshotOutput) IpAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MysqlBackupDbSystemSnapshot) *string { return v.IpAddress }).(pulumi.StringPtrOutput)
}

// If the policy is to enable high availability of the instance, by maintaining secondary/failover capacity as necessary.
func (o MysqlBackupDbSystemSnapshotOutput) IsHighlyAvailable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v MysqlBackupDbSystemSnapshot) *bool { return v.IsHighlyAvailable }).(pulumi.BoolPtrOutput)
}

// The Maintenance Policy for the DB System.
func (o MysqlBackupDbSystemSnapshotOutput) Maintenance() MysqlBackupDbSystemSnapshotMaintenancePtrOutput {
	return o.ApplyT(func(v MysqlBackupDbSystemSnapshot) *MysqlBackupDbSystemSnapshotMaintenance { return v.Maintenance }).(MysqlBackupDbSystemSnapshotMaintenancePtrOutput)
}

// The MySQL server version of the DB System used for backup.
func (o MysqlBackupDbSystemSnapshotOutput) MysqlVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MysqlBackupDbSystemSnapshot) *string { return v.MysqlVersion }).(pulumi.StringPtrOutput)
}

// The port for primary endpoint of the DB System to listen on.
func (o MysqlBackupDbSystemSnapshotOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v MysqlBackupDbSystemSnapshot) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// The network port on which X Plugin listens for TCP/IP connections. This is the X Plugin equivalent of port.
func (o MysqlBackupDbSystemSnapshotOutput) PortX() pulumi.IntPtrOutput {
	return o.ApplyT(func(v MysqlBackupDbSystemSnapshot) *int { return v.PortX }).(pulumi.IntPtrOutput)
}

// The shape of the DB System instance used for backup.
func (o MysqlBackupDbSystemSnapshotOutput) ShapeName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MysqlBackupDbSystemSnapshot) *string { return v.ShapeName }).(pulumi.StringPtrOutput)
}

// The OCID of the subnet the DB System is associated with.
func (o MysqlBackupDbSystemSnapshotOutput) SubnetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MysqlBackupDbSystemSnapshot) *string { return v.SubnetId }).(pulumi.StringPtrOutput)
}

type MysqlBackupDbSystemSnapshotPtrOutput struct{ *pulumi.OutputState }

func (MysqlBackupDbSystemSnapshotPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MysqlBackupDbSystemSnapshot)(nil)).Elem()
}

func (o MysqlBackupDbSystemSnapshotPtrOutput) ToMysqlBackupDbSystemSnapshotPtrOutput() MysqlBackupDbSystemSnapshotPtrOutput {
	return o
}

func (o MysqlBackupDbSystemSnapshotPtrOutput) ToMysqlBackupDbSystemSnapshotPtrOutputWithContext(ctx context.Context) MysqlBackupDbSystemSnapshotPtrOutput {
	return o
}

func (o MysqlBackupDbSystemSnapshotPtrOutput) Elem() MysqlBackupDbSystemSnapshotOutput {
	return o.ApplyT(func(v *MysqlBackupDbSystemSnapshot) MysqlBackupDbSystemSnapshot { return *v }).(MysqlBackupDbSystemSnapshotOutput)
}

// The username for the administrative user.
func (o MysqlBackupDbSystemSnapshotPtrOutput) AdminUsername() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MysqlBackupDbSystemSnapshot) *string {
		if v == nil {
			return nil
		}
		return v.AdminUsername
	}).(pulumi.StringPtrOutput)
}

// The Availability Domain where the primary DB System should be located.
func (o MysqlBackupDbSystemSnapshotPtrOutput) AvailabilityDomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MysqlBackupDbSystemSnapshot) *string {
		if v == nil {
			return nil
		}
		return v.AvailabilityDomain
	}).(pulumi.StringPtrOutput)
}

// The Backup policy for the DB System.
func (o MysqlBackupDbSystemSnapshotPtrOutput) BackupPolicy() MysqlBackupDbSystemSnapshotBackupPolicyPtrOutput {
	return o.ApplyT(func(v *MysqlBackupDbSystemSnapshot) *MysqlBackupDbSystemSnapshotBackupPolicy {
		if v == nil {
			return nil
		}
		return v.BackupPolicy
	}).(MysqlBackupDbSystemSnapshotBackupPolicyPtrOutput)
}

// (Updatable) The OCID of the compartment.
func (o MysqlBackupDbSystemSnapshotPtrOutput) CompartmentId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MysqlBackupDbSystemSnapshot) *string {
		if v == nil {
			return nil
		}
		return v.CompartmentId
	}).(pulumi.StringPtrOutput)
}

// The OCID of the Configuration to be used for Instances in this DB System.
func (o MysqlBackupDbSystemSnapshotPtrOutput) ConfigurationId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MysqlBackupDbSystemSnapshot) *string {
		if v == nil {
			return nil
		}
		return v.ConfigurationId
	}).(pulumi.StringPtrOutput)
}

// Initial size of the data volume in GiBs that will be created and attached.
func (o MysqlBackupDbSystemSnapshotPtrOutput) DataStorageSizeInGb() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *MysqlBackupDbSystemSnapshot) *int {
		if v == nil {
			return nil
		}
		return v.DataStorageSizeInGb
	}).(pulumi.IntPtrOutput)
}

// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
func (o MysqlBackupDbSystemSnapshotPtrOutput) DefinedTags() pulumi.MapOutput {
	return o.ApplyT(func(v *MysqlBackupDbSystemSnapshot) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.DefinedTags
	}).(pulumi.MapOutput)
}

// (Updatable) A user-supplied description for the backup.
func (o MysqlBackupDbSystemSnapshotPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MysqlBackupDbSystemSnapshot) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// (Updatable) A user-supplied display name for the backup.
func (o MysqlBackupDbSystemSnapshotPtrOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MysqlBackupDbSystemSnapshot) *string {
		if v == nil {
			return nil
		}
		return v.DisplayName
	}).(pulumi.StringPtrOutput)
}

// The network endpoints available for this DB System.
func (o MysqlBackupDbSystemSnapshotPtrOutput) Endpoints() MysqlBackupDbSystemSnapshotEndpointArrayOutput {
	return o.ApplyT(func(v *MysqlBackupDbSystemSnapshot) []MysqlBackupDbSystemSnapshotEndpoint {
		if v == nil {
			return nil
		}
		return v.Endpoints
	}).(MysqlBackupDbSystemSnapshotEndpointArrayOutput)
}

// The name of the Fault Domain the DB System is located in.
func (o MysqlBackupDbSystemSnapshotPtrOutput) FaultDomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MysqlBackupDbSystemSnapshot) *string {
		if v == nil {
			return nil
		}
		return v.FaultDomain
	}).(pulumi.StringPtrOutput)
}

// (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
func (o MysqlBackupDbSystemSnapshotPtrOutput) FreeformTags() pulumi.MapOutput {
	return o.ApplyT(func(v *MysqlBackupDbSystemSnapshot) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.FreeformTags
	}).(pulumi.MapOutput)
}

// The hostname for the primary endpoint of the DB System. Used for DNS. The value is the hostname portion of the primary private IP's fully qualified domain name (FQDN) (for example, "dbsystem-1" in FQDN "dbsystem-1.subnet123.vcn1.oraclevcn.com"). Must be unique across all VNICs in the subnet and comply with RFC 952 and RFC 1123.
func (o MysqlBackupDbSystemSnapshotPtrOutput) HostnameLabel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MysqlBackupDbSystemSnapshot) *string {
		if v == nil {
			return nil
		}
		return v.HostnameLabel
	}).(pulumi.StringPtrOutput)
}

// OCID of the backup itself
func (o MysqlBackupDbSystemSnapshotPtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MysqlBackupDbSystemSnapshot) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

// The IP address the DB System is configured to listen on. A private IP address of the primary endpoint of the DB System. Must be an available IP address within the subnet's CIDR. This will be a "dotted-quad" style IPv4 address.
func (o MysqlBackupDbSystemSnapshotPtrOutput) IpAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MysqlBackupDbSystemSnapshot) *string {
		if v == nil {
			return nil
		}
		return v.IpAddress
	}).(pulumi.StringPtrOutput)
}

// If the policy is to enable high availability of the instance, by maintaining secondary/failover capacity as necessary.
func (o MysqlBackupDbSystemSnapshotPtrOutput) IsHighlyAvailable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *MysqlBackupDbSystemSnapshot) *bool {
		if v == nil {
			return nil
		}
		return v.IsHighlyAvailable
	}).(pulumi.BoolPtrOutput)
}

// The Maintenance Policy for the DB System.
func (o MysqlBackupDbSystemSnapshotPtrOutput) Maintenance() MysqlBackupDbSystemSnapshotMaintenancePtrOutput {
	return o.ApplyT(func(v *MysqlBackupDbSystemSnapshot) *MysqlBackupDbSystemSnapshotMaintenance {
		if v == nil {
			return nil
		}
		return v.Maintenance
	}).(MysqlBackupDbSystemSnapshotMaintenancePtrOutput)
}

// The MySQL server version of the DB System used for backup.
func (o MysqlBackupDbSystemSnapshotPtrOutput) MysqlVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MysqlBackupDbSystemSnapshot) *string {
		if v == nil {
			return nil
		}
		return v.MysqlVersion
	}).(pulumi.StringPtrOutput)
}

// The port for primary endpoint of the DB System to listen on.
func (o MysqlBackupDbSystemSnapshotPtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *MysqlBackupDbSystemSnapshot) *int {
		if v == nil {
			return nil
		}
		return v.Port
	}).(pulumi.IntPtrOutput)
}

// The network port on which X Plugin listens for TCP/IP connections. This is the X Plugin equivalent of port.
func (o MysqlBackupDbSystemSnapshotPtrOutput) PortX() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *MysqlBackupDbSystemSnapshot) *int {
		if v == nil {
			return nil
		}
		return v.PortX
	}).(pulumi.IntPtrOutput)
}

// The shape of the DB System instance used for backup.
func (o MysqlBackupDbSystemSnapshotPtrOutput) ShapeName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MysqlBackupDbSystemSnapshot) *string {
		if v == nil {
			return nil
		}
		return v.ShapeName
	}).(pulumi.StringPtrOutput)
}

// The OCID of the subnet the DB System is associated with.
func (o MysqlBackupDbSystemSnapshotPtrOutput) SubnetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MysqlBackupDbSystemSnapshot) *string {
		if v == nil {
			return nil
		}
		return v.SubnetId
	}).(pulumi.StringPtrOutput)
}

type MysqlBackupDbSystemSnapshotBackupPolicy struct {
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
	DefinedTags map[string]interface{} `pulumi:"definedTags"`
	// (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
	FreeformTags map[string]interface{} `pulumi:"freeformTags"`
	// If automated backups are enabled or disabled.
	IsEnabled *bool `pulumi:"isEnabled"`
	// (Updatable) Number of days to retain this backup.
	RetentionInDays *int `pulumi:"retentionInDays"`
	// The start time of the maintenance window.
	WindowStartTime *string `pulumi:"windowStartTime"`
}

// MysqlBackupDbSystemSnapshotBackupPolicyInput is an input type that accepts MysqlBackupDbSystemSnapshotBackupPolicyArgs and MysqlBackupDbSystemSnapshotBackupPolicyOutput values.
// You can construct a concrete instance of `MysqlBackupDbSystemSnapshotBackupPolicyInput` via:
//
//          MysqlBackupDbSystemSnapshotBackupPolicyArgs{...}
type MysqlBackupDbSystemSnapshotBackupPolicyInput interface {
	pulumi.Input

	ToMysqlBackupDbSystemSnapshotBackupPolicyOutput() MysqlBackupDbSystemSnapshotBackupPolicyOutput
	ToMysqlBackupDbSystemSnapshotBackupPolicyOutputWithContext(context.Context) MysqlBackupDbSystemSnapshotBackupPolicyOutput
}

type MysqlBackupDbSystemSnapshotBackupPolicyArgs struct {
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
	DefinedTags pulumi.MapInput `pulumi:"definedTags"`
	// (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
	FreeformTags pulumi.MapInput `pulumi:"freeformTags"`
	// If automated backups are enabled or disabled.
	IsEnabled pulumi.BoolPtrInput `pulumi:"isEnabled"`
	// (Updatable) Number of days to retain this backup.
	RetentionInDays pulumi.IntPtrInput `pulumi:"retentionInDays"`
	// The start time of the maintenance window.
	WindowStartTime pulumi.StringPtrInput `pulumi:"windowStartTime"`
}

func (MysqlBackupDbSystemSnapshotBackupPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MysqlBackupDbSystemSnapshotBackupPolicy)(nil)).Elem()
}

func (i MysqlBackupDbSystemSnapshotBackupPolicyArgs) ToMysqlBackupDbSystemSnapshotBackupPolicyOutput() MysqlBackupDbSystemSnapshotBackupPolicyOutput {
	return i.ToMysqlBackupDbSystemSnapshotBackupPolicyOutputWithContext(context.Background())
}

func (i MysqlBackupDbSystemSnapshotBackupPolicyArgs) ToMysqlBackupDbSystemSnapshotBackupPolicyOutputWithContext(ctx context.Context) MysqlBackupDbSystemSnapshotBackupPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MysqlBackupDbSystemSnapshotBackupPolicyOutput)
}

func (i MysqlBackupDbSystemSnapshotBackupPolicyArgs) ToMysqlBackupDbSystemSnapshotBackupPolicyPtrOutput() MysqlBackupDbSystemSnapshotBackupPolicyPtrOutput {
	return i.ToMysqlBackupDbSystemSnapshotBackupPolicyPtrOutputWithContext(context.Background())
}

func (i MysqlBackupDbSystemSnapshotBackupPolicyArgs) ToMysqlBackupDbSystemSnapshotBackupPolicyPtrOutputWithContext(ctx context.Context) MysqlBackupDbSystemSnapshotBackupPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MysqlBackupDbSystemSnapshotBackupPolicyOutput).ToMysqlBackupDbSystemSnapshotBackupPolicyPtrOutputWithContext(ctx)
}

// MysqlBackupDbSystemSnapshotBackupPolicyPtrInput is an input type that accepts MysqlBackupDbSystemSnapshotBackupPolicyArgs, MysqlBackupDbSystemSnapshotBackupPolicyPtr and MysqlBackupDbSystemSnapshotBackupPolicyPtrOutput values.
// You can construct a concrete instance of `MysqlBackupDbSystemSnapshotBackupPolicyPtrInput` via:
//
//          MysqlBackupDbSystemSnapshotBackupPolicyArgs{...}
//
//  or:
//
//          nil
type MysqlBackupDbSystemSnapshotBackupPolicyPtrInput interface {
	pulumi.Input

	ToMysqlBackupDbSystemSnapshotBackupPolicyPtrOutput() MysqlBackupDbSystemSnapshotBackupPolicyPtrOutput
	ToMysqlBackupDbSystemSnapshotBackupPolicyPtrOutputWithContext(context.Context) MysqlBackupDbSystemSnapshotBackupPolicyPtrOutput
}

type mysqlBackupDbSystemSnapshotBackupPolicyPtrType MysqlBackupDbSystemSnapshotBackupPolicyArgs

func MysqlBackupDbSystemSnapshotBackupPolicyPtr(v *MysqlBackupDbSystemSnapshotBackupPolicyArgs) MysqlBackupDbSystemSnapshotBackupPolicyPtrInput {
	return (*mysqlBackupDbSystemSnapshotBackupPolicyPtrType)(v)
}

func (*mysqlBackupDbSystemSnapshotBackupPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MysqlBackupDbSystemSnapshotBackupPolicy)(nil)).Elem()
}

func (i *mysqlBackupDbSystemSnapshotBackupPolicyPtrType) ToMysqlBackupDbSystemSnapshotBackupPolicyPtrOutput() MysqlBackupDbSystemSnapshotBackupPolicyPtrOutput {
	return i.ToMysqlBackupDbSystemSnapshotBackupPolicyPtrOutputWithContext(context.Background())
}

func (i *mysqlBackupDbSystemSnapshotBackupPolicyPtrType) ToMysqlBackupDbSystemSnapshotBackupPolicyPtrOutputWithContext(ctx context.Context) MysqlBackupDbSystemSnapshotBackupPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MysqlBackupDbSystemSnapshotBackupPolicyPtrOutput)
}

type MysqlBackupDbSystemSnapshotBackupPolicyOutput struct{ *pulumi.OutputState }

func (MysqlBackupDbSystemSnapshotBackupPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MysqlBackupDbSystemSnapshotBackupPolicy)(nil)).Elem()
}

func (o MysqlBackupDbSystemSnapshotBackupPolicyOutput) ToMysqlBackupDbSystemSnapshotBackupPolicyOutput() MysqlBackupDbSystemSnapshotBackupPolicyOutput {
	return o
}

func (o MysqlBackupDbSystemSnapshotBackupPolicyOutput) ToMysqlBackupDbSystemSnapshotBackupPolicyOutputWithContext(ctx context.Context) MysqlBackupDbSystemSnapshotBackupPolicyOutput {
	return o
}

func (o MysqlBackupDbSystemSnapshotBackupPolicyOutput) ToMysqlBackupDbSystemSnapshotBackupPolicyPtrOutput() MysqlBackupDbSystemSnapshotBackupPolicyPtrOutput {
	return o.ToMysqlBackupDbSystemSnapshotBackupPolicyPtrOutputWithContext(context.Background())
}

func (o MysqlBackupDbSystemSnapshotBackupPolicyOutput) ToMysqlBackupDbSystemSnapshotBackupPolicyPtrOutputWithContext(ctx context.Context) MysqlBackupDbSystemSnapshotBackupPolicyPtrOutput {
	return o.ApplyT(func(v MysqlBackupDbSystemSnapshotBackupPolicy) *MysqlBackupDbSystemSnapshotBackupPolicy {
		return &v
	}).(MysqlBackupDbSystemSnapshotBackupPolicyPtrOutput)
}

// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
func (o MysqlBackupDbSystemSnapshotBackupPolicyOutput) DefinedTags() pulumi.MapOutput {
	return o.ApplyT(func(v MysqlBackupDbSystemSnapshotBackupPolicy) map[string]interface{} { return v.DefinedTags }).(pulumi.MapOutput)
}

// (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
func (o MysqlBackupDbSystemSnapshotBackupPolicyOutput) FreeformTags() pulumi.MapOutput {
	return o.ApplyT(func(v MysqlBackupDbSystemSnapshotBackupPolicy) map[string]interface{} { return v.FreeformTags }).(pulumi.MapOutput)
}

// If automated backups are enabled or disabled.
func (o MysqlBackupDbSystemSnapshotBackupPolicyOutput) IsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v MysqlBackupDbSystemSnapshotBackupPolicy) *bool { return v.IsEnabled }).(pulumi.BoolPtrOutput)
}

// (Updatable) Number of days to retain this backup.
func (o MysqlBackupDbSystemSnapshotBackupPolicyOutput) RetentionInDays() pulumi.IntPtrOutput {
	return o.ApplyT(func(v MysqlBackupDbSystemSnapshotBackupPolicy) *int { return v.RetentionInDays }).(pulumi.IntPtrOutput)
}

// The start time of the maintenance window.
func (o MysqlBackupDbSystemSnapshotBackupPolicyOutput) WindowStartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MysqlBackupDbSystemSnapshotBackupPolicy) *string { return v.WindowStartTime }).(pulumi.StringPtrOutput)
}

type MysqlBackupDbSystemSnapshotBackupPolicyPtrOutput struct{ *pulumi.OutputState }

func (MysqlBackupDbSystemSnapshotBackupPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MysqlBackupDbSystemSnapshotBackupPolicy)(nil)).Elem()
}

func (o MysqlBackupDbSystemSnapshotBackupPolicyPtrOutput) ToMysqlBackupDbSystemSnapshotBackupPolicyPtrOutput() MysqlBackupDbSystemSnapshotBackupPolicyPtrOutput {
	return o
}

func (o MysqlBackupDbSystemSnapshotBackupPolicyPtrOutput) ToMysqlBackupDbSystemSnapshotBackupPolicyPtrOutputWithContext(ctx context.Context) MysqlBackupDbSystemSnapshotBackupPolicyPtrOutput {
	return o
}

func (o MysqlBackupDbSystemSnapshotBackupPolicyPtrOutput) Elem() MysqlBackupDbSystemSnapshotBackupPolicyOutput {
	return o.ApplyT(func(v *MysqlBackupDbSystemSnapshotBackupPolicy) MysqlBackupDbSystemSnapshotBackupPolicy { return *v }).(MysqlBackupDbSystemSnapshotBackupPolicyOutput)
}

// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
func (o MysqlBackupDbSystemSnapshotBackupPolicyPtrOutput) DefinedTags() pulumi.MapOutput {
	return o.ApplyT(func(v *MysqlBackupDbSystemSnapshotBackupPolicy) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.DefinedTags
	}).(pulumi.MapOutput)
}

// (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
func (o MysqlBackupDbSystemSnapshotBackupPolicyPtrOutput) FreeformTags() pulumi.MapOutput {
	return o.ApplyT(func(v *MysqlBackupDbSystemSnapshotBackupPolicy) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.FreeformTags
	}).(pulumi.MapOutput)
}

// If automated backups are enabled or disabled.
func (o MysqlBackupDbSystemSnapshotBackupPolicyPtrOutput) IsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *MysqlBackupDbSystemSnapshotBackupPolicy) *bool {
		if v == nil {
			return nil
		}
		return v.IsEnabled
	}).(pulumi.BoolPtrOutput)
}

// (Updatable) Number of days to retain this backup.
func (o MysqlBackupDbSystemSnapshotBackupPolicyPtrOutput) RetentionInDays() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *MysqlBackupDbSystemSnapshotBackupPolicy) *int {
		if v == nil {
			return nil
		}
		return v.RetentionInDays
	}).(pulumi.IntPtrOutput)
}

// The start time of the maintenance window.
func (o MysqlBackupDbSystemSnapshotBackupPolicyPtrOutput) WindowStartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MysqlBackupDbSystemSnapshotBackupPolicy) *string {
		if v == nil {
			return nil
		}
		return v.WindowStartTime
	}).(pulumi.StringPtrOutput)
}

type MysqlBackupDbSystemSnapshotEndpoint struct {
	// The network address of the DB System.
	Hostname *string `pulumi:"hostname"`
	// The IP address the DB System is configured to listen on. A private IP address of the primary endpoint of the DB System. Must be an available IP address within the subnet's CIDR. This will be a "dotted-quad" style IPv4 address.
	IpAddress *string `pulumi:"ipAddress"`
	// The access modes from the client that this endpoint supports.
	Modes []string `pulumi:"modes"`
	// The port for primary endpoint of the DB System to listen on.
	Port *int `pulumi:"port"`
	// The network port on which X Plugin listens for TCP/IP connections. This is the X Plugin equivalent of port.
	PortX *int `pulumi:"portX"`
	// The state of the endpoints, as far as it can seen from the DB System. There may be some inconsistency with the actual state of the MySQL service.
	Status *string `pulumi:"status"`
	// Additional information about the current endpoint status.
	StatusDetails *string `pulumi:"statusDetails"`
}

// MysqlBackupDbSystemSnapshotEndpointInput is an input type that accepts MysqlBackupDbSystemSnapshotEndpointArgs and MysqlBackupDbSystemSnapshotEndpointOutput values.
// You can construct a concrete instance of `MysqlBackupDbSystemSnapshotEndpointInput` via:
//
//          MysqlBackupDbSystemSnapshotEndpointArgs{...}
type MysqlBackupDbSystemSnapshotEndpointInput interface {
	pulumi.Input

	ToMysqlBackupDbSystemSnapshotEndpointOutput() MysqlBackupDbSystemSnapshotEndpointOutput
	ToMysqlBackupDbSystemSnapshotEndpointOutputWithContext(context.Context) MysqlBackupDbSystemSnapshotEndpointOutput
}

type MysqlBackupDbSystemSnapshotEndpointArgs struct {
	// The network address of the DB System.
	Hostname pulumi.StringPtrInput `pulumi:"hostname"`
	// The IP address the DB System is configured to listen on. A private IP address of the primary endpoint of the DB System. Must be an available IP address within the subnet's CIDR. This will be a "dotted-quad" style IPv4 address.
	IpAddress pulumi.StringPtrInput `pulumi:"ipAddress"`
	// The access modes from the client that this endpoint supports.
	Modes pulumi.StringArrayInput `pulumi:"modes"`
	// The port for primary endpoint of the DB System to listen on.
	Port pulumi.IntPtrInput `pulumi:"port"`
	// The network port on which X Plugin listens for TCP/IP connections. This is the X Plugin equivalent of port.
	PortX pulumi.IntPtrInput `pulumi:"portX"`
	// The state of the endpoints, as far as it can seen from the DB System. There may be some inconsistency with the actual state of the MySQL service.
	Status pulumi.StringPtrInput `pulumi:"status"`
	// Additional information about the current endpoint status.
	StatusDetails pulumi.StringPtrInput `pulumi:"statusDetails"`
}

func (MysqlBackupDbSystemSnapshotEndpointArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MysqlBackupDbSystemSnapshotEndpoint)(nil)).Elem()
}

func (i MysqlBackupDbSystemSnapshotEndpointArgs) ToMysqlBackupDbSystemSnapshotEndpointOutput() MysqlBackupDbSystemSnapshotEndpointOutput {
	return i.ToMysqlBackupDbSystemSnapshotEndpointOutputWithContext(context.Background())
}

func (i MysqlBackupDbSystemSnapshotEndpointArgs) ToMysqlBackupDbSystemSnapshotEndpointOutputWithContext(ctx context.Context) MysqlBackupDbSystemSnapshotEndpointOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MysqlBackupDbSystemSnapshotEndpointOutput)
}

// MysqlBackupDbSystemSnapshotEndpointArrayInput is an input type that accepts MysqlBackupDbSystemSnapshotEndpointArray and MysqlBackupDbSystemSnapshotEndpointArrayOutput values.
// You can construct a concrete instance of `MysqlBackupDbSystemSnapshotEndpointArrayInput` via:
//
//          MysqlBackupDbSystemSnapshotEndpointArray{ MysqlBackupDbSystemSnapshotEndpointArgs{...} }
type MysqlBackupDbSystemSnapshotEndpointArrayInput interface {
	pulumi.Input

	ToMysqlBackupDbSystemSnapshotEndpointArrayOutput() MysqlBackupDbSystemSnapshotEndpointArrayOutput
	ToMysqlBackupDbSystemSnapshotEndpointArrayOutputWithContext(context.Context) MysqlBackupDbSystemSnapshotEndpointArrayOutput
}

type MysqlBackupDbSystemSnapshotEndpointArray []MysqlBackupDbSystemSnapshotEndpointInput

func (MysqlBackupDbSystemSnapshotEndpointArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MysqlBackupDbSystemSnapshotEndpoint)(nil)).Elem()
}

func (i MysqlBackupDbSystemSnapshotEndpointArray) ToMysqlBackupDbSystemSnapshotEndpointArrayOutput() MysqlBackupDbSystemSnapshotEndpointArrayOutput {
	return i.ToMysqlBackupDbSystemSnapshotEndpointArrayOutputWithContext(context.Background())
}

func (i MysqlBackupDbSystemSnapshotEndpointArray) ToMysqlBackupDbSystemSnapshotEndpointArrayOutputWithContext(ctx context.Context) MysqlBackupDbSystemSnapshotEndpointArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MysqlBackupDbSystemSnapshotEndpointArrayOutput)
}

type MysqlBackupDbSystemSnapshotEndpointOutput struct{ *pulumi.OutputState }

func (MysqlBackupDbSystemSnapshotEndpointOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MysqlBackupDbSystemSnapshotEndpoint)(nil)).Elem()
}

func (o MysqlBackupDbSystemSnapshotEndpointOutput) ToMysqlBackupDbSystemSnapshotEndpointOutput() MysqlBackupDbSystemSnapshotEndpointOutput {
	return o
}

func (o MysqlBackupDbSystemSnapshotEndpointOutput) ToMysqlBackupDbSystemSnapshotEndpointOutputWithContext(ctx context.Context) MysqlBackupDbSystemSnapshotEndpointOutput {
	return o
}

// The network address of the DB System.
func (o MysqlBackupDbSystemSnapshotEndpointOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MysqlBackupDbSystemSnapshotEndpoint) *string { return v.Hostname }).(pulumi.StringPtrOutput)
}

// The IP address the DB System is configured to listen on. A private IP address of the primary endpoint of the DB System. Must be an available IP address within the subnet's CIDR. This will be a "dotted-quad" style IPv4 address.
func (o MysqlBackupDbSystemSnapshotEndpointOutput) IpAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MysqlBackupDbSystemSnapshotEndpoint) *string { return v.IpAddress }).(pulumi.StringPtrOutput)
}

// The access modes from the client that this endpoint supports.
func (o MysqlBackupDbSystemSnapshotEndpointOutput) Modes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v MysqlBackupDbSystemSnapshotEndpoint) []string { return v.Modes }).(pulumi.StringArrayOutput)
}

// The port for primary endpoint of the DB System to listen on.
func (o MysqlBackupDbSystemSnapshotEndpointOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v MysqlBackupDbSystemSnapshotEndpoint) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// The network port on which X Plugin listens for TCP/IP connections. This is the X Plugin equivalent of port.
func (o MysqlBackupDbSystemSnapshotEndpointOutput) PortX() pulumi.IntPtrOutput {
	return o.ApplyT(func(v MysqlBackupDbSystemSnapshotEndpoint) *int { return v.PortX }).(pulumi.IntPtrOutput)
}

// The state of the endpoints, as far as it can seen from the DB System. There may be some inconsistency with the actual state of the MySQL service.
func (o MysqlBackupDbSystemSnapshotEndpointOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MysqlBackupDbSystemSnapshotEndpoint) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// Additional information about the current endpoint status.
func (o MysqlBackupDbSystemSnapshotEndpointOutput) StatusDetails() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MysqlBackupDbSystemSnapshotEndpoint) *string { return v.StatusDetails }).(pulumi.StringPtrOutput)
}

type MysqlBackupDbSystemSnapshotEndpointArrayOutput struct{ *pulumi.OutputState }

func (MysqlBackupDbSystemSnapshotEndpointArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MysqlBackupDbSystemSnapshotEndpoint)(nil)).Elem()
}

func (o MysqlBackupDbSystemSnapshotEndpointArrayOutput) ToMysqlBackupDbSystemSnapshotEndpointArrayOutput() MysqlBackupDbSystemSnapshotEndpointArrayOutput {
	return o
}

func (o MysqlBackupDbSystemSnapshotEndpointArrayOutput) ToMysqlBackupDbSystemSnapshotEndpointArrayOutputWithContext(ctx context.Context) MysqlBackupDbSystemSnapshotEndpointArrayOutput {
	return o
}

func (o MysqlBackupDbSystemSnapshotEndpointArrayOutput) Index(i pulumi.IntInput) MysqlBackupDbSystemSnapshotEndpointOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MysqlBackupDbSystemSnapshotEndpoint {
		return vs[0].([]MysqlBackupDbSystemSnapshotEndpoint)[vs[1].(int)]
	}).(MysqlBackupDbSystemSnapshotEndpointOutput)
}

type MysqlBackupDbSystemSnapshotMaintenance struct {
	// The start time of the maintenance window.
	WindowStartTime *string `pulumi:"windowStartTime"`
}

// MysqlBackupDbSystemSnapshotMaintenanceInput is an input type that accepts MysqlBackupDbSystemSnapshotMaintenanceArgs and MysqlBackupDbSystemSnapshotMaintenanceOutput values.
// You can construct a concrete instance of `MysqlBackupDbSystemSnapshotMaintenanceInput` via:
//
//          MysqlBackupDbSystemSnapshotMaintenanceArgs{...}
type MysqlBackupDbSystemSnapshotMaintenanceInput interface {
	pulumi.Input

	ToMysqlBackupDbSystemSnapshotMaintenanceOutput() MysqlBackupDbSystemSnapshotMaintenanceOutput
	ToMysqlBackupDbSystemSnapshotMaintenanceOutputWithContext(context.Context) MysqlBackupDbSystemSnapshotMaintenanceOutput
}

type MysqlBackupDbSystemSnapshotMaintenanceArgs struct {
	// The start time of the maintenance window.
	WindowStartTime pulumi.StringPtrInput `pulumi:"windowStartTime"`
}

func (MysqlBackupDbSystemSnapshotMaintenanceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MysqlBackupDbSystemSnapshotMaintenance)(nil)).Elem()
}

func (i MysqlBackupDbSystemSnapshotMaintenanceArgs) ToMysqlBackupDbSystemSnapshotMaintenanceOutput() MysqlBackupDbSystemSnapshotMaintenanceOutput {
	return i.ToMysqlBackupDbSystemSnapshotMaintenanceOutputWithContext(context.Background())
}

func (i MysqlBackupDbSystemSnapshotMaintenanceArgs) ToMysqlBackupDbSystemSnapshotMaintenanceOutputWithContext(ctx context.Context) MysqlBackupDbSystemSnapshotMaintenanceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MysqlBackupDbSystemSnapshotMaintenanceOutput)
}

func (i MysqlBackupDbSystemSnapshotMaintenanceArgs) ToMysqlBackupDbSystemSnapshotMaintenancePtrOutput() MysqlBackupDbSystemSnapshotMaintenancePtrOutput {
	return i.ToMysqlBackupDbSystemSnapshotMaintenancePtrOutputWithContext(context.Background())
}

func (i MysqlBackupDbSystemSnapshotMaintenanceArgs) ToMysqlBackupDbSystemSnapshotMaintenancePtrOutputWithContext(ctx context.Context) MysqlBackupDbSystemSnapshotMaintenancePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MysqlBackupDbSystemSnapshotMaintenanceOutput).ToMysqlBackupDbSystemSnapshotMaintenancePtrOutputWithContext(ctx)
}

// MysqlBackupDbSystemSnapshotMaintenancePtrInput is an input type that accepts MysqlBackupDbSystemSnapshotMaintenanceArgs, MysqlBackupDbSystemSnapshotMaintenancePtr and MysqlBackupDbSystemSnapshotMaintenancePtrOutput values.
// You can construct a concrete instance of `MysqlBackupDbSystemSnapshotMaintenancePtrInput` via:
//
//          MysqlBackupDbSystemSnapshotMaintenanceArgs{...}
//
//  or:
//
//          nil
type MysqlBackupDbSystemSnapshotMaintenancePtrInput interface {
	pulumi.Input

	ToMysqlBackupDbSystemSnapshotMaintenancePtrOutput() MysqlBackupDbSystemSnapshotMaintenancePtrOutput
	ToMysqlBackupDbSystemSnapshotMaintenancePtrOutputWithContext(context.Context) MysqlBackupDbSystemSnapshotMaintenancePtrOutput
}

type mysqlBackupDbSystemSnapshotMaintenancePtrType MysqlBackupDbSystemSnapshotMaintenanceArgs

func MysqlBackupDbSystemSnapshotMaintenancePtr(v *MysqlBackupDbSystemSnapshotMaintenanceArgs) MysqlBackupDbSystemSnapshotMaintenancePtrInput {
	return (*mysqlBackupDbSystemSnapshotMaintenancePtrType)(v)
}

func (*mysqlBackupDbSystemSnapshotMaintenancePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MysqlBackupDbSystemSnapshotMaintenance)(nil)).Elem()
}

func (i *mysqlBackupDbSystemSnapshotMaintenancePtrType) ToMysqlBackupDbSystemSnapshotMaintenancePtrOutput() MysqlBackupDbSystemSnapshotMaintenancePtrOutput {
	return i.ToMysqlBackupDbSystemSnapshotMaintenancePtrOutputWithContext(context.Background())
}

func (i *mysqlBackupDbSystemSnapshotMaintenancePtrType) ToMysqlBackupDbSystemSnapshotMaintenancePtrOutputWithContext(ctx context.Context) MysqlBackupDbSystemSnapshotMaintenancePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MysqlBackupDbSystemSnapshotMaintenancePtrOutput)
}

type MysqlBackupDbSystemSnapshotMaintenanceOutput struct{ *pulumi.OutputState }

func (MysqlBackupDbSystemSnapshotMaintenanceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MysqlBackupDbSystemSnapshotMaintenance)(nil)).Elem()
}

func (o MysqlBackupDbSystemSnapshotMaintenanceOutput) ToMysqlBackupDbSystemSnapshotMaintenanceOutput() MysqlBackupDbSystemSnapshotMaintenanceOutput {
	return o
}

func (o MysqlBackupDbSystemSnapshotMaintenanceOutput) ToMysqlBackupDbSystemSnapshotMaintenanceOutputWithContext(ctx context.Context) MysqlBackupDbSystemSnapshotMaintenanceOutput {
	return o
}

func (o MysqlBackupDbSystemSnapshotMaintenanceOutput) ToMysqlBackupDbSystemSnapshotMaintenancePtrOutput() MysqlBackupDbSystemSnapshotMaintenancePtrOutput {
	return o.ToMysqlBackupDbSystemSnapshotMaintenancePtrOutputWithContext(context.Background())
}

func (o MysqlBackupDbSystemSnapshotMaintenanceOutput) ToMysqlBackupDbSystemSnapshotMaintenancePtrOutputWithContext(ctx context.Context) MysqlBackupDbSystemSnapshotMaintenancePtrOutput {
	return o.ApplyT(func(v MysqlBackupDbSystemSnapshotMaintenance) *MysqlBackupDbSystemSnapshotMaintenance {
		return &v
	}).(MysqlBackupDbSystemSnapshotMaintenancePtrOutput)
}

// The start time of the maintenance window.
func (o MysqlBackupDbSystemSnapshotMaintenanceOutput) WindowStartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MysqlBackupDbSystemSnapshotMaintenance) *string { return v.WindowStartTime }).(pulumi.StringPtrOutput)
}

type MysqlBackupDbSystemSnapshotMaintenancePtrOutput struct{ *pulumi.OutputState }

func (MysqlBackupDbSystemSnapshotMaintenancePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MysqlBackupDbSystemSnapshotMaintenance)(nil)).Elem()
}

func (o MysqlBackupDbSystemSnapshotMaintenancePtrOutput) ToMysqlBackupDbSystemSnapshotMaintenancePtrOutput() MysqlBackupDbSystemSnapshotMaintenancePtrOutput {
	return o
}

func (o MysqlBackupDbSystemSnapshotMaintenancePtrOutput) ToMysqlBackupDbSystemSnapshotMaintenancePtrOutputWithContext(ctx context.Context) MysqlBackupDbSystemSnapshotMaintenancePtrOutput {
	return o
}

func (o MysqlBackupDbSystemSnapshotMaintenancePtrOutput) Elem() MysqlBackupDbSystemSnapshotMaintenanceOutput {
	return o.ApplyT(func(v *MysqlBackupDbSystemSnapshotMaintenance) MysqlBackupDbSystemSnapshotMaintenance { return *v }).(MysqlBackupDbSystemSnapshotMaintenanceOutput)
}

// The start time of the maintenance window.
func (o MysqlBackupDbSystemSnapshotMaintenancePtrOutput) WindowStartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MysqlBackupDbSystemSnapshotMaintenance) *string {
		if v == nil {
			return nil
		}
		return v.WindowStartTime
	}).(pulumi.StringPtrOutput)
}

type MysqlDbSystemAnalyticsCluster struct {
	// The number of analytics-processing compute instances, of the specified shape, in the HeatWave cluster.
	ClusterSize *int `pulumi:"clusterSize"`
	// The name of the shape. The shape determines the resources allocated
	// * CPU cores and memory for VM shapes; CPU cores, memory and storage for non-VM (or bare metal) shapes. To get a list of shapes, use the [ListShapes](https://docs.cloud.oracle.com/iaas/api/#/en/mysql/20190415/ShapeSummary/ListShapes) operation.
	ShapeName *string `pulumi:"shapeName"`
	// (Updatable) The target state for the DB System. Could be set to `ACTIVE` or `INACTIVE`.
	State *string `pulumi:"state"`
	// The date and time the DB System was created.
	TimeCreated *string `pulumi:"timeCreated"`
	// The time the DB System was last updated.
	TimeUpdated *string `pulumi:"timeUpdated"`
}

// MysqlDbSystemAnalyticsClusterInput is an input type that accepts MysqlDbSystemAnalyticsClusterArgs and MysqlDbSystemAnalyticsClusterOutput values.
// You can construct a concrete instance of `MysqlDbSystemAnalyticsClusterInput` via:
//
//          MysqlDbSystemAnalyticsClusterArgs{...}
type MysqlDbSystemAnalyticsClusterInput interface {
	pulumi.Input

	ToMysqlDbSystemAnalyticsClusterOutput() MysqlDbSystemAnalyticsClusterOutput
	ToMysqlDbSystemAnalyticsClusterOutputWithContext(context.Context) MysqlDbSystemAnalyticsClusterOutput
}

type MysqlDbSystemAnalyticsClusterArgs struct {
	// The number of analytics-processing compute instances, of the specified shape, in the HeatWave cluster.
	ClusterSize pulumi.IntPtrInput `pulumi:"clusterSize"`
	// The name of the shape. The shape determines the resources allocated
	// * CPU cores and memory for VM shapes; CPU cores, memory and storage for non-VM (or bare metal) shapes. To get a list of shapes, use the [ListShapes](https://docs.cloud.oracle.com/iaas/api/#/en/mysql/20190415/ShapeSummary/ListShapes) operation.
	ShapeName pulumi.StringPtrInput `pulumi:"shapeName"`
	// (Updatable) The target state for the DB System. Could be set to `ACTIVE` or `INACTIVE`.
	State pulumi.StringPtrInput `pulumi:"state"`
	// The date and time the DB System was created.
	TimeCreated pulumi.StringPtrInput `pulumi:"timeCreated"`
	// The time the DB System was last updated.
	TimeUpdated pulumi.StringPtrInput `pulumi:"timeUpdated"`
}

func (MysqlDbSystemAnalyticsClusterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MysqlDbSystemAnalyticsCluster)(nil)).Elem()
}

func (i MysqlDbSystemAnalyticsClusterArgs) ToMysqlDbSystemAnalyticsClusterOutput() MysqlDbSystemAnalyticsClusterOutput {
	return i.ToMysqlDbSystemAnalyticsClusterOutputWithContext(context.Background())
}

func (i MysqlDbSystemAnalyticsClusterArgs) ToMysqlDbSystemAnalyticsClusterOutputWithContext(ctx context.Context) MysqlDbSystemAnalyticsClusterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MysqlDbSystemAnalyticsClusterOutput)
}

func (i MysqlDbSystemAnalyticsClusterArgs) ToMysqlDbSystemAnalyticsClusterPtrOutput() MysqlDbSystemAnalyticsClusterPtrOutput {
	return i.ToMysqlDbSystemAnalyticsClusterPtrOutputWithContext(context.Background())
}

func (i MysqlDbSystemAnalyticsClusterArgs) ToMysqlDbSystemAnalyticsClusterPtrOutputWithContext(ctx context.Context) MysqlDbSystemAnalyticsClusterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MysqlDbSystemAnalyticsClusterOutput).ToMysqlDbSystemAnalyticsClusterPtrOutputWithContext(ctx)
}

// MysqlDbSystemAnalyticsClusterPtrInput is an input type that accepts MysqlDbSystemAnalyticsClusterArgs, MysqlDbSystemAnalyticsClusterPtr and MysqlDbSystemAnalyticsClusterPtrOutput values.
// You can construct a concrete instance of `MysqlDbSystemAnalyticsClusterPtrInput` via:
//
//          MysqlDbSystemAnalyticsClusterArgs{...}
//
//  or:
//
//          nil
type MysqlDbSystemAnalyticsClusterPtrInput interface {
	pulumi.Input

	ToMysqlDbSystemAnalyticsClusterPtrOutput() MysqlDbSystemAnalyticsClusterPtrOutput
	ToMysqlDbSystemAnalyticsClusterPtrOutputWithContext(context.Context) MysqlDbSystemAnalyticsClusterPtrOutput
}

type mysqlDbSystemAnalyticsClusterPtrType MysqlDbSystemAnalyticsClusterArgs

func MysqlDbSystemAnalyticsClusterPtr(v *MysqlDbSystemAnalyticsClusterArgs) MysqlDbSystemAnalyticsClusterPtrInput {
	return (*mysqlDbSystemAnalyticsClusterPtrType)(v)
}

func (*mysqlDbSystemAnalyticsClusterPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MysqlDbSystemAnalyticsCluster)(nil)).Elem()
}

func (i *mysqlDbSystemAnalyticsClusterPtrType) ToMysqlDbSystemAnalyticsClusterPtrOutput() MysqlDbSystemAnalyticsClusterPtrOutput {
	return i.ToMysqlDbSystemAnalyticsClusterPtrOutputWithContext(context.Background())
}

func (i *mysqlDbSystemAnalyticsClusterPtrType) ToMysqlDbSystemAnalyticsClusterPtrOutputWithContext(ctx context.Context) MysqlDbSystemAnalyticsClusterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MysqlDbSystemAnalyticsClusterPtrOutput)
}

type MysqlDbSystemAnalyticsClusterOutput struct{ *pulumi.OutputState }

func (MysqlDbSystemAnalyticsClusterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MysqlDbSystemAnalyticsCluster)(nil)).Elem()
}

func (o MysqlDbSystemAnalyticsClusterOutput) ToMysqlDbSystemAnalyticsClusterOutput() MysqlDbSystemAnalyticsClusterOutput {
	return o
}

func (o MysqlDbSystemAnalyticsClusterOutput) ToMysqlDbSystemAnalyticsClusterOutputWithContext(ctx context.Context) MysqlDbSystemAnalyticsClusterOutput {
	return o
}

func (o MysqlDbSystemAnalyticsClusterOutput) ToMysqlDbSystemAnalyticsClusterPtrOutput() MysqlDbSystemAnalyticsClusterPtrOutput {
	return o.ToMysqlDbSystemAnalyticsClusterPtrOutputWithContext(context.Background())
}

func (o MysqlDbSystemAnalyticsClusterOutput) ToMysqlDbSystemAnalyticsClusterPtrOutputWithContext(ctx context.Context) MysqlDbSystemAnalyticsClusterPtrOutput {
	return o.ApplyT(func(v MysqlDbSystemAnalyticsCluster) *MysqlDbSystemAnalyticsCluster {
		return &v
	}).(MysqlDbSystemAnalyticsClusterPtrOutput)
}

// The number of analytics-processing compute instances, of the specified shape, in the HeatWave cluster.
func (o MysqlDbSystemAnalyticsClusterOutput) ClusterSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v MysqlDbSystemAnalyticsCluster) *int { return v.ClusterSize }).(pulumi.IntPtrOutput)
}

// The name of the shape. The shape determines the resources allocated
// * CPU cores and memory for VM shapes; CPU cores, memory and storage for non-VM (or bare metal) shapes. To get a list of shapes, use the [ListShapes](https://docs.cloud.oracle.com/iaas/api/#/en/mysql/20190415/ShapeSummary/ListShapes) operation.
func (o MysqlDbSystemAnalyticsClusterOutput) ShapeName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MysqlDbSystemAnalyticsCluster) *string { return v.ShapeName }).(pulumi.StringPtrOutput)
}

// (Updatable) The target state for the DB System. Could be set to `ACTIVE` or `INACTIVE`.
func (o MysqlDbSystemAnalyticsClusterOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MysqlDbSystemAnalyticsCluster) *string { return v.State }).(pulumi.StringPtrOutput)
}

// The date and time the DB System was created.
func (o MysqlDbSystemAnalyticsClusterOutput) TimeCreated() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MysqlDbSystemAnalyticsCluster) *string { return v.TimeCreated }).(pulumi.StringPtrOutput)
}

// The time the DB System was last updated.
func (o MysqlDbSystemAnalyticsClusterOutput) TimeUpdated() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MysqlDbSystemAnalyticsCluster) *string { return v.TimeUpdated }).(pulumi.StringPtrOutput)
}

type MysqlDbSystemAnalyticsClusterPtrOutput struct{ *pulumi.OutputState }

func (MysqlDbSystemAnalyticsClusterPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MysqlDbSystemAnalyticsCluster)(nil)).Elem()
}

func (o MysqlDbSystemAnalyticsClusterPtrOutput) ToMysqlDbSystemAnalyticsClusterPtrOutput() MysqlDbSystemAnalyticsClusterPtrOutput {
	return o
}

func (o MysqlDbSystemAnalyticsClusterPtrOutput) ToMysqlDbSystemAnalyticsClusterPtrOutputWithContext(ctx context.Context) MysqlDbSystemAnalyticsClusterPtrOutput {
	return o
}

func (o MysqlDbSystemAnalyticsClusterPtrOutput) Elem() MysqlDbSystemAnalyticsClusterOutput {
	return o.ApplyT(func(v *MysqlDbSystemAnalyticsCluster) MysqlDbSystemAnalyticsCluster { return *v }).(MysqlDbSystemAnalyticsClusterOutput)
}

// The number of analytics-processing compute instances, of the specified shape, in the HeatWave cluster.
func (o MysqlDbSystemAnalyticsClusterPtrOutput) ClusterSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *MysqlDbSystemAnalyticsCluster) *int {
		if v == nil {
			return nil
		}
		return v.ClusterSize
	}).(pulumi.IntPtrOutput)
}

// The name of the shape. The shape determines the resources allocated
// * CPU cores and memory for VM shapes; CPU cores, memory and storage for non-VM (or bare metal) shapes. To get a list of shapes, use the [ListShapes](https://docs.cloud.oracle.com/iaas/api/#/en/mysql/20190415/ShapeSummary/ListShapes) operation.
func (o MysqlDbSystemAnalyticsClusterPtrOutput) ShapeName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MysqlDbSystemAnalyticsCluster) *string {
		if v == nil {
			return nil
		}
		return v.ShapeName
	}).(pulumi.StringPtrOutput)
}

// (Updatable) The target state for the DB System. Could be set to `ACTIVE` or `INACTIVE`.
func (o MysqlDbSystemAnalyticsClusterPtrOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MysqlDbSystemAnalyticsCluster) *string {
		if v == nil {
			return nil
		}
		return v.State
	}).(pulumi.StringPtrOutput)
}

// The date and time the DB System was created.
func (o MysqlDbSystemAnalyticsClusterPtrOutput) TimeCreated() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MysqlDbSystemAnalyticsCluster) *string {
		if v == nil {
			return nil
		}
		return v.TimeCreated
	}).(pulumi.StringPtrOutput)
}

// The time the DB System was last updated.
func (o MysqlDbSystemAnalyticsClusterPtrOutput) TimeUpdated() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MysqlDbSystemAnalyticsCluster) *string {
		if v == nil {
			return nil
		}
		return v.TimeUpdated
	}).(pulumi.StringPtrOutput)
}

type MysqlDbSystemBackupPolicy struct {
	// (Updatable) Usage of predefined tag keys. These predefined keys are scoped to namespaces. Example: `{"foo-namespace.bar-key": "value"}`
	DefinedTags map[string]interface{} `pulumi:"definedTags"`
	// (Updatable) Simple key-value pair applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
	FreeformTags map[string]interface{} `pulumi:"freeformTags"`
	// (Updatable) Specifies if automatic backups are enabled.
	IsEnabled *bool `pulumi:"isEnabled"`
	// (Updatable) Number of days to retain an automatic backup.
	RetentionInDays *int `pulumi:"retentionInDays"`
	// (Updatable) The start of the 2 hour maintenance window.
	WindowStartTime *string `pulumi:"windowStartTime"`
}

// MysqlDbSystemBackupPolicyInput is an input type that accepts MysqlDbSystemBackupPolicyArgs and MysqlDbSystemBackupPolicyOutput values.
// You can construct a concrete instance of `MysqlDbSystemBackupPolicyInput` via:
//
//          MysqlDbSystemBackupPolicyArgs{...}
type MysqlDbSystemBackupPolicyInput interface {
	pulumi.Input

	ToMysqlDbSystemBackupPolicyOutput() MysqlDbSystemBackupPolicyOutput
	ToMysqlDbSystemBackupPolicyOutputWithContext(context.Context) MysqlDbSystemBackupPolicyOutput
}

type MysqlDbSystemBackupPolicyArgs struct {
	// (Updatable) Usage of predefined tag keys. These predefined keys are scoped to namespaces. Example: `{"foo-namespace.bar-key": "value"}`
	DefinedTags pulumi.MapInput `pulumi:"definedTags"`
	// (Updatable) Simple key-value pair applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
	FreeformTags pulumi.MapInput `pulumi:"freeformTags"`
	// (Updatable) Specifies if automatic backups are enabled.
	IsEnabled pulumi.BoolPtrInput `pulumi:"isEnabled"`
	// (Updatable) Number of days to retain an automatic backup.
	RetentionInDays pulumi.IntPtrInput `pulumi:"retentionInDays"`
	// (Updatable) The start of the 2 hour maintenance window.
	WindowStartTime pulumi.StringPtrInput `pulumi:"windowStartTime"`
}

func (MysqlDbSystemBackupPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MysqlDbSystemBackupPolicy)(nil)).Elem()
}

func (i MysqlDbSystemBackupPolicyArgs) ToMysqlDbSystemBackupPolicyOutput() MysqlDbSystemBackupPolicyOutput {
	return i.ToMysqlDbSystemBackupPolicyOutputWithContext(context.Background())
}

func (i MysqlDbSystemBackupPolicyArgs) ToMysqlDbSystemBackupPolicyOutputWithContext(ctx context.Context) MysqlDbSystemBackupPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MysqlDbSystemBackupPolicyOutput)
}

func (i MysqlDbSystemBackupPolicyArgs) ToMysqlDbSystemBackupPolicyPtrOutput() MysqlDbSystemBackupPolicyPtrOutput {
	return i.ToMysqlDbSystemBackupPolicyPtrOutputWithContext(context.Background())
}

func (i MysqlDbSystemBackupPolicyArgs) ToMysqlDbSystemBackupPolicyPtrOutputWithContext(ctx context.Context) MysqlDbSystemBackupPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MysqlDbSystemBackupPolicyOutput).ToMysqlDbSystemBackupPolicyPtrOutputWithContext(ctx)
}

// MysqlDbSystemBackupPolicyPtrInput is an input type that accepts MysqlDbSystemBackupPolicyArgs, MysqlDbSystemBackupPolicyPtr and MysqlDbSystemBackupPolicyPtrOutput values.
// You can construct a concrete instance of `MysqlDbSystemBackupPolicyPtrInput` via:
//
//          MysqlDbSystemBackupPolicyArgs{...}
//
//  or:
//
//          nil
type MysqlDbSystemBackupPolicyPtrInput interface {
	pulumi.Input

	ToMysqlDbSystemBackupPolicyPtrOutput() MysqlDbSystemBackupPolicyPtrOutput
	ToMysqlDbSystemBackupPolicyPtrOutputWithContext(context.Context) MysqlDbSystemBackupPolicyPtrOutput
}

type mysqlDbSystemBackupPolicyPtrType MysqlDbSystemBackupPolicyArgs

func MysqlDbSystemBackupPolicyPtr(v *MysqlDbSystemBackupPolicyArgs) MysqlDbSystemBackupPolicyPtrInput {
	return (*mysqlDbSystemBackupPolicyPtrType)(v)
}

func (*mysqlDbSystemBackupPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MysqlDbSystemBackupPolicy)(nil)).Elem()
}

func (i *mysqlDbSystemBackupPolicyPtrType) ToMysqlDbSystemBackupPolicyPtrOutput() MysqlDbSystemBackupPolicyPtrOutput {
	return i.ToMysqlDbSystemBackupPolicyPtrOutputWithContext(context.Background())
}

func (i *mysqlDbSystemBackupPolicyPtrType) ToMysqlDbSystemBackupPolicyPtrOutputWithContext(ctx context.Context) MysqlDbSystemBackupPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MysqlDbSystemBackupPolicyPtrOutput)
}

type MysqlDbSystemBackupPolicyOutput struct{ *pulumi.OutputState }

func (MysqlDbSystemBackupPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MysqlDbSystemBackupPolicy)(nil)).Elem()
}

func (o MysqlDbSystemBackupPolicyOutput) ToMysqlDbSystemBackupPolicyOutput() MysqlDbSystemBackupPolicyOutput {
	return o
}

func (o MysqlDbSystemBackupPolicyOutput) ToMysqlDbSystemBackupPolicyOutputWithContext(ctx context.Context) MysqlDbSystemBackupPolicyOutput {
	return o
}

func (o MysqlDbSystemBackupPolicyOutput) ToMysqlDbSystemBackupPolicyPtrOutput() MysqlDbSystemBackupPolicyPtrOutput {
	return o.ToMysqlDbSystemBackupPolicyPtrOutputWithContext(context.Background())
}

func (o MysqlDbSystemBackupPolicyOutput) ToMysqlDbSystemBackupPolicyPtrOutputWithContext(ctx context.Context) MysqlDbSystemBackupPolicyPtrOutput {
	return o.ApplyT(func(v MysqlDbSystemBackupPolicy) *MysqlDbSystemBackupPolicy {
		return &v
	}).(MysqlDbSystemBackupPolicyPtrOutput)
}

// (Updatable) Usage of predefined tag keys. These predefined keys are scoped to namespaces. Example: `{"foo-namespace.bar-key": "value"}`
func (o MysqlDbSystemBackupPolicyOutput) DefinedTags() pulumi.MapOutput {
	return o.ApplyT(func(v MysqlDbSystemBackupPolicy) map[string]interface{} { return v.DefinedTags }).(pulumi.MapOutput)
}

// (Updatable) Simple key-value pair applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
func (o MysqlDbSystemBackupPolicyOutput) FreeformTags() pulumi.MapOutput {
	return o.ApplyT(func(v MysqlDbSystemBackupPolicy) map[string]interface{} { return v.FreeformTags }).(pulumi.MapOutput)
}

// (Updatable) Specifies if automatic backups are enabled.
func (o MysqlDbSystemBackupPolicyOutput) IsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v MysqlDbSystemBackupPolicy) *bool { return v.IsEnabled }).(pulumi.BoolPtrOutput)
}

// (Updatable) Number of days to retain an automatic backup.
func (o MysqlDbSystemBackupPolicyOutput) RetentionInDays() pulumi.IntPtrOutput {
	return o.ApplyT(func(v MysqlDbSystemBackupPolicy) *int { return v.RetentionInDays }).(pulumi.IntPtrOutput)
}

// (Updatable) The start of the 2 hour maintenance window.
func (o MysqlDbSystemBackupPolicyOutput) WindowStartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MysqlDbSystemBackupPolicy) *string { return v.WindowStartTime }).(pulumi.StringPtrOutput)
}

type MysqlDbSystemBackupPolicyPtrOutput struct{ *pulumi.OutputState }

func (MysqlDbSystemBackupPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MysqlDbSystemBackupPolicy)(nil)).Elem()
}

func (o MysqlDbSystemBackupPolicyPtrOutput) ToMysqlDbSystemBackupPolicyPtrOutput() MysqlDbSystemBackupPolicyPtrOutput {
	return o
}

func (o MysqlDbSystemBackupPolicyPtrOutput) ToMysqlDbSystemBackupPolicyPtrOutputWithContext(ctx context.Context) MysqlDbSystemBackupPolicyPtrOutput {
	return o
}

func (o MysqlDbSystemBackupPolicyPtrOutput) Elem() MysqlDbSystemBackupPolicyOutput {
	return o.ApplyT(func(v *MysqlDbSystemBackupPolicy) MysqlDbSystemBackupPolicy { return *v }).(MysqlDbSystemBackupPolicyOutput)
}

// (Updatable) Usage of predefined tag keys. These predefined keys are scoped to namespaces. Example: `{"foo-namespace.bar-key": "value"}`
func (o MysqlDbSystemBackupPolicyPtrOutput) DefinedTags() pulumi.MapOutput {
	return o.ApplyT(func(v *MysqlDbSystemBackupPolicy) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.DefinedTags
	}).(pulumi.MapOutput)
}

// (Updatable) Simple key-value pair applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
func (o MysqlDbSystemBackupPolicyPtrOutput) FreeformTags() pulumi.MapOutput {
	return o.ApplyT(func(v *MysqlDbSystemBackupPolicy) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.FreeformTags
	}).(pulumi.MapOutput)
}

// (Updatable) Specifies if automatic backups are enabled.
func (o MysqlDbSystemBackupPolicyPtrOutput) IsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *MysqlDbSystemBackupPolicy) *bool {
		if v == nil {
			return nil
		}
		return v.IsEnabled
	}).(pulumi.BoolPtrOutput)
}

// (Updatable) Number of days to retain an automatic backup.
func (o MysqlDbSystemBackupPolicyPtrOutput) RetentionInDays() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *MysqlDbSystemBackupPolicy) *int {
		if v == nil {
			return nil
		}
		return v.RetentionInDays
	}).(pulumi.IntPtrOutput)
}

// (Updatable) The start of the 2 hour maintenance window.
func (o MysqlDbSystemBackupPolicyPtrOutput) WindowStartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MysqlDbSystemBackupPolicy) *string {
		if v == nil {
			return nil
		}
		return v.WindowStartTime
	}).(pulumi.StringPtrOutput)
}

type MysqlDbSystemChannel struct {
	// The OCID of the compartment.
	CompartmentId *string `pulumi:"compartmentId"`
	// (Updatable) Usage of predefined tag keys. These predefined keys are scoped to namespaces. Example: `{"foo-namespace.bar-key": "value"}`
	DefinedTags map[string]interface{} `pulumi:"definedTags"`
	// (Updatable) The user-friendly name for the DB System. It does not have to be unique.
	DisplayName *string `pulumi:"displayName"`
	// (Updatable) Simple key-value pair applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
	FreeformTags map[string]interface{} `pulumi:"freeformTags"`
	// The OCID of the DB System.
	Id *string `pulumi:"id"`
	// (Updatable) Specifies if automatic backups are enabled.
	IsEnabled *bool `pulumi:"isEnabled"`
	// Additional information about the current lifecycleState.
	LifecycleDetails *string `pulumi:"lifecycleDetails"`
	// Parameters detailing how to provision the initial data of the system.
	Source *MysqlDbSystemChannelSource `pulumi:"source"`
	// (Updatable) The target state for the DB System. Could be set to `ACTIVE` or `INACTIVE`.
	State *string `pulumi:"state"`
	// Details about the Channel target.
	Target *MysqlDbSystemChannelTarget `pulumi:"target"`
	// The date and time the DB System was created.
	TimeCreated *string `pulumi:"timeCreated"`
	// The time the DB System was last updated.
	TimeUpdated *string `pulumi:"timeUpdated"`
}

// MysqlDbSystemChannelInput is an input type that accepts MysqlDbSystemChannelArgs and MysqlDbSystemChannelOutput values.
// You can construct a concrete instance of `MysqlDbSystemChannelInput` via:
//
//          MysqlDbSystemChannelArgs{...}
type MysqlDbSystemChannelInput interface {
	pulumi.Input

	ToMysqlDbSystemChannelOutput() MysqlDbSystemChannelOutput
	ToMysqlDbSystemChannelOutputWithContext(context.Context) MysqlDbSystemChannelOutput
}

type MysqlDbSystemChannelArgs struct {
	// The OCID of the compartment.
	CompartmentId pulumi.StringPtrInput `pulumi:"compartmentId"`
	// (Updatable) Usage of predefined tag keys. These predefined keys are scoped to namespaces. Example: `{"foo-namespace.bar-key": "value"}`
	DefinedTags pulumi.MapInput `pulumi:"definedTags"`
	// (Updatable) The user-friendly name for the DB System. It does not have to be unique.
	DisplayName pulumi.StringPtrInput `pulumi:"displayName"`
	// (Updatable) Simple key-value pair applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
	FreeformTags pulumi.MapInput `pulumi:"freeformTags"`
	// The OCID of the DB System.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// (Updatable) Specifies if automatic backups are enabled.
	IsEnabled pulumi.BoolPtrInput `pulumi:"isEnabled"`
	// Additional information about the current lifecycleState.
	LifecycleDetails pulumi.StringPtrInput `pulumi:"lifecycleDetails"`
	// Parameters detailing how to provision the initial data of the system.
	Source MysqlDbSystemChannelSourcePtrInput `pulumi:"source"`
	// (Updatable) The target state for the DB System. Could be set to `ACTIVE` or `INACTIVE`.
	State pulumi.StringPtrInput `pulumi:"state"`
	// Details about the Channel target.
	Target MysqlDbSystemChannelTargetPtrInput `pulumi:"target"`
	// The date and time the DB System was created.
	TimeCreated pulumi.StringPtrInput `pulumi:"timeCreated"`
	// The time the DB System was last updated.
	TimeUpdated pulumi.StringPtrInput `pulumi:"timeUpdated"`
}

func (MysqlDbSystemChannelArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MysqlDbSystemChannel)(nil)).Elem()
}

func (i MysqlDbSystemChannelArgs) ToMysqlDbSystemChannelOutput() MysqlDbSystemChannelOutput {
	return i.ToMysqlDbSystemChannelOutputWithContext(context.Background())
}

func (i MysqlDbSystemChannelArgs) ToMysqlDbSystemChannelOutputWithContext(ctx context.Context) MysqlDbSystemChannelOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MysqlDbSystemChannelOutput)
}

// MysqlDbSystemChannelArrayInput is an input type that accepts MysqlDbSystemChannelArray and MysqlDbSystemChannelArrayOutput values.
// You can construct a concrete instance of `MysqlDbSystemChannelArrayInput` via:
//
//          MysqlDbSystemChannelArray{ MysqlDbSystemChannelArgs{...} }
type MysqlDbSystemChannelArrayInput interface {
	pulumi.Input

	ToMysqlDbSystemChannelArrayOutput() MysqlDbSystemChannelArrayOutput
	ToMysqlDbSystemChannelArrayOutputWithContext(context.Context) MysqlDbSystemChannelArrayOutput
}

type MysqlDbSystemChannelArray []MysqlDbSystemChannelInput

func (MysqlDbSystemChannelArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MysqlDbSystemChannel)(nil)).Elem()
}

func (i MysqlDbSystemChannelArray) ToMysqlDbSystemChannelArrayOutput() MysqlDbSystemChannelArrayOutput {
	return i.ToMysqlDbSystemChannelArrayOutputWithContext(context.Background())
}

func (i MysqlDbSystemChannelArray) ToMysqlDbSystemChannelArrayOutputWithContext(ctx context.Context) MysqlDbSystemChannelArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MysqlDbSystemChannelArrayOutput)
}

type MysqlDbSystemChannelOutput struct{ *pulumi.OutputState }

func (MysqlDbSystemChannelOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MysqlDbSystemChannel)(nil)).Elem()
}

func (o MysqlDbSystemChannelOutput) ToMysqlDbSystemChannelOutput() MysqlDbSystemChannelOutput {
	return o
}

func (o MysqlDbSystemChannelOutput) ToMysqlDbSystemChannelOutputWithContext(ctx context.Context) MysqlDbSystemChannelOutput {
	return o
}

// The OCID of the compartment.
func (o MysqlDbSystemChannelOutput) CompartmentId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MysqlDbSystemChannel) *string { return v.CompartmentId }).(pulumi.StringPtrOutput)
}

// (Updatable) Usage of predefined tag keys. These predefined keys are scoped to namespaces. Example: `{"foo-namespace.bar-key": "value"}`
func (o MysqlDbSystemChannelOutput) DefinedTags() pulumi.MapOutput {
	return o.ApplyT(func(v MysqlDbSystemChannel) map[string]interface{} { return v.DefinedTags }).(pulumi.MapOutput)
}

// (Updatable) The user-friendly name for the DB System. It does not have to be unique.
func (o MysqlDbSystemChannelOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MysqlDbSystemChannel) *string { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// (Updatable) Simple key-value pair applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
func (o MysqlDbSystemChannelOutput) FreeformTags() pulumi.MapOutput {
	return o.ApplyT(func(v MysqlDbSystemChannel) map[string]interface{} { return v.FreeformTags }).(pulumi.MapOutput)
}

// The OCID of the DB System.
func (o MysqlDbSystemChannelOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MysqlDbSystemChannel) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// (Updatable) Specifies if automatic backups are enabled.
func (o MysqlDbSystemChannelOutput) IsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v MysqlDbSystemChannel) *bool { return v.IsEnabled }).(pulumi.BoolPtrOutput)
}

// Additional information about the current lifecycleState.
func (o MysqlDbSystemChannelOutput) LifecycleDetails() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MysqlDbSystemChannel) *string { return v.LifecycleDetails }).(pulumi.StringPtrOutput)
}

// Parameters detailing how to provision the initial data of the system.
func (o MysqlDbSystemChannelOutput) Source() MysqlDbSystemChannelSourcePtrOutput {
	return o.ApplyT(func(v MysqlDbSystemChannel) *MysqlDbSystemChannelSource { return v.Source }).(MysqlDbSystemChannelSourcePtrOutput)
}

// (Updatable) The target state for the DB System. Could be set to `ACTIVE` or `INACTIVE`.
func (o MysqlDbSystemChannelOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MysqlDbSystemChannel) *string { return v.State }).(pulumi.StringPtrOutput)
}

// Details about the Channel target.
func (o MysqlDbSystemChannelOutput) Target() MysqlDbSystemChannelTargetPtrOutput {
	return o.ApplyT(func(v MysqlDbSystemChannel) *MysqlDbSystemChannelTarget { return v.Target }).(MysqlDbSystemChannelTargetPtrOutput)
}

// The date and time the DB System was created.
func (o MysqlDbSystemChannelOutput) TimeCreated() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MysqlDbSystemChannel) *string { return v.TimeCreated }).(pulumi.StringPtrOutput)
}

// The time the DB System was last updated.
func (o MysqlDbSystemChannelOutput) TimeUpdated() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MysqlDbSystemChannel) *string { return v.TimeUpdated }).(pulumi.StringPtrOutput)
}

type MysqlDbSystemChannelArrayOutput struct{ *pulumi.OutputState }

func (MysqlDbSystemChannelArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MysqlDbSystemChannel)(nil)).Elem()
}

func (o MysqlDbSystemChannelArrayOutput) ToMysqlDbSystemChannelArrayOutput() MysqlDbSystemChannelArrayOutput {
	return o
}

func (o MysqlDbSystemChannelArrayOutput) ToMysqlDbSystemChannelArrayOutputWithContext(ctx context.Context) MysqlDbSystemChannelArrayOutput {
	return o
}

func (o MysqlDbSystemChannelArrayOutput) Index(i pulumi.IntInput) MysqlDbSystemChannelOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MysqlDbSystemChannel {
		return vs[0].([]MysqlDbSystemChannel)[vs[1].(int)]
	}).(MysqlDbSystemChannelOutput)
}

type MysqlDbSystemChannelSource struct {
	// The network address of the DB System.
	Hostname *string `pulumi:"hostname"`
	// The port for primary endpoint of the DB System to listen on.
	Port *int `pulumi:"port"`
	// The specific source identifier. Use `BACKUP` for creating a new database by restoring from a backup.
	SourceType *string `pulumi:"sourceType"`
	// The CA certificate of the server used for VERIFY_IDENTITY and VERIFY_CA ssl modes.
	SslCaCertificate *MysqlDbSystemChannelSourceSslCaCertificate `pulumi:"sslCaCertificate"`
	// The SSL mode of the Channel.
	SslMode *string `pulumi:"sslMode"`
	// The name of the replication user on the source MySQL instance. The username has a maximum length of 96 characters. For more information, please see the [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/change-master-to.html)
	Username *string `pulumi:"username"`
}

// MysqlDbSystemChannelSourceInput is an input type that accepts MysqlDbSystemChannelSourceArgs and MysqlDbSystemChannelSourceOutput values.
// You can construct a concrete instance of `MysqlDbSystemChannelSourceInput` via:
//
//          MysqlDbSystemChannelSourceArgs{...}
type MysqlDbSystemChannelSourceInput interface {
	pulumi.Input

	ToMysqlDbSystemChannelSourceOutput() MysqlDbSystemChannelSourceOutput
	ToMysqlDbSystemChannelSourceOutputWithContext(context.Context) MysqlDbSystemChannelSourceOutput
}

type MysqlDbSystemChannelSourceArgs struct {
	// The network address of the DB System.
	Hostname pulumi.StringPtrInput `pulumi:"hostname"`
	// The port for primary endpoint of the DB System to listen on.
	Port pulumi.IntPtrInput `pulumi:"port"`
	// The specific source identifier. Use `BACKUP` for creating a new database by restoring from a backup.
	SourceType pulumi.StringPtrInput `pulumi:"sourceType"`
	// The CA certificate of the server used for VERIFY_IDENTITY and VERIFY_CA ssl modes.
	SslCaCertificate MysqlDbSystemChannelSourceSslCaCertificatePtrInput `pulumi:"sslCaCertificate"`
	// The SSL mode of the Channel.
	SslMode pulumi.StringPtrInput `pulumi:"sslMode"`
	// The name of the replication user on the source MySQL instance. The username has a maximum length of 96 characters. For more information, please see the [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/change-master-to.html)
	Username pulumi.StringPtrInput `pulumi:"username"`
}

func (MysqlDbSystemChannelSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MysqlDbSystemChannelSource)(nil)).Elem()
}

func (i MysqlDbSystemChannelSourceArgs) ToMysqlDbSystemChannelSourceOutput() MysqlDbSystemChannelSourceOutput {
	return i.ToMysqlDbSystemChannelSourceOutputWithContext(context.Background())
}

func (i MysqlDbSystemChannelSourceArgs) ToMysqlDbSystemChannelSourceOutputWithContext(ctx context.Context) MysqlDbSystemChannelSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MysqlDbSystemChannelSourceOutput)
}

func (i MysqlDbSystemChannelSourceArgs) ToMysqlDbSystemChannelSourcePtrOutput() MysqlDbSystemChannelSourcePtrOutput {
	return i.ToMysqlDbSystemChannelSourcePtrOutputWithContext(context.Background())
}

func (i MysqlDbSystemChannelSourceArgs) ToMysqlDbSystemChannelSourcePtrOutputWithContext(ctx context.Context) MysqlDbSystemChannelSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MysqlDbSystemChannelSourceOutput).ToMysqlDbSystemChannelSourcePtrOutputWithContext(ctx)
}

// MysqlDbSystemChannelSourcePtrInput is an input type that accepts MysqlDbSystemChannelSourceArgs, MysqlDbSystemChannelSourcePtr and MysqlDbSystemChannelSourcePtrOutput values.
// You can construct a concrete instance of `MysqlDbSystemChannelSourcePtrInput` via:
//
//          MysqlDbSystemChannelSourceArgs{...}
//
//  or:
//
//          nil
type MysqlDbSystemChannelSourcePtrInput interface {
	pulumi.Input

	ToMysqlDbSystemChannelSourcePtrOutput() MysqlDbSystemChannelSourcePtrOutput
	ToMysqlDbSystemChannelSourcePtrOutputWithContext(context.Context) MysqlDbSystemChannelSourcePtrOutput
}

type mysqlDbSystemChannelSourcePtrType MysqlDbSystemChannelSourceArgs

func MysqlDbSystemChannelSourcePtr(v *MysqlDbSystemChannelSourceArgs) MysqlDbSystemChannelSourcePtrInput {
	return (*mysqlDbSystemChannelSourcePtrType)(v)
}

func (*mysqlDbSystemChannelSourcePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MysqlDbSystemChannelSource)(nil)).Elem()
}

func (i *mysqlDbSystemChannelSourcePtrType) ToMysqlDbSystemChannelSourcePtrOutput() MysqlDbSystemChannelSourcePtrOutput {
	return i.ToMysqlDbSystemChannelSourcePtrOutputWithContext(context.Background())
}

func (i *mysqlDbSystemChannelSourcePtrType) ToMysqlDbSystemChannelSourcePtrOutputWithContext(ctx context.Context) MysqlDbSystemChannelSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MysqlDbSystemChannelSourcePtrOutput)
}

type MysqlDbSystemChannelSourceOutput struct{ *pulumi.OutputState }

func (MysqlDbSystemChannelSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MysqlDbSystemChannelSource)(nil)).Elem()
}

func (o MysqlDbSystemChannelSourceOutput) ToMysqlDbSystemChannelSourceOutput() MysqlDbSystemChannelSourceOutput {
	return o
}

func (o MysqlDbSystemChannelSourceOutput) ToMysqlDbSystemChannelSourceOutputWithContext(ctx context.Context) MysqlDbSystemChannelSourceOutput {
	return o
}

func (o MysqlDbSystemChannelSourceOutput) ToMysqlDbSystemChannelSourcePtrOutput() MysqlDbSystemChannelSourcePtrOutput {
	return o.ToMysqlDbSystemChannelSourcePtrOutputWithContext(context.Background())
}

func (o MysqlDbSystemChannelSourceOutput) ToMysqlDbSystemChannelSourcePtrOutputWithContext(ctx context.Context) MysqlDbSystemChannelSourcePtrOutput {
	return o.ApplyT(func(v MysqlDbSystemChannelSource) *MysqlDbSystemChannelSource {
		return &v
	}).(MysqlDbSystemChannelSourcePtrOutput)
}

// The network address of the DB System.
func (o MysqlDbSystemChannelSourceOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MysqlDbSystemChannelSource) *string { return v.Hostname }).(pulumi.StringPtrOutput)
}

// The port for primary endpoint of the DB System to listen on.
func (o MysqlDbSystemChannelSourceOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v MysqlDbSystemChannelSource) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// The specific source identifier. Use `BACKUP` for creating a new database by restoring from a backup.
func (o MysqlDbSystemChannelSourceOutput) SourceType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MysqlDbSystemChannelSource) *string { return v.SourceType }).(pulumi.StringPtrOutput)
}

// The CA certificate of the server used for VERIFY_IDENTITY and VERIFY_CA ssl modes.
func (o MysqlDbSystemChannelSourceOutput) SslCaCertificate() MysqlDbSystemChannelSourceSslCaCertificatePtrOutput {
	return o.ApplyT(func(v MysqlDbSystemChannelSource) *MysqlDbSystemChannelSourceSslCaCertificate {
		return v.SslCaCertificate
	}).(MysqlDbSystemChannelSourceSslCaCertificatePtrOutput)
}

// The SSL mode of the Channel.
func (o MysqlDbSystemChannelSourceOutput) SslMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MysqlDbSystemChannelSource) *string { return v.SslMode }).(pulumi.StringPtrOutput)
}

// The name of the replication user on the source MySQL instance. The username has a maximum length of 96 characters. For more information, please see the [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/change-master-to.html)
func (o MysqlDbSystemChannelSourceOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MysqlDbSystemChannelSource) *string { return v.Username }).(pulumi.StringPtrOutput)
}

type MysqlDbSystemChannelSourcePtrOutput struct{ *pulumi.OutputState }

func (MysqlDbSystemChannelSourcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MysqlDbSystemChannelSource)(nil)).Elem()
}

func (o MysqlDbSystemChannelSourcePtrOutput) ToMysqlDbSystemChannelSourcePtrOutput() MysqlDbSystemChannelSourcePtrOutput {
	return o
}

func (o MysqlDbSystemChannelSourcePtrOutput) ToMysqlDbSystemChannelSourcePtrOutputWithContext(ctx context.Context) MysqlDbSystemChannelSourcePtrOutput {
	return o
}

func (o MysqlDbSystemChannelSourcePtrOutput) Elem() MysqlDbSystemChannelSourceOutput {
	return o.ApplyT(func(v *MysqlDbSystemChannelSource) MysqlDbSystemChannelSource { return *v }).(MysqlDbSystemChannelSourceOutput)
}

// The network address of the DB System.
func (o MysqlDbSystemChannelSourcePtrOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MysqlDbSystemChannelSource) *string {
		if v == nil {
			return nil
		}
		return v.Hostname
	}).(pulumi.StringPtrOutput)
}

// The port for primary endpoint of the DB System to listen on.
func (o MysqlDbSystemChannelSourcePtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *MysqlDbSystemChannelSource) *int {
		if v == nil {
			return nil
		}
		return v.Port
	}).(pulumi.IntPtrOutput)
}

// The specific source identifier. Use `BACKUP` for creating a new database by restoring from a backup.
func (o MysqlDbSystemChannelSourcePtrOutput) SourceType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MysqlDbSystemChannelSource) *string {
		if v == nil {
			return nil
		}
		return v.SourceType
	}).(pulumi.StringPtrOutput)
}

// The CA certificate of the server used for VERIFY_IDENTITY and VERIFY_CA ssl modes.
func (o MysqlDbSystemChannelSourcePtrOutput) SslCaCertificate() MysqlDbSystemChannelSourceSslCaCertificatePtrOutput {
	return o.ApplyT(func(v *MysqlDbSystemChannelSource) *MysqlDbSystemChannelSourceSslCaCertificate {
		if v == nil {
			return nil
		}
		return v.SslCaCertificate
	}).(MysqlDbSystemChannelSourceSslCaCertificatePtrOutput)
}

// The SSL mode of the Channel.
func (o MysqlDbSystemChannelSourcePtrOutput) SslMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MysqlDbSystemChannelSource) *string {
		if v == nil {
			return nil
		}
		return v.SslMode
	}).(pulumi.StringPtrOutput)
}

// The name of the replication user on the source MySQL instance. The username has a maximum length of 96 characters. For more information, please see the [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/change-master-to.html)
func (o MysqlDbSystemChannelSourcePtrOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MysqlDbSystemChannelSource) *string {
		if v == nil {
			return nil
		}
		return v.Username
	}).(pulumi.StringPtrOutput)
}

type MysqlDbSystemChannelSourceSslCaCertificate struct {
	// The type of CA certificate.
	CertificateType *string `pulumi:"certificateType"`
	// The string containing the CA certificate in PEM format.
	Contents *string `pulumi:"contents"`
}

// MysqlDbSystemChannelSourceSslCaCertificateInput is an input type that accepts MysqlDbSystemChannelSourceSslCaCertificateArgs and MysqlDbSystemChannelSourceSslCaCertificateOutput values.
// You can construct a concrete instance of `MysqlDbSystemChannelSourceSslCaCertificateInput` via:
//
//          MysqlDbSystemChannelSourceSslCaCertificateArgs{...}
type MysqlDbSystemChannelSourceSslCaCertificateInput interface {
	pulumi.Input

	ToMysqlDbSystemChannelSourceSslCaCertificateOutput() MysqlDbSystemChannelSourceSslCaCertificateOutput
	ToMysqlDbSystemChannelSourceSslCaCertificateOutputWithContext(context.Context) MysqlDbSystemChannelSourceSslCaCertificateOutput
}

type MysqlDbSystemChannelSourceSslCaCertificateArgs struct {
	// The type of CA certificate.
	CertificateType pulumi.StringPtrInput `pulumi:"certificateType"`
	// The string containing the CA certificate in PEM format.
	Contents pulumi.StringPtrInput `pulumi:"contents"`
}

func (MysqlDbSystemChannelSourceSslCaCertificateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MysqlDbSystemChannelSourceSslCaCertificate)(nil)).Elem()
}

func (i MysqlDbSystemChannelSourceSslCaCertificateArgs) ToMysqlDbSystemChannelSourceSslCaCertificateOutput() MysqlDbSystemChannelSourceSslCaCertificateOutput {
	return i.ToMysqlDbSystemChannelSourceSslCaCertificateOutputWithContext(context.Background())
}

func (i MysqlDbSystemChannelSourceSslCaCertificateArgs) ToMysqlDbSystemChannelSourceSslCaCertificateOutputWithContext(ctx context.Context) MysqlDbSystemChannelSourceSslCaCertificateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MysqlDbSystemChannelSourceSslCaCertificateOutput)
}

func (i MysqlDbSystemChannelSourceSslCaCertificateArgs) ToMysqlDbSystemChannelSourceSslCaCertificatePtrOutput() MysqlDbSystemChannelSourceSslCaCertificatePtrOutput {
	return i.ToMysqlDbSystemChannelSourceSslCaCertificatePtrOutputWithContext(context.Background())
}

func (i MysqlDbSystemChannelSourceSslCaCertificateArgs) ToMysqlDbSystemChannelSourceSslCaCertificatePtrOutputWithContext(ctx context.Context) MysqlDbSystemChannelSourceSslCaCertificatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MysqlDbSystemChannelSourceSslCaCertificateOutput).ToMysqlDbSystemChannelSourceSslCaCertificatePtrOutputWithContext(ctx)
}

// MysqlDbSystemChannelSourceSslCaCertificatePtrInput is an input type that accepts MysqlDbSystemChannelSourceSslCaCertificateArgs, MysqlDbSystemChannelSourceSslCaCertificatePtr and MysqlDbSystemChannelSourceSslCaCertificatePtrOutput values.
// You can construct a concrete instance of `MysqlDbSystemChannelSourceSslCaCertificatePtrInput` via:
//
//          MysqlDbSystemChannelSourceSslCaCertificateArgs{...}
//
//  or:
//
//          nil
type MysqlDbSystemChannelSourceSslCaCertificatePtrInput interface {
	pulumi.Input

	ToMysqlDbSystemChannelSourceSslCaCertificatePtrOutput() MysqlDbSystemChannelSourceSslCaCertificatePtrOutput
	ToMysqlDbSystemChannelSourceSslCaCertificatePtrOutputWithContext(context.Context) MysqlDbSystemChannelSourceSslCaCertificatePtrOutput
}

type mysqlDbSystemChannelSourceSslCaCertificatePtrType MysqlDbSystemChannelSourceSslCaCertificateArgs

func MysqlDbSystemChannelSourceSslCaCertificatePtr(v *MysqlDbSystemChannelSourceSslCaCertificateArgs) MysqlDbSystemChannelSourceSslCaCertificatePtrInput {
	return (*mysqlDbSystemChannelSourceSslCaCertificatePtrType)(v)
}

func (*mysqlDbSystemChannelSourceSslCaCertificatePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MysqlDbSystemChannelSourceSslCaCertificate)(nil)).Elem()
}

func (i *mysqlDbSystemChannelSourceSslCaCertificatePtrType) ToMysqlDbSystemChannelSourceSslCaCertificatePtrOutput() MysqlDbSystemChannelSourceSslCaCertificatePtrOutput {
	return i.ToMysqlDbSystemChannelSourceSslCaCertificatePtrOutputWithContext(context.Background())
}

func (i *mysqlDbSystemChannelSourceSslCaCertificatePtrType) ToMysqlDbSystemChannelSourceSslCaCertificatePtrOutputWithContext(ctx context.Context) MysqlDbSystemChannelSourceSslCaCertificatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MysqlDbSystemChannelSourceSslCaCertificatePtrOutput)
}

type MysqlDbSystemChannelSourceSslCaCertificateOutput struct{ *pulumi.OutputState }

func (MysqlDbSystemChannelSourceSslCaCertificateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MysqlDbSystemChannelSourceSslCaCertificate)(nil)).Elem()
}

func (o MysqlDbSystemChannelSourceSslCaCertificateOutput) ToMysqlDbSystemChannelSourceSslCaCertificateOutput() MysqlDbSystemChannelSourceSslCaCertificateOutput {
	return o
}

func (o MysqlDbSystemChannelSourceSslCaCertificateOutput) ToMysqlDbSystemChannelSourceSslCaCertificateOutputWithContext(ctx context.Context) MysqlDbSystemChannelSourceSslCaCertificateOutput {
	return o
}

func (o MysqlDbSystemChannelSourceSslCaCertificateOutput) ToMysqlDbSystemChannelSourceSslCaCertificatePtrOutput() MysqlDbSystemChannelSourceSslCaCertificatePtrOutput {
	return o.ToMysqlDbSystemChannelSourceSslCaCertificatePtrOutputWithContext(context.Background())
}

func (o MysqlDbSystemChannelSourceSslCaCertificateOutput) ToMysqlDbSystemChannelSourceSslCaCertificatePtrOutputWithContext(ctx context.Context) MysqlDbSystemChannelSourceSslCaCertificatePtrOutput {
	return o.ApplyT(func(v MysqlDbSystemChannelSourceSslCaCertificate) *MysqlDbSystemChannelSourceSslCaCertificate {
		return &v
	}).(MysqlDbSystemChannelSourceSslCaCertificatePtrOutput)
}

// The type of CA certificate.
func (o MysqlDbSystemChannelSourceSslCaCertificateOutput) CertificateType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MysqlDbSystemChannelSourceSslCaCertificate) *string { return v.CertificateType }).(pulumi.StringPtrOutput)
}

// The string containing the CA certificate in PEM format.
func (o MysqlDbSystemChannelSourceSslCaCertificateOutput) Contents() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MysqlDbSystemChannelSourceSslCaCertificate) *string { return v.Contents }).(pulumi.StringPtrOutput)
}

type MysqlDbSystemChannelSourceSslCaCertificatePtrOutput struct{ *pulumi.OutputState }

func (MysqlDbSystemChannelSourceSslCaCertificatePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MysqlDbSystemChannelSourceSslCaCertificate)(nil)).Elem()
}

func (o MysqlDbSystemChannelSourceSslCaCertificatePtrOutput) ToMysqlDbSystemChannelSourceSslCaCertificatePtrOutput() MysqlDbSystemChannelSourceSslCaCertificatePtrOutput {
	return o
}

func (o MysqlDbSystemChannelSourceSslCaCertificatePtrOutput) ToMysqlDbSystemChannelSourceSslCaCertificatePtrOutputWithContext(ctx context.Context) MysqlDbSystemChannelSourceSslCaCertificatePtrOutput {
	return o
}

func (o MysqlDbSystemChannelSourceSslCaCertificatePtrOutput) Elem() MysqlDbSystemChannelSourceSslCaCertificateOutput {
	return o.ApplyT(func(v *MysqlDbSystemChannelSourceSslCaCertificate) MysqlDbSystemChannelSourceSslCaCertificate {
		return *v
	}).(MysqlDbSystemChannelSourceSslCaCertificateOutput)
}

// The type of CA certificate.
func (o MysqlDbSystemChannelSourceSslCaCertificatePtrOutput) CertificateType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MysqlDbSystemChannelSourceSslCaCertificate) *string {
		if v == nil {
			return nil
		}
		return v.CertificateType
	}).(pulumi.StringPtrOutput)
}

// The string containing the CA certificate in PEM format.
func (o MysqlDbSystemChannelSourceSslCaCertificatePtrOutput) Contents() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MysqlDbSystemChannelSourceSslCaCertificate) *string {
		if v == nil {
			return nil
		}
		return v.Contents
	}).(pulumi.StringPtrOutput)
}

type MysqlDbSystemChannelTarget struct {
	// The username for the replication applier of the target MySQL DB System.
	ApplierUsername *string `pulumi:"applierUsername"`
	// The case-insensitive name that identifies the replication channel. Channel names must follow the rules defined for [MySQL identifiers](https://dev.mysql.com/doc/refman/8.0/en/identifiers.html). The names of non-Deleted Channels must be unique for each DB System.
	ChannelName *string `pulumi:"channelName"`
	// The OCID of the source DB System.
	DbSystemId *string `pulumi:"dbSystemId"`
	// The specific target identifier.
	TargetType *string `pulumi:"targetType"`
}

// MysqlDbSystemChannelTargetInput is an input type that accepts MysqlDbSystemChannelTargetArgs and MysqlDbSystemChannelTargetOutput values.
// You can construct a concrete instance of `MysqlDbSystemChannelTargetInput` via:
//
//          MysqlDbSystemChannelTargetArgs{...}
type MysqlDbSystemChannelTargetInput interface {
	pulumi.Input

	ToMysqlDbSystemChannelTargetOutput() MysqlDbSystemChannelTargetOutput
	ToMysqlDbSystemChannelTargetOutputWithContext(context.Context) MysqlDbSystemChannelTargetOutput
}

type MysqlDbSystemChannelTargetArgs struct {
	// The username for the replication applier of the target MySQL DB System.
	ApplierUsername pulumi.StringPtrInput `pulumi:"applierUsername"`
	// The case-insensitive name that identifies the replication channel. Channel names must follow the rules defined for [MySQL identifiers](https://dev.mysql.com/doc/refman/8.0/en/identifiers.html). The names of non-Deleted Channels must be unique for each DB System.
	ChannelName pulumi.StringPtrInput `pulumi:"channelName"`
	// The OCID of the source DB System.
	DbSystemId pulumi.StringPtrInput `pulumi:"dbSystemId"`
	// The specific target identifier.
	TargetType pulumi.StringPtrInput `pulumi:"targetType"`
}

func (MysqlDbSystemChannelTargetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MysqlDbSystemChannelTarget)(nil)).Elem()
}

func (i MysqlDbSystemChannelTargetArgs) ToMysqlDbSystemChannelTargetOutput() MysqlDbSystemChannelTargetOutput {
	return i.ToMysqlDbSystemChannelTargetOutputWithContext(context.Background())
}

func (i MysqlDbSystemChannelTargetArgs) ToMysqlDbSystemChannelTargetOutputWithContext(ctx context.Context) MysqlDbSystemChannelTargetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MysqlDbSystemChannelTargetOutput)
}

func (i MysqlDbSystemChannelTargetArgs) ToMysqlDbSystemChannelTargetPtrOutput() MysqlDbSystemChannelTargetPtrOutput {
	return i.ToMysqlDbSystemChannelTargetPtrOutputWithContext(context.Background())
}

func (i MysqlDbSystemChannelTargetArgs) ToMysqlDbSystemChannelTargetPtrOutputWithContext(ctx context.Context) MysqlDbSystemChannelTargetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MysqlDbSystemChannelTargetOutput).ToMysqlDbSystemChannelTargetPtrOutputWithContext(ctx)
}

// MysqlDbSystemChannelTargetPtrInput is an input type that accepts MysqlDbSystemChannelTargetArgs, MysqlDbSystemChannelTargetPtr and MysqlDbSystemChannelTargetPtrOutput values.
// You can construct a concrete instance of `MysqlDbSystemChannelTargetPtrInput` via:
//
//          MysqlDbSystemChannelTargetArgs{...}
//
//  or:
//
//          nil
type MysqlDbSystemChannelTargetPtrInput interface {
	pulumi.Input

	ToMysqlDbSystemChannelTargetPtrOutput() MysqlDbSystemChannelTargetPtrOutput
	ToMysqlDbSystemChannelTargetPtrOutputWithContext(context.Context) MysqlDbSystemChannelTargetPtrOutput
}

type mysqlDbSystemChannelTargetPtrType MysqlDbSystemChannelTargetArgs

func MysqlDbSystemChannelTargetPtr(v *MysqlDbSystemChannelTargetArgs) MysqlDbSystemChannelTargetPtrInput {
	return (*mysqlDbSystemChannelTargetPtrType)(v)
}

func (*mysqlDbSystemChannelTargetPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MysqlDbSystemChannelTarget)(nil)).Elem()
}

func (i *mysqlDbSystemChannelTargetPtrType) ToMysqlDbSystemChannelTargetPtrOutput() MysqlDbSystemChannelTargetPtrOutput {
	return i.ToMysqlDbSystemChannelTargetPtrOutputWithContext(context.Background())
}

func (i *mysqlDbSystemChannelTargetPtrType) ToMysqlDbSystemChannelTargetPtrOutputWithContext(ctx context.Context) MysqlDbSystemChannelTargetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MysqlDbSystemChannelTargetPtrOutput)
}

type MysqlDbSystemChannelTargetOutput struct{ *pulumi.OutputState }

func (MysqlDbSystemChannelTargetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MysqlDbSystemChannelTarget)(nil)).Elem()
}

func (o MysqlDbSystemChannelTargetOutput) ToMysqlDbSystemChannelTargetOutput() MysqlDbSystemChannelTargetOutput {
	return o
}

func (o MysqlDbSystemChannelTargetOutput) ToMysqlDbSystemChannelTargetOutputWithContext(ctx context.Context) MysqlDbSystemChannelTargetOutput {
	return o
}

func (o MysqlDbSystemChannelTargetOutput) ToMysqlDbSystemChannelTargetPtrOutput() MysqlDbSystemChannelTargetPtrOutput {
	return o.ToMysqlDbSystemChannelTargetPtrOutputWithContext(context.Background())
}

func (o MysqlDbSystemChannelTargetOutput) ToMysqlDbSystemChannelTargetPtrOutputWithContext(ctx context.Context) MysqlDbSystemChannelTargetPtrOutput {
	return o.ApplyT(func(v MysqlDbSystemChannelTarget) *MysqlDbSystemChannelTarget {
		return &v
	}).(MysqlDbSystemChannelTargetPtrOutput)
}

// The username for the replication applier of the target MySQL DB System.
func (o MysqlDbSystemChannelTargetOutput) ApplierUsername() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MysqlDbSystemChannelTarget) *string { return v.ApplierUsername }).(pulumi.StringPtrOutput)
}

// The case-insensitive name that identifies the replication channel. Channel names must follow the rules defined for [MySQL identifiers](https://dev.mysql.com/doc/refman/8.0/en/identifiers.html). The names of non-Deleted Channels must be unique for each DB System.
func (o MysqlDbSystemChannelTargetOutput) ChannelName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MysqlDbSystemChannelTarget) *string { return v.ChannelName }).(pulumi.StringPtrOutput)
}

// The OCID of the source DB System.
func (o MysqlDbSystemChannelTargetOutput) DbSystemId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MysqlDbSystemChannelTarget) *string { return v.DbSystemId }).(pulumi.StringPtrOutput)
}

// The specific target identifier.
func (o MysqlDbSystemChannelTargetOutput) TargetType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MysqlDbSystemChannelTarget) *string { return v.TargetType }).(pulumi.StringPtrOutput)
}

type MysqlDbSystemChannelTargetPtrOutput struct{ *pulumi.OutputState }

func (MysqlDbSystemChannelTargetPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MysqlDbSystemChannelTarget)(nil)).Elem()
}

func (o MysqlDbSystemChannelTargetPtrOutput) ToMysqlDbSystemChannelTargetPtrOutput() MysqlDbSystemChannelTargetPtrOutput {
	return o
}

func (o MysqlDbSystemChannelTargetPtrOutput) ToMysqlDbSystemChannelTargetPtrOutputWithContext(ctx context.Context) MysqlDbSystemChannelTargetPtrOutput {
	return o
}

func (o MysqlDbSystemChannelTargetPtrOutput) Elem() MysqlDbSystemChannelTargetOutput {
	return o.ApplyT(func(v *MysqlDbSystemChannelTarget) MysqlDbSystemChannelTarget { return *v }).(MysqlDbSystemChannelTargetOutput)
}

// The username for the replication applier of the target MySQL DB System.
func (o MysqlDbSystemChannelTargetPtrOutput) ApplierUsername() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MysqlDbSystemChannelTarget) *string {
		if v == nil {
			return nil
		}
		return v.ApplierUsername
	}).(pulumi.StringPtrOutput)
}

// The case-insensitive name that identifies the replication channel. Channel names must follow the rules defined for [MySQL identifiers](https://dev.mysql.com/doc/refman/8.0/en/identifiers.html). The names of non-Deleted Channels must be unique for each DB System.
func (o MysqlDbSystemChannelTargetPtrOutput) ChannelName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MysqlDbSystemChannelTarget) *string {
		if v == nil {
			return nil
		}
		return v.ChannelName
	}).(pulumi.StringPtrOutput)
}

// The OCID of the source DB System.
func (o MysqlDbSystemChannelTargetPtrOutput) DbSystemId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MysqlDbSystemChannelTarget) *string {
		if v == nil {
			return nil
		}
		return v.DbSystemId
	}).(pulumi.StringPtrOutput)
}

// The specific target identifier.
func (o MysqlDbSystemChannelTargetPtrOutput) TargetType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MysqlDbSystemChannelTarget) *string {
		if v == nil {
			return nil
		}
		return v.TargetType
	}).(pulumi.StringPtrOutput)
}

type MysqlDbSystemCurrentPlacement struct {
	// The availability domain on which to deploy the Read/Write endpoint. This defines the preferred primary instance.
	AvailabilityDomain *string `pulumi:"availabilityDomain"`
	// The fault domain on which to deploy the Read/Write endpoint. This defines the preferred primary instance.
	FaultDomain *string `pulumi:"faultDomain"`
}

// MysqlDbSystemCurrentPlacementInput is an input type that accepts MysqlDbSystemCurrentPlacementArgs and MysqlDbSystemCurrentPlacementOutput values.
// You can construct a concrete instance of `MysqlDbSystemCurrentPlacementInput` via:
//
//          MysqlDbSystemCurrentPlacementArgs{...}
type MysqlDbSystemCurrentPlacementInput interface {
	pulumi.Input

	ToMysqlDbSystemCurrentPlacementOutput() MysqlDbSystemCurrentPlacementOutput
	ToMysqlDbSystemCurrentPlacementOutputWithContext(context.Context) MysqlDbSystemCurrentPlacementOutput
}

type MysqlDbSystemCurrentPlacementArgs struct {
	// The availability domain on which to deploy the Read/Write endpoint. This defines the preferred primary instance.
	AvailabilityDomain pulumi.StringPtrInput `pulumi:"availabilityDomain"`
	// The fault domain on which to deploy the Read/Write endpoint. This defines the preferred primary instance.
	FaultDomain pulumi.StringPtrInput `pulumi:"faultDomain"`
}

func (MysqlDbSystemCurrentPlacementArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MysqlDbSystemCurrentPlacement)(nil)).Elem()
}

func (i MysqlDbSystemCurrentPlacementArgs) ToMysqlDbSystemCurrentPlacementOutput() MysqlDbSystemCurrentPlacementOutput {
	return i.ToMysqlDbSystemCurrentPlacementOutputWithContext(context.Background())
}

func (i MysqlDbSystemCurrentPlacementArgs) ToMysqlDbSystemCurrentPlacementOutputWithContext(ctx context.Context) MysqlDbSystemCurrentPlacementOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MysqlDbSystemCurrentPlacementOutput)
}

func (i MysqlDbSystemCurrentPlacementArgs) ToMysqlDbSystemCurrentPlacementPtrOutput() MysqlDbSystemCurrentPlacementPtrOutput {
	return i.ToMysqlDbSystemCurrentPlacementPtrOutputWithContext(context.Background())
}

func (i MysqlDbSystemCurrentPlacementArgs) ToMysqlDbSystemCurrentPlacementPtrOutputWithContext(ctx context.Context) MysqlDbSystemCurrentPlacementPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MysqlDbSystemCurrentPlacementOutput).ToMysqlDbSystemCurrentPlacementPtrOutputWithContext(ctx)
}

// MysqlDbSystemCurrentPlacementPtrInput is an input type that accepts MysqlDbSystemCurrentPlacementArgs, MysqlDbSystemCurrentPlacementPtr and MysqlDbSystemCurrentPlacementPtrOutput values.
// You can construct a concrete instance of `MysqlDbSystemCurrentPlacementPtrInput` via:
//
//          MysqlDbSystemCurrentPlacementArgs{...}
//
//  or:
//
//          nil
type MysqlDbSystemCurrentPlacementPtrInput interface {
	pulumi.Input

	ToMysqlDbSystemCurrentPlacementPtrOutput() MysqlDbSystemCurrentPlacementPtrOutput
	ToMysqlDbSystemCurrentPlacementPtrOutputWithContext(context.Context) MysqlDbSystemCurrentPlacementPtrOutput
}

type mysqlDbSystemCurrentPlacementPtrType MysqlDbSystemCurrentPlacementArgs

func MysqlDbSystemCurrentPlacementPtr(v *MysqlDbSystemCurrentPlacementArgs) MysqlDbSystemCurrentPlacementPtrInput {
	return (*mysqlDbSystemCurrentPlacementPtrType)(v)
}

func (*mysqlDbSystemCurrentPlacementPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MysqlDbSystemCurrentPlacement)(nil)).Elem()
}

func (i *mysqlDbSystemCurrentPlacementPtrType) ToMysqlDbSystemCurrentPlacementPtrOutput() MysqlDbSystemCurrentPlacementPtrOutput {
	return i.ToMysqlDbSystemCurrentPlacementPtrOutputWithContext(context.Background())
}

func (i *mysqlDbSystemCurrentPlacementPtrType) ToMysqlDbSystemCurrentPlacementPtrOutputWithContext(ctx context.Context) MysqlDbSystemCurrentPlacementPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MysqlDbSystemCurrentPlacementPtrOutput)
}

type MysqlDbSystemCurrentPlacementOutput struct{ *pulumi.OutputState }

func (MysqlDbSystemCurrentPlacementOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MysqlDbSystemCurrentPlacement)(nil)).Elem()
}

func (o MysqlDbSystemCurrentPlacementOutput) ToMysqlDbSystemCurrentPlacementOutput() MysqlDbSystemCurrentPlacementOutput {
	return o
}

func (o MysqlDbSystemCurrentPlacementOutput) ToMysqlDbSystemCurrentPlacementOutputWithContext(ctx context.Context) MysqlDbSystemCurrentPlacementOutput {
	return o
}

func (o MysqlDbSystemCurrentPlacementOutput) ToMysqlDbSystemCurrentPlacementPtrOutput() MysqlDbSystemCurrentPlacementPtrOutput {
	return o.ToMysqlDbSystemCurrentPlacementPtrOutputWithContext(context.Background())
}

func (o MysqlDbSystemCurrentPlacementOutput) ToMysqlDbSystemCurrentPlacementPtrOutputWithContext(ctx context.Context) MysqlDbSystemCurrentPlacementPtrOutput {
	return o.ApplyT(func(v MysqlDbSystemCurrentPlacement) *MysqlDbSystemCurrentPlacement {
		return &v
	}).(MysqlDbSystemCurrentPlacementPtrOutput)
}

// The availability domain on which to deploy the Read/Write endpoint. This defines the preferred primary instance.
func (o MysqlDbSystemCurrentPlacementOutput) AvailabilityDomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MysqlDbSystemCurrentPlacement) *string { return v.AvailabilityDomain }).(pulumi.StringPtrOutput)
}

// The fault domain on which to deploy the Read/Write endpoint. This defines the preferred primary instance.
func (o MysqlDbSystemCurrentPlacementOutput) FaultDomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MysqlDbSystemCurrentPlacement) *string { return v.FaultDomain }).(pulumi.StringPtrOutput)
}

type MysqlDbSystemCurrentPlacementPtrOutput struct{ *pulumi.OutputState }

func (MysqlDbSystemCurrentPlacementPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MysqlDbSystemCurrentPlacement)(nil)).Elem()
}

func (o MysqlDbSystemCurrentPlacementPtrOutput) ToMysqlDbSystemCurrentPlacementPtrOutput() MysqlDbSystemCurrentPlacementPtrOutput {
	return o
}

func (o MysqlDbSystemCurrentPlacementPtrOutput) ToMysqlDbSystemCurrentPlacementPtrOutputWithContext(ctx context.Context) MysqlDbSystemCurrentPlacementPtrOutput {
	return o
}

func (o MysqlDbSystemCurrentPlacementPtrOutput) Elem() MysqlDbSystemCurrentPlacementOutput {
	return o.ApplyT(func(v *MysqlDbSystemCurrentPlacement) MysqlDbSystemCurrentPlacement { return *v }).(MysqlDbSystemCurrentPlacementOutput)
}

// The availability domain on which to deploy the Read/Write endpoint. This defines the preferred primary instance.
func (o MysqlDbSystemCurrentPlacementPtrOutput) AvailabilityDomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MysqlDbSystemCurrentPlacement) *string {
		if v == nil {
			return nil
		}
		return v.AvailabilityDomain
	}).(pulumi.StringPtrOutput)
}

// The fault domain on which to deploy the Read/Write endpoint. This defines the preferred primary instance.
func (o MysqlDbSystemCurrentPlacementPtrOutput) FaultDomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MysqlDbSystemCurrentPlacement) *string {
		if v == nil {
			return nil
		}
		return v.FaultDomain
	}).(pulumi.StringPtrOutput)
}

type MysqlDbSystemEndpoint struct {
	// The network address of the DB System.
	Hostname *string `pulumi:"hostname"`
	// The IP address the DB System is configured to listen on. A private IP address of your choice to assign to the primary endpoint of the DB System. Must be an available IP address within the subnet's CIDR. If you don't specify a value, Oracle automatically assigns a private IP address from the subnet. This should be a "dotted-quad" style IPv4 address.
	IpAddress *string `pulumi:"ipAddress"`
	// The access modes from the client that this endpoint supports.
	Modes []string `pulumi:"modes"`
	// The port for primary endpoint of the DB System to listen on.
	Port *int `pulumi:"port"`
	// The TCP network port on which X Plugin listens for connections. This is the X Plugin equivalent of port.
	PortX *int `pulumi:"portX"`
	// The state of the endpoints, as far as it can seen from the DB System. There may be some inconsistency with the actual state of the MySQL service.
	Status *string `pulumi:"status"`
	// Additional information about the current endpoint status.
	StatusDetails *string `pulumi:"statusDetails"`
}

// MysqlDbSystemEndpointInput is an input type that accepts MysqlDbSystemEndpointArgs and MysqlDbSystemEndpointOutput values.
// You can construct a concrete instance of `MysqlDbSystemEndpointInput` via:
//
//          MysqlDbSystemEndpointArgs{...}
type MysqlDbSystemEndpointInput interface {
	pulumi.Input

	ToMysqlDbSystemEndpointOutput() MysqlDbSystemEndpointOutput
	ToMysqlDbSystemEndpointOutputWithContext(context.Context) MysqlDbSystemEndpointOutput
}

type MysqlDbSystemEndpointArgs struct {
	// The network address of the DB System.
	Hostname pulumi.StringPtrInput `pulumi:"hostname"`
	// The IP address the DB System is configured to listen on. A private IP address of your choice to assign to the primary endpoint of the DB System. Must be an available IP address within the subnet's CIDR. If you don't specify a value, Oracle automatically assigns a private IP address from the subnet. This should be a "dotted-quad" style IPv4 address.
	IpAddress pulumi.StringPtrInput `pulumi:"ipAddress"`
	// The access modes from the client that this endpoint supports.
	Modes pulumi.StringArrayInput `pulumi:"modes"`
	// The port for primary endpoint of the DB System to listen on.
	Port pulumi.IntPtrInput `pulumi:"port"`
	// The TCP network port on which X Plugin listens for connections. This is the X Plugin equivalent of port.
	PortX pulumi.IntPtrInput `pulumi:"portX"`
	// The state of the endpoints, as far as it can seen from the DB System. There may be some inconsistency with the actual state of the MySQL service.
	Status pulumi.StringPtrInput `pulumi:"status"`
	// Additional information about the current endpoint status.
	StatusDetails pulumi.StringPtrInput `pulumi:"statusDetails"`
}

func (MysqlDbSystemEndpointArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MysqlDbSystemEndpoint)(nil)).Elem()
}

func (i MysqlDbSystemEndpointArgs) ToMysqlDbSystemEndpointOutput() MysqlDbSystemEndpointOutput {
	return i.ToMysqlDbSystemEndpointOutputWithContext(context.Background())
}

func (i MysqlDbSystemEndpointArgs) ToMysqlDbSystemEndpointOutputWithContext(ctx context.Context) MysqlDbSystemEndpointOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MysqlDbSystemEndpointOutput)
}

// MysqlDbSystemEndpointArrayInput is an input type that accepts MysqlDbSystemEndpointArray and MysqlDbSystemEndpointArrayOutput values.
// You can construct a concrete instance of `MysqlDbSystemEndpointArrayInput` via:
//
//          MysqlDbSystemEndpointArray{ MysqlDbSystemEndpointArgs{...} }
type MysqlDbSystemEndpointArrayInput interface {
	pulumi.Input

	ToMysqlDbSystemEndpointArrayOutput() MysqlDbSystemEndpointArrayOutput
	ToMysqlDbSystemEndpointArrayOutputWithContext(context.Context) MysqlDbSystemEndpointArrayOutput
}

type MysqlDbSystemEndpointArray []MysqlDbSystemEndpointInput

func (MysqlDbSystemEndpointArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MysqlDbSystemEndpoint)(nil)).Elem()
}

func (i MysqlDbSystemEndpointArray) ToMysqlDbSystemEndpointArrayOutput() MysqlDbSystemEndpointArrayOutput {
	return i.ToMysqlDbSystemEndpointArrayOutputWithContext(context.Background())
}

func (i MysqlDbSystemEndpointArray) ToMysqlDbSystemEndpointArrayOutputWithContext(ctx context.Context) MysqlDbSystemEndpointArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MysqlDbSystemEndpointArrayOutput)
}

type MysqlDbSystemEndpointOutput struct{ *pulumi.OutputState }

func (MysqlDbSystemEndpointOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MysqlDbSystemEndpoint)(nil)).Elem()
}

func (o MysqlDbSystemEndpointOutput) ToMysqlDbSystemEndpointOutput() MysqlDbSystemEndpointOutput {
	return o
}

func (o MysqlDbSystemEndpointOutput) ToMysqlDbSystemEndpointOutputWithContext(ctx context.Context) MysqlDbSystemEndpointOutput {
	return o
}

// The network address of the DB System.
func (o MysqlDbSystemEndpointOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MysqlDbSystemEndpoint) *string { return v.Hostname }).(pulumi.StringPtrOutput)
}

// The IP address the DB System is configured to listen on. A private IP address of your choice to assign to the primary endpoint of the DB System. Must be an available IP address within the subnet's CIDR. If you don't specify a value, Oracle automatically assigns a private IP address from the subnet. This should be a "dotted-quad" style IPv4 address.
func (o MysqlDbSystemEndpointOutput) IpAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MysqlDbSystemEndpoint) *string { return v.IpAddress }).(pulumi.StringPtrOutput)
}

// The access modes from the client that this endpoint supports.
func (o MysqlDbSystemEndpointOutput) Modes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v MysqlDbSystemEndpoint) []string { return v.Modes }).(pulumi.StringArrayOutput)
}

// The port for primary endpoint of the DB System to listen on.
func (o MysqlDbSystemEndpointOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v MysqlDbSystemEndpoint) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// The TCP network port on which X Plugin listens for connections. This is the X Plugin equivalent of port.
func (o MysqlDbSystemEndpointOutput) PortX() pulumi.IntPtrOutput {
	return o.ApplyT(func(v MysqlDbSystemEndpoint) *int { return v.PortX }).(pulumi.IntPtrOutput)
}

// The state of the endpoints, as far as it can seen from the DB System. There may be some inconsistency with the actual state of the MySQL service.
func (o MysqlDbSystemEndpointOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MysqlDbSystemEndpoint) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// Additional information about the current endpoint status.
func (o MysqlDbSystemEndpointOutput) StatusDetails() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MysqlDbSystemEndpoint) *string { return v.StatusDetails }).(pulumi.StringPtrOutput)
}

type MysqlDbSystemEndpointArrayOutput struct{ *pulumi.OutputState }

func (MysqlDbSystemEndpointArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MysqlDbSystemEndpoint)(nil)).Elem()
}

func (o MysqlDbSystemEndpointArrayOutput) ToMysqlDbSystemEndpointArrayOutput() MysqlDbSystemEndpointArrayOutput {
	return o
}

func (o MysqlDbSystemEndpointArrayOutput) ToMysqlDbSystemEndpointArrayOutputWithContext(ctx context.Context) MysqlDbSystemEndpointArrayOutput {
	return o
}

func (o MysqlDbSystemEndpointArrayOutput) Index(i pulumi.IntInput) MysqlDbSystemEndpointOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MysqlDbSystemEndpoint {
		return vs[0].([]MysqlDbSystemEndpoint)[vs[1].(int)]
	}).(MysqlDbSystemEndpointOutput)
}

type MysqlDbSystemHeatWaveCluster struct {
	// The number of analytics-processing compute instances, of the specified shape, in the HeatWave cluster.
	ClusterSize *int `pulumi:"clusterSize"`
	// The name of the shape. The shape determines the resources allocated
	// * CPU cores and memory for VM shapes; CPU cores, memory and storage for non-VM (or bare metal) shapes. To get a list of shapes, use the [ListShapes](https://docs.cloud.oracle.com/iaas/api/#/en/mysql/20190415/ShapeSummary/ListShapes) operation.
	ShapeName *string `pulumi:"shapeName"`
	// (Updatable) The target state for the DB System. Could be set to `ACTIVE` or `INACTIVE`.
	State *string `pulumi:"state"`
	// The date and time the DB System was created.
	TimeCreated *string `pulumi:"timeCreated"`
	// The time the DB System was last updated.
	TimeUpdated *string `pulumi:"timeUpdated"`
}

// MysqlDbSystemHeatWaveClusterInput is an input type that accepts MysqlDbSystemHeatWaveClusterArgs and MysqlDbSystemHeatWaveClusterOutput values.
// You can construct a concrete instance of `MysqlDbSystemHeatWaveClusterInput` via:
//
//          MysqlDbSystemHeatWaveClusterArgs{...}
type MysqlDbSystemHeatWaveClusterInput interface {
	pulumi.Input

	ToMysqlDbSystemHeatWaveClusterOutput() MysqlDbSystemHeatWaveClusterOutput
	ToMysqlDbSystemHeatWaveClusterOutputWithContext(context.Context) MysqlDbSystemHeatWaveClusterOutput
}

type MysqlDbSystemHeatWaveClusterArgs struct {
	// The number of analytics-processing compute instances, of the specified shape, in the HeatWave cluster.
	ClusterSize pulumi.IntPtrInput `pulumi:"clusterSize"`
	// The name of the shape. The shape determines the resources allocated
	// * CPU cores and memory for VM shapes; CPU cores, memory and storage for non-VM (or bare metal) shapes. To get a list of shapes, use the [ListShapes](https://docs.cloud.oracle.com/iaas/api/#/en/mysql/20190415/ShapeSummary/ListShapes) operation.
	ShapeName pulumi.StringPtrInput `pulumi:"shapeName"`
	// (Updatable) The target state for the DB System. Could be set to `ACTIVE` or `INACTIVE`.
	State pulumi.StringPtrInput `pulumi:"state"`
	// The date and time the DB System was created.
	TimeCreated pulumi.StringPtrInput `pulumi:"timeCreated"`
	// The time the DB System was last updated.
	TimeUpdated pulumi.StringPtrInput `pulumi:"timeUpdated"`
}

func (MysqlDbSystemHeatWaveClusterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MysqlDbSystemHeatWaveCluster)(nil)).Elem()
}

func (i MysqlDbSystemHeatWaveClusterArgs) ToMysqlDbSystemHeatWaveClusterOutput() MysqlDbSystemHeatWaveClusterOutput {
	return i.ToMysqlDbSystemHeatWaveClusterOutputWithContext(context.Background())
}

func (i MysqlDbSystemHeatWaveClusterArgs) ToMysqlDbSystemHeatWaveClusterOutputWithContext(ctx context.Context) MysqlDbSystemHeatWaveClusterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MysqlDbSystemHeatWaveClusterOutput)
}

func (i MysqlDbSystemHeatWaveClusterArgs) ToMysqlDbSystemHeatWaveClusterPtrOutput() MysqlDbSystemHeatWaveClusterPtrOutput {
	return i.ToMysqlDbSystemHeatWaveClusterPtrOutputWithContext(context.Background())
}

func (i MysqlDbSystemHeatWaveClusterArgs) ToMysqlDbSystemHeatWaveClusterPtrOutputWithContext(ctx context.Context) MysqlDbSystemHeatWaveClusterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MysqlDbSystemHeatWaveClusterOutput).ToMysqlDbSystemHeatWaveClusterPtrOutputWithContext(ctx)
}

// MysqlDbSystemHeatWaveClusterPtrInput is an input type that accepts MysqlDbSystemHeatWaveClusterArgs, MysqlDbSystemHeatWaveClusterPtr and MysqlDbSystemHeatWaveClusterPtrOutput values.
// You can construct a concrete instance of `MysqlDbSystemHeatWaveClusterPtrInput` via:
//
//          MysqlDbSystemHeatWaveClusterArgs{...}
//
//  or:
//
//          nil
type MysqlDbSystemHeatWaveClusterPtrInput interface {
	pulumi.Input

	ToMysqlDbSystemHeatWaveClusterPtrOutput() MysqlDbSystemHeatWaveClusterPtrOutput
	ToMysqlDbSystemHeatWaveClusterPtrOutputWithContext(context.Context) MysqlDbSystemHeatWaveClusterPtrOutput
}

type mysqlDbSystemHeatWaveClusterPtrType MysqlDbSystemHeatWaveClusterArgs

func MysqlDbSystemHeatWaveClusterPtr(v *MysqlDbSystemHeatWaveClusterArgs) MysqlDbSystemHeatWaveClusterPtrInput {
	return (*mysqlDbSystemHeatWaveClusterPtrType)(v)
}

func (*mysqlDbSystemHeatWaveClusterPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MysqlDbSystemHeatWaveCluster)(nil)).Elem()
}

func (i *mysqlDbSystemHeatWaveClusterPtrType) ToMysqlDbSystemHeatWaveClusterPtrOutput() MysqlDbSystemHeatWaveClusterPtrOutput {
	return i.ToMysqlDbSystemHeatWaveClusterPtrOutputWithContext(context.Background())
}

func (i *mysqlDbSystemHeatWaveClusterPtrType) ToMysqlDbSystemHeatWaveClusterPtrOutputWithContext(ctx context.Context) MysqlDbSystemHeatWaveClusterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MysqlDbSystemHeatWaveClusterPtrOutput)
}

type MysqlDbSystemHeatWaveClusterOutput struct{ *pulumi.OutputState }

func (MysqlDbSystemHeatWaveClusterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MysqlDbSystemHeatWaveCluster)(nil)).Elem()
}

func (o MysqlDbSystemHeatWaveClusterOutput) ToMysqlDbSystemHeatWaveClusterOutput() MysqlDbSystemHeatWaveClusterOutput {
	return o
}

func (o MysqlDbSystemHeatWaveClusterOutput) ToMysqlDbSystemHeatWaveClusterOutputWithContext(ctx context.Context) MysqlDbSystemHeatWaveClusterOutput {
	return o
}

func (o MysqlDbSystemHeatWaveClusterOutput) ToMysqlDbSystemHeatWaveClusterPtrOutput() MysqlDbSystemHeatWaveClusterPtrOutput {
	return o.ToMysqlDbSystemHeatWaveClusterPtrOutputWithContext(context.Background())
}

func (o MysqlDbSystemHeatWaveClusterOutput) ToMysqlDbSystemHeatWaveClusterPtrOutputWithContext(ctx context.Context) MysqlDbSystemHeatWaveClusterPtrOutput {
	return o.ApplyT(func(v MysqlDbSystemHeatWaveCluster) *MysqlDbSystemHeatWaveCluster {
		return &v
	}).(MysqlDbSystemHeatWaveClusterPtrOutput)
}

// The number of analytics-processing compute instances, of the specified shape, in the HeatWave cluster.
func (o MysqlDbSystemHeatWaveClusterOutput) ClusterSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v MysqlDbSystemHeatWaveCluster) *int { return v.ClusterSize }).(pulumi.IntPtrOutput)
}

// The name of the shape. The shape determines the resources allocated
// * CPU cores and memory for VM shapes; CPU cores, memory and storage for non-VM (or bare metal) shapes. To get a list of shapes, use the [ListShapes](https://docs.cloud.oracle.com/iaas/api/#/en/mysql/20190415/ShapeSummary/ListShapes) operation.
func (o MysqlDbSystemHeatWaveClusterOutput) ShapeName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MysqlDbSystemHeatWaveCluster) *string { return v.ShapeName }).(pulumi.StringPtrOutput)
}

// (Updatable) The target state for the DB System. Could be set to `ACTIVE` or `INACTIVE`.
func (o MysqlDbSystemHeatWaveClusterOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MysqlDbSystemHeatWaveCluster) *string { return v.State }).(pulumi.StringPtrOutput)
}

// The date and time the DB System was created.
func (o MysqlDbSystemHeatWaveClusterOutput) TimeCreated() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MysqlDbSystemHeatWaveCluster) *string { return v.TimeCreated }).(pulumi.StringPtrOutput)
}

// The time the DB System was last updated.
func (o MysqlDbSystemHeatWaveClusterOutput) TimeUpdated() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MysqlDbSystemHeatWaveCluster) *string { return v.TimeUpdated }).(pulumi.StringPtrOutput)
}

type MysqlDbSystemHeatWaveClusterPtrOutput struct{ *pulumi.OutputState }

func (MysqlDbSystemHeatWaveClusterPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MysqlDbSystemHeatWaveCluster)(nil)).Elem()
}

func (o MysqlDbSystemHeatWaveClusterPtrOutput) ToMysqlDbSystemHeatWaveClusterPtrOutput() MysqlDbSystemHeatWaveClusterPtrOutput {
	return o
}

func (o MysqlDbSystemHeatWaveClusterPtrOutput) ToMysqlDbSystemHeatWaveClusterPtrOutputWithContext(ctx context.Context) MysqlDbSystemHeatWaveClusterPtrOutput {
	return o
}

func (o MysqlDbSystemHeatWaveClusterPtrOutput) Elem() MysqlDbSystemHeatWaveClusterOutput {
	return o.ApplyT(func(v *MysqlDbSystemHeatWaveCluster) MysqlDbSystemHeatWaveCluster { return *v }).(MysqlDbSystemHeatWaveClusterOutput)
}

// The number of analytics-processing compute instances, of the specified shape, in the HeatWave cluster.
func (o MysqlDbSystemHeatWaveClusterPtrOutput) ClusterSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *MysqlDbSystemHeatWaveCluster) *int {
		if v == nil {
			return nil
		}
		return v.ClusterSize
	}).(pulumi.IntPtrOutput)
}

// The name of the shape. The shape determines the resources allocated
// * CPU cores and memory for VM shapes; CPU cores, memory and storage for non-VM (or bare metal) shapes. To get a list of shapes, use the [ListShapes](https://docs.cloud.oracle.com/iaas/api/#/en/mysql/20190415/ShapeSummary/ListShapes) operation.
func (o MysqlDbSystemHeatWaveClusterPtrOutput) ShapeName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MysqlDbSystemHeatWaveCluster) *string {
		if v == nil {
			return nil
		}
		return v.ShapeName
	}).(pulumi.StringPtrOutput)
}

// (Updatable) The target state for the DB System. Could be set to `ACTIVE` or `INACTIVE`.
func (o MysqlDbSystemHeatWaveClusterPtrOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MysqlDbSystemHeatWaveCluster) *string {
		if v == nil {
			return nil
		}
		return v.State
	}).(pulumi.StringPtrOutput)
}

// The date and time the DB System was created.
func (o MysqlDbSystemHeatWaveClusterPtrOutput) TimeCreated() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MysqlDbSystemHeatWaveCluster) *string {
		if v == nil {
			return nil
		}
		return v.TimeCreated
	}).(pulumi.StringPtrOutput)
}

// The time the DB System was last updated.
func (o MysqlDbSystemHeatWaveClusterPtrOutput) TimeUpdated() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MysqlDbSystemHeatWaveCluster) *string {
		if v == nil {
			return nil
		}
		return v.TimeUpdated
	}).(pulumi.StringPtrOutput)
}

type MysqlDbSystemMaintenance struct {
	// (Updatable) The start of the 2 hour maintenance window.
	WindowStartTime string `pulumi:"windowStartTime"`
}

// MysqlDbSystemMaintenanceInput is an input type that accepts MysqlDbSystemMaintenanceArgs and MysqlDbSystemMaintenanceOutput values.
// You can construct a concrete instance of `MysqlDbSystemMaintenanceInput` via:
//
//          MysqlDbSystemMaintenanceArgs{...}
type MysqlDbSystemMaintenanceInput interface {
	pulumi.Input

	ToMysqlDbSystemMaintenanceOutput() MysqlDbSystemMaintenanceOutput
	ToMysqlDbSystemMaintenanceOutputWithContext(context.Context) MysqlDbSystemMaintenanceOutput
}

type MysqlDbSystemMaintenanceArgs struct {
	// (Updatable) The start of the 2 hour maintenance window.
	WindowStartTime pulumi.StringInput `pulumi:"windowStartTime"`
}

func (MysqlDbSystemMaintenanceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MysqlDbSystemMaintenance)(nil)).Elem()
}

func (i MysqlDbSystemMaintenanceArgs) ToMysqlDbSystemMaintenanceOutput() MysqlDbSystemMaintenanceOutput {
	return i.ToMysqlDbSystemMaintenanceOutputWithContext(context.Background())
}

func (i MysqlDbSystemMaintenanceArgs) ToMysqlDbSystemMaintenanceOutputWithContext(ctx context.Context) MysqlDbSystemMaintenanceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MysqlDbSystemMaintenanceOutput)
}

func (i MysqlDbSystemMaintenanceArgs) ToMysqlDbSystemMaintenancePtrOutput() MysqlDbSystemMaintenancePtrOutput {
	return i.ToMysqlDbSystemMaintenancePtrOutputWithContext(context.Background())
}

func (i MysqlDbSystemMaintenanceArgs) ToMysqlDbSystemMaintenancePtrOutputWithContext(ctx context.Context) MysqlDbSystemMaintenancePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MysqlDbSystemMaintenanceOutput).ToMysqlDbSystemMaintenancePtrOutputWithContext(ctx)
}

// MysqlDbSystemMaintenancePtrInput is an input type that accepts MysqlDbSystemMaintenanceArgs, MysqlDbSystemMaintenancePtr and MysqlDbSystemMaintenancePtrOutput values.
// You can construct a concrete instance of `MysqlDbSystemMaintenancePtrInput` via:
//
//          MysqlDbSystemMaintenanceArgs{...}
//
//  or:
//
//          nil
type MysqlDbSystemMaintenancePtrInput interface {
	pulumi.Input

	ToMysqlDbSystemMaintenancePtrOutput() MysqlDbSystemMaintenancePtrOutput
	ToMysqlDbSystemMaintenancePtrOutputWithContext(context.Context) MysqlDbSystemMaintenancePtrOutput
}

type mysqlDbSystemMaintenancePtrType MysqlDbSystemMaintenanceArgs

func MysqlDbSystemMaintenancePtr(v *MysqlDbSystemMaintenanceArgs) MysqlDbSystemMaintenancePtrInput {
	return (*mysqlDbSystemMaintenancePtrType)(v)
}

func (*mysqlDbSystemMaintenancePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MysqlDbSystemMaintenance)(nil)).Elem()
}

func (i *mysqlDbSystemMaintenancePtrType) ToMysqlDbSystemMaintenancePtrOutput() MysqlDbSystemMaintenancePtrOutput {
	return i.ToMysqlDbSystemMaintenancePtrOutputWithContext(context.Background())
}

func (i *mysqlDbSystemMaintenancePtrType) ToMysqlDbSystemMaintenancePtrOutputWithContext(ctx context.Context) MysqlDbSystemMaintenancePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MysqlDbSystemMaintenancePtrOutput)
}

type MysqlDbSystemMaintenanceOutput struct{ *pulumi.OutputState }

func (MysqlDbSystemMaintenanceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MysqlDbSystemMaintenance)(nil)).Elem()
}

func (o MysqlDbSystemMaintenanceOutput) ToMysqlDbSystemMaintenanceOutput() MysqlDbSystemMaintenanceOutput {
	return o
}

func (o MysqlDbSystemMaintenanceOutput) ToMysqlDbSystemMaintenanceOutputWithContext(ctx context.Context) MysqlDbSystemMaintenanceOutput {
	return o
}

func (o MysqlDbSystemMaintenanceOutput) ToMysqlDbSystemMaintenancePtrOutput() MysqlDbSystemMaintenancePtrOutput {
	return o.ToMysqlDbSystemMaintenancePtrOutputWithContext(context.Background())
}

func (o MysqlDbSystemMaintenanceOutput) ToMysqlDbSystemMaintenancePtrOutputWithContext(ctx context.Context) MysqlDbSystemMaintenancePtrOutput {
	return o.ApplyT(func(v MysqlDbSystemMaintenance) *MysqlDbSystemMaintenance {
		return &v
	}).(MysqlDbSystemMaintenancePtrOutput)
}

// (Updatable) The start of the 2 hour maintenance window.
func (o MysqlDbSystemMaintenanceOutput) WindowStartTime() pulumi.StringOutput {
	return o.ApplyT(func(v MysqlDbSystemMaintenance) string { return v.WindowStartTime }).(pulumi.StringOutput)
}

type MysqlDbSystemMaintenancePtrOutput struct{ *pulumi.OutputState }

func (MysqlDbSystemMaintenancePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MysqlDbSystemMaintenance)(nil)).Elem()
}

func (o MysqlDbSystemMaintenancePtrOutput) ToMysqlDbSystemMaintenancePtrOutput() MysqlDbSystemMaintenancePtrOutput {
	return o
}

func (o MysqlDbSystemMaintenancePtrOutput) ToMysqlDbSystemMaintenancePtrOutputWithContext(ctx context.Context) MysqlDbSystemMaintenancePtrOutput {
	return o
}

func (o MysqlDbSystemMaintenancePtrOutput) Elem() MysqlDbSystemMaintenanceOutput {
	return o.ApplyT(func(v *MysqlDbSystemMaintenance) MysqlDbSystemMaintenance { return *v }).(MysqlDbSystemMaintenanceOutput)
}

// (Updatable) The start of the 2 hour maintenance window.
func (o MysqlDbSystemMaintenancePtrOutput) WindowStartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MysqlDbSystemMaintenance) *string {
		if v == nil {
			return nil
		}
		return &v.WindowStartTime
	}).(pulumi.StringPtrOutput)
}

type MysqlDbSystemSource struct {
	// The OCID of the backup to be used as the source for the new DB System.
	BackupId *string `pulumi:"backupId"`
	// The specific source identifier. Use `BACKUP` for creating a new database by restoring from a backup.
	SourceType string `pulumi:"sourceType"`
}

// MysqlDbSystemSourceInput is an input type that accepts MysqlDbSystemSourceArgs and MysqlDbSystemSourceOutput values.
// You can construct a concrete instance of `MysqlDbSystemSourceInput` via:
//
//          MysqlDbSystemSourceArgs{...}
type MysqlDbSystemSourceInput interface {
	pulumi.Input

	ToMysqlDbSystemSourceOutput() MysqlDbSystemSourceOutput
	ToMysqlDbSystemSourceOutputWithContext(context.Context) MysqlDbSystemSourceOutput
}

type MysqlDbSystemSourceArgs struct {
	// The OCID of the backup to be used as the source for the new DB System.
	BackupId pulumi.StringPtrInput `pulumi:"backupId"`
	// The specific source identifier. Use `BACKUP` for creating a new database by restoring from a backup.
	SourceType pulumi.StringInput `pulumi:"sourceType"`
}

func (MysqlDbSystemSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MysqlDbSystemSource)(nil)).Elem()
}

func (i MysqlDbSystemSourceArgs) ToMysqlDbSystemSourceOutput() MysqlDbSystemSourceOutput {
	return i.ToMysqlDbSystemSourceOutputWithContext(context.Background())
}

func (i MysqlDbSystemSourceArgs) ToMysqlDbSystemSourceOutputWithContext(ctx context.Context) MysqlDbSystemSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MysqlDbSystemSourceOutput)
}

func (i MysqlDbSystemSourceArgs) ToMysqlDbSystemSourcePtrOutput() MysqlDbSystemSourcePtrOutput {
	return i.ToMysqlDbSystemSourcePtrOutputWithContext(context.Background())
}

func (i MysqlDbSystemSourceArgs) ToMysqlDbSystemSourcePtrOutputWithContext(ctx context.Context) MysqlDbSystemSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MysqlDbSystemSourceOutput).ToMysqlDbSystemSourcePtrOutputWithContext(ctx)
}

// MysqlDbSystemSourcePtrInput is an input type that accepts MysqlDbSystemSourceArgs, MysqlDbSystemSourcePtr and MysqlDbSystemSourcePtrOutput values.
// You can construct a concrete instance of `MysqlDbSystemSourcePtrInput` via:
//
//          MysqlDbSystemSourceArgs{...}
//
//  or:
//
//          nil
type MysqlDbSystemSourcePtrInput interface {
	pulumi.Input

	ToMysqlDbSystemSourcePtrOutput() MysqlDbSystemSourcePtrOutput
	ToMysqlDbSystemSourcePtrOutputWithContext(context.Context) MysqlDbSystemSourcePtrOutput
}

type mysqlDbSystemSourcePtrType MysqlDbSystemSourceArgs

func MysqlDbSystemSourcePtr(v *MysqlDbSystemSourceArgs) MysqlDbSystemSourcePtrInput {
	return (*mysqlDbSystemSourcePtrType)(v)
}

func (*mysqlDbSystemSourcePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MysqlDbSystemSource)(nil)).Elem()
}

func (i *mysqlDbSystemSourcePtrType) ToMysqlDbSystemSourcePtrOutput() MysqlDbSystemSourcePtrOutput {
	return i.ToMysqlDbSystemSourcePtrOutputWithContext(context.Background())
}

func (i *mysqlDbSystemSourcePtrType) ToMysqlDbSystemSourcePtrOutputWithContext(ctx context.Context) MysqlDbSystemSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MysqlDbSystemSourcePtrOutput)
}

type MysqlDbSystemSourceOutput struct{ *pulumi.OutputState }

func (MysqlDbSystemSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MysqlDbSystemSource)(nil)).Elem()
}

func (o MysqlDbSystemSourceOutput) ToMysqlDbSystemSourceOutput() MysqlDbSystemSourceOutput {
	return o
}

func (o MysqlDbSystemSourceOutput) ToMysqlDbSystemSourceOutputWithContext(ctx context.Context) MysqlDbSystemSourceOutput {
	return o
}

func (o MysqlDbSystemSourceOutput) ToMysqlDbSystemSourcePtrOutput() MysqlDbSystemSourcePtrOutput {
	return o.ToMysqlDbSystemSourcePtrOutputWithContext(context.Background())
}

func (o MysqlDbSystemSourceOutput) ToMysqlDbSystemSourcePtrOutputWithContext(ctx context.Context) MysqlDbSystemSourcePtrOutput {
	return o.ApplyT(func(v MysqlDbSystemSource) *MysqlDbSystemSource {
		return &v
	}).(MysqlDbSystemSourcePtrOutput)
}

// The OCID of the backup to be used as the source for the new DB System.
func (o MysqlDbSystemSourceOutput) BackupId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MysqlDbSystemSource) *string { return v.BackupId }).(pulumi.StringPtrOutput)
}

// The specific source identifier. Use `BACKUP` for creating a new database by restoring from a backup.
func (o MysqlDbSystemSourceOutput) SourceType() pulumi.StringOutput {
	return o.ApplyT(func(v MysqlDbSystemSource) string { return v.SourceType }).(pulumi.StringOutput)
}

type MysqlDbSystemSourcePtrOutput struct{ *pulumi.OutputState }

func (MysqlDbSystemSourcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MysqlDbSystemSource)(nil)).Elem()
}

func (o MysqlDbSystemSourcePtrOutput) ToMysqlDbSystemSourcePtrOutput() MysqlDbSystemSourcePtrOutput {
	return o
}

func (o MysqlDbSystemSourcePtrOutput) ToMysqlDbSystemSourcePtrOutputWithContext(ctx context.Context) MysqlDbSystemSourcePtrOutput {
	return o
}

func (o MysqlDbSystemSourcePtrOutput) Elem() MysqlDbSystemSourceOutput {
	return o.ApplyT(func(v *MysqlDbSystemSource) MysqlDbSystemSource { return *v }).(MysqlDbSystemSourceOutput)
}

// The OCID of the backup to be used as the source for the new DB System.
func (o MysqlDbSystemSourcePtrOutput) BackupId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MysqlDbSystemSource) *string {
		if v == nil {
			return nil
		}
		return v.BackupId
	}).(pulumi.StringPtrOutput)
}

// The specific source identifier. Use `BACKUP` for creating a new database by restoring from a backup.
func (o MysqlDbSystemSourcePtrOutput) SourceType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MysqlDbSystemSource) *string {
		if v == nil {
			return nil
		}
		return &v.SourceType
	}).(pulumi.StringPtrOutput)
}

type GetAnalyticsClusterClusterNode struct {
	// The ID of the node within MySQL Analytics Cluster.
	NodeId string `pulumi:"nodeId"`
	// The current state of the Analytics Cluster.
	State string `pulumi:"state"`
	// The date and time the Analytics Cluster was created, as described by [RFC 3339](https://tools.ietf.org/rfc/rfc3339).
	TimeCreated string `pulumi:"timeCreated"`
	// The time the Analytics Cluster was last updated, as described by [RFC 3339](https://tools.ietf.org/rfc/rfc3339).
	TimeUpdated string `pulumi:"timeUpdated"`
}

// GetAnalyticsClusterClusterNodeInput is an input type that accepts GetAnalyticsClusterClusterNodeArgs and GetAnalyticsClusterClusterNodeOutput values.
// You can construct a concrete instance of `GetAnalyticsClusterClusterNodeInput` via:
//
//          GetAnalyticsClusterClusterNodeArgs{...}
type GetAnalyticsClusterClusterNodeInput interface {
	pulumi.Input

	ToGetAnalyticsClusterClusterNodeOutput() GetAnalyticsClusterClusterNodeOutput
	ToGetAnalyticsClusterClusterNodeOutputWithContext(context.Context) GetAnalyticsClusterClusterNodeOutput
}

type GetAnalyticsClusterClusterNodeArgs struct {
	// The ID of the node within MySQL Analytics Cluster.
	NodeId pulumi.StringInput `pulumi:"nodeId"`
	// The current state of the Analytics Cluster.
	State pulumi.StringInput `pulumi:"state"`
	// The date and time the Analytics Cluster was created, as described by [RFC 3339](https://tools.ietf.org/rfc/rfc3339).
	TimeCreated pulumi.StringInput `pulumi:"timeCreated"`
	// The time the Analytics Cluster was last updated, as described by [RFC 3339](https://tools.ietf.org/rfc/rfc3339).
	TimeUpdated pulumi.StringInput `pulumi:"timeUpdated"`
}

func (GetAnalyticsClusterClusterNodeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAnalyticsClusterClusterNode)(nil)).Elem()
}

func (i GetAnalyticsClusterClusterNodeArgs) ToGetAnalyticsClusterClusterNodeOutput() GetAnalyticsClusterClusterNodeOutput {
	return i.ToGetAnalyticsClusterClusterNodeOutputWithContext(context.Background())
}

func (i GetAnalyticsClusterClusterNodeArgs) ToGetAnalyticsClusterClusterNodeOutputWithContext(ctx context.Context) GetAnalyticsClusterClusterNodeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetAnalyticsClusterClusterNodeOutput)
}

// GetAnalyticsClusterClusterNodeArrayInput is an input type that accepts GetAnalyticsClusterClusterNodeArray and GetAnalyticsClusterClusterNodeArrayOutput values.
// You can construct a concrete instance of `GetAnalyticsClusterClusterNodeArrayInput` via:
//
//          GetAnalyticsClusterClusterNodeArray{ GetAnalyticsClusterClusterNodeArgs{...} }
type GetAnalyticsClusterClusterNodeArrayInput interface {
	pulumi.Input

	ToGetAnalyticsClusterClusterNodeArrayOutput() GetAnalyticsClusterClusterNodeArrayOutput
	ToGetAnalyticsClusterClusterNodeArrayOutputWithContext(context.Context) GetAnalyticsClusterClusterNodeArrayOutput
}

type GetAnalyticsClusterClusterNodeArray []GetAnalyticsClusterClusterNodeInput

func (GetAnalyticsClusterClusterNodeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetAnalyticsClusterClusterNode)(nil)).Elem()
}

func (i GetAnalyticsClusterClusterNodeArray) ToGetAnalyticsClusterClusterNodeArrayOutput() GetAnalyticsClusterClusterNodeArrayOutput {
	return i.ToGetAnalyticsClusterClusterNodeArrayOutputWithContext(context.Background())
}

func (i GetAnalyticsClusterClusterNodeArray) ToGetAnalyticsClusterClusterNodeArrayOutputWithContext(ctx context.Context) GetAnalyticsClusterClusterNodeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetAnalyticsClusterClusterNodeArrayOutput)
}

type GetAnalyticsClusterClusterNodeOutput struct{ *pulumi.OutputState }

func (GetAnalyticsClusterClusterNodeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAnalyticsClusterClusterNode)(nil)).Elem()
}

func (o GetAnalyticsClusterClusterNodeOutput) ToGetAnalyticsClusterClusterNodeOutput() GetAnalyticsClusterClusterNodeOutput {
	return o
}

func (o GetAnalyticsClusterClusterNodeOutput) ToGetAnalyticsClusterClusterNodeOutputWithContext(ctx context.Context) GetAnalyticsClusterClusterNodeOutput {
	return o
}

// The ID of the node within MySQL Analytics Cluster.
func (o GetAnalyticsClusterClusterNodeOutput) NodeId() pulumi.StringOutput {
	return o.ApplyT(func(v GetAnalyticsClusterClusterNode) string { return v.NodeId }).(pulumi.StringOutput)
}

// The current state of the Analytics Cluster.
func (o GetAnalyticsClusterClusterNodeOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v GetAnalyticsClusterClusterNode) string { return v.State }).(pulumi.StringOutput)
}

// The date and time the Analytics Cluster was created, as described by [RFC 3339](https://tools.ietf.org/rfc/rfc3339).
func (o GetAnalyticsClusterClusterNodeOutput) TimeCreated() pulumi.StringOutput {
	return o.ApplyT(func(v GetAnalyticsClusterClusterNode) string { return v.TimeCreated }).(pulumi.StringOutput)
}

// The time the Analytics Cluster was last updated, as described by [RFC 3339](https://tools.ietf.org/rfc/rfc3339).
func (o GetAnalyticsClusterClusterNodeOutput) TimeUpdated() pulumi.StringOutput {
	return o.ApplyT(func(v GetAnalyticsClusterClusterNode) string { return v.TimeUpdated }).(pulumi.StringOutput)
}

type GetAnalyticsClusterClusterNodeArrayOutput struct{ *pulumi.OutputState }

func (GetAnalyticsClusterClusterNodeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetAnalyticsClusterClusterNode)(nil)).Elem()
}

func (o GetAnalyticsClusterClusterNodeArrayOutput) ToGetAnalyticsClusterClusterNodeArrayOutput() GetAnalyticsClusterClusterNodeArrayOutput {
	return o
}

func (o GetAnalyticsClusterClusterNodeArrayOutput) ToGetAnalyticsClusterClusterNodeArrayOutputWithContext(ctx context.Context) GetAnalyticsClusterClusterNodeArrayOutput {
	return o
}

func (o GetAnalyticsClusterClusterNodeArrayOutput) Index(i pulumi.IntInput) GetAnalyticsClusterClusterNodeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetAnalyticsClusterClusterNode {
		return vs[0].([]GetAnalyticsClusterClusterNode)[vs[1].(int)]
	}).(GetAnalyticsClusterClusterNodeOutput)
}

type GetChannelSource struct {
	// The network address of the MySQL instance.
	Hostname string `pulumi:"hostname"`
	Password string `pulumi:"password"`
	// The port the source MySQL instance listens on.
	Port int `pulumi:"port"`
	// The specific source identifier.
	SourceType string `pulumi:"sourceType"`
	// The CA certificate of the server used for VERIFY_IDENTITY and VERIFY_CA ssl modes.
	SslCaCertificate GetChannelSourceSslCaCertificate `pulumi:"sslCaCertificate"`
	// The SSL mode of the Channel.
	SslMode string `pulumi:"sslMode"`
	// The name of the replication user on the source MySQL instance. The username has a maximum length of 96 characters. For more information, please see the [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/change-master-to.html)
	Username string `pulumi:"username"`
}

// GetChannelSourceInput is an input type that accepts GetChannelSourceArgs and GetChannelSourceOutput values.
// You can construct a concrete instance of `GetChannelSourceInput` via:
//
//          GetChannelSourceArgs{...}
type GetChannelSourceInput interface {
	pulumi.Input

	ToGetChannelSourceOutput() GetChannelSourceOutput
	ToGetChannelSourceOutputWithContext(context.Context) GetChannelSourceOutput
}

type GetChannelSourceArgs struct {
	// The network address of the MySQL instance.
	Hostname pulumi.StringInput `pulumi:"hostname"`
	Password pulumi.StringInput `pulumi:"password"`
	// The port the source MySQL instance listens on.
	Port pulumi.IntInput `pulumi:"port"`
	// The specific source identifier.
	SourceType pulumi.StringInput `pulumi:"sourceType"`
	// The CA certificate of the server used for VERIFY_IDENTITY and VERIFY_CA ssl modes.
	SslCaCertificate GetChannelSourceSslCaCertificateInput `pulumi:"sslCaCertificate"`
	// The SSL mode of the Channel.
	SslMode pulumi.StringInput `pulumi:"sslMode"`
	// The name of the replication user on the source MySQL instance. The username has a maximum length of 96 characters. For more information, please see the [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/change-master-to.html)
	Username pulumi.StringInput `pulumi:"username"`
}

func (GetChannelSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetChannelSource)(nil)).Elem()
}

func (i GetChannelSourceArgs) ToGetChannelSourceOutput() GetChannelSourceOutput {
	return i.ToGetChannelSourceOutputWithContext(context.Background())
}

func (i GetChannelSourceArgs) ToGetChannelSourceOutputWithContext(ctx context.Context) GetChannelSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetChannelSourceOutput)
}

type GetChannelSourceOutput struct{ *pulumi.OutputState }

func (GetChannelSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetChannelSource)(nil)).Elem()
}

func (o GetChannelSourceOutput) ToGetChannelSourceOutput() GetChannelSourceOutput {
	return o
}

func (o GetChannelSourceOutput) ToGetChannelSourceOutputWithContext(ctx context.Context) GetChannelSourceOutput {
	return o
}

// The network address of the MySQL instance.
func (o GetChannelSourceOutput) Hostname() pulumi.StringOutput {
	return o.ApplyT(func(v GetChannelSource) string { return v.Hostname }).(pulumi.StringOutput)
}

func (o GetChannelSourceOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v GetChannelSource) string { return v.Password }).(pulumi.StringOutput)
}

// The port the source MySQL instance listens on.
func (o GetChannelSourceOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v GetChannelSource) int { return v.Port }).(pulumi.IntOutput)
}

// The specific source identifier.
func (o GetChannelSourceOutput) SourceType() pulumi.StringOutput {
	return o.ApplyT(func(v GetChannelSource) string { return v.SourceType }).(pulumi.StringOutput)
}

// The CA certificate of the server used for VERIFY_IDENTITY and VERIFY_CA ssl modes.
func (o GetChannelSourceOutput) SslCaCertificate() GetChannelSourceSslCaCertificateOutput {
	return o.ApplyT(func(v GetChannelSource) GetChannelSourceSslCaCertificate { return v.SslCaCertificate }).(GetChannelSourceSslCaCertificateOutput)
}

// The SSL mode of the Channel.
func (o GetChannelSourceOutput) SslMode() pulumi.StringOutput {
	return o.ApplyT(func(v GetChannelSource) string { return v.SslMode }).(pulumi.StringOutput)
}

// The name of the replication user on the source MySQL instance. The username has a maximum length of 96 characters. For more information, please see the [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/change-master-to.html)
func (o GetChannelSourceOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v GetChannelSource) string { return v.Username }).(pulumi.StringOutput)
}

type GetChannelSourceSslCaCertificate struct {
	// The type of CA certificate.
	CertificateType string `pulumi:"certificateType"`
	// The string containing the CA certificate in PEM format.
	Contents string `pulumi:"contents"`
}

// GetChannelSourceSslCaCertificateInput is an input type that accepts GetChannelSourceSslCaCertificateArgs and GetChannelSourceSslCaCertificateOutput values.
// You can construct a concrete instance of `GetChannelSourceSslCaCertificateInput` via:
//
//          GetChannelSourceSslCaCertificateArgs{...}
type GetChannelSourceSslCaCertificateInput interface {
	pulumi.Input

	ToGetChannelSourceSslCaCertificateOutput() GetChannelSourceSslCaCertificateOutput
	ToGetChannelSourceSslCaCertificateOutputWithContext(context.Context) GetChannelSourceSslCaCertificateOutput
}

type GetChannelSourceSslCaCertificateArgs struct {
	// The type of CA certificate.
	CertificateType pulumi.StringInput `pulumi:"certificateType"`
	// The string containing the CA certificate in PEM format.
	Contents pulumi.StringInput `pulumi:"contents"`
}

func (GetChannelSourceSslCaCertificateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetChannelSourceSslCaCertificate)(nil)).Elem()
}

func (i GetChannelSourceSslCaCertificateArgs) ToGetChannelSourceSslCaCertificateOutput() GetChannelSourceSslCaCertificateOutput {
	return i.ToGetChannelSourceSslCaCertificateOutputWithContext(context.Background())
}

func (i GetChannelSourceSslCaCertificateArgs) ToGetChannelSourceSslCaCertificateOutputWithContext(ctx context.Context) GetChannelSourceSslCaCertificateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetChannelSourceSslCaCertificateOutput)
}

type GetChannelSourceSslCaCertificateOutput struct{ *pulumi.OutputState }

func (GetChannelSourceSslCaCertificateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetChannelSourceSslCaCertificate)(nil)).Elem()
}

func (o GetChannelSourceSslCaCertificateOutput) ToGetChannelSourceSslCaCertificateOutput() GetChannelSourceSslCaCertificateOutput {
	return o
}

func (o GetChannelSourceSslCaCertificateOutput) ToGetChannelSourceSslCaCertificateOutputWithContext(ctx context.Context) GetChannelSourceSslCaCertificateOutput {
	return o
}

// The type of CA certificate.
func (o GetChannelSourceSslCaCertificateOutput) CertificateType() pulumi.StringOutput {
	return o.ApplyT(func(v GetChannelSourceSslCaCertificate) string { return v.CertificateType }).(pulumi.StringOutput)
}

// The string containing the CA certificate in PEM format.
func (o GetChannelSourceSslCaCertificateOutput) Contents() pulumi.StringOutput {
	return o.ApplyT(func(v GetChannelSourceSslCaCertificate) string { return v.Contents }).(pulumi.StringOutput)
}

type GetChannelTarget struct {
	// The username for the replication applier of the target MySQL DB System.
	ApplierUsername string `pulumi:"applierUsername"`
	// The case-insensitive name that identifies the replication channel. Channel names must follow the rules defined for [MySQL identifiers](https://dev.mysql.com/doc/refman/8.0/en/identifiers.html). The names of non-Deleted Channels must be unique for each DB System.
	ChannelName string `pulumi:"channelName"`
	// The OCID of the source DB System.
	DbSystemId string `pulumi:"dbSystemId"`
	// The specific target identifier.
	TargetType string `pulumi:"targetType"`
}

// GetChannelTargetInput is an input type that accepts GetChannelTargetArgs and GetChannelTargetOutput values.
// You can construct a concrete instance of `GetChannelTargetInput` via:
//
//          GetChannelTargetArgs{...}
type GetChannelTargetInput interface {
	pulumi.Input

	ToGetChannelTargetOutput() GetChannelTargetOutput
	ToGetChannelTargetOutputWithContext(context.Context) GetChannelTargetOutput
}

type GetChannelTargetArgs struct {
	// The username for the replication applier of the target MySQL DB System.
	ApplierUsername pulumi.StringInput `pulumi:"applierUsername"`
	// The case-insensitive name that identifies the replication channel. Channel names must follow the rules defined for [MySQL identifiers](https://dev.mysql.com/doc/refman/8.0/en/identifiers.html). The names of non-Deleted Channels must be unique for each DB System.
	ChannelName pulumi.StringInput `pulumi:"channelName"`
	// The OCID of the source DB System.
	DbSystemId pulumi.StringInput `pulumi:"dbSystemId"`
	// The specific target identifier.
	TargetType pulumi.StringInput `pulumi:"targetType"`
}

func (GetChannelTargetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetChannelTarget)(nil)).Elem()
}

func (i GetChannelTargetArgs) ToGetChannelTargetOutput() GetChannelTargetOutput {
	return i.ToGetChannelTargetOutputWithContext(context.Background())
}

func (i GetChannelTargetArgs) ToGetChannelTargetOutputWithContext(ctx context.Context) GetChannelTargetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetChannelTargetOutput)
}

type GetChannelTargetOutput struct{ *pulumi.OutputState }

func (GetChannelTargetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetChannelTarget)(nil)).Elem()
}

func (o GetChannelTargetOutput) ToGetChannelTargetOutput() GetChannelTargetOutput {
	return o
}

func (o GetChannelTargetOutput) ToGetChannelTargetOutputWithContext(ctx context.Context) GetChannelTargetOutput {
	return o
}

// The username for the replication applier of the target MySQL DB System.
func (o GetChannelTargetOutput) ApplierUsername() pulumi.StringOutput {
	return o.ApplyT(func(v GetChannelTarget) string { return v.ApplierUsername }).(pulumi.StringOutput)
}

// The case-insensitive name that identifies the replication channel. Channel names must follow the rules defined for [MySQL identifiers](https://dev.mysql.com/doc/refman/8.0/en/identifiers.html). The names of non-Deleted Channels must be unique for each DB System.
func (o GetChannelTargetOutput) ChannelName() pulumi.StringOutput {
	return o.ApplyT(func(v GetChannelTarget) string { return v.ChannelName }).(pulumi.StringOutput)
}

// The OCID of the source DB System.
func (o GetChannelTargetOutput) DbSystemId() pulumi.StringOutput {
	return o.ApplyT(func(v GetChannelTarget) string { return v.DbSystemId }).(pulumi.StringOutput)
}

// The specific target identifier.
func (o GetChannelTargetOutput) TargetType() pulumi.StringOutput {
	return o.ApplyT(func(v GetChannelTarget) string { return v.TargetType }).(pulumi.StringOutput)
}

type GetChannelsChannel struct {
	// The compartment [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
	CompartmentId string `pulumi:"compartmentId"`
	// Usage of predefined tag keys. These predefined keys are scoped to namespaces. Example: `{"foo-namespace.bar-key": "value"}`
	DefinedTags map[string]interface{} `pulumi:"definedTags"`
	// User provided description of the Channel.
	Description string `pulumi:"description"`
	// A filter to return only the resource matching the given display name exactly.
	DisplayName string `pulumi:"displayName"`
	// Simple key-value pair applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
	FreeformTags map[string]interface{} `pulumi:"freeformTags"`
	// The OCID of the Channel.
	Id string `pulumi:"id"`
	// If true, returns only Channels that are enabled. If false, returns only Channels that are disabled.
	IsEnabled bool `pulumi:"isEnabled"`
	// A message describing the state of the Channel.
	LifecycleDetails string `pulumi:"lifecycleDetails"`
	// Parameters detailing how to provision the source for the given Channel.
	Source GetChannelsChannelSource `pulumi:"source"`
	// The LifecycleState of the Channel.
	State string `pulumi:"state"`
	// Details about the Channel target.
	Target GetChannelsChannelTarget `pulumi:"target"`
	// The date and time the Channel was created, as described by [RFC 3339](https://tools.ietf.org/rfc/rfc3339).
	TimeCreated string `pulumi:"timeCreated"`
	// The time the Channel was last updated, as described by [RFC 3339](https://tools.ietf.org/rfc/rfc3339).
	TimeUpdated string `pulumi:"timeUpdated"`
}

// GetChannelsChannelInput is an input type that accepts GetChannelsChannelArgs and GetChannelsChannelOutput values.
// You can construct a concrete instance of `GetChannelsChannelInput` via:
//
//          GetChannelsChannelArgs{...}
type GetChannelsChannelInput interface {
	pulumi.Input

	ToGetChannelsChannelOutput() GetChannelsChannelOutput
	ToGetChannelsChannelOutputWithContext(context.Context) GetChannelsChannelOutput
}

type GetChannelsChannelArgs struct {
	// The compartment [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
	CompartmentId pulumi.StringInput `pulumi:"compartmentId"`
	// Usage of predefined tag keys. These predefined keys are scoped to namespaces. Example: `{"foo-namespace.bar-key": "value"}`
	DefinedTags pulumi.MapInput `pulumi:"definedTags"`
	// User provided description of the Channel.
	Description pulumi.StringInput `pulumi:"description"`
	// A filter to return only the resource matching the given display name exactly.
	DisplayName pulumi.StringInput `pulumi:"displayName"`
	// Simple key-value pair applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
	FreeformTags pulumi.MapInput `pulumi:"freeformTags"`
	// The OCID of the Channel.
	Id pulumi.StringInput `pulumi:"id"`
	// If true, returns only Channels that are enabled. If false, returns only Channels that are disabled.
	IsEnabled pulumi.BoolInput `pulumi:"isEnabled"`
	// A message describing the state of the Channel.
	LifecycleDetails pulumi.StringInput `pulumi:"lifecycleDetails"`
	// Parameters detailing how to provision the source for the given Channel.
	Source GetChannelsChannelSourceInput `pulumi:"source"`
	// The LifecycleState of the Channel.
	State pulumi.StringInput `pulumi:"state"`
	// Details about the Channel target.
	Target GetChannelsChannelTargetInput `pulumi:"target"`
	// The date and time the Channel was created, as described by [RFC 3339](https://tools.ietf.org/rfc/rfc3339).
	TimeCreated pulumi.StringInput `pulumi:"timeCreated"`
	// The time the Channel was last updated, as described by [RFC 3339](https://tools.ietf.org/rfc/rfc3339).
	TimeUpdated pulumi.StringInput `pulumi:"timeUpdated"`
}

func (GetChannelsChannelArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetChannelsChannel)(nil)).Elem()
}

func (i GetChannelsChannelArgs) ToGetChannelsChannelOutput() GetChannelsChannelOutput {
	return i.ToGetChannelsChannelOutputWithContext(context.Background())
}

func (i GetChannelsChannelArgs) ToGetChannelsChannelOutputWithContext(ctx context.Context) GetChannelsChannelOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetChannelsChannelOutput)
}

// GetChannelsChannelArrayInput is an input type that accepts GetChannelsChannelArray and GetChannelsChannelArrayOutput values.
// You can construct a concrete instance of `GetChannelsChannelArrayInput` via:
//
//          GetChannelsChannelArray{ GetChannelsChannelArgs{...} }
type GetChannelsChannelArrayInput interface {
	pulumi.Input

	ToGetChannelsChannelArrayOutput() GetChannelsChannelArrayOutput
	ToGetChannelsChannelArrayOutputWithContext(context.Context) GetChannelsChannelArrayOutput
}

type GetChannelsChannelArray []GetChannelsChannelInput

func (GetChannelsChannelArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetChannelsChannel)(nil)).Elem()
}

func (i GetChannelsChannelArray) ToGetChannelsChannelArrayOutput() GetChannelsChannelArrayOutput {
	return i.ToGetChannelsChannelArrayOutputWithContext(context.Background())
}

func (i GetChannelsChannelArray) ToGetChannelsChannelArrayOutputWithContext(ctx context.Context) GetChannelsChannelArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetChannelsChannelArrayOutput)
}

type GetChannelsChannelOutput struct{ *pulumi.OutputState }

func (GetChannelsChannelOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetChannelsChannel)(nil)).Elem()
}

func (o GetChannelsChannelOutput) ToGetChannelsChannelOutput() GetChannelsChannelOutput {
	return o
}

func (o GetChannelsChannelOutput) ToGetChannelsChannelOutputWithContext(ctx context.Context) GetChannelsChannelOutput {
	return o
}

// The compartment [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
func (o GetChannelsChannelOutput) CompartmentId() pulumi.StringOutput {
	return o.ApplyT(func(v GetChannelsChannel) string { return v.CompartmentId }).(pulumi.StringOutput)
}

// Usage of predefined tag keys. These predefined keys are scoped to namespaces. Example: `{"foo-namespace.bar-key": "value"}`
func (o GetChannelsChannelOutput) DefinedTags() pulumi.MapOutput {
	return o.ApplyT(func(v GetChannelsChannel) map[string]interface{} { return v.DefinedTags }).(pulumi.MapOutput)
}

// User provided description of the Channel.
func (o GetChannelsChannelOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v GetChannelsChannel) string { return v.Description }).(pulumi.StringOutput)
}

// A filter to return only the resource matching the given display name exactly.
func (o GetChannelsChannelOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v GetChannelsChannel) string { return v.DisplayName }).(pulumi.StringOutput)
}

// Simple key-value pair applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
func (o GetChannelsChannelOutput) FreeformTags() pulumi.MapOutput {
	return o.ApplyT(func(v GetChannelsChannel) map[string]interface{} { return v.FreeformTags }).(pulumi.MapOutput)
}

// The OCID of the Channel.
func (o GetChannelsChannelOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetChannelsChannel) string { return v.Id }).(pulumi.StringOutput)
}

// If true, returns only Channels that are enabled. If false, returns only Channels that are disabled.
func (o GetChannelsChannelOutput) IsEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v GetChannelsChannel) bool { return v.IsEnabled }).(pulumi.BoolOutput)
}

// A message describing the state of the Channel.
func (o GetChannelsChannelOutput) LifecycleDetails() pulumi.StringOutput {
	return o.ApplyT(func(v GetChannelsChannel) string { return v.LifecycleDetails }).(pulumi.StringOutput)
}

// Parameters detailing how to provision the source for the given Channel.
func (o GetChannelsChannelOutput) Source() GetChannelsChannelSourceOutput {
	return o.ApplyT(func(v GetChannelsChannel) GetChannelsChannelSource { return v.Source }).(GetChannelsChannelSourceOutput)
}

// The LifecycleState of the Channel.
func (o GetChannelsChannelOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v GetChannelsChannel) string { return v.State }).(pulumi.StringOutput)
}

// Details about the Channel target.
func (o GetChannelsChannelOutput) Target() GetChannelsChannelTargetOutput {
	return o.ApplyT(func(v GetChannelsChannel) GetChannelsChannelTarget { return v.Target }).(GetChannelsChannelTargetOutput)
}

// The date and time the Channel was created, as described by [RFC 3339](https://tools.ietf.org/rfc/rfc3339).
func (o GetChannelsChannelOutput) TimeCreated() pulumi.StringOutput {
	return o.ApplyT(func(v GetChannelsChannel) string { return v.TimeCreated }).(pulumi.StringOutput)
}

// The time the Channel was last updated, as described by [RFC 3339](https://tools.ietf.org/rfc/rfc3339).
func (o GetChannelsChannelOutput) TimeUpdated() pulumi.StringOutput {
	return o.ApplyT(func(v GetChannelsChannel) string { return v.TimeUpdated }).(pulumi.StringOutput)
}

type GetChannelsChannelArrayOutput struct{ *pulumi.OutputState }

func (GetChannelsChannelArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetChannelsChannel)(nil)).Elem()
}

func (o GetChannelsChannelArrayOutput) ToGetChannelsChannelArrayOutput() GetChannelsChannelArrayOutput {
	return o
}

func (o GetChannelsChannelArrayOutput) ToGetChannelsChannelArrayOutputWithContext(ctx context.Context) GetChannelsChannelArrayOutput {
	return o
}

func (o GetChannelsChannelArrayOutput) Index(i pulumi.IntInput) GetChannelsChannelOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetChannelsChannel {
		return vs[0].([]GetChannelsChannel)[vs[1].(int)]
	}).(GetChannelsChannelOutput)
}

type GetChannelsChannelSource struct {
	// The network address of the MySQL instance.
	Hostname string `pulumi:"hostname"`
	Password string `pulumi:"password"`
	// The port the source MySQL instance listens on.
	Port int `pulumi:"port"`
	// The specific source identifier.
	SourceType string `pulumi:"sourceType"`
	// The CA certificate of the server used for VERIFY_IDENTITY and VERIFY_CA ssl modes.
	SslCaCertificate GetChannelsChannelSourceSslCaCertificate `pulumi:"sslCaCertificate"`
	// The SSL mode of the Channel.
	SslMode string `pulumi:"sslMode"`
	// The name of the replication user on the source MySQL instance. The username has a maximum length of 96 characters. For more information, please see the [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/change-master-to.html)
	Username string `pulumi:"username"`
}

// GetChannelsChannelSourceInput is an input type that accepts GetChannelsChannelSourceArgs and GetChannelsChannelSourceOutput values.
// You can construct a concrete instance of `GetChannelsChannelSourceInput` via:
//
//          GetChannelsChannelSourceArgs{...}
type GetChannelsChannelSourceInput interface {
	pulumi.Input

	ToGetChannelsChannelSourceOutput() GetChannelsChannelSourceOutput
	ToGetChannelsChannelSourceOutputWithContext(context.Context) GetChannelsChannelSourceOutput
}

type GetChannelsChannelSourceArgs struct {
	// The network address of the MySQL instance.
	Hostname pulumi.StringInput `pulumi:"hostname"`
	Password pulumi.StringInput `pulumi:"password"`
	// The port the source MySQL instance listens on.
	Port pulumi.IntInput `pulumi:"port"`
	// The specific source identifier.
	SourceType pulumi.StringInput `pulumi:"sourceType"`
	// The CA certificate of the server used for VERIFY_IDENTITY and VERIFY_CA ssl modes.
	SslCaCertificate GetChannelsChannelSourceSslCaCertificateInput `pulumi:"sslCaCertificate"`
	// The SSL mode of the Channel.
	SslMode pulumi.StringInput `pulumi:"sslMode"`
	// The name of the replication user on the source MySQL instance. The username has a maximum length of 96 characters. For more information, please see the [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/change-master-to.html)
	Username pulumi.StringInput `pulumi:"username"`
}

func (GetChannelsChannelSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetChannelsChannelSource)(nil)).Elem()
}

func (i GetChannelsChannelSourceArgs) ToGetChannelsChannelSourceOutput() GetChannelsChannelSourceOutput {
	return i.ToGetChannelsChannelSourceOutputWithContext(context.Background())
}

func (i GetChannelsChannelSourceArgs) ToGetChannelsChannelSourceOutputWithContext(ctx context.Context) GetChannelsChannelSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetChannelsChannelSourceOutput)
}

type GetChannelsChannelSourceOutput struct{ *pulumi.OutputState }

func (GetChannelsChannelSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetChannelsChannelSource)(nil)).Elem()
}

func (o GetChannelsChannelSourceOutput) ToGetChannelsChannelSourceOutput() GetChannelsChannelSourceOutput {
	return o
}

func (o GetChannelsChannelSourceOutput) ToGetChannelsChannelSourceOutputWithContext(ctx context.Context) GetChannelsChannelSourceOutput {
	return o
}

// The network address of the MySQL instance.
func (o GetChannelsChannelSourceOutput) Hostname() pulumi.StringOutput {
	return o.ApplyT(func(v GetChannelsChannelSource) string { return v.Hostname }).(pulumi.StringOutput)
}

func (o GetChannelsChannelSourceOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v GetChannelsChannelSource) string { return v.Password }).(pulumi.StringOutput)
}

// The port the source MySQL instance listens on.
func (o GetChannelsChannelSourceOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v GetChannelsChannelSource) int { return v.Port }).(pulumi.IntOutput)
}

// The specific source identifier.
func (o GetChannelsChannelSourceOutput) SourceType() pulumi.StringOutput {
	return o.ApplyT(func(v GetChannelsChannelSource) string { return v.SourceType }).(pulumi.StringOutput)
}

// The CA certificate of the server used for VERIFY_IDENTITY and VERIFY_CA ssl modes.
func (o GetChannelsChannelSourceOutput) SslCaCertificate() GetChannelsChannelSourceSslCaCertificateOutput {
	return o.ApplyT(func(v GetChannelsChannelSource) GetChannelsChannelSourceSslCaCertificate { return v.SslCaCertificate }).(GetChannelsChannelSourceSslCaCertificateOutput)
}

// The SSL mode of the Channel.
func (o GetChannelsChannelSourceOutput) SslMode() pulumi.StringOutput {
	return o.ApplyT(func(v GetChannelsChannelSource) string { return v.SslMode }).(pulumi.StringOutput)
}

// The name of the replication user on the source MySQL instance. The username has a maximum length of 96 characters. For more information, please see the [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/change-master-to.html)
func (o GetChannelsChannelSourceOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v GetChannelsChannelSource) string { return v.Username }).(pulumi.StringOutput)
}

type GetChannelsChannelSourceSslCaCertificate struct {
	// The type of CA certificate.
	CertificateType string `pulumi:"certificateType"`
	// The string containing the CA certificate in PEM format.
	Contents string `pulumi:"contents"`
}

// GetChannelsChannelSourceSslCaCertificateInput is an input type that accepts GetChannelsChannelSourceSslCaCertificateArgs and GetChannelsChannelSourceSslCaCertificateOutput values.
// You can construct a concrete instance of `GetChannelsChannelSourceSslCaCertificateInput` via:
//
//          GetChannelsChannelSourceSslCaCertificateArgs{...}
type GetChannelsChannelSourceSslCaCertificateInput interface {
	pulumi.Input

	ToGetChannelsChannelSourceSslCaCertificateOutput() GetChannelsChannelSourceSslCaCertificateOutput
	ToGetChannelsChannelSourceSslCaCertificateOutputWithContext(context.Context) GetChannelsChannelSourceSslCaCertificateOutput
}

type GetChannelsChannelSourceSslCaCertificateArgs struct {
	// The type of CA certificate.
	CertificateType pulumi.StringInput `pulumi:"certificateType"`
	// The string containing the CA certificate in PEM format.
	Contents pulumi.StringInput `pulumi:"contents"`
}

func (GetChannelsChannelSourceSslCaCertificateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetChannelsChannelSourceSslCaCertificate)(nil)).Elem()
}

func (i GetChannelsChannelSourceSslCaCertificateArgs) ToGetChannelsChannelSourceSslCaCertificateOutput() GetChannelsChannelSourceSslCaCertificateOutput {
	return i.ToGetChannelsChannelSourceSslCaCertificateOutputWithContext(context.Background())
}

func (i GetChannelsChannelSourceSslCaCertificateArgs) ToGetChannelsChannelSourceSslCaCertificateOutputWithContext(ctx context.Context) GetChannelsChannelSourceSslCaCertificateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetChannelsChannelSourceSslCaCertificateOutput)
}

type GetChannelsChannelSourceSslCaCertificateOutput struct{ *pulumi.OutputState }

func (GetChannelsChannelSourceSslCaCertificateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetChannelsChannelSourceSslCaCertificate)(nil)).Elem()
}

func (o GetChannelsChannelSourceSslCaCertificateOutput) ToGetChannelsChannelSourceSslCaCertificateOutput() GetChannelsChannelSourceSslCaCertificateOutput {
	return o
}

func (o GetChannelsChannelSourceSslCaCertificateOutput) ToGetChannelsChannelSourceSslCaCertificateOutputWithContext(ctx context.Context) GetChannelsChannelSourceSslCaCertificateOutput {
	return o
}

// The type of CA certificate.
func (o GetChannelsChannelSourceSslCaCertificateOutput) CertificateType() pulumi.StringOutput {
	return o.ApplyT(func(v GetChannelsChannelSourceSslCaCertificate) string { return v.CertificateType }).(pulumi.StringOutput)
}

// The string containing the CA certificate in PEM format.
func (o GetChannelsChannelSourceSslCaCertificateOutput) Contents() pulumi.StringOutput {
	return o.ApplyT(func(v GetChannelsChannelSourceSslCaCertificate) string { return v.Contents }).(pulumi.StringOutput)
}

type GetChannelsChannelTarget struct {
	// The username for the replication applier of the target MySQL DB System.
	ApplierUsername string `pulumi:"applierUsername"`
	// The case-insensitive name that identifies the replication channel. Channel names must follow the rules defined for [MySQL identifiers](https://dev.mysql.com/doc/refman/8.0/en/identifiers.html). The names of non-Deleted Channels must be unique for each DB System.
	ChannelName string `pulumi:"channelName"`
	// The DB System [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
	DbSystemId string `pulumi:"dbSystemId"`
	// The specific target identifier.
	TargetType string `pulumi:"targetType"`
}

// GetChannelsChannelTargetInput is an input type that accepts GetChannelsChannelTargetArgs and GetChannelsChannelTargetOutput values.
// You can construct a concrete instance of `GetChannelsChannelTargetInput` via:
//
//          GetChannelsChannelTargetArgs{...}
type GetChannelsChannelTargetInput interface {
	pulumi.Input

	ToGetChannelsChannelTargetOutput() GetChannelsChannelTargetOutput
	ToGetChannelsChannelTargetOutputWithContext(context.Context) GetChannelsChannelTargetOutput
}

type GetChannelsChannelTargetArgs struct {
	// The username for the replication applier of the target MySQL DB System.
	ApplierUsername pulumi.StringInput `pulumi:"applierUsername"`
	// The case-insensitive name that identifies the replication channel. Channel names must follow the rules defined for [MySQL identifiers](https://dev.mysql.com/doc/refman/8.0/en/identifiers.html). The names of non-Deleted Channels must be unique for each DB System.
	ChannelName pulumi.StringInput `pulumi:"channelName"`
	// The DB System [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
	DbSystemId pulumi.StringInput `pulumi:"dbSystemId"`
	// The specific target identifier.
	TargetType pulumi.StringInput `pulumi:"targetType"`
}

func (GetChannelsChannelTargetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetChannelsChannelTarget)(nil)).Elem()
}

func (i GetChannelsChannelTargetArgs) ToGetChannelsChannelTargetOutput() GetChannelsChannelTargetOutput {
	return i.ToGetChannelsChannelTargetOutputWithContext(context.Background())
}

func (i GetChannelsChannelTargetArgs) ToGetChannelsChannelTargetOutputWithContext(ctx context.Context) GetChannelsChannelTargetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetChannelsChannelTargetOutput)
}

type GetChannelsChannelTargetOutput struct{ *pulumi.OutputState }

func (GetChannelsChannelTargetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetChannelsChannelTarget)(nil)).Elem()
}

func (o GetChannelsChannelTargetOutput) ToGetChannelsChannelTargetOutput() GetChannelsChannelTargetOutput {
	return o
}

func (o GetChannelsChannelTargetOutput) ToGetChannelsChannelTargetOutputWithContext(ctx context.Context) GetChannelsChannelTargetOutput {
	return o
}

// The username for the replication applier of the target MySQL DB System.
func (o GetChannelsChannelTargetOutput) ApplierUsername() pulumi.StringOutput {
	return o.ApplyT(func(v GetChannelsChannelTarget) string { return v.ApplierUsername }).(pulumi.StringOutput)
}

// The case-insensitive name that identifies the replication channel. Channel names must follow the rules defined for [MySQL identifiers](https://dev.mysql.com/doc/refman/8.0/en/identifiers.html). The names of non-Deleted Channels must be unique for each DB System.
func (o GetChannelsChannelTargetOutput) ChannelName() pulumi.StringOutput {
	return o.ApplyT(func(v GetChannelsChannelTarget) string { return v.ChannelName }).(pulumi.StringOutput)
}

// The DB System [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
func (o GetChannelsChannelTargetOutput) DbSystemId() pulumi.StringOutput {
	return o.ApplyT(func(v GetChannelsChannelTarget) string { return v.DbSystemId }).(pulumi.StringOutput)
}

// The specific target identifier.
func (o GetChannelsChannelTargetOutput) TargetType() pulumi.StringOutput {
	return o.ApplyT(func(v GetChannelsChannelTarget) string { return v.TargetType }).(pulumi.StringOutput)
}

type GetChannelsFilter struct {
	Name   string   `pulumi:"name"`
	Regex  *bool    `pulumi:"regex"`
	Values []string `pulumi:"values"`
}

// GetChannelsFilterInput is an input type that accepts GetChannelsFilterArgs and GetChannelsFilterOutput values.
// You can construct a concrete instance of `GetChannelsFilterInput` via:
//
//          GetChannelsFilterArgs{...}
type GetChannelsFilterInput interface {
	pulumi.Input

	ToGetChannelsFilterOutput() GetChannelsFilterOutput
	ToGetChannelsFilterOutputWithContext(context.Context) GetChannelsFilterOutput
}

type GetChannelsFilterArgs struct {
	Name   pulumi.StringInput      `pulumi:"name"`
	Regex  pulumi.BoolPtrInput     `pulumi:"regex"`
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (GetChannelsFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetChannelsFilter)(nil)).Elem()
}

func (i GetChannelsFilterArgs) ToGetChannelsFilterOutput() GetChannelsFilterOutput {
	return i.ToGetChannelsFilterOutputWithContext(context.Background())
}

func (i GetChannelsFilterArgs) ToGetChannelsFilterOutputWithContext(ctx context.Context) GetChannelsFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetChannelsFilterOutput)
}

// GetChannelsFilterArrayInput is an input type that accepts GetChannelsFilterArray and GetChannelsFilterArrayOutput values.
// You can construct a concrete instance of `GetChannelsFilterArrayInput` via:
//
//          GetChannelsFilterArray{ GetChannelsFilterArgs{...} }
type GetChannelsFilterArrayInput interface {
	pulumi.Input

	ToGetChannelsFilterArrayOutput() GetChannelsFilterArrayOutput
	ToGetChannelsFilterArrayOutputWithContext(context.Context) GetChannelsFilterArrayOutput
}

type GetChannelsFilterArray []GetChannelsFilterInput

func (GetChannelsFilterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetChannelsFilter)(nil)).Elem()
}

func (i GetChannelsFilterArray) ToGetChannelsFilterArrayOutput() GetChannelsFilterArrayOutput {
	return i.ToGetChannelsFilterArrayOutputWithContext(context.Background())
}

func (i GetChannelsFilterArray) ToGetChannelsFilterArrayOutputWithContext(ctx context.Context) GetChannelsFilterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetChannelsFilterArrayOutput)
}

type GetChannelsFilterOutput struct{ *pulumi.OutputState }

func (GetChannelsFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetChannelsFilter)(nil)).Elem()
}

func (o GetChannelsFilterOutput) ToGetChannelsFilterOutput() GetChannelsFilterOutput {
	return o
}

func (o GetChannelsFilterOutput) ToGetChannelsFilterOutputWithContext(ctx context.Context) GetChannelsFilterOutput {
	return o
}

func (o GetChannelsFilterOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetChannelsFilter) string { return v.Name }).(pulumi.StringOutput)
}

func (o GetChannelsFilterOutput) Regex() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetChannelsFilter) *bool { return v.Regex }).(pulumi.BoolPtrOutput)
}

func (o GetChannelsFilterOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetChannelsFilter) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type GetChannelsFilterArrayOutput struct{ *pulumi.OutputState }

func (GetChannelsFilterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetChannelsFilter)(nil)).Elem()
}

func (o GetChannelsFilterArrayOutput) ToGetChannelsFilterArrayOutput() GetChannelsFilterArrayOutput {
	return o
}

func (o GetChannelsFilterArrayOutput) ToGetChannelsFilterArrayOutputWithContext(ctx context.Context) GetChannelsFilterArrayOutput {
	return o
}

func (o GetChannelsFilterArrayOutput) Index(i pulumi.IntInput) GetChannelsFilterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetChannelsFilter {
		return vs[0].([]GetChannelsFilter)[vs[1].(int)]
	}).(GetChannelsFilterOutput)
}

type GetHeatWaveClusterClusterNode struct {
	// The ID of the node within MySQL HeatWave cluster.
	NodeId string `pulumi:"nodeId"`
	// The current state of the HeatWave cluster.
	State string `pulumi:"state"`
	// The date and time the HeatWave cluster was created, as described by [RFC 3339](https://tools.ietf.org/rfc/rfc3339).
	TimeCreated string `pulumi:"timeCreated"`
	// The time the HeatWave cluster was last updated, as described by [RFC 3339](https://tools.ietf.org/rfc/rfc3339).
	TimeUpdated string `pulumi:"timeUpdated"`
}

// GetHeatWaveClusterClusterNodeInput is an input type that accepts GetHeatWaveClusterClusterNodeArgs and GetHeatWaveClusterClusterNodeOutput values.
// You can construct a concrete instance of `GetHeatWaveClusterClusterNodeInput` via:
//
//          GetHeatWaveClusterClusterNodeArgs{...}
type GetHeatWaveClusterClusterNodeInput interface {
	pulumi.Input

	ToGetHeatWaveClusterClusterNodeOutput() GetHeatWaveClusterClusterNodeOutput
	ToGetHeatWaveClusterClusterNodeOutputWithContext(context.Context) GetHeatWaveClusterClusterNodeOutput
}

type GetHeatWaveClusterClusterNodeArgs struct {
	// The ID of the node within MySQL HeatWave cluster.
	NodeId pulumi.StringInput `pulumi:"nodeId"`
	// The current state of the HeatWave cluster.
	State pulumi.StringInput `pulumi:"state"`
	// The date and time the HeatWave cluster was created, as described by [RFC 3339](https://tools.ietf.org/rfc/rfc3339).
	TimeCreated pulumi.StringInput `pulumi:"timeCreated"`
	// The time the HeatWave cluster was last updated, as described by [RFC 3339](https://tools.ietf.org/rfc/rfc3339).
	TimeUpdated pulumi.StringInput `pulumi:"timeUpdated"`
}

func (GetHeatWaveClusterClusterNodeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetHeatWaveClusterClusterNode)(nil)).Elem()
}

func (i GetHeatWaveClusterClusterNodeArgs) ToGetHeatWaveClusterClusterNodeOutput() GetHeatWaveClusterClusterNodeOutput {
	return i.ToGetHeatWaveClusterClusterNodeOutputWithContext(context.Background())
}

func (i GetHeatWaveClusterClusterNodeArgs) ToGetHeatWaveClusterClusterNodeOutputWithContext(ctx context.Context) GetHeatWaveClusterClusterNodeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetHeatWaveClusterClusterNodeOutput)
}

// GetHeatWaveClusterClusterNodeArrayInput is an input type that accepts GetHeatWaveClusterClusterNodeArray and GetHeatWaveClusterClusterNodeArrayOutput values.
// You can construct a concrete instance of `GetHeatWaveClusterClusterNodeArrayInput` via:
//
//          GetHeatWaveClusterClusterNodeArray{ GetHeatWaveClusterClusterNodeArgs{...} }
type GetHeatWaveClusterClusterNodeArrayInput interface {
	pulumi.Input

	ToGetHeatWaveClusterClusterNodeArrayOutput() GetHeatWaveClusterClusterNodeArrayOutput
	ToGetHeatWaveClusterClusterNodeArrayOutputWithContext(context.Context) GetHeatWaveClusterClusterNodeArrayOutput
}

type GetHeatWaveClusterClusterNodeArray []GetHeatWaveClusterClusterNodeInput

func (GetHeatWaveClusterClusterNodeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetHeatWaveClusterClusterNode)(nil)).Elem()
}

func (i GetHeatWaveClusterClusterNodeArray) ToGetHeatWaveClusterClusterNodeArrayOutput() GetHeatWaveClusterClusterNodeArrayOutput {
	return i.ToGetHeatWaveClusterClusterNodeArrayOutputWithContext(context.Background())
}

func (i GetHeatWaveClusterClusterNodeArray) ToGetHeatWaveClusterClusterNodeArrayOutputWithContext(ctx context.Context) GetHeatWaveClusterClusterNodeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetHeatWaveClusterClusterNodeArrayOutput)
}

type GetHeatWaveClusterClusterNodeOutput struct{ *pulumi.OutputState }

func (GetHeatWaveClusterClusterNodeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetHeatWaveClusterClusterNode)(nil)).Elem()
}

func (o GetHeatWaveClusterClusterNodeOutput) ToGetHeatWaveClusterClusterNodeOutput() GetHeatWaveClusterClusterNodeOutput {
	return o
}

func (o GetHeatWaveClusterClusterNodeOutput) ToGetHeatWaveClusterClusterNodeOutputWithContext(ctx context.Context) GetHeatWaveClusterClusterNodeOutput {
	return o
}

// The ID of the node within MySQL HeatWave cluster.
func (o GetHeatWaveClusterClusterNodeOutput) NodeId() pulumi.StringOutput {
	return o.ApplyT(func(v GetHeatWaveClusterClusterNode) string { return v.NodeId }).(pulumi.StringOutput)
}

// The current state of the HeatWave cluster.
func (o GetHeatWaveClusterClusterNodeOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v GetHeatWaveClusterClusterNode) string { return v.State }).(pulumi.StringOutput)
}

// The date and time the HeatWave cluster was created, as described by [RFC 3339](https://tools.ietf.org/rfc/rfc3339).
func (o GetHeatWaveClusterClusterNodeOutput) TimeCreated() pulumi.StringOutput {
	return o.ApplyT(func(v GetHeatWaveClusterClusterNode) string { return v.TimeCreated }).(pulumi.StringOutput)
}

// The time the HeatWave cluster was last updated, as described by [RFC 3339](https://tools.ietf.org/rfc/rfc3339).
func (o GetHeatWaveClusterClusterNodeOutput) TimeUpdated() pulumi.StringOutput {
	return o.ApplyT(func(v GetHeatWaveClusterClusterNode) string { return v.TimeUpdated }).(pulumi.StringOutput)
}

type GetHeatWaveClusterClusterNodeArrayOutput struct{ *pulumi.OutputState }

func (GetHeatWaveClusterClusterNodeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetHeatWaveClusterClusterNode)(nil)).Elem()
}

func (o GetHeatWaveClusterClusterNodeArrayOutput) ToGetHeatWaveClusterClusterNodeArrayOutput() GetHeatWaveClusterClusterNodeArrayOutput {
	return o
}

func (o GetHeatWaveClusterClusterNodeArrayOutput) ToGetHeatWaveClusterClusterNodeArrayOutputWithContext(ctx context.Context) GetHeatWaveClusterClusterNodeArrayOutput {
	return o
}

func (o GetHeatWaveClusterClusterNodeArrayOutput) Index(i pulumi.IntInput) GetHeatWaveClusterClusterNodeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetHeatWaveClusterClusterNode {
		return vs[0].([]GetHeatWaveClusterClusterNode)[vs[1].(int)]
	}).(GetHeatWaveClusterClusterNodeOutput)
}

type GetMysqlBackupDbSystemSnapshot struct {
	// The username for the administrative user.
	AdminUsername string `pulumi:"adminUsername"`
	// The Availability Domain where the primary DB System should be located.
	AvailabilityDomain string `pulumi:"availabilityDomain"`
	// The Backup policy for the DB System.
	BackupPolicy GetMysqlBackupDbSystemSnapshotBackupPolicy `pulumi:"backupPolicy"`
	// The OCID of the compartment the DB System belongs in.
	CompartmentId string `pulumi:"compartmentId"`
	// The OCID of the Configuration to be used for Instances in this DB System.
	ConfigurationId string `pulumi:"configurationId"`
	// Initial size of the data volume in GiBs that will be created and attached.
	DataStorageSizeInGb int `pulumi:"dataStorageSizeInGb"`
	// Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
	DefinedTags map[string]interface{} `pulumi:"definedTags"`
	// A user-supplied description for the backup.
	Description string `pulumi:"description"`
	// A user-supplied display name for the backup.
	DisplayName string `pulumi:"displayName"`
	// The network endpoints available for this DB System.
	Endpoints []GetMysqlBackupDbSystemSnapshotEndpoint `pulumi:"endpoints"`
	// The name of the Fault Domain the DB System is located in.
	FaultDomain string `pulumi:"faultDomain"`
	// Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
	FreeformTags map[string]interface{} `pulumi:"freeformTags"`
	// The hostname for the primary endpoint of the DB System. Used for DNS. The value is the hostname portion of the primary private IP's fully qualified domain name (FQDN) (for example, "dbsystem-1" in FQDN "dbsystem-1.subnet123.vcn1.oraclevcn.com"). Must be unique across all VNICs in the subnet and comply with RFC 952 and RFC 1123.
	HostnameLabel string `pulumi:"hostnameLabel"`
	// OCID of the backup itself
	Id string `pulumi:"id"`
	// The IP address the DB System is configured to listen on. A private IP address of the primary endpoint of the DB System. Must be an available IP address within the subnet's CIDR. This will be a "dotted-quad" style IPv4 address.
	IpAddress string `pulumi:"ipAddress"`
	// If the policy is to enable high availability of the instance, by maintaining secondary/failover capacity as necessary.
	IsHighlyAvailable bool `pulumi:"isHighlyAvailable"`
	// The Maintenance Policy for the DB System.
	Maintenance GetMysqlBackupDbSystemSnapshotMaintenance `pulumi:"maintenance"`
	// The MySQL server version of the DB System used for backup.
	MysqlVersion string `pulumi:"mysqlVersion"`
	// The port for primary endpoint of the DB System to listen on.
	Port int `pulumi:"port"`
	// The network port on which X Plugin listens for TCP/IP connections. This is the X Plugin equivalent of port.
	PortX int `pulumi:"portX"`
	// The shape of the DB System instance used for backup.
	ShapeName string `pulumi:"shapeName"`
	// The OCID of the subnet the DB System is associated with.
	SubnetId string `pulumi:"subnetId"`
}

// GetMysqlBackupDbSystemSnapshotInput is an input type that accepts GetMysqlBackupDbSystemSnapshotArgs and GetMysqlBackupDbSystemSnapshotOutput values.
// You can construct a concrete instance of `GetMysqlBackupDbSystemSnapshotInput` via:
//
//          GetMysqlBackupDbSystemSnapshotArgs{...}
type GetMysqlBackupDbSystemSnapshotInput interface {
	pulumi.Input

	ToGetMysqlBackupDbSystemSnapshotOutput() GetMysqlBackupDbSystemSnapshotOutput
	ToGetMysqlBackupDbSystemSnapshotOutputWithContext(context.Context) GetMysqlBackupDbSystemSnapshotOutput
}

type GetMysqlBackupDbSystemSnapshotArgs struct {
	// The username for the administrative user.
	AdminUsername pulumi.StringInput `pulumi:"adminUsername"`
	// The Availability Domain where the primary DB System should be located.
	AvailabilityDomain pulumi.StringInput `pulumi:"availabilityDomain"`
	// The Backup policy for the DB System.
	BackupPolicy GetMysqlBackupDbSystemSnapshotBackupPolicyInput `pulumi:"backupPolicy"`
	// The OCID of the compartment the DB System belongs in.
	CompartmentId pulumi.StringInput `pulumi:"compartmentId"`
	// The OCID of the Configuration to be used for Instances in this DB System.
	ConfigurationId pulumi.StringInput `pulumi:"configurationId"`
	// Initial size of the data volume in GiBs that will be created and attached.
	DataStorageSizeInGb pulumi.IntInput `pulumi:"dataStorageSizeInGb"`
	// Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
	DefinedTags pulumi.MapInput `pulumi:"definedTags"`
	// A user-supplied description for the backup.
	Description pulumi.StringInput `pulumi:"description"`
	// A user-supplied display name for the backup.
	DisplayName pulumi.StringInput `pulumi:"displayName"`
	// The network endpoints available for this DB System.
	Endpoints GetMysqlBackupDbSystemSnapshotEndpointArrayInput `pulumi:"endpoints"`
	// The name of the Fault Domain the DB System is located in.
	FaultDomain pulumi.StringInput `pulumi:"faultDomain"`
	// Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
	FreeformTags pulumi.MapInput `pulumi:"freeformTags"`
	// The hostname for the primary endpoint of the DB System. Used for DNS. The value is the hostname portion of the primary private IP's fully qualified domain name (FQDN) (for example, "dbsystem-1" in FQDN "dbsystem-1.subnet123.vcn1.oraclevcn.com"). Must be unique across all VNICs in the subnet and comply with RFC 952 and RFC 1123.
	HostnameLabel pulumi.StringInput `pulumi:"hostnameLabel"`
	// OCID of the backup itself
	Id pulumi.StringInput `pulumi:"id"`
	// The IP address the DB System is configured to listen on. A private IP address of the primary endpoint of the DB System. Must be an available IP address within the subnet's CIDR. This will be a "dotted-quad" style IPv4 address.
	IpAddress pulumi.StringInput `pulumi:"ipAddress"`
	// If the policy is to enable high availability of the instance, by maintaining secondary/failover capacity as necessary.
	IsHighlyAvailable pulumi.BoolInput `pulumi:"isHighlyAvailable"`
	// The Maintenance Policy for the DB System.
	Maintenance GetMysqlBackupDbSystemSnapshotMaintenanceInput `pulumi:"maintenance"`
	// The MySQL server version of the DB System used for backup.
	MysqlVersion pulumi.StringInput `pulumi:"mysqlVersion"`
	// The port for primary endpoint of the DB System to listen on.
	Port pulumi.IntInput `pulumi:"port"`
	// The network port on which X Plugin listens for TCP/IP connections. This is the X Plugin equivalent of port.
	PortX pulumi.IntInput `pulumi:"portX"`
	// The shape of the DB System instance used for backup.
	ShapeName pulumi.StringInput `pulumi:"shapeName"`
	// The OCID of the subnet the DB System is associated with.
	SubnetId pulumi.StringInput `pulumi:"subnetId"`
}

func (GetMysqlBackupDbSystemSnapshotArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetMysqlBackupDbSystemSnapshot)(nil)).Elem()
}

func (i GetMysqlBackupDbSystemSnapshotArgs) ToGetMysqlBackupDbSystemSnapshotOutput() GetMysqlBackupDbSystemSnapshotOutput {
	return i.ToGetMysqlBackupDbSystemSnapshotOutputWithContext(context.Background())
}

func (i GetMysqlBackupDbSystemSnapshotArgs) ToGetMysqlBackupDbSystemSnapshotOutputWithContext(ctx context.Context) GetMysqlBackupDbSystemSnapshotOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetMysqlBackupDbSystemSnapshotOutput)
}

type GetMysqlBackupDbSystemSnapshotOutput struct{ *pulumi.OutputState }

func (GetMysqlBackupDbSystemSnapshotOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetMysqlBackupDbSystemSnapshot)(nil)).Elem()
}

func (o GetMysqlBackupDbSystemSnapshotOutput) ToGetMysqlBackupDbSystemSnapshotOutput() GetMysqlBackupDbSystemSnapshotOutput {
	return o
}

func (o GetMysqlBackupDbSystemSnapshotOutput) ToGetMysqlBackupDbSystemSnapshotOutputWithContext(ctx context.Context) GetMysqlBackupDbSystemSnapshotOutput {
	return o
}

// The username for the administrative user.
func (o GetMysqlBackupDbSystemSnapshotOutput) AdminUsername() pulumi.StringOutput {
	return o.ApplyT(func(v GetMysqlBackupDbSystemSnapshot) string { return v.AdminUsername }).(pulumi.StringOutput)
}

// The Availability Domain where the primary DB System should be located.
func (o GetMysqlBackupDbSystemSnapshotOutput) AvailabilityDomain() pulumi.StringOutput {
	return o.ApplyT(func(v GetMysqlBackupDbSystemSnapshot) string { return v.AvailabilityDomain }).(pulumi.StringOutput)
}

// The Backup policy for the DB System.
func (o GetMysqlBackupDbSystemSnapshotOutput) BackupPolicy() GetMysqlBackupDbSystemSnapshotBackupPolicyOutput {
	return o.ApplyT(func(v GetMysqlBackupDbSystemSnapshot) GetMysqlBackupDbSystemSnapshotBackupPolicy {
		return v.BackupPolicy
	}).(GetMysqlBackupDbSystemSnapshotBackupPolicyOutput)
}

// The OCID of the compartment the DB System belongs in.
func (o GetMysqlBackupDbSystemSnapshotOutput) CompartmentId() pulumi.StringOutput {
	return o.ApplyT(func(v GetMysqlBackupDbSystemSnapshot) string { return v.CompartmentId }).(pulumi.StringOutput)
}

// The OCID of the Configuration to be used for Instances in this DB System.
func (o GetMysqlBackupDbSystemSnapshotOutput) ConfigurationId() pulumi.StringOutput {
	return o.ApplyT(func(v GetMysqlBackupDbSystemSnapshot) string { return v.ConfigurationId }).(pulumi.StringOutput)
}

// Initial size of the data volume in GiBs that will be created and attached.
func (o GetMysqlBackupDbSystemSnapshotOutput) DataStorageSizeInGb() pulumi.IntOutput {
	return o.ApplyT(func(v GetMysqlBackupDbSystemSnapshot) int { return v.DataStorageSizeInGb }).(pulumi.IntOutput)
}

// Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
func (o GetMysqlBackupDbSystemSnapshotOutput) DefinedTags() pulumi.MapOutput {
	return o.ApplyT(func(v GetMysqlBackupDbSystemSnapshot) map[string]interface{} { return v.DefinedTags }).(pulumi.MapOutput)
}

// A user-supplied description for the backup.
func (o GetMysqlBackupDbSystemSnapshotOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v GetMysqlBackupDbSystemSnapshot) string { return v.Description }).(pulumi.StringOutput)
}

// A user-supplied display name for the backup.
func (o GetMysqlBackupDbSystemSnapshotOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v GetMysqlBackupDbSystemSnapshot) string { return v.DisplayName }).(pulumi.StringOutput)
}

// The network endpoints available for this DB System.
func (o GetMysqlBackupDbSystemSnapshotOutput) Endpoints() GetMysqlBackupDbSystemSnapshotEndpointArrayOutput {
	return o.ApplyT(func(v GetMysqlBackupDbSystemSnapshot) []GetMysqlBackupDbSystemSnapshotEndpoint { return v.Endpoints }).(GetMysqlBackupDbSystemSnapshotEndpointArrayOutput)
}

// The name of the Fault Domain the DB System is located in.
func (o GetMysqlBackupDbSystemSnapshotOutput) FaultDomain() pulumi.StringOutput {
	return o.ApplyT(func(v GetMysqlBackupDbSystemSnapshot) string { return v.FaultDomain }).(pulumi.StringOutput)
}

// Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
func (o GetMysqlBackupDbSystemSnapshotOutput) FreeformTags() pulumi.MapOutput {
	return o.ApplyT(func(v GetMysqlBackupDbSystemSnapshot) map[string]interface{} { return v.FreeformTags }).(pulumi.MapOutput)
}

// The hostname for the primary endpoint of the DB System. Used for DNS. The value is the hostname portion of the primary private IP's fully qualified domain name (FQDN) (for example, "dbsystem-1" in FQDN "dbsystem-1.subnet123.vcn1.oraclevcn.com"). Must be unique across all VNICs in the subnet and comply with RFC 952 and RFC 1123.
func (o GetMysqlBackupDbSystemSnapshotOutput) HostnameLabel() pulumi.StringOutput {
	return o.ApplyT(func(v GetMysqlBackupDbSystemSnapshot) string { return v.HostnameLabel }).(pulumi.StringOutput)
}

// OCID of the backup itself
func (o GetMysqlBackupDbSystemSnapshotOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetMysqlBackupDbSystemSnapshot) string { return v.Id }).(pulumi.StringOutput)
}

// The IP address the DB System is configured to listen on. A private IP address of the primary endpoint of the DB System. Must be an available IP address within the subnet's CIDR. This will be a "dotted-quad" style IPv4 address.
func (o GetMysqlBackupDbSystemSnapshotOutput) IpAddress() pulumi.StringOutput {
	return o.ApplyT(func(v GetMysqlBackupDbSystemSnapshot) string { return v.IpAddress }).(pulumi.StringOutput)
}

// If the policy is to enable high availability of the instance, by maintaining secondary/failover capacity as necessary.
func (o GetMysqlBackupDbSystemSnapshotOutput) IsHighlyAvailable() pulumi.BoolOutput {
	return o.ApplyT(func(v GetMysqlBackupDbSystemSnapshot) bool { return v.IsHighlyAvailable }).(pulumi.BoolOutput)
}

// The Maintenance Policy for the DB System.
func (o GetMysqlBackupDbSystemSnapshotOutput) Maintenance() GetMysqlBackupDbSystemSnapshotMaintenanceOutput {
	return o.ApplyT(func(v GetMysqlBackupDbSystemSnapshot) GetMysqlBackupDbSystemSnapshotMaintenance { return v.Maintenance }).(GetMysqlBackupDbSystemSnapshotMaintenanceOutput)
}

// The MySQL server version of the DB System used for backup.
func (o GetMysqlBackupDbSystemSnapshotOutput) MysqlVersion() pulumi.StringOutput {
	return o.ApplyT(func(v GetMysqlBackupDbSystemSnapshot) string { return v.MysqlVersion }).(pulumi.StringOutput)
}

// The port for primary endpoint of the DB System to listen on.
func (o GetMysqlBackupDbSystemSnapshotOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v GetMysqlBackupDbSystemSnapshot) int { return v.Port }).(pulumi.IntOutput)
}

// The network port on which X Plugin listens for TCP/IP connections. This is the X Plugin equivalent of port.
func (o GetMysqlBackupDbSystemSnapshotOutput) PortX() pulumi.IntOutput {
	return o.ApplyT(func(v GetMysqlBackupDbSystemSnapshot) int { return v.PortX }).(pulumi.IntOutput)
}

// The shape of the DB System instance used for backup.
func (o GetMysqlBackupDbSystemSnapshotOutput) ShapeName() pulumi.StringOutput {
	return o.ApplyT(func(v GetMysqlBackupDbSystemSnapshot) string { return v.ShapeName }).(pulumi.StringOutput)
}

// The OCID of the subnet the DB System is associated with.
func (o GetMysqlBackupDbSystemSnapshotOutput) SubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v GetMysqlBackupDbSystemSnapshot) string { return v.SubnetId }).(pulumi.StringOutput)
}

type GetMysqlBackupDbSystemSnapshotBackupPolicy struct {
	// Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
	DefinedTags map[string]interface{} `pulumi:"definedTags"`
	// Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
	FreeformTags map[string]interface{} `pulumi:"freeformTags"`
	// If automated backups are enabled or disabled.
	IsEnabled bool `pulumi:"isEnabled"`
	// Number of days to retain this backup.
	RetentionInDays int `pulumi:"retentionInDays"`
	// The start time of the maintenance window.
	WindowStartTime string `pulumi:"windowStartTime"`
}

// GetMysqlBackupDbSystemSnapshotBackupPolicyInput is an input type that accepts GetMysqlBackupDbSystemSnapshotBackupPolicyArgs and GetMysqlBackupDbSystemSnapshotBackupPolicyOutput values.
// You can construct a concrete instance of `GetMysqlBackupDbSystemSnapshotBackupPolicyInput` via:
//
//          GetMysqlBackupDbSystemSnapshotBackupPolicyArgs{...}
type GetMysqlBackupDbSystemSnapshotBackupPolicyInput interface {
	pulumi.Input

	ToGetMysqlBackupDbSystemSnapshotBackupPolicyOutput() GetMysqlBackupDbSystemSnapshotBackupPolicyOutput
	ToGetMysqlBackupDbSystemSnapshotBackupPolicyOutputWithContext(context.Context) GetMysqlBackupDbSystemSnapshotBackupPolicyOutput
}

type GetMysqlBackupDbSystemSnapshotBackupPolicyArgs struct {
	// Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
	DefinedTags pulumi.MapInput `pulumi:"definedTags"`
	// Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
	FreeformTags pulumi.MapInput `pulumi:"freeformTags"`
	// If automated backups are enabled or disabled.
	IsEnabled pulumi.BoolInput `pulumi:"isEnabled"`
	// Number of days to retain this backup.
	RetentionInDays pulumi.IntInput `pulumi:"retentionInDays"`
	// The start time of the maintenance window.
	WindowStartTime pulumi.StringInput `pulumi:"windowStartTime"`
}

func (GetMysqlBackupDbSystemSnapshotBackupPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetMysqlBackupDbSystemSnapshotBackupPolicy)(nil)).Elem()
}

func (i GetMysqlBackupDbSystemSnapshotBackupPolicyArgs) ToGetMysqlBackupDbSystemSnapshotBackupPolicyOutput() GetMysqlBackupDbSystemSnapshotBackupPolicyOutput {
	return i.ToGetMysqlBackupDbSystemSnapshotBackupPolicyOutputWithContext(context.Background())
}

func (i GetMysqlBackupDbSystemSnapshotBackupPolicyArgs) ToGetMysqlBackupDbSystemSnapshotBackupPolicyOutputWithContext(ctx context.Context) GetMysqlBackupDbSystemSnapshotBackupPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetMysqlBackupDbSystemSnapshotBackupPolicyOutput)
}

type GetMysqlBackupDbSystemSnapshotBackupPolicyOutput struct{ *pulumi.OutputState }

func (GetMysqlBackupDbSystemSnapshotBackupPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetMysqlBackupDbSystemSnapshotBackupPolicy)(nil)).Elem()
}

func (o GetMysqlBackupDbSystemSnapshotBackupPolicyOutput) ToGetMysqlBackupDbSystemSnapshotBackupPolicyOutput() GetMysqlBackupDbSystemSnapshotBackupPolicyOutput {
	return o
}

func (o GetMysqlBackupDbSystemSnapshotBackupPolicyOutput) ToGetMysqlBackupDbSystemSnapshotBackupPolicyOutputWithContext(ctx context.Context) GetMysqlBackupDbSystemSnapshotBackupPolicyOutput {
	return o
}

// Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
func (o GetMysqlBackupDbSystemSnapshotBackupPolicyOutput) DefinedTags() pulumi.MapOutput {
	return o.ApplyT(func(v GetMysqlBackupDbSystemSnapshotBackupPolicy) map[string]interface{} { return v.DefinedTags }).(pulumi.MapOutput)
}

// Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
func (o GetMysqlBackupDbSystemSnapshotBackupPolicyOutput) FreeformTags() pulumi.MapOutput {
	return o.ApplyT(func(v GetMysqlBackupDbSystemSnapshotBackupPolicy) map[string]interface{} { return v.FreeformTags }).(pulumi.MapOutput)
}

// If automated backups are enabled or disabled.
func (o GetMysqlBackupDbSystemSnapshotBackupPolicyOutput) IsEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v GetMysqlBackupDbSystemSnapshotBackupPolicy) bool { return v.IsEnabled }).(pulumi.BoolOutput)
}

// Number of days to retain this backup.
func (o GetMysqlBackupDbSystemSnapshotBackupPolicyOutput) RetentionInDays() pulumi.IntOutput {
	return o.ApplyT(func(v GetMysqlBackupDbSystemSnapshotBackupPolicy) int { return v.RetentionInDays }).(pulumi.IntOutput)
}

// The start time of the maintenance window.
func (o GetMysqlBackupDbSystemSnapshotBackupPolicyOutput) WindowStartTime() pulumi.StringOutput {
	return o.ApplyT(func(v GetMysqlBackupDbSystemSnapshotBackupPolicy) string { return v.WindowStartTime }).(pulumi.StringOutput)
}

type GetMysqlBackupDbSystemSnapshotEndpoint struct {
	// The network address of the DB System.
	Hostname string `pulumi:"hostname"`
	// The IP address the DB System is configured to listen on. A private IP address of the primary endpoint of the DB System. Must be an available IP address within the subnet's CIDR. This will be a "dotted-quad" style IPv4 address.
	IpAddress string `pulumi:"ipAddress"`
	// The access modes from the client that this endpoint supports.
	Modes []string `pulumi:"modes"`
	// The port for primary endpoint of the DB System to listen on.
	Port int `pulumi:"port"`
	// The network port on which X Plugin listens for TCP/IP connections. This is the X Plugin equivalent of port.
	PortX int `pulumi:"portX"`
	// The state of the endpoints, as far as it can seen from the DB System. There may be some inconsistency with the actual state of the MySQL service.
	Status string `pulumi:"status"`
	// Additional information about the current endpoint status.
	StatusDetails string `pulumi:"statusDetails"`
}

// GetMysqlBackupDbSystemSnapshotEndpointInput is an input type that accepts GetMysqlBackupDbSystemSnapshotEndpointArgs and GetMysqlBackupDbSystemSnapshotEndpointOutput values.
// You can construct a concrete instance of `GetMysqlBackupDbSystemSnapshotEndpointInput` via:
//
//          GetMysqlBackupDbSystemSnapshotEndpointArgs{...}
type GetMysqlBackupDbSystemSnapshotEndpointInput interface {
	pulumi.Input

	ToGetMysqlBackupDbSystemSnapshotEndpointOutput() GetMysqlBackupDbSystemSnapshotEndpointOutput
	ToGetMysqlBackupDbSystemSnapshotEndpointOutputWithContext(context.Context) GetMysqlBackupDbSystemSnapshotEndpointOutput
}

type GetMysqlBackupDbSystemSnapshotEndpointArgs struct {
	// The network address of the DB System.
	Hostname pulumi.StringInput `pulumi:"hostname"`
	// The IP address the DB System is configured to listen on. A private IP address of the primary endpoint of the DB System. Must be an available IP address within the subnet's CIDR. This will be a "dotted-quad" style IPv4 address.
	IpAddress pulumi.StringInput `pulumi:"ipAddress"`
	// The access modes from the client that this endpoint supports.
	Modes pulumi.StringArrayInput `pulumi:"modes"`
	// The port for primary endpoint of the DB System to listen on.
	Port pulumi.IntInput `pulumi:"port"`
	// The network port on which X Plugin listens for TCP/IP connections. This is the X Plugin equivalent of port.
	PortX pulumi.IntInput `pulumi:"portX"`
	// The state of the endpoints, as far as it can seen from the DB System. There may be some inconsistency with the actual state of the MySQL service.
	Status pulumi.StringInput `pulumi:"status"`
	// Additional information about the current endpoint status.
	StatusDetails pulumi.StringInput `pulumi:"statusDetails"`
}

func (GetMysqlBackupDbSystemSnapshotEndpointArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetMysqlBackupDbSystemSnapshotEndpoint)(nil)).Elem()
}

func (i GetMysqlBackupDbSystemSnapshotEndpointArgs) ToGetMysqlBackupDbSystemSnapshotEndpointOutput() GetMysqlBackupDbSystemSnapshotEndpointOutput {
	return i.ToGetMysqlBackupDbSystemSnapshotEndpointOutputWithContext(context.Background())
}

func (i GetMysqlBackupDbSystemSnapshotEndpointArgs) ToGetMysqlBackupDbSystemSnapshotEndpointOutputWithContext(ctx context.Context) GetMysqlBackupDbSystemSnapshotEndpointOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetMysqlBackupDbSystemSnapshotEndpointOutput)
}

// GetMysqlBackupDbSystemSnapshotEndpointArrayInput is an input type that accepts GetMysqlBackupDbSystemSnapshotEndpointArray and GetMysqlBackupDbSystemSnapshotEndpointArrayOutput values.
// You can construct a concrete instance of `GetMysqlBackupDbSystemSnapshotEndpointArrayInput` via:
//
//          GetMysqlBackupDbSystemSnapshotEndpointArray{ GetMysqlBackupDbSystemSnapshotEndpointArgs{...} }
type GetMysqlBackupDbSystemSnapshotEndpointArrayInput interface {
	pulumi.Input

	ToGetMysqlBackupDbSystemSnapshotEndpointArrayOutput() GetMysqlBackupDbSystemSnapshotEndpointArrayOutput
	ToGetMysqlBackupDbSystemSnapshotEndpointArrayOutputWithContext(context.Context) GetMysqlBackupDbSystemSnapshotEndpointArrayOutput
}

type GetMysqlBackupDbSystemSnapshotEndpointArray []GetMysqlBackupDbSystemSnapshotEndpointInput

func (GetMysqlBackupDbSystemSnapshotEndpointArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetMysqlBackupDbSystemSnapshotEndpoint)(nil)).Elem()
}

func (i GetMysqlBackupDbSystemSnapshotEndpointArray) ToGetMysqlBackupDbSystemSnapshotEndpointArrayOutput() GetMysqlBackupDbSystemSnapshotEndpointArrayOutput {
	return i.ToGetMysqlBackupDbSystemSnapshotEndpointArrayOutputWithContext(context.Background())
}

func (i GetMysqlBackupDbSystemSnapshotEndpointArray) ToGetMysqlBackupDbSystemSnapshotEndpointArrayOutputWithContext(ctx context.Context) GetMysqlBackupDbSystemSnapshotEndpointArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetMysqlBackupDbSystemSnapshotEndpointArrayOutput)
}

type GetMysqlBackupDbSystemSnapshotEndpointOutput struct{ *pulumi.OutputState }

func (GetMysqlBackupDbSystemSnapshotEndpointOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetMysqlBackupDbSystemSnapshotEndpoint)(nil)).Elem()
}

func (o GetMysqlBackupDbSystemSnapshotEndpointOutput) ToGetMysqlBackupDbSystemSnapshotEndpointOutput() GetMysqlBackupDbSystemSnapshotEndpointOutput {
	return o
}

func (o GetMysqlBackupDbSystemSnapshotEndpointOutput) ToGetMysqlBackupDbSystemSnapshotEndpointOutputWithContext(ctx context.Context) GetMysqlBackupDbSystemSnapshotEndpointOutput {
	return o
}

// The network address of the DB System.
func (o GetMysqlBackupDbSystemSnapshotEndpointOutput) Hostname() pulumi.StringOutput {
	return o.ApplyT(func(v GetMysqlBackupDbSystemSnapshotEndpoint) string { return v.Hostname }).(pulumi.StringOutput)
}

// The IP address the DB System is configured to listen on. A private IP address of the primary endpoint of the DB System. Must be an available IP address within the subnet's CIDR. This will be a "dotted-quad" style IPv4 address.
func (o GetMysqlBackupDbSystemSnapshotEndpointOutput) IpAddress() pulumi.StringOutput {
	return o.ApplyT(func(v GetMysqlBackupDbSystemSnapshotEndpoint) string { return v.IpAddress }).(pulumi.StringOutput)
}

// The access modes from the client that this endpoint supports.
func (o GetMysqlBackupDbSystemSnapshotEndpointOutput) Modes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetMysqlBackupDbSystemSnapshotEndpoint) []string { return v.Modes }).(pulumi.StringArrayOutput)
}

// The port for primary endpoint of the DB System to listen on.
func (o GetMysqlBackupDbSystemSnapshotEndpointOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v GetMysqlBackupDbSystemSnapshotEndpoint) int { return v.Port }).(pulumi.IntOutput)
}

// The network port on which X Plugin listens for TCP/IP connections. This is the X Plugin equivalent of port.
func (o GetMysqlBackupDbSystemSnapshotEndpointOutput) PortX() pulumi.IntOutput {
	return o.ApplyT(func(v GetMysqlBackupDbSystemSnapshotEndpoint) int { return v.PortX }).(pulumi.IntOutput)
}

// The state of the endpoints, as far as it can seen from the DB System. There may be some inconsistency with the actual state of the MySQL service.
func (o GetMysqlBackupDbSystemSnapshotEndpointOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v GetMysqlBackupDbSystemSnapshotEndpoint) string { return v.Status }).(pulumi.StringOutput)
}

// Additional information about the current endpoint status.
func (o GetMysqlBackupDbSystemSnapshotEndpointOutput) StatusDetails() pulumi.StringOutput {
	return o.ApplyT(func(v GetMysqlBackupDbSystemSnapshotEndpoint) string { return v.StatusDetails }).(pulumi.StringOutput)
}

type GetMysqlBackupDbSystemSnapshotEndpointArrayOutput struct{ *pulumi.OutputState }

func (GetMysqlBackupDbSystemSnapshotEndpointArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetMysqlBackupDbSystemSnapshotEndpoint)(nil)).Elem()
}

func (o GetMysqlBackupDbSystemSnapshotEndpointArrayOutput) ToGetMysqlBackupDbSystemSnapshotEndpointArrayOutput() GetMysqlBackupDbSystemSnapshotEndpointArrayOutput {
	return o
}

func (o GetMysqlBackupDbSystemSnapshotEndpointArrayOutput) ToGetMysqlBackupDbSystemSnapshotEndpointArrayOutputWithContext(ctx context.Context) GetMysqlBackupDbSystemSnapshotEndpointArrayOutput {
	return o
}

func (o GetMysqlBackupDbSystemSnapshotEndpointArrayOutput) Index(i pulumi.IntInput) GetMysqlBackupDbSystemSnapshotEndpointOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetMysqlBackupDbSystemSnapshotEndpoint {
		return vs[0].([]GetMysqlBackupDbSystemSnapshotEndpoint)[vs[1].(int)]
	}).(GetMysqlBackupDbSystemSnapshotEndpointOutput)
}

type GetMysqlBackupDbSystemSnapshotMaintenance struct {
	// The start time of the maintenance window.
	WindowStartTime string `pulumi:"windowStartTime"`
}

// GetMysqlBackupDbSystemSnapshotMaintenanceInput is an input type that accepts GetMysqlBackupDbSystemSnapshotMaintenanceArgs and GetMysqlBackupDbSystemSnapshotMaintenanceOutput values.
// You can construct a concrete instance of `GetMysqlBackupDbSystemSnapshotMaintenanceInput` via:
//
//          GetMysqlBackupDbSystemSnapshotMaintenanceArgs{...}
type GetMysqlBackupDbSystemSnapshotMaintenanceInput interface {
	pulumi.Input

	ToGetMysqlBackupDbSystemSnapshotMaintenanceOutput() GetMysqlBackupDbSystemSnapshotMaintenanceOutput
	ToGetMysqlBackupDbSystemSnapshotMaintenanceOutputWithContext(context.Context) GetMysqlBackupDbSystemSnapshotMaintenanceOutput
}

type GetMysqlBackupDbSystemSnapshotMaintenanceArgs struct {
	// The start time of the maintenance window.
	WindowStartTime pulumi.StringInput `pulumi:"windowStartTime"`
}

func (GetMysqlBackupDbSystemSnapshotMaintenanceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetMysqlBackupDbSystemSnapshotMaintenance)(nil)).Elem()
}

func (i GetMysqlBackupDbSystemSnapshotMaintenanceArgs) ToGetMysqlBackupDbSystemSnapshotMaintenanceOutput() GetMysqlBackupDbSystemSnapshotMaintenanceOutput {
	return i.ToGetMysqlBackupDbSystemSnapshotMaintenanceOutputWithContext(context.Background())
}

func (i GetMysqlBackupDbSystemSnapshotMaintenanceArgs) ToGetMysqlBackupDbSystemSnapshotMaintenanceOutputWithContext(ctx context.Context) GetMysqlBackupDbSystemSnapshotMaintenanceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetMysqlBackupDbSystemSnapshotMaintenanceOutput)
}

type GetMysqlBackupDbSystemSnapshotMaintenanceOutput struct{ *pulumi.OutputState }

func (GetMysqlBackupDbSystemSnapshotMaintenanceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetMysqlBackupDbSystemSnapshotMaintenance)(nil)).Elem()
}

func (o GetMysqlBackupDbSystemSnapshotMaintenanceOutput) ToGetMysqlBackupDbSystemSnapshotMaintenanceOutput() GetMysqlBackupDbSystemSnapshotMaintenanceOutput {
	return o
}

func (o GetMysqlBackupDbSystemSnapshotMaintenanceOutput) ToGetMysqlBackupDbSystemSnapshotMaintenanceOutputWithContext(ctx context.Context) GetMysqlBackupDbSystemSnapshotMaintenanceOutput {
	return o
}

// The start time of the maintenance window.
func (o GetMysqlBackupDbSystemSnapshotMaintenanceOutput) WindowStartTime() pulumi.StringOutput {
	return o.ApplyT(func(v GetMysqlBackupDbSystemSnapshotMaintenance) string { return v.WindowStartTime }).(pulumi.StringOutput)
}

type GetMysqlBackupsBackup struct {
	// The size of the backup in base-2 (IEC) gibibytes. (GiB).
	BackupSizeInGbs int `pulumi:"backupSizeInGbs"`
	// The type of backup.
	BackupType string `pulumi:"backupType"`
	// The compartment [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
	CompartmentId string `pulumi:"compartmentId"`
	// Backup creationType
	CreationType string `pulumi:"creationType"`
	// Initial size of the data volume in GiBs that will be created and attached.
	DataStorageSizeInGb int `pulumi:"dataStorageSizeInGb"`
	// The DB System [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
	DbSystemId string `pulumi:"dbSystemId"`
	// Snapshot of the DbSystem details at the time of the backup
	DbSystemSnapshot GetMysqlBackupsBackupDbSystemSnapshot `pulumi:"dbSystemSnapshot"`
	// Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
	DefinedTags map[string]interface{} `pulumi:"definedTags"`
	// A user-supplied description for the backup.
	Description string `pulumi:"description"`
	// A filter to return only the resource matching the given display name exactly.
	DisplayName string `pulumi:"displayName"`
	// Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
	FreeformTags map[string]interface{} `pulumi:"freeformTags"`
	// OCID of the backup itself
	Id string `pulumi:"id"`
	// Additional information about the current lifecycleState.
	LifecycleDetails string `pulumi:"lifecycleDetails"`
	// The MySQL server version of the DB System used for backup.
	MysqlVersion string `pulumi:"mysqlVersion"`
	// Number of days to retain this backup.
	RetentionInDays int `pulumi:"retentionInDays"`
	// The shape of the DB System instance used for backup.
	ShapeName string `pulumi:"shapeName"`
	// Backup Lifecycle State
	State string `pulumi:"state"`
	// The time the backup record was created.
	TimeCreated string `pulumi:"timeCreated"`
	// The time at which the backup was updated.
	TimeUpdated string `pulumi:"timeUpdated"`
}

// GetMysqlBackupsBackupInput is an input type that accepts GetMysqlBackupsBackupArgs and GetMysqlBackupsBackupOutput values.
// You can construct a concrete instance of `GetMysqlBackupsBackupInput` via:
//
//          GetMysqlBackupsBackupArgs{...}
type GetMysqlBackupsBackupInput interface {
	pulumi.Input

	ToGetMysqlBackupsBackupOutput() GetMysqlBackupsBackupOutput
	ToGetMysqlBackupsBackupOutputWithContext(context.Context) GetMysqlBackupsBackupOutput
}

type GetMysqlBackupsBackupArgs struct {
	// The size of the backup in base-2 (IEC) gibibytes. (GiB).
	BackupSizeInGbs pulumi.IntInput `pulumi:"backupSizeInGbs"`
	// The type of backup.
	BackupType pulumi.StringInput `pulumi:"backupType"`
	// The compartment [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
	CompartmentId pulumi.StringInput `pulumi:"compartmentId"`
	// Backup creationType
	CreationType pulumi.StringInput `pulumi:"creationType"`
	// Initial size of the data volume in GiBs that will be created and attached.
	DataStorageSizeInGb pulumi.IntInput `pulumi:"dataStorageSizeInGb"`
	// The DB System [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
	DbSystemId pulumi.StringInput `pulumi:"dbSystemId"`
	// Snapshot of the DbSystem details at the time of the backup
	DbSystemSnapshot GetMysqlBackupsBackupDbSystemSnapshotInput `pulumi:"dbSystemSnapshot"`
	// Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
	DefinedTags pulumi.MapInput `pulumi:"definedTags"`
	// A user-supplied description for the backup.
	Description pulumi.StringInput `pulumi:"description"`
	// A filter to return only the resource matching the given display name exactly.
	DisplayName pulumi.StringInput `pulumi:"displayName"`
	// Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
	FreeformTags pulumi.MapInput `pulumi:"freeformTags"`
	// OCID of the backup itself
	Id pulumi.StringInput `pulumi:"id"`
	// Additional information about the current lifecycleState.
	LifecycleDetails pulumi.StringInput `pulumi:"lifecycleDetails"`
	// The MySQL server version of the DB System used for backup.
	MysqlVersion pulumi.StringInput `pulumi:"mysqlVersion"`
	// Number of days to retain this backup.
	RetentionInDays pulumi.IntInput `pulumi:"retentionInDays"`
	// The shape of the DB System instance used for backup.
	ShapeName pulumi.StringInput `pulumi:"shapeName"`
	// Backup Lifecycle State
	State pulumi.StringInput `pulumi:"state"`
	// The time the backup record was created.
	TimeCreated pulumi.StringInput `pulumi:"timeCreated"`
	// The time at which the backup was updated.
	TimeUpdated pulumi.StringInput `pulumi:"timeUpdated"`
}

func (GetMysqlBackupsBackupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetMysqlBackupsBackup)(nil)).Elem()
}

func (i GetMysqlBackupsBackupArgs) ToGetMysqlBackupsBackupOutput() GetMysqlBackupsBackupOutput {
	return i.ToGetMysqlBackupsBackupOutputWithContext(context.Background())
}

func (i GetMysqlBackupsBackupArgs) ToGetMysqlBackupsBackupOutputWithContext(ctx context.Context) GetMysqlBackupsBackupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetMysqlBackupsBackupOutput)
}

// GetMysqlBackupsBackupArrayInput is an input type that accepts GetMysqlBackupsBackupArray and GetMysqlBackupsBackupArrayOutput values.
// You can construct a concrete instance of `GetMysqlBackupsBackupArrayInput` via:
//
//          GetMysqlBackupsBackupArray{ GetMysqlBackupsBackupArgs{...} }
type GetMysqlBackupsBackupArrayInput interface {
	pulumi.Input

	ToGetMysqlBackupsBackupArrayOutput() GetMysqlBackupsBackupArrayOutput
	ToGetMysqlBackupsBackupArrayOutputWithContext(context.Context) GetMysqlBackupsBackupArrayOutput
}

type GetMysqlBackupsBackupArray []GetMysqlBackupsBackupInput

func (GetMysqlBackupsBackupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetMysqlBackupsBackup)(nil)).Elem()
}

func (i GetMysqlBackupsBackupArray) ToGetMysqlBackupsBackupArrayOutput() GetMysqlBackupsBackupArrayOutput {
	return i.ToGetMysqlBackupsBackupArrayOutputWithContext(context.Background())
}

func (i GetMysqlBackupsBackupArray) ToGetMysqlBackupsBackupArrayOutputWithContext(ctx context.Context) GetMysqlBackupsBackupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetMysqlBackupsBackupArrayOutput)
}

type GetMysqlBackupsBackupOutput struct{ *pulumi.OutputState }

func (GetMysqlBackupsBackupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetMysqlBackupsBackup)(nil)).Elem()
}

func (o GetMysqlBackupsBackupOutput) ToGetMysqlBackupsBackupOutput() GetMysqlBackupsBackupOutput {
	return o
}

func (o GetMysqlBackupsBackupOutput) ToGetMysqlBackupsBackupOutputWithContext(ctx context.Context) GetMysqlBackupsBackupOutput {
	return o
}

// The size of the backup in base-2 (IEC) gibibytes. (GiB).
func (o GetMysqlBackupsBackupOutput) BackupSizeInGbs() pulumi.IntOutput {
	return o.ApplyT(func(v GetMysqlBackupsBackup) int { return v.BackupSizeInGbs }).(pulumi.IntOutput)
}

// The type of backup.
func (o GetMysqlBackupsBackupOutput) BackupType() pulumi.StringOutput {
	return o.ApplyT(func(v GetMysqlBackupsBackup) string { return v.BackupType }).(pulumi.StringOutput)
}

// The compartment [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
func (o GetMysqlBackupsBackupOutput) CompartmentId() pulumi.StringOutput {
	return o.ApplyT(func(v GetMysqlBackupsBackup) string { return v.CompartmentId }).(pulumi.StringOutput)
}

// Backup creationType
func (o GetMysqlBackupsBackupOutput) CreationType() pulumi.StringOutput {
	return o.ApplyT(func(v GetMysqlBackupsBackup) string { return v.CreationType }).(pulumi.StringOutput)
}

// Initial size of the data volume in GiBs that will be created and attached.
func (o GetMysqlBackupsBackupOutput) DataStorageSizeInGb() pulumi.IntOutput {
	return o.ApplyT(func(v GetMysqlBackupsBackup) int { return v.DataStorageSizeInGb }).(pulumi.IntOutput)
}

// The DB System [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
func (o GetMysqlBackupsBackupOutput) DbSystemId() pulumi.StringOutput {
	return o.ApplyT(func(v GetMysqlBackupsBackup) string { return v.DbSystemId }).(pulumi.StringOutput)
}

// Snapshot of the DbSystem details at the time of the backup
func (o GetMysqlBackupsBackupOutput) DbSystemSnapshot() GetMysqlBackupsBackupDbSystemSnapshotOutput {
	return o.ApplyT(func(v GetMysqlBackupsBackup) GetMysqlBackupsBackupDbSystemSnapshot { return v.DbSystemSnapshot }).(GetMysqlBackupsBackupDbSystemSnapshotOutput)
}

// Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
func (o GetMysqlBackupsBackupOutput) DefinedTags() pulumi.MapOutput {
	return o.ApplyT(func(v GetMysqlBackupsBackup) map[string]interface{} { return v.DefinedTags }).(pulumi.MapOutput)
}

// A user-supplied description for the backup.
func (o GetMysqlBackupsBackupOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v GetMysqlBackupsBackup) string { return v.Description }).(pulumi.StringOutput)
}

// A filter to return only the resource matching the given display name exactly.
func (o GetMysqlBackupsBackupOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v GetMysqlBackupsBackup) string { return v.DisplayName }).(pulumi.StringOutput)
}

// Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
func (o GetMysqlBackupsBackupOutput) FreeformTags() pulumi.MapOutput {
	return o.ApplyT(func(v GetMysqlBackupsBackup) map[string]interface{} { return v.FreeformTags }).(pulumi.MapOutput)
}

// OCID of the backup itself
func (o GetMysqlBackupsBackupOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetMysqlBackupsBackup) string { return v.Id }).(pulumi.StringOutput)
}

// Additional information about the current lifecycleState.
func (o GetMysqlBackupsBackupOutput) LifecycleDetails() pulumi.StringOutput {
	return o.ApplyT(func(v GetMysqlBackupsBackup) string { return v.LifecycleDetails }).(pulumi.StringOutput)
}

// The MySQL server version of the DB System used for backup.
func (o GetMysqlBackupsBackupOutput) MysqlVersion() pulumi.StringOutput {
	return o.ApplyT(func(v GetMysqlBackupsBackup) string { return v.MysqlVersion }).(pulumi.StringOutput)
}

// Number of days to retain this backup.
func (o GetMysqlBackupsBackupOutput) RetentionInDays() pulumi.IntOutput {
	return o.ApplyT(func(v GetMysqlBackupsBackup) int { return v.RetentionInDays }).(pulumi.IntOutput)
}

// The shape of the DB System instance used for backup.
func (o GetMysqlBackupsBackupOutput) ShapeName() pulumi.StringOutput {
	return o.ApplyT(func(v GetMysqlBackupsBackup) string { return v.ShapeName }).(pulumi.StringOutput)
}

// Backup Lifecycle State
func (o GetMysqlBackupsBackupOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v GetMysqlBackupsBackup) string { return v.State }).(pulumi.StringOutput)
}

// The time the backup record was created.
func (o GetMysqlBackupsBackupOutput) TimeCreated() pulumi.StringOutput {
	return o.ApplyT(func(v GetMysqlBackupsBackup) string { return v.TimeCreated }).(pulumi.StringOutput)
}

// The time at which the backup was updated.
func (o GetMysqlBackupsBackupOutput) TimeUpdated() pulumi.StringOutput {
	return o.ApplyT(func(v GetMysqlBackupsBackup) string { return v.TimeUpdated }).(pulumi.StringOutput)
}

type GetMysqlBackupsBackupArrayOutput struct{ *pulumi.OutputState }

func (GetMysqlBackupsBackupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetMysqlBackupsBackup)(nil)).Elem()
}

func (o GetMysqlBackupsBackupArrayOutput) ToGetMysqlBackupsBackupArrayOutput() GetMysqlBackupsBackupArrayOutput {
	return o
}

func (o GetMysqlBackupsBackupArrayOutput) ToGetMysqlBackupsBackupArrayOutputWithContext(ctx context.Context) GetMysqlBackupsBackupArrayOutput {
	return o
}

func (o GetMysqlBackupsBackupArrayOutput) Index(i pulumi.IntInput) GetMysqlBackupsBackupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetMysqlBackupsBackup {
		return vs[0].([]GetMysqlBackupsBackup)[vs[1].(int)]
	}).(GetMysqlBackupsBackupOutput)
}

type GetMysqlBackupsBackupDbSystemSnapshot struct {
	// The username for the administrative user.
	AdminUsername string `pulumi:"adminUsername"`
	// The Availability Domain where the primary DB System should be located.
	AvailabilityDomain string `pulumi:"availabilityDomain"`
	// The Backup policy for the DB System.
	BackupPolicy GetMysqlBackupsBackupDbSystemSnapshotBackupPolicy `pulumi:"backupPolicy"`
	// The compartment [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
	CompartmentId string `pulumi:"compartmentId"`
	// The OCID of the Configuration to be used for Instances in this DB System.
	ConfigurationId string `pulumi:"configurationId"`
	// Initial size of the data volume in GiBs that will be created and attached.
	DataStorageSizeInGb int `pulumi:"dataStorageSizeInGb"`
	// Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
	DefinedTags map[string]interface{} `pulumi:"definedTags"`
	// A user-supplied description for the backup.
	Description string `pulumi:"description"`
	// A filter to return only the resource matching the given display name exactly.
	DisplayName string `pulumi:"displayName"`
	// The network endpoints available for this DB System.
	Endpoints []GetMysqlBackupsBackupDbSystemSnapshotEndpoint `pulumi:"endpoints"`
	// The name of the Fault Domain the DB System is located in.
	FaultDomain string `pulumi:"faultDomain"`
	// Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
	FreeformTags map[string]interface{} `pulumi:"freeformTags"`
	// The hostname for the primary endpoint of the DB System. Used for DNS. The value is the hostname portion of the primary private IP's fully qualified domain name (FQDN) (for example, "dbsystem-1" in FQDN "dbsystem-1.subnet123.vcn1.oraclevcn.com"). Must be unique across all VNICs in the subnet and comply with RFC 952 and RFC 1123.
	HostnameLabel string `pulumi:"hostnameLabel"`
	// OCID of the backup itself
	Id string `pulumi:"id"`
	// The IP address the DB System is configured to listen on. A private IP address of the primary endpoint of the DB System. Must be an available IP address within the subnet's CIDR. This will be a "dotted-quad" style IPv4 address.
	IpAddress string `pulumi:"ipAddress"`
	// If the policy is to enable high availability of the instance, by maintaining secondary/failover capacity as necessary.
	IsHighlyAvailable bool `pulumi:"isHighlyAvailable"`
	// The Maintenance Policy for the DB System.
	Maintenance GetMysqlBackupsBackupDbSystemSnapshotMaintenance `pulumi:"maintenance"`
	// The MySQL server version of the DB System used for backup.
	MysqlVersion string `pulumi:"mysqlVersion"`
	// The port for primary endpoint of the DB System to listen on.
	Port int `pulumi:"port"`
	// The network port on which X Plugin listens for TCP/IP connections. This is the X Plugin equivalent of port.
	PortX int `pulumi:"portX"`
	// The shape of the DB System instance used for backup.
	ShapeName string `pulumi:"shapeName"`
	// The OCID of the subnet the DB System is associated with.
	SubnetId string `pulumi:"subnetId"`
}

// GetMysqlBackupsBackupDbSystemSnapshotInput is an input type that accepts GetMysqlBackupsBackupDbSystemSnapshotArgs and GetMysqlBackupsBackupDbSystemSnapshotOutput values.
// You can construct a concrete instance of `GetMysqlBackupsBackupDbSystemSnapshotInput` via:
//
//          GetMysqlBackupsBackupDbSystemSnapshotArgs{...}
type GetMysqlBackupsBackupDbSystemSnapshotInput interface {
	pulumi.Input

	ToGetMysqlBackupsBackupDbSystemSnapshotOutput() GetMysqlBackupsBackupDbSystemSnapshotOutput
	ToGetMysqlBackupsBackupDbSystemSnapshotOutputWithContext(context.Context) GetMysqlBackupsBackupDbSystemSnapshotOutput
}

type GetMysqlBackupsBackupDbSystemSnapshotArgs struct {
	// The username for the administrative user.
	AdminUsername pulumi.StringInput `pulumi:"adminUsername"`
	// The Availability Domain where the primary DB System should be located.
	AvailabilityDomain pulumi.StringInput `pulumi:"availabilityDomain"`
	// The Backup policy for the DB System.
	BackupPolicy GetMysqlBackupsBackupDbSystemSnapshotBackupPolicyInput `pulumi:"backupPolicy"`
	// The compartment [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
	CompartmentId pulumi.StringInput `pulumi:"compartmentId"`
	// The OCID of the Configuration to be used for Instances in this DB System.
	ConfigurationId pulumi.StringInput `pulumi:"configurationId"`
	// Initial size of the data volume in GiBs that will be created and attached.
	DataStorageSizeInGb pulumi.IntInput `pulumi:"dataStorageSizeInGb"`
	// Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
	DefinedTags pulumi.MapInput `pulumi:"definedTags"`
	// A user-supplied description for the backup.
	Description pulumi.StringInput `pulumi:"description"`
	// A filter to return only the resource matching the given display name exactly.
	DisplayName pulumi.StringInput `pulumi:"displayName"`
	// The network endpoints available for this DB System.
	Endpoints GetMysqlBackupsBackupDbSystemSnapshotEndpointArrayInput `pulumi:"endpoints"`
	// The name of the Fault Domain the DB System is located in.
	FaultDomain pulumi.StringInput `pulumi:"faultDomain"`
	// Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
	FreeformTags pulumi.MapInput `pulumi:"freeformTags"`
	// The hostname for the primary endpoint of the DB System. Used for DNS. The value is the hostname portion of the primary private IP's fully qualified domain name (FQDN) (for example, "dbsystem-1" in FQDN "dbsystem-1.subnet123.vcn1.oraclevcn.com"). Must be unique across all VNICs in the subnet and comply with RFC 952 and RFC 1123.
	HostnameLabel pulumi.StringInput `pulumi:"hostnameLabel"`
	// OCID of the backup itself
	Id pulumi.StringInput `pulumi:"id"`
	// The IP address the DB System is configured to listen on. A private IP address of the primary endpoint of the DB System. Must be an available IP address within the subnet's CIDR. This will be a "dotted-quad" style IPv4 address.
	IpAddress pulumi.StringInput `pulumi:"ipAddress"`
	// If the policy is to enable high availability of the instance, by maintaining secondary/failover capacity as necessary.
	IsHighlyAvailable pulumi.BoolInput `pulumi:"isHighlyAvailable"`
	// The Maintenance Policy for the DB System.
	Maintenance GetMysqlBackupsBackupDbSystemSnapshotMaintenanceInput `pulumi:"maintenance"`
	// The MySQL server version of the DB System used for backup.
	MysqlVersion pulumi.StringInput `pulumi:"mysqlVersion"`
	// The port for primary endpoint of the DB System to listen on.
	Port pulumi.IntInput `pulumi:"port"`
	// The network port on which X Plugin listens for TCP/IP connections. This is the X Plugin equivalent of port.
	PortX pulumi.IntInput `pulumi:"portX"`
	// The shape of the DB System instance used for backup.
	ShapeName pulumi.StringInput `pulumi:"shapeName"`
	// The OCID of the subnet the DB System is associated with.
	SubnetId pulumi.StringInput `pulumi:"subnetId"`
}

func (GetMysqlBackupsBackupDbSystemSnapshotArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetMysqlBackupsBackupDbSystemSnapshot)(nil)).Elem()
}

func (i GetMysqlBackupsBackupDbSystemSnapshotArgs) ToGetMysqlBackupsBackupDbSystemSnapshotOutput() GetMysqlBackupsBackupDbSystemSnapshotOutput {
	return i.ToGetMysqlBackupsBackupDbSystemSnapshotOutputWithContext(context.Background())
}

func (i GetMysqlBackupsBackupDbSystemSnapshotArgs) ToGetMysqlBackupsBackupDbSystemSnapshotOutputWithContext(ctx context.Context) GetMysqlBackupsBackupDbSystemSnapshotOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetMysqlBackupsBackupDbSystemSnapshotOutput)
}

type GetMysqlBackupsBackupDbSystemSnapshotOutput struct{ *pulumi.OutputState }

func (GetMysqlBackupsBackupDbSystemSnapshotOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetMysqlBackupsBackupDbSystemSnapshot)(nil)).Elem()
}

func (o GetMysqlBackupsBackupDbSystemSnapshotOutput) ToGetMysqlBackupsBackupDbSystemSnapshotOutput() GetMysqlBackupsBackupDbSystemSnapshotOutput {
	return o
}

func (o GetMysqlBackupsBackupDbSystemSnapshotOutput) ToGetMysqlBackupsBackupDbSystemSnapshotOutputWithContext(ctx context.Context) GetMysqlBackupsBackupDbSystemSnapshotOutput {
	return o
}

// The username for the administrative user.
func (o GetMysqlBackupsBackupDbSystemSnapshotOutput) AdminUsername() pulumi.StringOutput {
	return o.ApplyT(func(v GetMysqlBackupsBackupDbSystemSnapshot) string { return v.AdminUsername }).(pulumi.StringOutput)
}

// The Availability Domain where the primary DB System should be located.
func (o GetMysqlBackupsBackupDbSystemSnapshotOutput) AvailabilityDomain() pulumi.StringOutput {
	return o.ApplyT(func(v GetMysqlBackupsBackupDbSystemSnapshot) string { return v.AvailabilityDomain }).(pulumi.StringOutput)
}

// The Backup policy for the DB System.
func (o GetMysqlBackupsBackupDbSystemSnapshotOutput) BackupPolicy() GetMysqlBackupsBackupDbSystemSnapshotBackupPolicyOutput {
	return o.ApplyT(func(v GetMysqlBackupsBackupDbSystemSnapshot) GetMysqlBackupsBackupDbSystemSnapshotBackupPolicy {
		return v.BackupPolicy
	}).(GetMysqlBackupsBackupDbSystemSnapshotBackupPolicyOutput)
}

// The compartment [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
func (o GetMysqlBackupsBackupDbSystemSnapshotOutput) CompartmentId() pulumi.StringOutput {
	return o.ApplyT(func(v GetMysqlBackupsBackupDbSystemSnapshot) string { return v.CompartmentId }).(pulumi.StringOutput)
}

// The OCID of the Configuration to be used for Instances in this DB System.
func (o GetMysqlBackupsBackupDbSystemSnapshotOutput) ConfigurationId() pulumi.StringOutput {
	return o.ApplyT(func(v GetMysqlBackupsBackupDbSystemSnapshot) string { return v.ConfigurationId }).(pulumi.StringOutput)
}

// Initial size of the data volume in GiBs that will be created and attached.
func (o GetMysqlBackupsBackupDbSystemSnapshotOutput) DataStorageSizeInGb() pulumi.IntOutput {
	return o.ApplyT(func(v GetMysqlBackupsBackupDbSystemSnapshot) int { return v.DataStorageSizeInGb }).(pulumi.IntOutput)
}

// Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
func (o GetMysqlBackupsBackupDbSystemSnapshotOutput) DefinedTags() pulumi.MapOutput {
	return o.ApplyT(func(v GetMysqlBackupsBackupDbSystemSnapshot) map[string]interface{} { return v.DefinedTags }).(pulumi.MapOutput)
}

// A user-supplied description for the backup.
func (o GetMysqlBackupsBackupDbSystemSnapshotOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v GetMysqlBackupsBackupDbSystemSnapshot) string { return v.Description }).(pulumi.StringOutput)
}

// A filter to return only the resource matching the given display name exactly.
func (o GetMysqlBackupsBackupDbSystemSnapshotOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v GetMysqlBackupsBackupDbSystemSnapshot) string { return v.DisplayName }).(pulumi.StringOutput)
}

// The network endpoints available for this DB System.
func (o GetMysqlBackupsBackupDbSystemSnapshotOutput) Endpoints() GetMysqlBackupsBackupDbSystemSnapshotEndpointArrayOutput {
	return o.ApplyT(func(v GetMysqlBackupsBackupDbSystemSnapshot) []GetMysqlBackupsBackupDbSystemSnapshotEndpoint {
		return v.Endpoints
	}).(GetMysqlBackupsBackupDbSystemSnapshotEndpointArrayOutput)
}

// The name of the Fault Domain the DB System is located in.
func (o GetMysqlBackupsBackupDbSystemSnapshotOutput) FaultDomain() pulumi.StringOutput {
	return o.ApplyT(func(v GetMysqlBackupsBackupDbSystemSnapshot) string { return v.FaultDomain }).(pulumi.StringOutput)
}

// Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
func (o GetMysqlBackupsBackupDbSystemSnapshotOutput) FreeformTags() pulumi.MapOutput {
	return o.ApplyT(func(v GetMysqlBackupsBackupDbSystemSnapshot) map[string]interface{} { return v.FreeformTags }).(pulumi.MapOutput)
}

// The hostname for the primary endpoint of the DB System. Used for DNS. The value is the hostname portion of the primary private IP's fully qualified domain name (FQDN) (for example, "dbsystem-1" in FQDN "dbsystem-1.subnet123.vcn1.oraclevcn.com"). Must be unique across all VNICs in the subnet and comply with RFC 952 and RFC 1123.
func (o GetMysqlBackupsBackupDbSystemSnapshotOutput) HostnameLabel() pulumi.StringOutput {
	return o.ApplyT(func(v GetMysqlBackupsBackupDbSystemSnapshot) string { return v.HostnameLabel }).(pulumi.StringOutput)
}

// OCID of the backup itself
func (o GetMysqlBackupsBackupDbSystemSnapshotOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetMysqlBackupsBackupDbSystemSnapshot) string { return v.Id }).(pulumi.StringOutput)
}

// The IP address the DB System is configured to listen on. A private IP address of the primary endpoint of the DB System. Must be an available IP address within the subnet's CIDR. This will be a "dotted-quad" style IPv4 address.
func (o GetMysqlBackupsBackupDbSystemSnapshotOutput) IpAddress() pulumi.StringOutput {
	return o.ApplyT(func(v GetMysqlBackupsBackupDbSystemSnapshot) string { return v.IpAddress }).(pulumi.StringOutput)
}

// If the policy is to enable high availability of the instance, by maintaining secondary/failover capacity as necessary.
func (o GetMysqlBackupsBackupDbSystemSnapshotOutput) IsHighlyAvailable() pulumi.BoolOutput {
	return o.ApplyT(func(v GetMysqlBackupsBackupDbSystemSnapshot) bool { return v.IsHighlyAvailable }).(pulumi.BoolOutput)
}

// The Maintenance Policy for the DB System.
func (o GetMysqlBackupsBackupDbSystemSnapshotOutput) Maintenance() GetMysqlBackupsBackupDbSystemSnapshotMaintenanceOutput {
	return o.ApplyT(func(v GetMysqlBackupsBackupDbSystemSnapshot) GetMysqlBackupsBackupDbSystemSnapshotMaintenance {
		return v.Maintenance
	}).(GetMysqlBackupsBackupDbSystemSnapshotMaintenanceOutput)
}

// The MySQL server version of the DB System used for backup.
func (o GetMysqlBackupsBackupDbSystemSnapshotOutput) MysqlVersion() pulumi.StringOutput {
	return o.ApplyT(func(v GetMysqlBackupsBackupDbSystemSnapshot) string { return v.MysqlVersion }).(pulumi.StringOutput)
}

// The port for primary endpoint of the DB System to listen on.
func (o GetMysqlBackupsBackupDbSystemSnapshotOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v GetMysqlBackupsBackupDbSystemSnapshot) int { return v.Port }).(pulumi.IntOutput)
}

// The network port on which X Plugin listens for TCP/IP connections. This is the X Plugin equivalent of port.
func (o GetMysqlBackupsBackupDbSystemSnapshotOutput) PortX() pulumi.IntOutput {
	return o.ApplyT(func(v GetMysqlBackupsBackupDbSystemSnapshot) int { return v.PortX }).(pulumi.IntOutput)
}

// The shape of the DB System instance used for backup.
func (o GetMysqlBackupsBackupDbSystemSnapshotOutput) ShapeName() pulumi.StringOutput {
	return o.ApplyT(func(v GetMysqlBackupsBackupDbSystemSnapshot) string { return v.ShapeName }).(pulumi.StringOutput)
}

// The OCID of the subnet the DB System is associated with.
func (o GetMysqlBackupsBackupDbSystemSnapshotOutput) SubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v GetMysqlBackupsBackupDbSystemSnapshot) string { return v.SubnetId }).(pulumi.StringOutput)
}

type GetMysqlBackupsBackupDbSystemSnapshotBackupPolicy struct {
	// Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
	DefinedTags map[string]interface{} `pulumi:"definedTags"`
	// Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
	FreeformTags map[string]interface{} `pulumi:"freeformTags"`
	// If automated backups are enabled or disabled.
	IsEnabled bool `pulumi:"isEnabled"`
	// Number of days to retain this backup.
	RetentionInDays int `pulumi:"retentionInDays"`
	// The start time of the maintenance window.
	WindowStartTime string `pulumi:"windowStartTime"`
}

// GetMysqlBackupsBackupDbSystemSnapshotBackupPolicyInput is an input type that accepts GetMysqlBackupsBackupDbSystemSnapshotBackupPolicyArgs and GetMysqlBackupsBackupDbSystemSnapshotBackupPolicyOutput values.
// You can construct a concrete instance of `GetMysqlBackupsBackupDbSystemSnapshotBackupPolicyInput` via:
//
//          GetMysqlBackupsBackupDbSystemSnapshotBackupPolicyArgs{...}
type GetMysqlBackupsBackupDbSystemSnapshotBackupPolicyInput interface {
	pulumi.Input

	ToGetMysqlBackupsBackupDbSystemSnapshotBackupPolicyOutput() GetMysqlBackupsBackupDbSystemSnapshotBackupPolicyOutput
	ToGetMysqlBackupsBackupDbSystemSnapshotBackupPolicyOutputWithContext(context.Context) GetMysqlBackupsBackupDbSystemSnapshotBackupPolicyOutput
}

type GetMysqlBackupsBackupDbSystemSnapshotBackupPolicyArgs struct {
	// Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
	DefinedTags pulumi.MapInput `pulumi:"definedTags"`
	// Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
	FreeformTags pulumi.MapInput `pulumi:"freeformTags"`
	// If automated backups are enabled or disabled.
	IsEnabled pulumi.BoolInput `pulumi:"isEnabled"`
	// Number of days to retain this backup.
	RetentionInDays pulumi.IntInput `pulumi:"retentionInDays"`
	// The start time of the maintenance window.
	WindowStartTime pulumi.StringInput `pulumi:"windowStartTime"`
}

func (GetMysqlBackupsBackupDbSystemSnapshotBackupPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetMysqlBackupsBackupDbSystemSnapshotBackupPolicy)(nil)).Elem()
}

func (i GetMysqlBackupsBackupDbSystemSnapshotBackupPolicyArgs) ToGetMysqlBackupsBackupDbSystemSnapshotBackupPolicyOutput() GetMysqlBackupsBackupDbSystemSnapshotBackupPolicyOutput {
	return i.ToGetMysqlBackupsBackupDbSystemSnapshotBackupPolicyOutputWithContext(context.Background())
}

func (i GetMysqlBackupsBackupDbSystemSnapshotBackupPolicyArgs) ToGetMysqlBackupsBackupDbSystemSnapshotBackupPolicyOutputWithContext(ctx context.Context) GetMysqlBackupsBackupDbSystemSnapshotBackupPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetMysqlBackupsBackupDbSystemSnapshotBackupPolicyOutput)
}

type GetMysqlBackupsBackupDbSystemSnapshotBackupPolicyOutput struct{ *pulumi.OutputState }

func (GetMysqlBackupsBackupDbSystemSnapshotBackupPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetMysqlBackupsBackupDbSystemSnapshotBackupPolicy)(nil)).Elem()
}

func (o GetMysqlBackupsBackupDbSystemSnapshotBackupPolicyOutput) ToGetMysqlBackupsBackupDbSystemSnapshotBackupPolicyOutput() GetMysqlBackupsBackupDbSystemSnapshotBackupPolicyOutput {
	return o
}

func (o GetMysqlBackupsBackupDbSystemSnapshotBackupPolicyOutput) ToGetMysqlBackupsBackupDbSystemSnapshotBackupPolicyOutputWithContext(ctx context.Context) GetMysqlBackupsBackupDbSystemSnapshotBackupPolicyOutput {
	return o
}

// Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
func (o GetMysqlBackupsBackupDbSystemSnapshotBackupPolicyOutput) DefinedTags() pulumi.MapOutput {
	return o.ApplyT(func(v GetMysqlBackupsBackupDbSystemSnapshotBackupPolicy) map[string]interface{} { return v.DefinedTags }).(pulumi.MapOutput)
}

// Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
func (o GetMysqlBackupsBackupDbSystemSnapshotBackupPolicyOutput) FreeformTags() pulumi.MapOutput {
	return o.ApplyT(func(v GetMysqlBackupsBackupDbSystemSnapshotBackupPolicy) map[string]interface{} {
		return v.FreeformTags
	}).(pulumi.MapOutput)
}

// If automated backups are enabled or disabled.
func (o GetMysqlBackupsBackupDbSystemSnapshotBackupPolicyOutput) IsEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v GetMysqlBackupsBackupDbSystemSnapshotBackupPolicy) bool { return v.IsEnabled }).(pulumi.BoolOutput)
}

// Number of days to retain this backup.
func (o GetMysqlBackupsBackupDbSystemSnapshotBackupPolicyOutput) RetentionInDays() pulumi.IntOutput {
	return o.ApplyT(func(v GetMysqlBackupsBackupDbSystemSnapshotBackupPolicy) int { return v.RetentionInDays }).(pulumi.IntOutput)
}

// The start time of the maintenance window.
func (o GetMysqlBackupsBackupDbSystemSnapshotBackupPolicyOutput) WindowStartTime() pulumi.StringOutput {
	return o.ApplyT(func(v GetMysqlBackupsBackupDbSystemSnapshotBackupPolicy) string { return v.WindowStartTime }).(pulumi.StringOutput)
}

type GetMysqlBackupsBackupDbSystemSnapshotEndpoint struct {
	// The network address of the DB System.
	Hostname string `pulumi:"hostname"`
	// The IP address the DB System is configured to listen on. A private IP address of the primary endpoint of the DB System. Must be an available IP address within the subnet's CIDR. This will be a "dotted-quad" style IPv4 address.
	IpAddress string `pulumi:"ipAddress"`
	// The access modes from the client that this endpoint supports.
	Modes []string `pulumi:"modes"`
	// The port for primary endpoint of the DB System to listen on.
	Port int `pulumi:"port"`
	// The network port on which X Plugin listens for TCP/IP connections. This is the X Plugin equivalent of port.
	PortX int `pulumi:"portX"`
	// The state of the endpoints, as far as it can seen from the DB System. There may be some inconsistency with the actual state of the MySQL service.
	Status string `pulumi:"status"`
	// Additional information about the current endpoint status.
	StatusDetails string `pulumi:"statusDetails"`
}

// GetMysqlBackupsBackupDbSystemSnapshotEndpointInput is an input type that accepts GetMysqlBackupsBackupDbSystemSnapshotEndpointArgs and GetMysqlBackupsBackupDbSystemSnapshotEndpointOutput values.
// You can construct a concrete instance of `GetMysqlBackupsBackupDbSystemSnapshotEndpointInput` via:
//
//          GetMysqlBackupsBackupDbSystemSnapshotEndpointArgs{...}
type GetMysqlBackupsBackupDbSystemSnapshotEndpointInput interface {
	pulumi.Input

	ToGetMysqlBackupsBackupDbSystemSnapshotEndpointOutput() GetMysqlBackupsBackupDbSystemSnapshotEndpointOutput
	ToGetMysqlBackupsBackupDbSystemSnapshotEndpointOutputWithContext(context.Context) GetMysqlBackupsBackupDbSystemSnapshotEndpointOutput
}

type GetMysqlBackupsBackupDbSystemSnapshotEndpointArgs struct {
	// The network address of the DB System.
	Hostname pulumi.StringInput `pulumi:"hostname"`
	// The IP address the DB System is configured to listen on. A private IP address of the primary endpoint of the DB System. Must be an available IP address within the subnet's CIDR. This will be a "dotted-quad" style IPv4 address.
	IpAddress pulumi.StringInput `pulumi:"ipAddress"`
	// The access modes from the client that this endpoint supports.
	Modes pulumi.StringArrayInput `pulumi:"modes"`
	// The port for primary endpoint of the DB System to listen on.
	Port pulumi.IntInput `pulumi:"port"`
	// The network port on which X Plugin listens for TCP/IP connections. This is the X Plugin equivalent of port.
	PortX pulumi.IntInput `pulumi:"portX"`
	// The state of the endpoints, as far as it can seen from the DB System. There may be some inconsistency with the actual state of the MySQL service.
	Status pulumi.StringInput `pulumi:"status"`
	// Additional information about the current endpoint status.
	StatusDetails pulumi.StringInput `pulumi:"statusDetails"`
}

func (GetMysqlBackupsBackupDbSystemSnapshotEndpointArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetMysqlBackupsBackupDbSystemSnapshotEndpoint)(nil)).Elem()
}

func (i GetMysqlBackupsBackupDbSystemSnapshotEndpointArgs) ToGetMysqlBackupsBackupDbSystemSnapshotEndpointOutput() GetMysqlBackupsBackupDbSystemSnapshotEndpointOutput {
	return i.ToGetMysqlBackupsBackupDbSystemSnapshotEndpointOutputWithContext(context.Background())
}

func (i GetMysqlBackupsBackupDbSystemSnapshotEndpointArgs) ToGetMysqlBackupsBackupDbSystemSnapshotEndpointOutputWithContext(ctx context.Context) GetMysqlBackupsBackupDbSystemSnapshotEndpointOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetMysqlBackupsBackupDbSystemSnapshotEndpointOutput)
}

// GetMysqlBackupsBackupDbSystemSnapshotEndpointArrayInput is an input type that accepts GetMysqlBackupsBackupDbSystemSnapshotEndpointArray and GetMysqlBackupsBackupDbSystemSnapshotEndpointArrayOutput values.
// You can construct a concrete instance of `GetMysqlBackupsBackupDbSystemSnapshotEndpointArrayInput` via:
//
//          GetMysqlBackupsBackupDbSystemSnapshotEndpointArray{ GetMysqlBackupsBackupDbSystemSnapshotEndpointArgs{...} }
type GetMysqlBackupsBackupDbSystemSnapshotEndpointArrayInput interface {
	pulumi.Input

	ToGetMysqlBackupsBackupDbSystemSnapshotEndpointArrayOutput() GetMysqlBackupsBackupDbSystemSnapshotEndpointArrayOutput
	ToGetMysqlBackupsBackupDbSystemSnapshotEndpointArrayOutputWithContext(context.Context) GetMysqlBackupsBackupDbSystemSnapshotEndpointArrayOutput
}

type GetMysqlBackupsBackupDbSystemSnapshotEndpointArray []GetMysqlBackupsBackupDbSystemSnapshotEndpointInput

func (GetMysqlBackupsBackupDbSystemSnapshotEndpointArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetMysqlBackupsBackupDbSystemSnapshotEndpoint)(nil)).Elem()
}

func (i GetMysqlBackupsBackupDbSystemSnapshotEndpointArray) ToGetMysqlBackupsBackupDbSystemSnapshotEndpointArrayOutput() GetMysqlBackupsBackupDbSystemSnapshotEndpointArrayOutput {
	return i.ToGetMysqlBackupsBackupDbSystemSnapshotEndpointArrayOutputWithContext(context.Background())
}

func (i GetMysqlBackupsBackupDbSystemSnapshotEndpointArray) ToGetMysqlBackupsBackupDbSystemSnapshotEndpointArrayOutputWithContext(ctx context.Context) GetMysqlBackupsBackupDbSystemSnapshotEndpointArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetMysqlBackupsBackupDbSystemSnapshotEndpointArrayOutput)
}

type GetMysqlBackupsBackupDbSystemSnapshotEndpointOutput struct{ *pulumi.OutputState }

func (GetMysqlBackupsBackupDbSystemSnapshotEndpointOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetMysqlBackupsBackupDbSystemSnapshotEndpoint)(nil)).Elem()
}

func (o GetMysqlBackupsBackupDbSystemSnapshotEndpointOutput) ToGetMysqlBackupsBackupDbSystemSnapshotEndpointOutput() GetMysqlBackupsBackupDbSystemSnapshotEndpointOutput {
	return o
}

func (o GetMysqlBackupsBackupDbSystemSnapshotEndpointOutput) ToGetMysqlBackupsBackupDbSystemSnapshotEndpointOutputWithContext(ctx context.Context) GetMysqlBackupsBackupDbSystemSnapshotEndpointOutput {
	return o
}

// The network address of the DB System.
func (o GetMysqlBackupsBackupDbSystemSnapshotEndpointOutput) Hostname() pulumi.StringOutput {
	return o.ApplyT(func(v GetMysqlBackupsBackupDbSystemSnapshotEndpoint) string { return v.Hostname }).(pulumi.StringOutput)
}

// The IP address the DB System is configured to listen on. A private IP address of the primary endpoint of the DB System. Must be an available IP address within the subnet's CIDR. This will be a "dotted-quad" style IPv4 address.
func (o GetMysqlBackupsBackupDbSystemSnapshotEndpointOutput) IpAddress() pulumi.StringOutput {
	return o.ApplyT(func(v GetMysqlBackupsBackupDbSystemSnapshotEndpoint) string { return v.IpAddress }).(pulumi.StringOutput)
}

// The access modes from the client that this endpoint supports.
func (o GetMysqlBackupsBackupDbSystemSnapshotEndpointOutput) Modes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetMysqlBackupsBackupDbSystemSnapshotEndpoint) []string { return v.Modes }).(pulumi.StringArrayOutput)
}

// The port for primary endpoint of the DB System to listen on.
func (o GetMysqlBackupsBackupDbSystemSnapshotEndpointOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v GetMysqlBackupsBackupDbSystemSnapshotEndpoint) int { return v.Port }).(pulumi.IntOutput)
}

// The network port on which X Plugin listens for TCP/IP connections. This is the X Plugin equivalent of port.
func (o GetMysqlBackupsBackupDbSystemSnapshotEndpointOutput) PortX() pulumi.IntOutput {
	return o.ApplyT(func(v GetMysqlBackupsBackupDbSystemSnapshotEndpoint) int { return v.PortX }).(pulumi.IntOutput)
}

// The state of the endpoints, as far as it can seen from the DB System. There may be some inconsistency with the actual state of the MySQL service.
func (o GetMysqlBackupsBackupDbSystemSnapshotEndpointOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v GetMysqlBackupsBackupDbSystemSnapshotEndpoint) string { return v.Status }).(pulumi.StringOutput)
}

// Additional information about the current endpoint status.
func (o GetMysqlBackupsBackupDbSystemSnapshotEndpointOutput) StatusDetails() pulumi.StringOutput {
	return o.ApplyT(func(v GetMysqlBackupsBackupDbSystemSnapshotEndpoint) string { return v.StatusDetails }).(pulumi.StringOutput)
}

type GetMysqlBackupsBackupDbSystemSnapshotEndpointArrayOutput struct{ *pulumi.OutputState }

func (GetMysqlBackupsBackupDbSystemSnapshotEndpointArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetMysqlBackupsBackupDbSystemSnapshotEndpoint)(nil)).Elem()
}

func (o GetMysqlBackupsBackupDbSystemSnapshotEndpointArrayOutput) ToGetMysqlBackupsBackupDbSystemSnapshotEndpointArrayOutput() GetMysqlBackupsBackupDbSystemSnapshotEndpointArrayOutput {
	return o
}

func (o GetMysqlBackupsBackupDbSystemSnapshotEndpointArrayOutput) ToGetMysqlBackupsBackupDbSystemSnapshotEndpointArrayOutputWithContext(ctx context.Context) GetMysqlBackupsBackupDbSystemSnapshotEndpointArrayOutput {
	return o
}

func (o GetMysqlBackupsBackupDbSystemSnapshotEndpointArrayOutput) Index(i pulumi.IntInput) GetMysqlBackupsBackupDbSystemSnapshotEndpointOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetMysqlBackupsBackupDbSystemSnapshotEndpoint {
		return vs[0].([]GetMysqlBackupsBackupDbSystemSnapshotEndpoint)[vs[1].(int)]
	}).(GetMysqlBackupsBackupDbSystemSnapshotEndpointOutput)
}

type GetMysqlBackupsBackupDbSystemSnapshotMaintenance struct {
	// The start time of the maintenance window.
	WindowStartTime string `pulumi:"windowStartTime"`
}

// GetMysqlBackupsBackupDbSystemSnapshotMaintenanceInput is an input type that accepts GetMysqlBackupsBackupDbSystemSnapshotMaintenanceArgs and GetMysqlBackupsBackupDbSystemSnapshotMaintenanceOutput values.
// You can construct a concrete instance of `GetMysqlBackupsBackupDbSystemSnapshotMaintenanceInput` via:
//
//          GetMysqlBackupsBackupDbSystemSnapshotMaintenanceArgs{...}
type GetMysqlBackupsBackupDbSystemSnapshotMaintenanceInput interface {
	pulumi.Input

	ToGetMysqlBackupsBackupDbSystemSnapshotMaintenanceOutput() GetMysqlBackupsBackupDbSystemSnapshotMaintenanceOutput
	ToGetMysqlBackupsBackupDbSystemSnapshotMaintenanceOutputWithContext(context.Context) GetMysqlBackupsBackupDbSystemSnapshotMaintenanceOutput
}

type GetMysqlBackupsBackupDbSystemSnapshotMaintenanceArgs struct {
	// The start time of the maintenance window.
	WindowStartTime pulumi.StringInput `pulumi:"windowStartTime"`
}

func (GetMysqlBackupsBackupDbSystemSnapshotMaintenanceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetMysqlBackupsBackupDbSystemSnapshotMaintenance)(nil)).Elem()
}

func (i GetMysqlBackupsBackupDbSystemSnapshotMaintenanceArgs) ToGetMysqlBackupsBackupDbSystemSnapshotMaintenanceOutput() GetMysqlBackupsBackupDbSystemSnapshotMaintenanceOutput {
	return i.ToGetMysqlBackupsBackupDbSystemSnapshotMaintenanceOutputWithContext(context.Background())
}

func (i GetMysqlBackupsBackupDbSystemSnapshotMaintenanceArgs) ToGetMysqlBackupsBackupDbSystemSnapshotMaintenanceOutputWithContext(ctx context.Context) GetMysqlBackupsBackupDbSystemSnapshotMaintenanceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetMysqlBackupsBackupDbSystemSnapshotMaintenanceOutput)
}

type GetMysqlBackupsBackupDbSystemSnapshotMaintenanceOutput struct{ *pulumi.OutputState }

func (GetMysqlBackupsBackupDbSystemSnapshotMaintenanceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetMysqlBackupsBackupDbSystemSnapshotMaintenance)(nil)).Elem()
}

func (o GetMysqlBackupsBackupDbSystemSnapshotMaintenanceOutput) ToGetMysqlBackupsBackupDbSystemSnapshotMaintenanceOutput() GetMysqlBackupsBackupDbSystemSnapshotMaintenanceOutput {
	return o
}

func (o GetMysqlBackupsBackupDbSystemSnapshotMaintenanceOutput) ToGetMysqlBackupsBackupDbSystemSnapshotMaintenanceOutputWithContext(ctx context.Context) GetMysqlBackupsBackupDbSystemSnapshotMaintenanceOutput {
	return o
}

// The start time of the maintenance window.
func (o GetMysqlBackupsBackupDbSystemSnapshotMaintenanceOutput) WindowStartTime() pulumi.StringOutput {
	return o.ApplyT(func(v GetMysqlBackupsBackupDbSystemSnapshotMaintenance) string { return v.WindowStartTime }).(pulumi.StringOutput)
}

type GetMysqlBackupsFilter struct {
	Name   string   `pulumi:"name"`
	Regex  *bool    `pulumi:"regex"`
	Values []string `pulumi:"values"`
}

// GetMysqlBackupsFilterInput is an input type that accepts GetMysqlBackupsFilterArgs and GetMysqlBackupsFilterOutput values.
// You can construct a concrete instance of `GetMysqlBackupsFilterInput` via:
//
//          GetMysqlBackupsFilterArgs{...}
type GetMysqlBackupsFilterInput interface {
	pulumi.Input

	ToGetMysqlBackupsFilterOutput() GetMysqlBackupsFilterOutput
	ToGetMysqlBackupsFilterOutputWithContext(context.Context) GetMysqlBackupsFilterOutput
}

type GetMysqlBackupsFilterArgs struct {
	Name   pulumi.StringInput      `pulumi:"name"`
	Regex  pulumi.BoolPtrInput     `pulumi:"regex"`
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (GetMysqlBackupsFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetMysqlBackupsFilter)(nil)).Elem()
}

func (i GetMysqlBackupsFilterArgs) ToGetMysqlBackupsFilterOutput() GetMysqlBackupsFilterOutput {
	return i.ToGetMysqlBackupsFilterOutputWithContext(context.Background())
}

func (i GetMysqlBackupsFilterArgs) ToGetMysqlBackupsFilterOutputWithContext(ctx context.Context) GetMysqlBackupsFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetMysqlBackupsFilterOutput)
}

// GetMysqlBackupsFilterArrayInput is an input type that accepts GetMysqlBackupsFilterArray and GetMysqlBackupsFilterArrayOutput values.
// You can construct a concrete instance of `GetMysqlBackupsFilterArrayInput` via:
//
//          GetMysqlBackupsFilterArray{ GetMysqlBackupsFilterArgs{...} }
type GetMysqlBackupsFilterArrayInput interface {
	pulumi.Input

	ToGetMysqlBackupsFilterArrayOutput() GetMysqlBackupsFilterArrayOutput
	ToGetMysqlBackupsFilterArrayOutputWithContext(context.Context) GetMysqlBackupsFilterArrayOutput
}

type GetMysqlBackupsFilterArray []GetMysqlBackupsFilterInput

func (GetMysqlBackupsFilterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetMysqlBackupsFilter)(nil)).Elem()
}

func (i GetMysqlBackupsFilterArray) ToGetMysqlBackupsFilterArrayOutput() GetMysqlBackupsFilterArrayOutput {
	return i.ToGetMysqlBackupsFilterArrayOutputWithContext(context.Background())
}

func (i GetMysqlBackupsFilterArray) ToGetMysqlBackupsFilterArrayOutputWithContext(ctx context.Context) GetMysqlBackupsFilterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetMysqlBackupsFilterArrayOutput)
}

type GetMysqlBackupsFilterOutput struct{ *pulumi.OutputState }

func (GetMysqlBackupsFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetMysqlBackupsFilter)(nil)).Elem()
}

func (o GetMysqlBackupsFilterOutput) ToGetMysqlBackupsFilterOutput() GetMysqlBackupsFilterOutput {
	return o
}

func (o GetMysqlBackupsFilterOutput) ToGetMysqlBackupsFilterOutputWithContext(ctx context.Context) GetMysqlBackupsFilterOutput {
	return o
}

func (o GetMysqlBackupsFilterOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetMysqlBackupsFilter) string { return v.Name }).(pulumi.StringOutput)
}

func (o GetMysqlBackupsFilterOutput) Regex() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetMysqlBackupsFilter) *bool { return v.Regex }).(pulumi.BoolPtrOutput)
}

func (o GetMysqlBackupsFilterOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetMysqlBackupsFilter) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type GetMysqlBackupsFilterArrayOutput struct{ *pulumi.OutputState }

func (GetMysqlBackupsFilterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetMysqlBackupsFilter)(nil)).Elem()
}

func (o GetMysqlBackupsFilterArrayOutput) ToGetMysqlBackupsFilterArrayOutput() GetMysqlBackupsFilterArrayOutput {
	return o
}

func (o GetMysqlBackupsFilterArrayOutput) ToGetMysqlBackupsFilterArrayOutputWithContext(ctx context.Context) GetMysqlBackupsFilterArrayOutput {
	return o
}

func (o GetMysqlBackupsFilterArrayOutput) Index(i pulumi.IntInput) GetMysqlBackupsFilterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetMysqlBackupsFilter {
		return vs[0].([]GetMysqlBackupsFilter)[vs[1].(int)]
	}).(GetMysqlBackupsFilterOutput)
}

type GetMysqlConfigurationVariable struct {
	// ("autocommit")
	Autocommit bool `pulumi:"autocommit"`
	// ("binlogExpireLogsSeconds") DEPRECATED -- variable should not be settable and will be ignored
	BinlogExpireLogsSeconds int `pulumi:"binlogExpireLogsSeconds"`
	// ("completionType")
	CompletionType string `pulumi:"completionType"`
	// ("connectTimeout")
	ConnectTimeout int `pulumi:"connectTimeout"`
	// ("cteMaxRecursionDepth")
	CteMaxRecursionDepth int `pulumi:"cteMaxRecursionDepth"`
	// ("defaultAuthenticationPlugin")
	DefaultAuthenticationPlugin string `pulumi:"defaultAuthenticationPlugin"`
	// ("foreignKeyChecks")
	ForeignKeyChecks bool `pulumi:"foreignKeyChecks"`
	// ("generatedRandomPasswordLength") DEPRECATED -- variable should not be settable and will be ignored
	GeneratedRandomPasswordLength int `pulumi:"generatedRandomPasswordLength"`
	// * EVENTUAL: Both RO and RW transactions do not wait for preceding transactions to be applied before executing. A RW transaction does not wait for other members to apply a transaction. This means that a transaction could be externalized on one member before the others. This also means that in the event of a primary failover, the new primary can accept new RO and RW transactions before the previous primary transactions are all applied. RO transactions could result in outdated values, RW transactions could result in a rollback due to conflicts.
	// * BEFORE_ON_PRIMARY_FAILOVER: New RO or RW transactions with a newly elected primary that is applying backlog from the old primary are held (not applied) until any backlog has been applied. This ensures that when a primary failover happens, intentionally or not, clients always see the latest value on the primary. This guarantees consistency, but means that clients must be able to handle the delay in the event that a backlog is being applied. Usually this delay should be minimal, but does depend on the size of the backlog.
	// * BEFORE: A RW transaction waits for all preceding transactions to complete before being applied. A RO transaction waits for all preceding transactions to complete before being executed. This ensures that this transaction reads the latest value by only affecting the latency of the transaction. This reduces the overhead of synchronization on every RW transaction, by ensuring synchronization is used only on RO transactions. This consistency level also includes the consistency guarantees provided by BEFORE_ON_PRIMARY_FAILOVER.
	// * AFTER: A RW transaction waits until its changes have been applied to all of the other members. This value has no effect on RO transactions. This mode ensures that when a transaction is committed on the local member, any subsequent transaction reads the written value or a more recent value on any group member. Use this mode with a group that is used for predominantly RO operations to ensure that applied RW transactions are applied everywhere once they commit. This could be used by your application to ensure that subsequent reads fetch the latest data which includes the latest writes. This reduces the overhead of synchronization on every RO transaction, by ensuring synchronization is used only on RW transactions. This consistency level also includes the consistency guarantees provided by BEFORE_ON_PRIMARY_FAILOVER.
	// * BEFORE_AND_AFTER: A RW transaction waits for 1) all preceding transactions to complete before being applied and 2) until its changes have been applied on other members. A RO transaction waits for all preceding transactions to complete before execution takes place. This consistency level also includes the consistency guarantees provided by BEFORE_ON_PRIMARY_FAILOVER.
	GroupReplicationConsistency string `pulumi:"groupReplicationConsistency"`
	// ("informationSchemaStatsExpiry")
	InformationSchemaStatsExpiry int `pulumi:"informationSchemaStatsExpiry"`
	// ("innodbBufferPoolInstances")
	InnodbBufferPoolInstances int `pulumi:"innodbBufferPoolInstances"`
	// ("innodbBufferPoolSize")
	InnodbBufferPoolSize string `pulumi:"innodbBufferPoolSize"`
	// ("innodbFtEnableStopword")
	InnodbFtEnableStopword bool `pulumi:"innodbFtEnableStopword"`
	// ("innodbFtMaxTokenSize")
	InnodbFtMaxTokenSize int `pulumi:"innodbFtMaxTokenSize"`
	// ("innodbFtMinTokenSize")
	InnodbFtMinTokenSize int `pulumi:"innodbFtMinTokenSize"`
	// ("innodbFtNumWordOptimize")
	InnodbFtNumWordOptimize int `pulumi:"innodbFtNumWordOptimize"`
	// ("innodbFtResultCacheLimit")
	InnodbFtResultCacheLimit int `pulumi:"innodbFtResultCacheLimit"`
	// ("innodbFtServerStopwordTable")
	InnodbFtServerStopwordTable string `pulumi:"innodbFtServerStopwordTable"`
	// ("innodbLockWaitTimeout")
	InnodbLockWaitTimeout int `pulumi:"innodbLockWaitTimeout"`
	// ("innodbMaxPurgeLag")
	InnodbMaxPurgeLag int `pulumi:"innodbMaxPurgeLag"`
	// ("innodbMaxPurgeLagDelay")
	InnodbMaxPurgeLagDelay int `pulumi:"innodbMaxPurgeLagDelay"`
	// ("localInfile")
	LocalInfile bool `pulumi:"localInfile"`
	// ("mandatoryRoles")
	MandatoryRoles string `pulumi:"mandatoryRoles"`
	// ("maxConnections")
	MaxConnections int `pulumi:"maxConnections"`
	// ("maxExecutionTime")
	MaxExecutionTime int `pulumi:"maxExecutionTime"`
	// ("maxPreparedStmtCount")
	MaxPreparedStmtCount int `pulumi:"maxPreparedStmtCount"`
	// ("mysqlFirewallMode")
	MysqlFirewallMode bool `pulumi:"mysqlFirewallMode"`
	// DEPRECATED -- typo of mysqlx_zstd_default_compression_level. variable will be ignored.
	MysqlZstdDefaultCompressionLevel int `pulumi:"mysqlZstdDefaultCompressionLevel"`
	// ("mysqlxConnectTimeout") DEPRECATED -- variable should not be settable and will be ignored
	MysqlxConnectTimeout int `pulumi:"mysqlxConnectTimeout"`
	// Set the default compression level for the deflate algorithm. ("mysqlxDeflateDefaultCompressionLevel")
	MysqlxDeflateDefaultCompressionLevel int `pulumi:"mysqlxDeflateDefaultCompressionLevel"`
	// Limit the upper bound of accepted compression levels for the deflate algorithm. ("mysqlxDeflateMaxClientCompressionLevel")
	MysqlxDeflateMaxClientCompressionLevel int `pulumi:"mysqlxDeflateMaxClientCompressionLevel"`
	// ("mysqlxDocumentIdUniquePrefix") DEPRECATED -- variable should not be settable and will be ignored
	MysqlxDocumentIdUniquePrefix int `pulumi:"mysqlxDocumentIdUniquePrefix"`
	// ("mysqlxEnableHelloNotice") DEPRECATED -- variable should not be settable and will be ignored
	MysqlxEnableHelloNotice bool `pulumi:"mysqlxEnableHelloNotice"`
	// ("mysqlxIdleWorkerThreadTimeout") DEPRECATED -- variable should not be settable and will be ignored
	MysqlxIdleWorkerThreadTimeout int `pulumi:"mysqlxIdleWorkerThreadTimeout"`
	// ("mysqlxInteractiveTimeout") DEPRECATED -- variable should not be settable and will be ignored
	MysqlxInteractiveTimeout int `pulumi:"mysqlxInteractiveTimeout"`
	// Set the default compression level for the lz4 algorithm. ("mysqlxLz4DefaultCompressionLevel")
	MysqlxLz4defaultCompressionLevel int `pulumi:"mysqlxLz4defaultCompressionLevel"`
	// Limit the upper bound of accepted compression levels for the lz4 algorithm. ("mysqlxLz4MaxClientCompressionLevel")
	MysqlxLz4maxClientCompressionLevel int `pulumi:"mysqlxLz4maxClientCompressionLevel"`
	// ("mysqlxMaxAllowedPacket") DEPRECATED -- variable should not be settable and will be ignored
	MysqlxMaxAllowedPacket int `pulumi:"mysqlxMaxAllowedPacket"`
	// ("mysqlxMinWorkerThreads") DEPRECATED -- variable should not be settable and will be ignored
	MysqlxMinWorkerThreads int `pulumi:"mysqlxMinWorkerThreads"`
	// ("mysqlxReadTimeout") DEPRECATED -- variable should not be settable and will be ignored
	MysqlxReadTimeout int `pulumi:"mysqlxReadTimeout"`
	// ("mysqlxWaitTimeout") DEPRECATED -- variable should not be settable and will be ignored
	MysqlxWaitTimeout int `pulumi:"mysqlxWaitTimeout"`
	// ("mysqlxWriteTimeout") DEPRECATED -- variable should not be settable and will be ignored
	MysqlxWriteTimeout int `pulumi:"mysqlxWriteTimeout"`
	// Set the default compression level for the zstd algorithm. ("mysqlxZstdDefaultCompressionLevel")
	MysqlxZstdDefaultCompressionLevel int `pulumi:"mysqlxZstdDefaultCompressionLevel"`
	// Limit the upper bound of accepted compression levels for the zstd algorithm. ("mysqlxZstdMaxClientCompressionLevel")
	MysqlxZstdMaxClientCompressionLevel int `pulumi:"mysqlxZstdMaxClientCompressionLevel"`
	// ("parserMaxMemSize")
	ParserMaxMemSize int `pulumi:"parserMaxMemSize"`
	// ("queryAllocBlockSize") DEPRECATED -- variable should not be settable and will be ignored
	QueryAllocBlockSize int `pulumi:"queryAllocBlockSize"`
	// ("queryPreallocSize") DEPRECATED -- variable should not be settable and will be ignored
	QueryPreallocSize int `pulumi:"queryPreallocSize"`
	// ("sqlMode")
	SqlMode string `pulumi:"sqlMode"`
	// ("sqlRequirePrimaryKey")
	SqlRequirePrimaryKey bool `pulumi:"sqlRequirePrimaryKey"`
	// ("sqlWarnings")
	SqlWarnings bool `pulumi:"sqlWarnings"`
	// ("transactionIsolation")
	TransactionIsolation string `pulumi:"transactionIsolation"`
}

// GetMysqlConfigurationVariableInput is an input type that accepts GetMysqlConfigurationVariableArgs and GetMysqlConfigurationVariableOutput values.
// You can construct a concrete instance of `GetMysqlConfigurationVariableInput` via:
//
//          GetMysqlConfigurationVariableArgs{...}
type GetMysqlConfigurationVariableInput interface {
	pulumi.Input

	ToGetMysqlConfigurationVariableOutput() GetMysqlConfigurationVariableOutput
	ToGetMysqlConfigurationVariableOutputWithContext(context.Context) GetMysqlConfigurationVariableOutput
}

type GetMysqlConfigurationVariableArgs struct {
	// ("autocommit")
	Autocommit pulumi.BoolInput `pulumi:"autocommit"`
	// ("binlogExpireLogsSeconds") DEPRECATED -- variable should not be settable and will be ignored
	BinlogExpireLogsSeconds pulumi.IntInput `pulumi:"binlogExpireLogsSeconds"`
	// ("completionType")
	CompletionType pulumi.StringInput `pulumi:"completionType"`
	// ("connectTimeout")
	ConnectTimeout pulumi.IntInput `pulumi:"connectTimeout"`
	// ("cteMaxRecursionDepth")
	CteMaxRecursionDepth pulumi.IntInput `pulumi:"cteMaxRecursionDepth"`
	// ("defaultAuthenticationPlugin")
	DefaultAuthenticationPlugin pulumi.StringInput `pulumi:"defaultAuthenticationPlugin"`
	// ("foreignKeyChecks")
	ForeignKeyChecks pulumi.BoolInput `pulumi:"foreignKeyChecks"`
	// ("generatedRandomPasswordLength") DEPRECATED -- variable should not be settable and will be ignored
	GeneratedRandomPasswordLength pulumi.IntInput `pulumi:"generatedRandomPasswordLength"`
	// * EVENTUAL: Both RO and RW transactions do not wait for preceding transactions to be applied before executing. A RW transaction does not wait for other members to apply a transaction. This means that a transaction could be externalized on one member before the others. This also means that in the event of a primary failover, the new primary can accept new RO and RW transactions before the previous primary transactions are all applied. RO transactions could result in outdated values, RW transactions could result in a rollback due to conflicts.
	// * BEFORE_ON_PRIMARY_FAILOVER: New RO or RW transactions with a newly elected primary that is applying backlog from the old primary are held (not applied) until any backlog has been applied. This ensures that when a primary failover happens, intentionally or not, clients always see the latest value on the primary. This guarantees consistency, but means that clients must be able to handle the delay in the event that a backlog is being applied. Usually this delay should be minimal, but does depend on the size of the backlog.
	// * BEFORE: A RW transaction waits for all preceding transactions to complete before being applied. A RO transaction waits for all preceding transactions to complete before being executed. This ensures that this transaction reads the latest value by only affecting the latency of the transaction. This reduces the overhead of synchronization on every RW transaction, by ensuring synchronization is used only on RO transactions. This consistency level also includes the consistency guarantees provided by BEFORE_ON_PRIMARY_FAILOVER.
	// * AFTER: A RW transaction waits until its changes have been applied to all of the other members. This value has no effect on RO transactions. This mode ensures that when a transaction is committed on the local member, any subsequent transaction reads the written value or a more recent value on any group member. Use this mode with a group that is used for predominantly RO operations to ensure that applied RW transactions are applied everywhere once they commit. This could be used by your application to ensure that subsequent reads fetch the latest data which includes the latest writes. This reduces the overhead of synchronization on every RO transaction, by ensuring synchronization is used only on RW transactions. This consistency level also includes the consistency guarantees provided by BEFORE_ON_PRIMARY_FAILOVER.
	// * BEFORE_AND_AFTER: A RW transaction waits for 1) all preceding transactions to complete before being applied and 2) until its changes have been applied on other members. A RO transaction waits for all preceding transactions to complete before execution takes place. This consistency level also includes the consistency guarantees provided by BEFORE_ON_PRIMARY_FAILOVER.
	GroupReplicationConsistency pulumi.StringInput `pulumi:"groupReplicationConsistency"`
	// ("informationSchemaStatsExpiry")
	InformationSchemaStatsExpiry pulumi.IntInput `pulumi:"informationSchemaStatsExpiry"`
	// ("innodbBufferPoolInstances")
	InnodbBufferPoolInstances pulumi.IntInput `pulumi:"innodbBufferPoolInstances"`
	// ("innodbBufferPoolSize")
	InnodbBufferPoolSize pulumi.StringInput `pulumi:"innodbBufferPoolSize"`
	// ("innodbFtEnableStopword")
	InnodbFtEnableStopword pulumi.BoolInput `pulumi:"innodbFtEnableStopword"`
	// ("innodbFtMaxTokenSize")
	InnodbFtMaxTokenSize pulumi.IntInput `pulumi:"innodbFtMaxTokenSize"`
	// ("innodbFtMinTokenSize")
	InnodbFtMinTokenSize pulumi.IntInput `pulumi:"innodbFtMinTokenSize"`
	// ("innodbFtNumWordOptimize")
	InnodbFtNumWordOptimize pulumi.IntInput `pulumi:"innodbFtNumWordOptimize"`
	// ("innodbFtResultCacheLimit")
	InnodbFtResultCacheLimit pulumi.IntInput `pulumi:"innodbFtResultCacheLimit"`
	// ("innodbFtServerStopwordTable")
	InnodbFtServerStopwordTable pulumi.StringInput `pulumi:"innodbFtServerStopwordTable"`
	// ("innodbLockWaitTimeout")
	InnodbLockWaitTimeout pulumi.IntInput `pulumi:"innodbLockWaitTimeout"`
	// ("innodbMaxPurgeLag")
	InnodbMaxPurgeLag pulumi.IntInput `pulumi:"innodbMaxPurgeLag"`
	// ("innodbMaxPurgeLagDelay")
	InnodbMaxPurgeLagDelay pulumi.IntInput `pulumi:"innodbMaxPurgeLagDelay"`
	// ("localInfile")
	LocalInfile pulumi.BoolInput `pulumi:"localInfile"`
	// ("mandatoryRoles")
	MandatoryRoles pulumi.StringInput `pulumi:"mandatoryRoles"`
	// ("maxConnections")
	MaxConnections pulumi.IntInput `pulumi:"maxConnections"`
	// ("maxExecutionTime")
	MaxExecutionTime pulumi.IntInput `pulumi:"maxExecutionTime"`
	// ("maxPreparedStmtCount")
	MaxPreparedStmtCount pulumi.IntInput `pulumi:"maxPreparedStmtCount"`
	// ("mysqlFirewallMode")
	MysqlFirewallMode pulumi.BoolInput `pulumi:"mysqlFirewallMode"`
	// DEPRECATED -- typo of mysqlx_zstd_default_compression_level. variable will be ignored.
	MysqlZstdDefaultCompressionLevel pulumi.IntInput `pulumi:"mysqlZstdDefaultCompressionLevel"`
	// ("mysqlxConnectTimeout") DEPRECATED -- variable should not be settable and will be ignored
	MysqlxConnectTimeout pulumi.IntInput `pulumi:"mysqlxConnectTimeout"`
	// Set the default compression level for the deflate algorithm. ("mysqlxDeflateDefaultCompressionLevel")
	MysqlxDeflateDefaultCompressionLevel pulumi.IntInput `pulumi:"mysqlxDeflateDefaultCompressionLevel"`
	// Limit the upper bound of accepted compression levels for the deflate algorithm. ("mysqlxDeflateMaxClientCompressionLevel")
	MysqlxDeflateMaxClientCompressionLevel pulumi.IntInput `pulumi:"mysqlxDeflateMaxClientCompressionLevel"`
	// ("mysqlxDocumentIdUniquePrefix") DEPRECATED -- variable should not be settable and will be ignored
	MysqlxDocumentIdUniquePrefix pulumi.IntInput `pulumi:"mysqlxDocumentIdUniquePrefix"`
	// ("mysqlxEnableHelloNotice") DEPRECATED -- variable should not be settable and will be ignored
	MysqlxEnableHelloNotice pulumi.BoolInput `pulumi:"mysqlxEnableHelloNotice"`
	// ("mysqlxIdleWorkerThreadTimeout") DEPRECATED -- variable should not be settable and will be ignored
	MysqlxIdleWorkerThreadTimeout pulumi.IntInput `pulumi:"mysqlxIdleWorkerThreadTimeout"`
	// ("mysqlxInteractiveTimeout") DEPRECATED -- variable should not be settable and will be ignored
	MysqlxInteractiveTimeout pulumi.IntInput `pulumi:"mysqlxInteractiveTimeout"`
	// Set the default compression level for the lz4 algorithm. ("mysqlxLz4DefaultCompressionLevel")
	MysqlxLz4defaultCompressionLevel pulumi.IntInput `pulumi:"mysqlxLz4defaultCompressionLevel"`
	// Limit the upper bound of accepted compression levels for the lz4 algorithm. ("mysqlxLz4MaxClientCompressionLevel")
	MysqlxLz4maxClientCompressionLevel pulumi.IntInput `pulumi:"mysqlxLz4maxClientCompressionLevel"`
	// ("mysqlxMaxAllowedPacket") DEPRECATED -- variable should not be settable and will be ignored
	MysqlxMaxAllowedPacket pulumi.IntInput `pulumi:"mysqlxMaxAllowedPacket"`
	// ("mysqlxMinWorkerThreads") DEPRECATED -- variable should not be settable and will be ignored
	MysqlxMinWorkerThreads pulumi.IntInput `pulumi:"mysqlxMinWorkerThreads"`
	// ("mysqlxReadTimeout") DEPRECATED -- variable should not be settable and will be ignored
	MysqlxReadTimeout pulumi.IntInput `pulumi:"mysqlxReadTimeout"`
	// ("mysqlxWaitTimeout") DEPRECATED -- variable should not be settable and will be ignored
	MysqlxWaitTimeout pulumi.IntInput `pulumi:"mysqlxWaitTimeout"`
	// ("mysqlxWriteTimeout") DEPRECATED -- variable should not be settable and will be ignored
	MysqlxWriteTimeout pulumi.IntInput `pulumi:"mysqlxWriteTimeout"`
	// Set the default compression level for the zstd algorithm. ("mysqlxZstdDefaultCompressionLevel")
	MysqlxZstdDefaultCompressionLevel pulumi.IntInput `pulumi:"mysqlxZstdDefaultCompressionLevel"`
	// Limit the upper bound of accepted compression levels for the zstd algorithm. ("mysqlxZstdMaxClientCompressionLevel")
	MysqlxZstdMaxClientCompressionLevel pulumi.IntInput `pulumi:"mysqlxZstdMaxClientCompressionLevel"`
	// ("parserMaxMemSize")
	ParserMaxMemSize pulumi.IntInput `pulumi:"parserMaxMemSize"`
	// ("queryAllocBlockSize") DEPRECATED -- variable should not be settable and will be ignored
	QueryAllocBlockSize pulumi.IntInput `pulumi:"queryAllocBlockSize"`
	// ("queryPreallocSize") DEPRECATED -- variable should not be settable and will be ignored
	QueryPreallocSize pulumi.IntInput `pulumi:"queryPreallocSize"`
	// ("sqlMode")
	SqlMode pulumi.StringInput `pulumi:"sqlMode"`
	// ("sqlRequirePrimaryKey")
	SqlRequirePrimaryKey pulumi.BoolInput `pulumi:"sqlRequirePrimaryKey"`
	// ("sqlWarnings")
	SqlWarnings pulumi.BoolInput `pulumi:"sqlWarnings"`
	// ("transactionIsolation")
	TransactionIsolation pulumi.StringInput `pulumi:"transactionIsolation"`
}

func (GetMysqlConfigurationVariableArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetMysqlConfigurationVariable)(nil)).Elem()
}

func (i GetMysqlConfigurationVariableArgs) ToGetMysqlConfigurationVariableOutput() GetMysqlConfigurationVariableOutput {
	return i.ToGetMysqlConfigurationVariableOutputWithContext(context.Background())
}

func (i GetMysqlConfigurationVariableArgs) ToGetMysqlConfigurationVariableOutputWithContext(ctx context.Context) GetMysqlConfigurationVariableOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetMysqlConfigurationVariableOutput)
}

// GetMysqlConfigurationVariableArrayInput is an input type that accepts GetMysqlConfigurationVariableArray and GetMysqlConfigurationVariableArrayOutput values.
// You can construct a concrete instance of `GetMysqlConfigurationVariableArrayInput` via:
//
//          GetMysqlConfigurationVariableArray{ GetMysqlConfigurationVariableArgs{...} }
type GetMysqlConfigurationVariableArrayInput interface {
	pulumi.Input

	ToGetMysqlConfigurationVariableArrayOutput() GetMysqlConfigurationVariableArrayOutput
	ToGetMysqlConfigurationVariableArrayOutputWithContext(context.Context) GetMysqlConfigurationVariableArrayOutput
}

type GetMysqlConfigurationVariableArray []GetMysqlConfigurationVariableInput

func (GetMysqlConfigurationVariableArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetMysqlConfigurationVariable)(nil)).Elem()
}

func (i GetMysqlConfigurationVariableArray) ToGetMysqlConfigurationVariableArrayOutput() GetMysqlConfigurationVariableArrayOutput {
	return i.ToGetMysqlConfigurationVariableArrayOutputWithContext(context.Background())
}

func (i GetMysqlConfigurationVariableArray) ToGetMysqlConfigurationVariableArrayOutputWithContext(ctx context.Context) GetMysqlConfigurationVariableArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetMysqlConfigurationVariableArrayOutput)
}

type GetMysqlConfigurationVariableOutput struct{ *pulumi.OutputState }

func (GetMysqlConfigurationVariableOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetMysqlConfigurationVariable)(nil)).Elem()
}

func (o GetMysqlConfigurationVariableOutput) ToGetMysqlConfigurationVariableOutput() GetMysqlConfigurationVariableOutput {
	return o
}

func (o GetMysqlConfigurationVariableOutput) ToGetMysqlConfigurationVariableOutputWithContext(ctx context.Context) GetMysqlConfigurationVariableOutput {
	return o
}

// ("autocommit")
func (o GetMysqlConfigurationVariableOutput) Autocommit() pulumi.BoolOutput {
	return o.ApplyT(func(v GetMysqlConfigurationVariable) bool { return v.Autocommit }).(pulumi.BoolOutput)
}

// ("binlogExpireLogsSeconds") DEPRECATED -- variable should not be settable and will be ignored
func (o GetMysqlConfigurationVariableOutput) BinlogExpireLogsSeconds() pulumi.IntOutput {
	return o.ApplyT(func(v GetMysqlConfigurationVariable) int { return v.BinlogExpireLogsSeconds }).(pulumi.IntOutput)
}

// ("completionType")
func (o GetMysqlConfigurationVariableOutput) CompletionType() pulumi.StringOutput {
	return o.ApplyT(func(v GetMysqlConfigurationVariable) string { return v.CompletionType }).(pulumi.StringOutput)
}

// ("connectTimeout")
func (o GetMysqlConfigurationVariableOutput) ConnectTimeout() pulumi.IntOutput {
	return o.ApplyT(func(v GetMysqlConfigurationVariable) int { return v.ConnectTimeout }).(pulumi.IntOutput)
}

// ("cteMaxRecursionDepth")
func (o GetMysqlConfigurationVariableOutput) CteMaxRecursionDepth() pulumi.IntOutput {
	return o.ApplyT(func(v GetMysqlConfigurationVariable) int { return v.CteMaxRecursionDepth }).(pulumi.IntOutput)
}

// ("defaultAuthenticationPlugin")
func (o GetMysqlConfigurationVariableOutput) DefaultAuthenticationPlugin() pulumi.StringOutput {
	return o.ApplyT(func(v GetMysqlConfigurationVariable) string { return v.DefaultAuthenticationPlugin }).(pulumi.StringOutput)
}

// ("foreignKeyChecks")
func (o GetMysqlConfigurationVariableOutput) ForeignKeyChecks() pulumi.BoolOutput {
	return o.ApplyT(func(v GetMysqlConfigurationVariable) bool { return v.ForeignKeyChecks }).(pulumi.BoolOutput)
}

// ("generatedRandomPasswordLength") DEPRECATED -- variable should not be settable and will be ignored
func (o GetMysqlConfigurationVariableOutput) GeneratedRandomPasswordLength() pulumi.IntOutput {
	return o.ApplyT(func(v GetMysqlConfigurationVariable) int { return v.GeneratedRandomPasswordLength }).(pulumi.IntOutput)
}

// * EVENTUAL: Both RO and RW transactions do not wait for preceding transactions to be applied before executing. A RW transaction does not wait for other members to apply a transaction. This means that a transaction could be externalized on one member before the others. This also means that in the event of a primary failover, the new primary can accept new RO and RW transactions before the previous primary transactions are all applied. RO transactions could result in outdated values, RW transactions could result in a rollback due to conflicts.
// * BEFORE_ON_PRIMARY_FAILOVER: New RO or RW transactions with a newly elected primary that is applying backlog from the old primary are held (not applied) until any backlog has been applied. This ensures that when a primary failover happens, intentionally or not, clients always see the latest value on the primary. This guarantees consistency, but means that clients must be able to handle the delay in the event that a backlog is being applied. Usually this delay should be minimal, but does depend on the size of the backlog.
// * BEFORE: A RW transaction waits for all preceding transactions to complete before being applied. A RO transaction waits for all preceding transactions to complete before being executed. This ensures that this transaction reads the latest value by only affecting the latency of the transaction. This reduces the overhead of synchronization on every RW transaction, by ensuring synchronization is used only on RO transactions. This consistency level also includes the consistency guarantees provided by BEFORE_ON_PRIMARY_FAILOVER.
// * AFTER: A RW transaction waits until its changes have been applied to all of the other members. This value has no effect on RO transactions. This mode ensures that when a transaction is committed on the local member, any subsequent transaction reads the written value or a more recent value on any group member. Use this mode with a group that is used for predominantly RO operations to ensure that applied RW transactions are applied everywhere once they commit. This could be used by your application to ensure that subsequent reads fetch the latest data which includes the latest writes. This reduces the overhead of synchronization on every RO transaction, by ensuring synchronization is used only on RW transactions. This consistency level also includes the consistency guarantees provided by BEFORE_ON_PRIMARY_FAILOVER.
// * BEFORE_AND_AFTER: A RW transaction waits for 1) all preceding transactions to complete before being applied and 2) until its changes have been applied on other members. A RO transaction waits for all preceding transactions to complete before execution takes place. This consistency level also includes the consistency guarantees provided by BEFORE_ON_PRIMARY_FAILOVER.
func (o GetMysqlConfigurationVariableOutput) GroupReplicationConsistency() pulumi.StringOutput {
	return o.ApplyT(func(v GetMysqlConfigurationVariable) string { return v.GroupReplicationConsistency }).(pulumi.StringOutput)
}

// ("informationSchemaStatsExpiry")
func (o GetMysqlConfigurationVariableOutput) InformationSchemaStatsExpiry() pulumi.IntOutput {
	return o.ApplyT(func(v GetMysqlConfigurationVariable) int { return v.InformationSchemaStatsExpiry }).(pulumi.IntOutput)
}

// ("innodbBufferPoolInstances")
func (o GetMysqlConfigurationVariableOutput) InnodbBufferPoolInstances() pulumi.IntOutput {
	return o.ApplyT(func(v GetMysqlConfigurationVariable) int { return v.InnodbBufferPoolInstances }).(pulumi.IntOutput)
}

// ("innodbBufferPoolSize")
func (o GetMysqlConfigurationVariableOutput) InnodbBufferPoolSize() pulumi.StringOutput {
	return o.ApplyT(func(v GetMysqlConfigurationVariable) string { return v.InnodbBufferPoolSize }).(pulumi.StringOutput)
}

// ("innodbFtEnableStopword")
func (o GetMysqlConfigurationVariableOutput) InnodbFtEnableStopword() pulumi.BoolOutput {
	return o.ApplyT(func(v GetMysqlConfigurationVariable) bool { return v.InnodbFtEnableStopword }).(pulumi.BoolOutput)
}

// ("innodbFtMaxTokenSize")
func (o GetMysqlConfigurationVariableOutput) InnodbFtMaxTokenSize() pulumi.IntOutput {
	return o.ApplyT(func(v GetMysqlConfigurationVariable) int { return v.InnodbFtMaxTokenSize }).(pulumi.IntOutput)
}

// ("innodbFtMinTokenSize")
func (o GetMysqlConfigurationVariableOutput) InnodbFtMinTokenSize() pulumi.IntOutput {
	return o.ApplyT(func(v GetMysqlConfigurationVariable) int { return v.InnodbFtMinTokenSize }).(pulumi.IntOutput)
}

// ("innodbFtNumWordOptimize")
func (o GetMysqlConfigurationVariableOutput) InnodbFtNumWordOptimize() pulumi.IntOutput {
	return o.ApplyT(func(v GetMysqlConfigurationVariable) int { return v.InnodbFtNumWordOptimize }).(pulumi.IntOutput)
}

// ("innodbFtResultCacheLimit")
func (o GetMysqlConfigurationVariableOutput) InnodbFtResultCacheLimit() pulumi.IntOutput {
	return o.ApplyT(func(v GetMysqlConfigurationVariable) int { return v.InnodbFtResultCacheLimit }).(pulumi.IntOutput)
}

// ("innodbFtServerStopwordTable")
func (o GetMysqlConfigurationVariableOutput) InnodbFtServerStopwordTable() pulumi.StringOutput {
	return o.ApplyT(func(v GetMysqlConfigurationVariable) string { return v.InnodbFtServerStopwordTable }).(pulumi.StringOutput)
}

// ("innodbLockWaitTimeout")
func (o GetMysqlConfigurationVariableOutput) InnodbLockWaitTimeout() pulumi.IntOutput {
	return o.ApplyT(func(v GetMysqlConfigurationVariable) int { return v.InnodbLockWaitTimeout }).(pulumi.IntOutput)
}

// ("innodbMaxPurgeLag")
func (o GetMysqlConfigurationVariableOutput) InnodbMaxPurgeLag() pulumi.IntOutput {
	return o.ApplyT(func(v GetMysqlConfigurationVariable) int { return v.InnodbMaxPurgeLag }).(pulumi.IntOutput)
}

// ("innodbMaxPurgeLagDelay")
func (o GetMysqlConfigurationVariableOutput) InnodbMaxPurgeLagDelay() pulumi.IntOutput {
	return o.ApplyT(func(v GetMysqlConfigurationVariable) int { return v.InnodbMaxPurgeLagDelay }).(pulumi.IntOutput)
}

// ("localInfile")
func (o GetMysqlConfigurationVariableOutput) LocalInfile() pulumi.BoolOutput {
	return o.ApplyT(func(v GetMysqlConfigurationVariable) bool { return v.LocalInfile }).(pulumi.BoolOutput)
}

// ("mandatoryRoles")
func (o GetMysqlConfigurationVariableOutput) MandatoryRoles() pulumi.StringOutput {
	return o.ApplyT(func(v GetMysqlConfigurationVariable) string { return v.MandatoryRoles }).(pulumi.StringOutput)
}

// ("maxConnections")
func (o GetMysqlConfigurationVariableOutput) MaxConnections() pulumi.IntOutput {
	return o.ApplyT(func(v GetMysqlConfigurationVariable) int { return v.MaxConnections }).(pulumi.IntOutput)
}

// ("maxExecutionTime")
func (o GetMysqlConfigurationVariableOutput) MaxExecutionTime() pulumi.IntOutput {
	return o.ApplyT(func(v GetMysqlConfigurationVariable) int { return v.MaxExecutionTime }).(pulumi.IntOutput)
}

// ("maxPreparedStmtCount")
func (o GetMysqlConfigurationVariableOutput) MaxPreparedStmtCount() pulumi.IntOutput {
	return o.ApplyT(func(v GetMysqlConfigurationVariable) int { return v.MaxPreparedStmtCount }).(pulumi.IntOutput)
}

// ("mysqlFirewallMode")
func (o GetMysqlConfigurationVariableOutput) MysqlFirewallMode() pulumi.BoolOutput {
	return o.ApplyT(func(v GetMysqlConfigurationVariable) bool { return v.MysqlFirewallMode }).(pulumi.BoolOutput)
}

// DEPRECATED -- typo of mysqlx_zstd_default_compression_level. variable will be ignored.
func (o GetMysqlConfigurationVariableOutput) MysqlZstdDefaultCompressionLevel() pulumi.IntOutput {
	return o.ApplyT(func(v GetMysqlConfigurationVariable) int { return v.MysqlZstdDefaultCompressionLevel }).(pulumi.IntOutput)
}

// ("mysqlxConnectTimeout") DEPRECATED -- variable should not be settable and will be ignored
func (o GetMysqlConfigurationVariableOutput) MysqlxConnectTimeout() pulumi.IntOutput {
	return o.ApplyT(func(v GetMysqlConfigurationVariable) int { return v.MysqlxConnectTimeout }).(pulumi.IntOutput)
}

// Set the default compression level for the deflate algorithm. ("mysqlxDeflateDefaultCompressionLevel")
func (o GetMysqlConfigurationVariableOutput) MysqlxDeflateDefaultCompressionLevel() pulumi.IntOutput {
	return o.ApplyT(func(v GetMysqlConfigurationVariable) int { return v.MysqlxDeflateDefaultCompressionLevel }).(pulumi.IntOutput)
}

// Limit the upper bound of accepted compression levels for the deflate algorithm. ("mysqlxDeflateMaxClientCompressionLevel")
func (o GetMysqlConfigurationVariableOutput) MysqlxDeflateMaxClientCompressionLevel() pulumi.IntOutput {
	return o.ApplyT(func(v GetMysqlConfigurationVariable) int { return v.MysqlxDeflateMaxClientCompressionLevel }).(pulumi.IntOutput)
}

// ("mysqlxDocumentIdUniquePrefix") DEPRECATED -- variable should not be settable and will be ignored
func (o GetMysqlConfigurationVariableOutput) MysqlxDocumentIdUniquePrefix() pulumi.IntOutput {
	return o.ApplyT(func(v GetMysqlConfigurationVariable) int { return v.MysqlxDocumentIdUniquePrefix }).(pulumi.IntOutput)
}

// ("mysqlxEnableHelloNotice") DEPRECATED -- variable should not be settable and will be ignored
func (o GetMysqlConfigurationVariableOutput) MysqlxEnableHelloNotice() pulumi.BoolOutput {
	return o.ApplyT(func(v GetMysqlConfigurationVariable) bool { return v.MysqlxEnableHelloNotice }).(pulumi.BoolOutput)
}

// ("mysqlxIdleWorkerThreadTimeout") DEPRECATED -- variable should not be settable and will be ignored
func (o GetMysqlConfigurationVariableOutput) MysqlxIdleWorkerThreadTimeout() pulumi.IntOutput {
	return o.ApplyT(func(v GetMysqlConfigurationVariable) int { return v.MysqlxIdleWorkerThreadTimeout }).(pulumi.IntOutput)
}

// ("mysqlxInteractiveTimeout") DEPRECATED -- variable should not be settable and will be ignored
func (o GetMysqlConfigurationVariableOutput) MysqlxInteractiveTimeout() pulumi.IntOutput {
	return o.ApplyT(func(v GetMysqlConfigurationVariable) int { return v.MysqlxInteractiveTimeout }).(pulumi.IntOutput)
}

// Set the default compression level for the lz4 algorithm. ("mysqlxLz4DefaultCompressionLevel")
func (o GetMysqlConfigurationVariableOutput) MysqlxLz4defaultCompressionLevel() pulumi.IntOutput {
	return o.ApplyT(func(v GetMysqlConfigurationVariable) int { return v.MysqlxLz4defaultCompressionLevel }).(pulumi.IntOutput)
}

// Limit the upper bound of accepted compression levels for the lz4 algorithm. ("mysqlxLz4MaxClientCompressionLevel")
func (o GetMysqlConfigurationVariableOutput) MysqlxLz4maxClientCompressionLevel() pulumi.IntOutput {
	return o.ApplyT(func(v GetMysqlConfigurationVariable) int { return v.MysqlxLz4maxClientCompressionLevel }).(pulumi.IntOutput)
}

// ("mysqlxMaxAllowedPacket") DEPRECATED -- variable should not be settable and will be ignored
func (o GetMysqlConfigurationVariableOutput) MysqlxMaxAllowedPacket() pulumi.IntOutput {
	return o.ApplyT(func(v GetMysqlConfigurationVariable) int { return v.MysqlxMaxAllowedPacket }).(pulumi.IntOutput)
}

// ("mysqlxMinWorkerThreads") DEPRECATED -- variable should not be settable and will be ignored
func (o GetMysqlConfigurationVariableOutput) MysqlxMinWorkerThreads() pulumi.IntOutput {
	return o.ApplyT(func(v GetMysqlConfigurationVariable) int { return v.MysqlxMinWorkerThreads }).(pulumi.IntOutput)
}

// ("mysqlxReadTimeout") DEPRECATED -- variable should not be settable and will be ignored
func (o GetMysqlConfigurationVariableOutput) MysqlxReadTimeout() pulumi.IntOutput {
	return o.ApplyT(func(v GetMysqlConfigurationVariable) int { return v.MysqlxReadTimeout }).(pulumi.IntOutput)
}

// ("mysqlxWaitTimeout") DEPRECATED -- variable should not be settable and will be ignored
func (o GetMysqlConfigurationVariableOutput) MysqlxWaitTimeout() pulumi.IntOutput {
	return o.ApplyT(func(v GetMysqlConfigurationVariable) int { return v.MysqlxWaitTimeout }).(pulumi.IntOutput)
}

// ("mysqlxWriteTimeout") DEPRECATED -- variable should not be settable and will be ignored
func (o GetMysqlConfigurationVariableOutput) MysqlxWriteTimeout() pulumi.IntOutput {
	return o.ApplyT(func(v GetMysqlConfigurationVariable) int { return v.MysqlxWriteTimeout }).(pulumi.IntOutput)
}

// Set the default compression level for the zstd algorithm. ("mysqlxZstdDefaultCompressionLevel")
func (o GetMysqlConfigurationVariableOutput) MysqlxZstdDefaultCompressionLevel() pulumi.IntOutput {
	return o.ApplyT(func(v GetMysqlConfigurationVariable) int { return v.MysqlxZstdDefaultCompressionLevel }).(pulumi.IntOutput)
}

// Limit the upper bound of accepted compression levels for the zstd algorithm. ("mysqlxZstdMaxClientCompressionLevel")
func (o GetMysqlConfigurationVariableOutput) MysqlxZstdMaxClientCompressionLevel() pulumi.IntOutput {
	return o.ApplyT(func(v GetMysqlConfigurationVariable) int { return v.MysqlxZstdMaxClientCompressionLevel }).(pulumi.IntOutput)
}

// ("parserMaxMemSize")
func (o GetMysqlConfigurationVariableOutput) ParserMaxMemSize() pulumi.IntOutput {
	return o.ApplyT(func(v GetMysqlConfigurationVariable) int { return v.ParserMaxMemSize }).(pulumi.IntOutput)
}

// ("queryAllocBlockSize") DEPRECATED -- variable should not be settable and will be ignored
func (o GetMysqlConfigurationVariableOutput) QueryAllocBlockSize() pulumi.IntOutput {
	return o.ApplyT(func(v GetMysqlConfigurationVariable) int { return v.QueryAllocBlockSize }).(pulumi.IntOutput)
}

// ("queryPreallocSize") DEPRECATED -- variable should not be settable and will be ignored
func (o GetMysqlConfigurationVariableOutput) QueryPreallocSize() pulumi.IntOutput {
	return o.ApplyT(func(v GetMysqlConfigurationVariable) int { return v.QueryPreallocSize }).(pulumi.IntOutput)
}

// ("sqlMode")
func (o GetMysqlConfigurationVariableOutput) SqlMode() pulumi.StringOutput {
	return o.ApplyT(func(v GetMysqlConfigurationVariable) string { return v.SqlMode }).(pulumi.StringOutput)
}

// ("sqlRequirePrimaryKey")
func (o GetMysqlConfigurationVariableOutput) SqlRequirePrimaryKey() pulumi.BoolOutput {
	return o.ApplyT(func(v GetMysqlConfigurationVariable) bool { return v.SqlRequirePrimaryKey }).(pulumi.BoolOutput)
}

// ("sqlWarnings")
func (o GetMysqlConfigurationVariableOutput) SqlWarnings() pulumi.BoolOutput {
	return o.ApplyT(func(v GetMysqlConfigurationVariable) bool { return v.SqlWarnings }).(pulumi.BoolOutput)
}

// ("transactionIsolation")
func (o GetMysqlConfigurationVariableOutput) TransactionIsolation() pulumi.StringOutput {
	return o.ApplyT(func(v GetMysqlConfigurationVariable) string { return v.TransactionIsolation }).(pulumi.StringOutput)
}

type GetMysqlConfigurationVariableArrayOutput struct{ *pulumi.OutputState }

func (GetMysqlConfigurationVariableArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetMysqlConfigurationVariable)(nil)).Elem()
}

func (o GetMysqlConfigurationVariableArrayOutput) ToGetMysqlConfigurationVariableArrayOutput() GetMysqlConfigurationVariableArrayOutput {
	return o
}

func (o GetMysqlConfigurationVariableArrayOutput) ToGetMysqlConfigurationVariableArrayOutputWithContext(ctx context.Context) GetMysqlConfigurationVariableArrayOutput {
	return o
}

func (o GetMysqlConfigurationVariableArrayOutput) Index(i pulumi.IntInput) GetMysqlConfigurationVariableOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetMysqlConfigurationVariable {
		return vs[0].([]GetMysqlConfigurationVariable)[vs[1].(int)]
	}).(GetMysqlConfigurationVariableOutput)
}

type GetMysqlConfigurationsConfiguration struct {
	// The compartment [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
	CompartmentId string `pulumi:"compartmentId"`
	// Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
	DefinedTags map[string]interface{} `pulumi:"definedTags"`
	// User-provided data about the Configuration.
	Description string `pulumi:"description"`
	// A filter to return only the resource matching the given display name exactly.
	DisplayName string `pulumi:"displayName"`
	// Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
	FreeformTags map[string]interface{} `pulumi:"freeformTags"`
	// The OCID of the Configuration.
	Id string `pulumi:"id"`
	// The OCID of the Configuration from which this Configuration is "derived". This is entirely a metadata relationship. There is no relation between the values in this Configuration and its parent.
	ParentConfigurationId string `pulumi:"parentConfigurationId"`
	// The requested Shape name.
	ShapeName string `pulumi:"shapeName"`
	// Configuration Lifecycle State
	State string `pulumi:"state"`
	// The date and time the Configuration was created, as described by [RFC 3339](https://tools.ietf.org/rfc/rfc3339).
	TimeCreated string `pulumi:"timeCreated"`
	// The date and time the Configuration was last updated, as described by [RFC 3339](https://tools.ietf.org/rfc/rfc3339).
	TimeUpdated string `pulumi:"timeUpdated"`
	// The requested Configuration types.
	Type string `pulumi:"type"`
	// User controllable service variables.
	Variables GetMysqlConfigurationsConfigurationVariables `pulumi:"variables"`
}

// GetMysqlConfigurationsConfigurationInput is an input type that accepts GetMysqlConfigurationsConfigurationArgs and GetMysqlConfigurationsConfigurationOutput values.
// You can construct a concrete instance of `GetMysqlConfigurationsConfigurationInput` via:
//
//          GetMysqlConfigurationsConfigurationArgs{...}
type GetMysqlConfigurationsConfigurationInput interface {
	pulumi.Input

	ToGetMysqlConfigurationsConfigurationOutput() GetMysqlConfigurationsConfigurationOutput
	ToGetMysqlConfigurationsConfigurationOutputWithContext(context.Context) GetMysqlConfigurationsConfigurationOutput
}

type GetMysqlConfigurationsConfigurationArgs struct {
	// The compartment [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
	CompartmentId pulumi.StringInput `pulumi:"compartmentId"`
	// Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
	DefinedTags pulumi.MapInput `pulumi:"definedTags"`
	// User-provided data about the Configuration.
	Description pulumi.StringInput `pulumi:"description"`
	// A filter to return only the resource matching the given display name exactly.
	DisplayName pulumi.StringInput `pulumi:"displayName"`
	// Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
	FreeformTags pulumi.MapInput `pulumi:"freeformTags"`
	// The OCID of the Configuration.
	Id pulumi.StringInput `pulumi:"id"`
	// The OCID of the Configuration from which this Configuration is "derived". This is entirely a metadata relationship. There is no relation between the values in this Configuration and its parent.
	ParentConfigurationId pulumi.StringInput `pulumi:"parentConfigurationId"`
	// The requested Shape name.
	ShapeName pulumi.StringInput `pulumi:"shapeName"`
	// Configuration Lifecycle State
	State pulumi.StringInput `pulumi:"state"`
	// The date and time the Configuration was created, as described by [RFC 3339](https://tools.ietf.org/rfc/rfc3339).
	TimeCreated pulumi.StringInput `pulumi:"timeCreated"`
	// The date and time the Configuration was last updated, as described by [RFC 3339](https://tools.ietf.org/rfc/rfc3339).
	TimeUpdated pulumi.StringInput `pulumi:"timeUpdated"`
	// The requested Configuration types.
	Type pulumi.StringInput `pulumi:"type"`
	// User controllable service variables.
	Variables GetMysqlConfigurationsConfigurationVariablesInput `pulumi:"variables"`
}

func (GetMysqlConfigurationsConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetMysqlConfigurationsConfiguration)(nil)).Elem()
}

func (i GetMysqlConfigurationsConfigurationArgs) ToGetMysqlConfigurationsConfigurationOutput() GetMysqlConfigurationsConfigurationOutput {
	return i.ToGetMysqlConfigurationsConfigurationOutputWithContext(context.Background())
}

func (i GetMysqlConfigurationsConfigurationArgs) ToGetMysqlConfigurationsConfigurationOutputWithContext(ctx context.Context) GetMysqlConfigurationsConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetMysqlConfigurationsConfigurationOutput)
}

// GetMysqlConfigurationsConfigurationArrayInput is an input type that accepts GetMysqlConfigurationsConfigurationArray and GetMysqlConfigurationsConfigurationArrayOutput values.
// You can construct a concrete instance of `GetMysqlConfigurationsConfigurationArrayInput` via:
//
//          GetMysqlConfigurationsConfigurationArray{ GetMysqlConfigurationsConfigurationArgs{...} }
type GetMysqlConfigurationsConfigurationArrayInput interface {
	pulumi.Input

	ToGetMysqlConfigurationsConfigurationArrayOutput() GetMysqlConfigurationsConfigurationArrayOutput
	ToGetMysqlConfigurationsConfigurationArrayOutputWithContext(context.Context) GetMysqlConfigurationsConfigurationArrayOutput
}

type GetMysqlConfigurationsConfigurationArray []GetMysqlConfigurationsConfigurationInput

func (GetMysqlConfigurationsConfigurationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetMysqlConfigurationsConfiguration)(nil)).Elem()
}

func (i GetMysqlConfigurationsConfigurationArray) ToGetMysqlConfigurationsConfigurationArrayOutput() GetMysqlConfigurationsConfigurationArrayOutput {
	return i.ToGetMysqlConfigurationsConfigurationArrayOutputWithContext(context.Background())
}

func (i GetMysqlConfigurationsConfigurationArray) ToGetMysqlConfigurationsConfigurationArrayOutputWithContext(ctx context.Context) GetMysqlConfigurationsConfigurationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetMysqlConfigurationsConfigurationArrayOutput)
}

type GetMysqlConfigurationsConfigurationOutput struct{ *pulumi.OutputState }

func (GetMysqlConfigurationsConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetMysqlConfigurationsConfiguration)(nil)).Elem()
}

func (o GetMysqlConfigurationsConfigurationOutput) ToGetMysqlConfigurationsConfigurationOutput() GetMysqlConfigurationsConfigurationOutput {
	return o
}

func (o GetMysqlConfigurationsConfigurationOutput) ToGetMysqlConfigurationsConfigurationOutputWithContext(ctx context.Context) GetMysqlConfigurationsConfigurationOutput {
	return o
}

// The compartment [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
func (o GetMysqlConfigurationsConfigurationOutput) CompartmentId() pulumi.StringOutput {
	return o.ApplyT(func(v GetMysqlConfigurationsConfiguration) string { return v.CompartmentId }).(pulumi.StringOutput)
}

// Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
func (o GetMysqlConfigurationsConfigurationOutput) DefinedTags() pulumi.MapOutput {
	return o.ApplyT(func(v GetMysqlConfigurationsConfiguration) map[string]interface{} { return v.DefinedTags }).(pulumi.MapOutput)
}

// User-provided data about the Configuration.
func (o GetMysqlConfigurationsConfigurationOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v GetMysqlConfigurationsConfiguration) string { return v.Description }).(pulumi.StringOutput)
}

// A filter to return only the resource matching the given display name exactly.
func (o GetMysqlConfigurationsConfigurationOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v GetMysqlConfigurationsConfiguration) string { return v.DisplayName }).(pulumi.StringOutput)
}

// Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
func (o GetMysqlConfigurationsConfigurationOutput) FreeformTags() pulumi.MapOutput {
	return o.ApplyT(func(v GetMysqlConfigurationsConfiguration) map[string]interface{} { return v.FreeformTags }).(pulumi.MapOutput)
}

// The OCID of the Configuration.
func (o GetMysqlConfigurationsConfigurationOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetMysqlConfigurationsConfiguration) string { return v.Id }).(pulumi.StringOutput)
}

// The OCID of the Configuration from which this Configuration is "derived". This is entirely a metadata relationship. There is no relation between the values in this Configuration and its parent.
func (o GetMysqlConfigurationsConfigurationOutput) ParentConfigurationId() pulumi.StringOutput {
	return o.ApplyT(func(v GetMysqlConfigurationsConfiguration) string { return v.ParentConfigurationId }).(pulumi.StringOutput)
}

// The requested Shape name.
func (o GetMysqlConfigurationsConfigurationOutput) ShapeName() pulumi.StringOutput {
	return o.ApplyT(func(v GetMysqlConfigurationsConfiguration) string { return v.ShapeName }).(pulumi.StringOutput)
}

// Configuration Lifecycle State
func (o GetMysqlConfigurationsConfigurationOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v GetMysqlConfigurationsConfiguration) string { return v.State }).(pulumi.StringOutput)
}

// The date and time the Configuration was created, as described by [RFC 3339](https://tools.ietf.org/rfc/rfc3339).
func (o GetMysqlConfigurationsConfigurationOutput) TimeCreated() pulumi.StringOutput {
	return o.ApplyT(func(v GetMysqlConfigurationsConfiguration) string { return v.TimeCreated }).(pulumi.StringOutput)
}

// The date and time the Configuration was last updated, as described by [RFC 3339](https://tools.ietf.org/rfc/rfc3339).
func (o GetMysqlConfigurationsConfigurationOutput) TimeUpdated() pulumi.StringOutput {
	return o.ApplyT(func(v GetMysqlConfigurationsConfiguration) string { return v.TimeUpdated }).(pulumi.StringOutput)
}

// The requested Configuration types.
func (o GetMysqlConfigurationsConfigurationOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetMysqlConfigurationsConfiguration) string { return v.Type }).(pulumi.StringOutput)
}

// User controllable service variables.
func (o GetMysqlConfigurationsConfigurationOutput) Variables() GetMysqlConfigurationsConfigurationVariablesOutput {
	return o.ApplyT(func(v GetMysqlConfigurationsConfiguration) GetMysqlConfigurationsConfigurationVariables {
		return v.Variables
	}).(GetMysqlConfigurationsConfigurationVariablesOutput)
}

type GetMysqlConfigurationsConfigurationArrayOutput struct{ *pulumi.OutputState }

func (GetMysqlConfigurationsConfigurationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetMysqlConfigurationsConfiguration)(nil)).Elem()
}

func (o GetMysqlConfigurationsConfigurationArrayOutput) ToGetMysqlConfigurationsConfigurationArrayOutput() GetMysqlConfigurationsConfigurationArrayOutput {
	return o
}

func (o GetMysqlConfigurationsConfigurationArrayOutput) ToGetMysqlConfigurationsConfigurationArrayOutputWithContext(ctx context.Context) GetMysqlConfigurationsConfigurationArrayOutput {
	return o
}

func (o GetMysqlConfigurationsConfigurationArrayOutput) Index(i pulumi.IntInput) GetMysqlConfigurationsConfigurationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetMysqlConfigurationsConfiguration {
		return vs[0].([]GetMysqlConfigurationsConfiguration)[vs[1].(int)]
	}).(GetMysqlConfigurationsConfigurationOutput)
}

type GetMysqlConfigurationsConfigurationVariables struct {
	// ("autocommit")
	Autocommit bool `pulumi:"autocommit"`
	// ("binlogExpireLogsSeconds") DEPRECATED -- variable should not be settable and will be ignored
	BinlogExpireLogsSeconds int `pulumi:"binlogExpireLogsSeconds"`
	// ("completionType")
	CompletionType string `pulumi:"completionType"`
	// ("connectTimeout")
	ConnectTimeout int `pulumi:"connectTimeout"`
	// ("cteMaxRecursionDepth")
	CteMaxRecursionDepth int `pulumi:"cteMaxRecursionDepth"`
	// ("defaultAuthenticationPlugin")
	DefaultAuthenticationPlugin string `pulumi:"defaultAuthenticationPlugin"`
	// ("foreignKeyChecks")
	ForeignKeyChecks bool `pulumi:"foreignKeyChecks"`
	// ("generatedRandomPasswordLength") DEPRECATED -- variable should not be settable and will be ignored
	GeneratedRandomPasswordLength int `pulumi:"generatedRandomPasswordLength"`
	// * EVENTUAL: Both RO and RW transactions do not wait for preceding transactions to be applied before executing. A RW transaction does not wait for other members to apply a transaction. This means that a transaction could be externalized on one member before the others. This also means that in the event of a primary failover, the new primary can accept new RO and RW transactions before the previous primary transactions are all applied. RO transactions could result in outdated values, RW transactions could result in a rollback due to conflicts.
	// * BEFORE_ON_PRIMARY_FAILOVER: New RO or RW transactions with a newly elected primary that is applying backlog from the old primary are held (not applied) until any backlog has been applied. This ensures that when a primary failover happens, intentionally or not, clients always see the latest value on the primary. This guarantees consistency, but means that clients must be able to handle the delay in the event that a backlog is being applied. Usually this delay should be minimal, but does depend on the size of the backlog.
	// * BEFORE: A RW transaction waits for all preceding transactions to complete before being applied. A RO transaction waits for all preceding transactions to complete before being executed. This ensures that this transaction reads the latest value by only affecting the latency of the transaction. This reduces the overhead of synchronization on every RW transaction, by ensuring synchronization is used only on RO transactions. This consistency level also includes the consistency guarantees provided by BEFORE_ON_PRIMARY_FAILOVER.
	// * AFTER: A RW transaction waits until its changes have been applied to all of the other members. This value has no effect on RO transactions. This mode ensures that when a transaction is committed on the local member, any subsequent transaction reads the written value or a more recent value on any group member. Use this mode with a group that is used for predominantly RO operations to ensure that applied RW transactions are applied everywhere once they commit. This could be used by your application to ensure that subsequent reads fetch the latest data which includes the latest writes. This reduces the overhead of synchronization on every RO transaction, by ensuring synchronization is used only on RW transactions. This consistency level also includes the consistency guarantees provided by BEFORE_ON_PRIMARY_FAILOVER.
	// * BEFORE_AND_AFTER: A RW transaction waits for 1) all preceding transactions to complete before being applied and 2) until its changes have been applied on other members. A RO transaction waits for all preceding transactions to complete before execution takes place. This consistency level also includes the consistency guarantees provided by BEFORE_ON_PRIMARY_FAILOVER.
	GroupReplicationConsistency string `pulumi:"groupReplicationConsistency"`
	// ("informationSchemaStatsExpiry")
	InformationSchemaStatsExpiry int `pulumi:"informationSchemaStatsExpiry"`
	// ("innodbBufferPoolInstances")
	InnodbBufferPoolInstances int `pulumi:"innodbBufferPoolInstances"`
	// ("innodbBufferPoolSize")
	InnodbBufferPoolSize string `pulumi:"innodbBufferPoolSize"`
	// ("innodbFtEnableStopword")
	InnodbFtEnableStopword bool `pulumi:"innodbFtEnableStopword"`
	// ("innodbFtMaxTokenSize")
	InnodbFtMaxTokenSize int `pulumi:"innodbFtMaxTokenSize"`
	// ("innodbFtMinTokenSize")
	InnodbFtMinTokenSize int `pulumi:"innodbFtMinTokenSize"`
	// ("innodbFtNumWordOptimize")
	InnodbFtNumWordOptimize int `pulumi:"innodbFtNumWordOptimize"`
	// ("innodbFtResultCacheLimit")
	InnodbFtResultCacheLimit int `pulumi:"innodbFtResultCacheLimit"`
	// ("innodbFtServerStopwordTable")
	InnodbFtServerStopwordTable string `pulumi:"innodbFtServerStopwordTable"`
	// ("innodbLockWaitTimeout")
	InnodbLockWaitTimeout int `pulumi:"innodbLockWaitTimeout"`
	// ("innodbMaxPurgeLag")
	InnodbMaxPurgeLag int `pulumi:"innodbMaxPurgeLag"`
	// ("innodbMaxPurgeLagDelay")
	InnodbMaxPurgeLagDelay int `pulumi:"innodbMaxPurgeLagDelay"`
	// ("localInfile")
	LocalInfile bool `pulumi:"localInfile"`
	// ("mandatoryRoles")
	MandatoryRoles string `pulumi:"mandatoryRoles"`
	// ("maxConnections")
	MaxConnections int `pulumi:"maxConnections"`
	// ("maxExecutionTime")
	MaxExecutionTime int `pulumi:"maxExecutionTime"`
	// ("maxPreparedStmtCount")
	MaxPreparedStmtCount int `pulumi:"maxPreparedStmtCount"`
	// ("mysqlFirewallMode")
	MysqlFirewallMode bool `pulumi:"mysqlFirewallMode"`
	// DEPRECATED -- typo of mysqlx_zstd_default_compression_level. variable will be ignored.
	MysqlZstdDefaultCompressionLevel int `pulumi:"mysqlZstdDefaultCompressionLevel"`
	// ("mysqlxConnectTimeout") DEPRECATED -- variable should not be settable and will be ignored
	MysqlxConnectTimeout int `pulumi:"mysqlxConnectTimeout"`
	// Set the default compression level for the deflate algorithm. ("mysqlxDeflateDefaultCompressionLevel")
	MysqlxDeflateDefaultCompressionLevel int `pulumi:"mysqlxDeflateDefaultCompressionLevel"`
	// Limit the upper bound of accepted compression levels for the deflate algorithm. ("mysqlxDeflateMaxClientCompressionLevel")
	MysqlxDeflateMaxClientCompressionLevel int `pulumi:"mysqlxDeflateMaxClientCompressionLevel"`
	// ("mysqlxDocumentIdUniquePrefix") DEPRECATED -- variable should not be settable and will be ignored
	MysqlxDocumentIdUniquePrefix int `pulumi:"mysqlxDocumentIdUniquePrefix"`
	// ("mysqlxEnableHelloNotice") DEPRECATED -- variable should not be settable and will be ignored
	MysqlxEnableHelloNotice bool `pulumi:"mysqlxEnableHelloNotice"`
	// ("mysqlxIdleWorkerThreadTimeout") DEPRECATED -- variable should not be settable and will be ignored
	MysqlxIdleWorkerThreadTimeout int `pulumi:"mysqlxIdleWorkerThreadTimeout"`
	// ("mysqlxInteractiveTimeout") DEPRECATED -- variable should not be settable and will be ignored
	MysqlxInteractiveTimeout int `pulumi:"mysqlxInteractiveTimeout"`
	// Set the default compression level for the lz4 algorithm. ("mysqlxLz4DefaultCompressionLevel")
	MysqlxLz4defaultCompressionLevel int `pulumi:"mysqlxLz4defaultCompressionLevel"`
	// Limit the upper bound of accepted compression levels for the lz4 algorithm. ("mysqlxLz4MaxClientCompressionLevel")
	MysqlxLz4maxClientCompressionLevel int `pulumi:"mysqlxLz4maxClientCompressionLevel"`
	// ("mysqlxMaxAllowedPacket") DEPRECATED -- variable should not be settable and will be ignored
	MysqlxMaxAllowedPacket int `pulumi:"mysqlxMaxAllowedPacket"`
	// ("mysqlxMinWorkerThreads") DEPRECATED -- variable should not be settable and will be ignored
	MysqlxMinWorkerThreads int `pulumi:"mysqlxMinWorkerThreads"`
	// ("mysqlxReadTimeout") DEPRECATED -- variable should not be settable and will be ignored
	MysqlxReadTimeout int `pulumi:"mysqlxReadTimeout"`
	// ("mysqlxWaitTimeout") DEPRECATED -- variable should not be settable and will be ignored
	MysqlxWaitTimeout int `pulumi:"mysqlxWaitTimeout"`
	// ("mysqlxWriteTimeout") DEPRECATED -- variable should not be settable and will be ignored
	MysqlxWriteTimeout int `pulumi:"mysqlxWriteTimeout"`
	// Set the default compression level for the zstd algorithm. ("mysqlxZstdDefaultCompressionLevel")
	MysqlxZstdDefaultCompressionLevel int `pulumi:"mysqlxZstdDefaultCompressionLevel"`
	// Limit the upper bound of accepted compression levels for the zstd algorithm. ("mysqlxZstdMaxClientCompressionLevel")
	MysqlxZstdMaxClientCompressionLevel int `pulumi:"mysqlxZstdMaxClientCompressionLevel"`
	// ("parserMaxMemSize")
	ParserMaxMemSize int `pulumi:"parserMaxMemSize"`
	// ("queryAllocBlockSize") DEPRECATED -- variable should not be settable and will be ignored
	QueryAllocBlockSize int `pulumi:"queryAllocBlockSize"`
	// ("queryPreallocSize") DEPRECATED -- variable should not be settable and will be ignored
	QueryPreallocSize int `pulumi:"queryPreallocSize"`
	// ("sqlMode")
	SqlMode string `pulumi:"sqlMode"`
	// ("sqlRequirePrimaryKey")
	SqlRequirePrimaryKey bool `pulumi:"sqlRequirePrimaryKey"`
	// ("sqlWarnings")
	SqlWarnings bool `pulumi:"sqlWarnings"`
	// ("transactionIsolation")
	TransactionIsolation string `pulumi:"transactionIsolation"`
}

// GetMysqlConfigurationsConfigurationVariablesInput is an input type that accepts GetMysqlConfigurationsConfigurationVariablesArgs and GetMysqlConfigurationsConfigurationVariablesOutput values.
// You can construct a concrete instance of `GetMysqlConfigurationsConfigurationVariablesInput` via:
//
//          GetMysqlConfigurationsConfigurationVariablesArgs{...}
type GetMysqlConfigurationsConfigurationVariablesInput interface {
	pulumi.Input

	ToGetMysqlConfigurationsConfigurationVariablesOutput() GetMysqlConfigurationsConfigurationVariablesOutput
	ToGetMysqlConfigurationsConfigurationVariablesOutputWithContext(context.Context) GetMysqlConfigurationsConfigurationVariablesOutput
}

type GetMysqlConfigurationsConfigurationVariablesArgs struct {
	// ("autocommit")
	Autocommit pulumi.BoolInput `pulumi:"autocommit"`
	// ("binlogExpireLogsSeconds") DEPRECATED -- variable should not be settable and will be ignored
	BinlogExpireLogsSeconds pulumi.IntInput `pulumi:"binlogExpireLogsSeconds"`
	// ("completionType")
	CompletionType pulumi.StringInput `pulumi:"completionType"`
	// ("connectTimeout")
	ConnectTimeout pulumi.IntInput `pulumi:"connectTimeout"`
	// ("cteMaxRecursionDepth")
	CteMaxRecursionDepth pulumi.IntInput `pulumi:"cteMaxRecursionDepth"`
	// ("defaultAuthenticationPlugin")
	DefaultAuthenticationPlugin pulumi.StringInput `pulumi:"defaultAuthenticationPlugin"`
	// ("foreignKeyChecks")
	ForeignKeyChecks pulumi.BoolInput `pulumi:"foreignKeyChecks"`
	// ("generatedRandomPasswordLength") DEPRECATED -- variable should not be settable and will be ignored
	GeneratedRandomPasswordLength pulumi.IntInput `pulumi:"generatedRandomPasswordLength"`
	// * EVENTUAL: Both RO and RW transactions do not wait for preceding transactions to be applied before executing. A RW transaction does not wait for other members to apply a transaction. This means that a transaction could be externalized on one member before the others. This also means that in the event of a primary failover, the new primary can accept new RO and RW transactions before the previous primary transactions are all applied. RO transactions could result in outdated values, RW transactions could result in a rollback due to conflicts.
	// * BEFORE_ON_PRIMARY_FAILOVER: New RO or RW transactions with a newly elected primary that is applying backlog from the old primary are held (not applied) until any backlog has been applied. This ensures that when a primary failover happens, intentionally or not, clients always see the latest value on the primary. This guarantees consistency, but means that clients must be able to handle the delay in the event that a backlog is being applied. Usually this delay should be minimal, but does depend on the size of the backlog.
	// * BEFORE: A RW transaction waits for all preceding transactions to complete before being applied. A RO transaction waits for all preceding transactions to complete before being executed. This ensures that this transaction reads the latest value by only affecting the latency of the transaction. This reduces the overhead of synchronization on every RW transaction, by ensuring synchronization is used only on RO transactions. This consistency level also includes the consistency guarantees provided by BEFORE_ON_PRIMARY_FAILOVER.
	// * AFTER: A RW transaction waits until its changes have been applied to all of the other members. This value has no effect on RO transactions. This mode ensures that when a transaction is committed on the local member, any subsequent transaction reads the written value or a more recent value on any group member. Use this mode with a group that is used for predominantly RO operations to ensure that applied RW transactions are applied everywhere once they commit. This could be used by your application to ensure that subsequent reads fetch the latest data which includes the latest writes. This reduces the overhead of synchronization on every RO transaction, by ensuring synchronization is used only on RW transactions. This consistency level also includes the consistency guarantees provided by BEFORE_ON_PRIMARY_FAILOVER.
	// * BEFORE_AND_AFTER: A RW transaction waits for 1) all preceding transactions to complete before being applied and 2) until its changes have been applied on other members. A RO transaction waits for all preceding transactions to complete before execution takes place. This consistency level also includes the consistency guarantees provided by BEFORE_ON_PRIMARY_FAILOVER.
	GroupReplicationConsistency pulumi.StringInput `pulumi:"groupReplicationConsistency"`
	// ("informationSchemaStatsExpiry")
	InformationSchemaStatsExpiry pulumi.IntInput `pulumi:"informationSchemaStatsExpiry"`
	// ("innodbBufferPoolInstances")
	InnodbBufferPoolInstances pulumi.IntInput `pulumi:"innodbBufferPoolInstances"`
	// ("innodbBufferPoolSize")
	InnodbBufferPoolSize pulumi.StringInput `pulumi:"innodbBufferPoolSize"`
	// ("innodbFtEnableStopword")
	InnodbFtEnableStopword pulumi.BoolInput `pulumi:"innodbFtEnableStopword"`
	// ("innodbFtMaxTokenSize")
	InnodbFtMaxTokenSize pulumi.IntInput `pulumi:"innodbFtMaxTokenSize"`
	// ("innodbFtMinTokenSize")
	InnodbFtMinTokenSize pulumi.IntInput `pulumi:"innodbFtMinTokenSize"`
	// ("innodbFtNumWordOptimize")
	InnodbFtNumWordOptimize pulumi.IntInput `pulumi:"innodbFtNumWordOptimize"`
	// ("innodbFtResultCacheLimit")
	InnodbFtResultCacheLimit pulumi.IntInput `pulumi:"innodbFtResultCacheLimit"`
	// ("innodbFtServerStopwordTable")
	InnodbFtServerStopwordTable pulumi.StringInput `pulumi:"innodbFtServerStopwordTable"`
	// ("innodbLockWaitTimeout")
	InnodbLockWaitTimeout pulumi.IntInput `pulumi:"innodbLockWaitTimeout"`
	// ("innodbMaxPurgeLag")
	InnodbMaxPurgeLag pulumi.IntInput `pulumi:"innodbMaxPurgeLag"`
	// ("innodbMaxPurgeLagDelay")
	InnodbMaxPurgeLagDelay pulumi.IntInput `pulumi:"innodbMaxPurgeLagDelay"`
	// ("localInfile")
	LocalInfile pulumi.BoolInput `pulumi:"localInfile"`
	// ("mandatoryRoles")
	MandatoryRoles pulumi.StringInput `pulumi:"mandatoryRoles"`
	// ("maxConnections")
	MaxConnections pulumi.IntInput `pulumi:"maxConnections"`
	// ("maxExecutionTime")
	MaxExecutionTime pulumi.IntInput `pulumi:"maxExecutionTime"`
	// ("maxPreparedStmtCount")
	MaxPreparedStmtCount pulumi.IntInput `pulumi:"maxPreparedStmtCount"`
	// ("mysqlFirewallMode")
	MysqlFirewallMode pulumi.BoolInput `pulumi:"mysqlFirewallMode"`
	// DEPRECATED -- typo of mysqlx_zstd_default_compression_level. variable will be ignored.
	MysqlZstdDefaultCompressionLevel pulumi.IntInput `pulumi:"mysqlZstdDefaultCompressionLevel"`
	// ("mysqlxConnectTimeout") DEPRECATED -- variable should not be settable and will be ignored
	MysqlxConnectTimeout pulumi.IntInput `pulumi:"mysqlxConnectTimeout"`
	// Set the default compression level for the deflate algorithm. ("mysqlxDeflateDefaultCompressionLevel")
	MysqlxDeflateDefaultCompressionLevel pulumi.IntInput `pulumi:"mysqlxDeflateDefaultCompressionLevel"`
	// Limit the upper bound of accepted compression levels for the deflate algorithm. ("mysqlxDeflateMaxClientCompressionLevel")
	MysqlxDeflateMaxClientCompressionLevel pulumi.IntInput `pulumi:"mysqlxDeflateMaxClientCompressionLevel"`
	// ("mysqlxDocumentIdUniquePrefix") DEPRECATED -- variable should not be settable and will be ignored
	MysqlxDocumentIdUniquePrefix pulumi.IntInput `pulumi:"mysqlxDocumentIdUniquePrefix"`
	// ("mysqlxEnableHelloNotice") DEPRECATED -- variable should not be settable and will be ignored
	MysqlxEnableHelloNotice pulumi.BoolInput `pulumi:"mysqlxEnableHelloNotice"`
	// ("mysqlxIdleWorkerThreadTimeout") DEPRECATED -- variable should not be settable and will be ignored
	MysqlxIdleWorkerThreadTimeout pulumi.IntInput `pulumi:"mysqlxIdleWorkerThreadTimeout"`
	// ("mysqlxInteractiveTimeout") DEPRECATED -- variable should not be settable and will be ignored
	MysqlxInteractiveTimeout pulumi.IntInput `pulumi:"mysqlxInteractiveTimeout"`
	// Set the default compression level for the lz4 algorithm. ("mysqlxLz4DefaultCompressionLevel")
	MysqlxLz4defaultCompressionLevel pulumi.IntInput `pulumi:"mysqlxLz4defaultCompressionLevel"`
	// Limit the upper bound of accepted compression levels for the lz4 algorithm. ("mysqlxLz4MaxClientCompressionLevel")
	MysqlxLz4maxClientCompressionLevel pulumi.IntInput `pulumi:"mysqlxLz4maxClientCompressionLevel"`
	// ("mysqlxMaxAllowedPacket") DEPRECATED -- variable should not be settable and will be ignored
	MysqlxMaxAllowedPacket pulumi.IntInput `pulumi:"mysqlxMaxAllowedPacket"`
	// ("mysqlxMinWorkerThreads") DEPRECATED -- variable should not be settable and will be ignored
	MysqlxMinWorkerThreads pulumi.IntInput `pulumi:"mysqlxMinWorkerThreads"`
	// ("mysqlxReadTimeout") DEPRECATED -- variable should not be settable and will be ignored
	MysqlxReadTimeout pulumi.IntInput `pulumi:"mysqlxReadTimeout"`
	// ("mysqlxWaitTimeout") DEPRECATED -- variable should not be settable and will be ignored
	MysqlxWaitTimeout pulumi.IntInput `pulumi:"mysqlxWaitTimeout"`
	// ("mysqlxWriteTimeout") DEPRECATED -- variable should not be settable and will be ignored
	MysqlxWriteTimeout pulumi.IntInput `pulumi:"mysqlxWriteTimeout"`
	// Set the default compression level for the zstd algorithm. ("mysqlxZstdDefaultCompressionLevel")
	MysqlxZstdDefaultCompressionLevel pulumi.IntInput `pulumi:"mysqlxZstdDefaultCompressionLevel"`
	// Limit the upper bound of accepted compression levels for the zstd algorithm. ("mysqlxZstdMaxClientCompressionLevel")
	MysqlxZstdMaxClientCompressionLevel pulumi.IntInput `pulumi:"mysqlxZstdMaxClientCompressionLevel"`
	// ("parserMaxMemSize")
	ParserMaxMemSize pulumi.IntInput `pulumi:"parserMaxMemSize"`
	// ("queryAllocBlockSize") DEPRECATED -- variable should not be settable and will be ignored
	QueryAllocBlockSize pulumi.IntInput `pulumi:"queryAllocBlockSize"`
	// ("queryPreallocSize") DEPRECATED -- variable should not be settable and will be ignored
	QueryPreallocSize pulumi.IntInput `pulumi:"queryPreallocSize"`
	// ("sqlMode")
	SqlMode pulumi.StringInput `pulumi:"sqlMode"`
	// ("sqlRequirePrimaryKey")
	SqlRequirePrimaryKey pulumi.BoolInput `pulumi:"sqlRequirePrimaryKey"`
	// ("sqlWarnings")
	SqlWarnings pulumi.BoolInput `pulumi:"sqlWarnings"`
	// ("transactionIsolation")
	TransactionIsolation pulumi.StringInput `pulumi:"transactionIsolation"`
}

func (GetMysqlConfigurationsConfigurationVariablesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetMysqlConfigurationsConfigurationVariables)(nil)).Elem()
}

func (i GetMysqlConfigurationsConfigurationVariablesArgs) ToGetMysqlConfigurationsConfigurationVariablesOutput() GetMysqlConfigurationsConfigurationVariablesOutput {
	return i.ToGetMysqlConfigurationsConfigurationVariablesOutputWithContext(context.Background())
}

func (i GetMysqlConfigurationsConfigurationVariablesArgs) ToGetMysqlConfigurationsConfigurationVariablesOutputWithContext(ctx context.Context) GetMysqlConfigurationsConfigurationVariablesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetMysqlConfigurationsConfigurationVariablesOutput)
}

type GetMysqlConfigurationsConfigurationVariablesOutput struct{ *pulumi.OutputState }

func (GetMysqlConfigurationsConfigurationVariablesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetMysqlConfigurationsConfigurationVariables)(nil)).Elem()
}

func (o GetMysqlConfigurationsConfigurationVariablesOutput) ToGetMysqlConfigurationsConfigurationVariablesOutput() GetMysqlConfigurationsConfigurationVariablesOutput {
	return o
}

func (o GetMysqlConfigurationsConfigurationVariablesOutput) ToGetMysqlConfigurationsConfigurationVariablesOutputWithContext(ctx context.Context) GetMysqlConfigurationsConfigurationVariablesOutput {
	return o
}

// ("autocommit")
func (o GetMysqlConfigurationsConfigurationVariablesOutput) Autocommit() pulumi.BoolOutput {
	return o.ApplyT(func(v GetMysqlConfigurationsConfigurationVariables) bool { return v.Autocommit }).(pulumi.BoolOutput)
}

// ("binlogExpireLogsSeconds") DEPRECATED -- variable should not be settable and will be ignored
func (o GetMysqlConfigurationsConfigurationVariablesOutput) BinlogExpireLogsSeconds() pulumi.IntOutput {
	return o.ApplyT(func(v GetMysqlConfigurationsConfigurationVariables) int { return v.BinlogExpireLogsSeconds }).(pulumi.IntOutput)
}

// ("completionType")
func (o GetMysqlConfigurationsConfigurationVariablesOutput) CompletionType() pulumi.StringOutput {
	return o.ApplyT(func(v GetMysqlConfigurationsConfigurationVariables) string { return v.CompletionType }).(pulumi.StringOutput)
}

// ("connectTimeout")
func (o GetMysqlConfigurationsConfigurationVariablesOutput) ConnectTimeout() pulumi.IntOutput {
	return o.ApplyT(func(v GetMysqlConfigurationsConfigurationVariables) int { return v.ConnectTimeout }).(pulumi.IntOutput)
}

// ("cteMaxRecursionDepth")
func (o GetMysqlConfigurationsConfigurationVariablesOutput) CteMaxRecursionDepth() pulumi.IntOutput {
	return o.ApplyT(func(v GetMysqlConfigurationsConfigurationVariables) int { return v.CteMaxRecursionDepth }).(pulumi.IntOutput)
}

// ("defaultAuthenticationPlugin")
func (o GetMysqlConfigurationsConfigurationVariablesOutput) DefaultAuthenticationPlugin() pulumi.StringOutput {
	return o.ApplyT(func(v GetMysqlConfigurationsConfigurationVariables) string { return v.DefaultAuthenticationPlugin }).(pulumi.StringOutput)
}

// ("foreignKeyChecks")
func (o GetMysqlConfigurationsConfigurationVariablesOutput) ForeignKeyChecks() pulumi.BoolOutput {
	return o.ApplyT(func(v GetMysqlConfigurationsConfigurationVariables) bool { return v.ForeignKeyChecks }).(pulumi.BoolOutput)
}

// ("generatedRandomPasswordLength") DEPRECATED -- variable should not be settable and will be ignored
func (o GetMysqlConfigurationsConfigurationVariablesOutput) GeneratedRandomPasswordLength() pulumi.IntOutput {
	return o.ApplyT(func(v GetMysqlConfigurationsConfigurationVariables) int { return v.GeneratedRandomPasswordLength }).(pulumi.IntOutput)
}

// * EVENTUAL: Both RO and RW transactions do not wait for preceding transactions to be applied before executing. A RW transaction does not wait for other members to apply a transaction. This means that a transaction could be externalized on one member before the others. This also means that in the event of a primary failover, the new primary can accept new RO and RW transactions before the previous primary transactions are all applied. RO transactions could result in outdated values, RW transactions could result in a rollback due to conflicts.
// * BEFORE_ON_PRIMARY_FAILOVER: New RO or RW transactions with a newly elected primary that is applying backlog from the old primary are held (not applied) until any backlog has been applied. This ensures that when a primary failover happens, intentionally or not, clients always see the latest value on the primary. This guarantees consistency, but means that clients must be able to handle the delay in the event that a backlog is being applied. Usually this delay should be minimal, but does depend on the size of the backlog.
// * BEFORE: A RW transaction waits for all preceding transactions to complete before being applied. A RO transaction waits for all preceding transactions to complete before being executed. This ensures that this transaction reads the latest value by only affecting the latency of the transaction. This reduces the overhead of synchronization on every RW transaction, by ensuring synchronization is used only on RO transactions. This consistency level also includes the consistency guarantees provided by BEFORE_ON_PRIMARY_FAILOVER.
// * AFTER: A RW transaction waits until its changes have been applied to all of the other members. This value has no effect on RO transactions. This mode ensures that when a transaction is committed on the local member, any subsequent transaction reads the written value or a more recent value on any group member. Use this mode with a group that is used for predominantly RO operations to ensure that applied RW transactions are applied everywhere once they commit. This could be used by your application to ensure that subsequent reads fetch the latest data which includes the latest writes. This reduces the overhead of synchronization on every RO transaction, by ensuring synchronization is used only on RW transactions. This consistency level also includes the consistency guarantees provided by BEFORE_ON_PRIMARY_FAILOVER.
// * BEFORE_AND_AFTER: A RW transaction waits for 1) all preceding transactions to complete before being applied and 2) until its changes have been applied on other members. A RO transaction waits for all preceding transactions to complete before execution takes place. This consistency level also includes the consistency guarantees provided by BEFORE_ON_PRIMARY_FAILOVER.
func (o GetMysqlConfigurationsConfigurationVariablesOutput) GroupReplicationConsistency() pulumi.StringOutput {
	return o.ApplyT(func(v GetMysqlConfigurationsConfigurationVariables) string { return v.GroupReplicationConsistency }).(pulumi.StringOutput)
}

// ("informationSchemaStatsExpiry")
func (o GetMysqlConfigurationsConfigurationVariablesOutput) InformationSchemaStatsExpiry() pulumi.IntOutput {
	return o.ApplyT(func(v GetMysqlConfigurationsConfigurationVariables) int { return v.InformationSchemaStatsExpiry }).(pulumi.IntOutput)
}

// ("innodbBufferPoolInstances")
func (o GetMysqlConfigurationsConfigurationVariablesOutput) InnodbBufferPoolInstances() pulumi.IntOutput {
	return o.ApplyT(func(v GetMysqlConfigurationsConfigurationVariables) int { return v.InnodbBufferPoolInstances }).(pulumi.IntOutput)
}

// ("innodbBufferPoolSize")
func (o GetMysqlConfigurationsConfigurationVariablesOutput) InnodbBufferPoolSize() pulumi.StringOutput {
	return o.ApplyT(func(v GetMysqlConfigurationsConfigurationVariables) string { return v.InnodbBufferPoolSize }).(pulumi.StringOutput)
}

// ("innodbFtEnableStopword")
func (o GetMysqlConfigurationsConfigurationVariablesOutput) InnodbFtEnableStopword() pulumi.BoolOutput {
	return o.ApplyT(func(v GetMysqlConfigurationsConfigurationVariables) bool { return v.InnodbFtEnableStopword }).(pulumi.BoolOutput)
}

// ("innodbFtMaxTokenSize")
func (o GetMysqlConfigurationsConfigurationVariablesOutput) InnodbFtMaxTokenSize() pulumi.IntOutput {
	return o.ApplyT(func(v GetMysqlConfigurationsConfigurationVariables) int { return v.InnodbFtMaxTokenSize }).(pulumi.IntOutput)
}

// ("innodbFtMinTokenSize")
func (o GetMysqlConfigurationsConfigurationVariablesOutput) InnodbFtMinTokenSize() pulumi.IntOutput {
	return o.ApplyT(func(v GetMysqlConfigurationsConfigurationVariables) int { return v.InnodbFtMinTokenSize }).(pulumi.IntOutput)
}

// ("innodbFtNumWordOptimize")
func (o GetMysqlConfigurationsConfigurationVariablesOutput) InnodbFtNumWordOptimize() pulumi.IntOutput {
	return o.ApplyT(func(v GetMysqlConfigurationsConfigurationVariables) int { return v.InnodbFtNumWordOptimize }).(pulumi.IntOutput)
}

// ("innodbFtResultCacheLimit")
func (o GetMysqlConfigurationsConfigurationVariablesOutput) InnodbFtResultCacheLimit() pulumi.IntOutput {
	return o.ApplyT(func(v GetMysqlConfigurationsConfigurationVariables) int { return v.InnodbFtResultCacheLimit }).(pulumi.IntOutput)
}

// ("innodbFtServerStopwordTable")
func (o GetMysqlConfigurationsConfigurationVariablesOutput) InnodbFtServerStopwordTable() pulumi.StringOutput {
	return o.ApplyT(func(v GetMysqlConfigurationsConfigurationVariables) string { return v.InnodbFtServerStopwordTable }).(pulumi.StringOutput)
}

// ("innodbLockWaitTimeout")
func (o GetMysqlConfigurationsConfigurationVariablesOutput) InnodbLockWaitTimeout() pulumi.IntOutput {
	return o.ApplyT(func(v GetMysqlConfigurationsConfigurationVariables) int { return v.InnodbLockWaitTimeout }).(pulumi.IntOutput)
}

// ("innodbMaxPurgeLag")
func (o GetMysqlConfigurationsConfigurationVariablesOutput) InnodbMaxPurgeLag() pulumi.IntOutput {
	return o.ApplyT(func(v GetMysqlConfigurationsConfigurationVariables) int { return v.InnodbMaxPurgeLag }).(pulumi.IntOutput)
}

// ("innodbMaxPurgeLagDelay")
func (o GetMysqlConfigurationsConfigurationVariablesOutput) InnodbMaxPurgeLagDelay() pulumi.IntOutput {
	return o.ApplyT(func(v GetMysqlConfigurationsConfigurationVariables) int { return v.InnodbMaxPurgeLagDelay }).(pulumi.IntOutput)
}

// ("localInfile")
func (o GetMysqlConfigurationsConfigurationVariablesOutput) LocalInfile() pulumi.BoolOutput {
	return o.ApplyT(func(v GetMysqlConfigurationsConfigurationVariables) bool { return v.LocalInfile }).(pulumi.BoolOutput)
}

// ("mandatoryRoles")
func (o GetMysqlConfigurationsConfigurationVariablesOutput) MandatoryRoles() pulumi.StringOutput {
	return o.ApplyT(func(v GetMysqlConfigurationsConfigurationVariables) string { return v.MandatoryRoles }).(pulumi.StringOutput)
}

// ("maxConnections")
func (o GetMysqlConfigurationsConfigurationVariablesOutput) MaxConnections() pulumi.IntOutput {
	return o.ApplyT(func(v GetMysqlConfigurationsConfigurationVariables) int { return v.MaxConnections }).(pulumi.IntOutput)
}

// ("maxExecutionTime")
func (o GetMysqlConfigurationsConfigurationVariablesOutput) MaxExecutionTime() pulumi.IntOutput {
	return o.ApplyT(func(v GetMysqlConfigurationsConfigurationVariables) int { return v.MaxExecutionTime }).(pulumi.IntOutput)
}

// ("maxPreparedStmtCount")
func (o GetMysqlConfigurationsConfigurationVariablesOutput) MaxPreparedStmtCount() pulumi.IntOutput {
	return o.ApplyT(func(v GetMysqlConfigurationsConfigurationVariables) int { return v.MaxPreparedStmtCount }).(pulumi.IntOutput)
}

// ("mysqlFirewallMode")
func (o GetMysqlConfigurationsConfigurationVariablesOutput) MysqlFirewallMode() pulumi.BoolOutput {
	return o.ApplyT(func(v GetMysqlConfigurationsConfigurationVariables) bool { return v.MysqlFirewallMode }).(pulumi.BoolOutput)
}

// DEPRECATED -- typo of mysqlx_zstd_default_compression_level. variable will be ignored.
func (o GetMysqlConfigurationsConfigurationVariablesOutput) MysqlZstdDefaultCompressionLevel() pulumi.IntOutput {
	return o.ApplyT(func(v GetMysqlConfigurationsConfigurationVariables) int { return v.MysqlZstdDefaultCompressionLevel }).(pulumi.IntOutput)
}

// ("mysqlxConnectTimeout") DEPRECATED -- variable should not be settable and will be ignored
func (o GetMysqlConfigurationsConfigurationVariablesOutput) MysqlxConnectTimeout() pulumi.IntOutput {
	return o.ApplyT(func(v GetMysqlConfigurationsConfigurationVariables) int { return v.MysqlxConnectTimeout }).(pulumi.IntOutput)
}

// Set the default compression level for the deflate algorithm. ("mysqlxDeflateDefaultCompressionLevel")
func (o GetMysqlConfigurationsConfigurationVariablesOutput) MysqlxDeflateDefaultCompressionLevel() pulumi.IntOutput {
	return o.ApplyT(func(v GetMysqlConfigurationsConfigurationVariables) int {
		return v.MysqlxDeflateDefaultCompressionLevel
	}).(pulumi.IntOutput)
}

// Limit the upper bound of accepted compression levels for the deflate algorithm. ("mysqlxDeflateMaxClientCompressionLevel")
func (o GetMysqlConfigurationsConfigurationVariablesOutput) MysqlxDeflateMaxClientCompressionLevel() pulumi.IntOutput {
	return o.ApplyT(func(v GetMysqlConfigurationsConfigurationVariables) int {
		return v.MysqlxDeflateMaxClientCompressionLevel
	}).(pulumi.IntOutput)
}

// ("mysqlxDocumentIdUniquePrefix") DEPRECATED -- variable should not be settable and will be ignored
func (o GetMysqlConfigurationsConfigurationVariablesOutput) MysqlxDocumentIdUniquePrefix() pulumi.IntOutput {
	return o.ApplyT(func(v GetMysqlConfigurationsConfigurationVariables) int { return v.MysqlxDocumentIdUniquePrefix }).(pulumi.IntOutput)
}

// ("mysqlxEnableHelloNotice") DEPRECATED -- variable should not be settable and will be ignored
func (o GetMysqlConfigurationsConfigurationVariablesOutput) MysqlxEnableHelloNotice() pulumi.BoolOutput {
	return o.ApplyT(func(v GetMysqlConfigurationsConfigurationVariables) bool { return v.MysqlxEnableHelloNotice }).(pulumi.BoolOutput)
}

// ("mysqlxIdleWorkerThreadTimeout") DEPRECATED -- variable should not be settable and will be ignored
func (o GetMysqlConfigurationsConfigurationVariablesOutput) MysqlxIdleWorkerThreadTimeout() pulumi.IntOutput {
	return o.ApplyT(func(v GetMysqlConfigurationsConfigurationVariables) int { return v.MysqlxIdleWorkerThreadTimeout }).(pulumi.IntOutput)
}

// ("mysqlxInteractiveTimeout") DEPRECATED -- variable should not be settable and will be ignored
func (o GetMysqlConfigurationsConfigurationVariablesOutput) MysqlxInteractiveTimeout() pulumi.IntOutput {
	return o.ApplyT(func(v GetMysqlConfigurationsConfigurationVariables) int { return v.MysqlxInteractiveTimeout }).(pulumi.IntOutput)
}

// Set the default compression level for the lz4 algorithm. ("mysqlxLz4DefaultCompressionLevel")
func (o GetMysqlConfigurationsConfigurationVariablesOutput) MysqlxLz4defaultCompressionLevel() pulumi.IntOutput {
	return o.ApplyT(func(v GetMysqlConfigurationsConfigurationVariables) int { return v.MysqlxLz4defaultCompressionLevel }).(pulumi.IntOutput)
}

// Limit the upper bound of accepted compression levels for the lz4 algorithm. ("mysqlxLz4MaxClientCompressionLevel")
func (o GetMysqlConfigurationsConfigurationVariablesOutput) MysqlxLz4maxClientCompressionLevel() pulumi.IntOutput {
	return o.ApplyT(func(v GetMysqlConfigurationsConfigurationVariables) int { return v.MysqlxLz4maxClientCompressionLevel }).(pulumi.IntOutput)
}

// ("mysqlxMaxAllowedPacket") DEPRECATED -- variable should not be settable and will be ignored
func (o GetMysqlConfigurationsConfigurationVariablesOutput) MysqlxMaxAllowedPacket() pulumi.IntOutput {
	return o.ApplyT(func(v GetMysqlConfigurationsConfigurationVariables) int { return v.MysqlxMaxAllowedPacket }).(pulumi.IntOutput)
}

// ("mysqlxMinWorkerThreads") DEPRECATED -- variable should not be settable and will be ignored
func (o GetMysqlConfigurationsConfigurationVariablesOutput) MysqlxMinWorkerThreads() pulumi.IntOutput {
	return o.ApplyT(func(v GetMysqlConfigurationsConfigurationVariables) int { return v.MysqlxMinWorkerThreads }).(pulumi.IntOutput)
}

// ("mysqlxReadTimeout") DEPRECATED -- variable should not be settable and will be ignored
func (o GetMysqlConfigurationsConfigurationVariablesOutput) MysqlxReadTimeout() pulumi.IntOutput {
	return o.ApplyT(func(v GetMysqlConfigurationsConfigurationVariables) int { return v.MysqlxReadTimeout }).(pulumi.IntOutput)
}

// ("mysqlxWaitTimeout") DEPRECATED -- variable should not be settable and will be ignored
func (o GetMysqlConfigurationsConfigurationVariablesOutput) MysqlxWaitTimeout() pulumi.IntOutput {
	return o.ApplyT(func(v GetMysqlConfigurationsConfigurationVariables) int { return v.MysqlxWaitTimeout }).(pulumi.IntOutput)
}

// ("mysqlxWriteTimeout") DEPRECATED -- variable should not be settable and will be ignored
func (o GetMysqlConfigurationsConfigurationVariablesOutput) MysqlxWriteTimeout() pulumi.IntOutput {
	return o.ApplyT(func(v GetMysqlConfigurationsConfigurationVariables) int { return v.MysqlxWriteTimeout }).(pulumi.IntOutput)
}

// Set the default compression level for the zstd algorithm. ("mysqlxZstdDefaultCompressionLevel")
func (o GetMysqlConfigurationsConfigurationVariablesOutput) MysqlxZstdDefaultCompressionLevel() pulumi.IntOutput {
	return o.ApplyT(func(v GetMysqlConfigurationsConfigurationVariables) int { return v.MysqlxZstdDefaultCompressionLevel }).(pulumi.IntOutput)
}

// Limit the upper bound of accepted compression levels for the zstd algorithm. ("mysqlxZstdMaxClientCompressionLevel")
func (o GetMysqlConfigurationsConfigurationVariablesOutput) MysqlxZstdMaxClientCompressionLevel() pulumi.IntOutput {
	return o.ApplyT(func(v GetMysqlConfigurationsConfigurationVariables) int { return v.MysqlxZstdMaxClientCompressionLevel }).(pulumi.IntOutput)
}

// ("parserMaxMemSize")
func (o GetMysqlConfigurationsConfigurationVariablesOutput) ParserMaxMemSize() pulumi.IntOutput {
	return o.ApplyT(func(v GetMysqlConfigurationsConfigurationVariables) int { return v.ParserMaxMemSize }).(pulumi.IntOutput)
}

// ("queryAllocBlockSize") DEPRECATED -- variable should not be settable and will be ignored
func (o GetMysqlConfigurationsConfigurationVariablesOutput) QueryAllocBlockSize() pulumi.IntOutput {
	return o.ApplyT(func(v GetMysqlConfigurationsConfigurationVariables) int { return v.QueryAllocBlockSize }).(pulumi.IntOutput)
}

// ("queryPreallocSize") DEPRECATED -- variable should not be settable and will be ignored
func (o GetMysqlConfigurationsConfigurationVariablesOutput) QueryPreallocSize() pulumi.IntOutput {
	return o.ApplyT(func(v GetMysqlConfigurationsConfigurationVariables) int { return v.QueryPreallocSize }).(pulumi.IntOutput)
}

// ("sqlMode")
func (o GetMysqlConfigurationsConfigurationVariablesOutput) SqlMode() pulumi.StringOutput {
	return o.ApplyT(func(v GetMysqlConfigurationsConfigurationVariables) string { return v.SqlMode }).(pulumi.StringOutput)
}

// ("sqlRequirePrimaryKey")
func (o GetMysqlConfigurationsConfigurationVariablesOutput) SqlRequirePrimaryKey() pulumi.BoolOutput {
	return o.ApplyT(func(v GetMysqlConfigurationsConfigurationVariables) bool { return v.SqlRequirePrimaryKey }).(pulumi.BoolOutput)
}

// ("sqlWarnings")
func (o GetMysqlConfigurationsConfigurationVariablesOutput) SqlWarnings() pulumi.BoolOutput {
	return o.ApplyT(func(v GetMysqlConfigurationsConfigurationVariables) bool { return v.SqlWarnings }).(pulumi.BoolOutput)
}

// ("transactionIsolation")
func (o GetMysqlConfigurationsConfigurationVariablesOutput) TransactionIsolation() pulumi.StringOutput {
	return o.ApplyT(func(v GetMysqlConfigurationsConfigurationVariables) string { return v.TransactionIsolation }).(pulumi.StringOutput)
}

type GetMysqlConfigurationsFilter struct {
	Name   string   `pulumi:"name"`
	Regex  *bool    `pulumi:"regex"`
	Values []string `pulumi:"values"`
}

// GetMysqlConfigurationsFilterInput is an input type that accepts GetMysqlConfigurationsFilterArgs and GetMysqlConfigurationsFilterOutput values.
// You can construct a concrete instance of `GetMysqlConfigurationsFilterInput` via:
//
//          GetMysqlConfigurationsFilterArgs{...}
type GetMysqlConfigurationsFilterInput interface {
	pulumi.Input

	ToGetMysqlConfigurationsFilterOutput() GetMysqlConfigurationsFilterOutput
	ToGetMysqlConfigurationsFilterOutputWithContext(context.Context) GetMysqlConfigurationsFilterOutput
}

type GetMysqlConfigurationsFilterArgs struct {
	Name   pulumi.StringInput      `pulumi:"name"`
	Regex  pulumi.BoolPtrInput     `pulumi:"regex"`
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (GetMysqlConfigurationsFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetMysqlConfigurationsFilter)(nil)).Elem()
}

func (i GetMysqlConfigurationsFilterArgs) ToGetMysqlConfigurationsFilterOutput() GetMysqlConfigurationsFilterOutput {
	return i.ToGetMysqlConfigurationsFilterOutputWithContext(context.Background())
}

func (i GetMysqlConfigurationsFilterArgs) ToGetMysqlConfigurationsFilterOutputWithContext(ctx context.Context) GetMysqlConfigurationsFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetMysqlConfigurationsFilterOutput)
}

// GetMysqlConfigurationsFilterArrayInput is an input type that accepts GetMysqlConfigurationsFilterArray and GetMysqlConfigurationsFilterArrayOutput values.
// You can construct a concrete instance of `GetMysqlConfigurationsFilterArrayInput` via:
//
//          GetMysqlConfigurationsFilterArray{ GetMysqlConfigurationsFilterArgs{...} }
type GetMysqlConfigurationsFilterArrayInput interface {
	pulumi.Input

	ToGetMysqlConfigurationsFilterArrayOutput() GetMysqlConfigurationsFilterArrayOutput
	ToGetMysqlConfigurationsFilterArrayOutputWithContext(context.Context) GetMysqlConfigurationsFilterArrayOutput
}

type GetMysqlConfigurationsFilterArray []GetMysqlConfigurationsFilterInput

func (GetMysqlConfigurationsFilterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetMysqlConfigurationsFilter)(nil)).Elem()
}

func (i GetMysqlConfigurationsFilterArray) ToGetMysqlConfigurationsFilterArrayOutput() GetMysqlConfigurationsFilterArrayOutput {
	return i.ToGetMysqlConfigurationsFilterArrayOutputWithContext(context.Background())
}

func (i GetMysqlConfigurationsFilterArray) ToGetMysqlConfigurationsFilterArrayOutputWithContext(ctx context.Context) GetMysqlConfigurationsFilterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetMysqlConfigurationsFilterArrayOutput)
}

type GetMysqlConfigurationsFilterOutput struct{ *pulumi.OutputState }

func (GetMysqlConfigurationsFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetMysqlConfigurationsFilter)(nil)).Elem()
}

func (o GetMysqlConfigurationsFilterOutput) ToGetMysqlConfigurationsFilterOutput() GetMysqlConfigurationsFilterOutput {
	return o
}

func (o GetMysqlConfigurationsFilterOutput) ToGetMysqlConfigurationsFilterOutputWithContext(ctx context.Context) GetMysqlConfigurationsFilterOutput {
	return o
}

func (o GetMysqlConfigurationsFilterOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetMysqlConfigurationsFilter) string { return v.Name }).(pulumi.StringOutput)
}

func (o GetMysqlConfigurationsFilterOutput) Regex() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetMysqlConfigurationsFilter) *bool { return v.Regex }).(pulumi.BoolPtrOutput)
}

func (o GetMysqlConfigurationsFilterOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetMysqlConfigurationsFilter) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type GetMysqlConfigurationsFilterArrayOutput struct{ *pulumi.OutputState }

func (GetMysqlConfigurationsFilterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetMysqlConfigurationsFilter)(nil)).Elem()
}

func (o GetMysqlConfigurationsFilterArrayOutput) ToGetMysqlConfigurationsFilterArrayOutput() GetMysqlConfigurationsFilterArrayOutput {
	return o
}

func (o GetMysqlConfigurationsFilterArrayOutput) ToGetMysqlConfigurationsFilterArrayOutputWithContext(ctx context.Context) GetMysqlConfigurationsFilterArrayOutput {
	return o
}

func (o GetMysqlConfigurationsFilterArrayOutput) Index(i pulumi.IntInput) GetMysqlConfigurationsFilterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetMysqlConfigurationsFilter {
		return vs[0].([]GetMysqlConfigurationsFilter)[vs[1].(int)]
	}).(GetMysqlConfigurationsFilterOutput)
}

type GetMysqlDbSystemAnalyticsCluster struct {
	// The number of analytics-processing compute instances, of the specified shape, in the HeatWave cluster.
	ClusterSize int `pulumi:"clusterSize"`
	// The shape of the primary instances of the DB System. The shape determines resources allocated to a DB System - CPU cores and memory for VM shapes; CPU cores, memory and storage for non-VM (or bare metal) shapes. To get a list of shapes, use (the [ListShapes](https://docs.cloud.oracle.com/iaas/api/#/en/mysql/20181021/ShapeSummary/ListShapes) operation.
	ShapeName string `pulumi:"shapeName"`
	// The current state of the DB System.
	State string `pulumi:"state"`
	// The date and time the DB System was created.
	TimeCreated string `pulumi:"timeCreated"`
	// The time the DB System was last updated.
	TimeUpdated string `pulumi:"timeUpdated"`
}

// GetMysqlDbSystemAnalyticsClusterInput is an input type that accepts GetMysqlDbSystemAnalyticsClusterArgs and GetMysqlDbSystemAnalyticsClusterOutput values.
// You can construct a concrete instance of `GetMysqlDbSystemAnalyticsClusterInput` via:
//
//          GetMysqlDbSystemAnalyticsClusterArgs{...}
type GetMysqlDbSystemAnalyticsClusterInput interface {
	pulumi.Input

	ToGetMysqlDbSystemAnalyticsClusterOutput() GetMysqlDbSystemAnalyticsClusterOutput
	ToGetMysqlDbSystemAnalyticsClusterOutputWithContext(context.Context) GetMysqlDbSystemAnalyticsClusterOutput
}

type GetMysqlDbSystemAnalyticsClusterArgs struct {
	// The number of analytics-processing compute instances, of the specified shape, in the HeatWave cluster.
	ClusterSize pulumi.IntInput `pulumi:"clusterSize"`
	// The shape of the primary instances of the DB System. The shape determines resources allocated to a DB System - CPU cores and memory for VM shapes; CPU cores, memory and storage for non-VM (or bare metal) shapes. To get a list of shapes, use (the [ListShapes](https://docs.cloud.oracle.com/iaas/api/#/en/mysql/20181021/ShapeSummary/ListShapes) operation.
	ShapeName pulumi.StringInput `pulumi:"shapeName"`
	// The current state of the DB System.
	State pulumi.StringInput `pulumi:"state"`
	// The date and time the DB System was created.
	TimeCreated pulumi.StringInput `pulumi:"timeCreated"`
	// The time the DB System was last updated.
	TimeUpdated pulumi.StringInput `pulumi:"timeUpdated"`
}

func (GetMysqlDbSystemAnalyticsClusterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetMysqlDbSystemAnalyticsCluster)(nil)).Elem()
}

func (i GetMysqlDbSystemAnalyticsClusterArgs) ToGetMysqlDbSystemAnalyticsClusterOutput() GetMysqlDbSystemAnalyticsClusterOutput {
	return i.ToGetMysqlDbSystemAnalyticsClusterOutputWithContext(context.Background())
}

func (i GetMysqlDbSystemAnalyticsClusterArgs) ToGetMysqlDbSystemAnalyticsClusterOutputWithContext(ctx context.Context) GetMysqlDbSystemAnalyticsClusterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetMysqlDbSystemAnalyticsClusterOutput)
}

type GetMysqlDbSystemAnalyticsClusterOutput struct{ *pulumi.OutputState }

func (GetMysqlDbSystemAnalyticsClusterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetMysqlDbSystemAnalyticsCluster)(nil)).Elem()
}

func (o GetMysqlDbSystemAnalyticsClusterOutput) ToGetMysqlDbSystemAnalyticsClusterOutput() GetMysqlDbSystemAnalyticsClusterOutput {
	return o
}

func (o GetMysqlDbSystemAnalyticsClusterOutput) ToGetMysqlDbSystemAnalyticsClusterOutputWithContext(ctx context.Context) GetMysqlDbSystemAnalyticsClusterOutput {
	return o
}

// The number of analytics-processing compute instances, of the specified shape, in the HeatWave cluster.
func (o GetMysqlDbSystemAnalyticsClusterOutput) ClusterSize() pulumi.IntOutput {
	return o.ApplyT(func(v GetMysqlDbSystemAnalyticsCluster) int { return v.ClusterSize }).(pulumi.IntOutput)
}

// The shape of the primary instances of the DB System. The shape determines resources allocated to a DB System - CPU cores and memory for VM shapes; CPU cores, memory and storage for non-VM (or bare metal) shapes. To get a list of shapes, use (the [ListShapes](https://docs.cloud.oracle.com/iaas/api/#/en/mysql/20181021/ShapeSummary/ListShapes) operation.
func (o GetMysqlDbSystemAnalyticsClusterOutput) ShapeName() pulumi.StringOutput {
	return o.ApplyT(func(v GetMysqlDbSystemAnalyticsCluster) string { return v.ShapeName }).(pulumi.StringOutput)
}

// The current state of the DB System.
func (o GetMysqlDbSystemAnalyticsClusterOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v GetMysqlDbSystemAnalyticsCluster) string { return v.State }).(pulumi.StringOutput)
}

// The date and time the DB System was created.
func (o GetMysqlDbSystemAnalyticsClusterOutput) TimeCreated() pulumi.StringOutput {
	return o.ApplyT(func(v GetMysqlDbSystemAnalyticsCluster) string { return v.TimeCreated }).(pulumi.StringOutput)
}

// The time the DB System was last updated.
func (o GetMysqlDbSystemAnalyticsClusterOutput) TimeUpdated() pulumi.StringOutput {
	return o.ApplyT(func(v GetMysqlDbSystemAnalyticsCluster) string { return v.TimeUpdated }).(pulumi.StringOutput)
}

type GetMysqlDbSystemBackupPolicy struct {
	// Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
	DefinedTags map[string]interface{} `pulumi:"definedTags"`
	// Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
	FreeformTags map[string]interface{} `pulumi:"freeformTags"`
	// Whether the Channel has been enabled by the user.
	IsEnabled bool `pulumi:"isEnabled"`
	// The number of days automated backups are retained.
	RetentionInDays int `pulumi:"retentionInDays"`
	// The start time of the maintenance window.
	WindowStartTime string `pulumi:"windowStartTime"`
}

// GetMysqlDbSystemBackupPolicyInput is an input type that accepts GetMysqlDbSystemBackupPolicyArgs and GetMysqlDbSystemBackupPolicyOutput values.
// You can construct a concrete instance of `GetMysqlDbSystemBackupPolicyInput` via:
//
//          GetMysqlDbSystemBackupPolicyArgs{...}
type GetMysqlDbSystemBackupPolicyInput interface {
	pulumi.Input

	ToGetMysqlDbSystemBackupPolicyOutput() GetMysqlDbSystemBackupPolicyOutput
	ToGetMysqlDbSystemBackupPolicyOutputWithContext(context.Context) GetMysqlDbSystemBackupPolicyOutput
}

type GetMysqlDbSystemBackupPolicyArgs struct {
	// Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
	DefinedTags pulumi.MapInput `pulumi:"definedTags"`
	// Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
	FreeformTags pulumi.MapInput `pulumi:"freeformTags"`
	// Whether the Channel has been enabled by the user.
	IsEnabled pulumi.BoolInput `pulumi:"isEnabled"`
	// The number of days automated backups are retained.
	RetentionInDays pulumi.IntInput `pulumi:"retentionInDays"`
	// The start time of the maintenance window.
	WindowStartTime pulumi.StringInput `pulumi:"windowStartTime"`
}

func (GetMysqlDbSystemBackupPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetMysqlDbSystemBackupPolicy)(nil)).Elem()
}

func (i GetMysqlDbSystemBackupPolicyArgs) ToGetMysqlDbSystemBackupPolicyOutput() GetMysqlDbSystemBackupPolicyOutput {
	return i.ToGetMysqlDbSystemBackupPolicyOutputWithContext(context.Background())
}

func (i GetMysqlDbSystemBackupPolicyArgs) ToGetMysqlDbSystemBackupPolicyOutputWithContext(ctx context.Context) GetMysqlDbSystemBackupPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetMysqlDbSystemBackupPolicyOutput)
}

type GetMysqlDbSystemBackupPolicyOutput struct{ *pulumi.OutputState }

func (GetMysqlDbSystemBackupPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetMysqlDbSystemBackupPolicy)(nil)).Elem()
}

func (o GetMysqlDbSystemBackupPolicyOutput) ToGetMysqlDbSystemBackupPolicyOutput() GetMysqlDbSystemBackupPolicyOutput {
	return o
}

func (o GetMysqlDbSystemBackupPolicyOutput) ToGetMysqlDbSystemBackupPolicyOutputWithContext(ctx context.Context) GetMysqlDbSystemBackupPolicyOutput {
	return o
}

// Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
func (o GetMysqlDbSystemBackupPolicyOutput) DefinedTags() pulumi.MapOutput {
	return o.ApplyT(func(v GetMysqlDbSystemBackupPolicy) map[string]interface{} { return v.DefinedTags }).(pulumi.MapOutput)
}

// Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
func (o GetMysqlDbSystemBackupPolicyOutput) FreeformTags() pulumi.MapOutput {
	return o.ApplyT(func(v GetMysqlDbSystemBackupPolicy) map[string]interface{} { return v.FreeformTags }).(pulumi.MapOutput)
}

// Whether the Channel has been enabled by the user.
func (o GetMysqlDbSystemBackupPolicyOutput) IsEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v GetMysqlDbSystemBackupPolicy) bool { return v.IsEnabled }).(pulumi.BoolOutput)
}

// The number of days automated backups are retained.
func (o GetMysqlDbSystemBackupPolicyOutput) RetentionInDays() pulumi.IntOutput {
	return o.ApplyT(func(v GetMysqlDbSystemBackupPolicy) int { return v.RetentionInDays }).(pulumi.IntOutput)
}

// The start time of the maintenance window.
func (o GetMysqlDbSystemBackupPolicyOutput) WindowStartTime() pulumi.StringOutput {
	return o.ApplyT(func(v GetMysqlDbSystemBackupPolicy) string { return v.WindowStartTime }).(pulumi.StringOutput)
}

type GetMysqlDbSystemChannel struct {
	// The OCID of the compartment the DB System belongs in.
	CompartmentId string `pulumi:"compartmentId"`
	// Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
	DefinedTags map[string]interface{} `pulumi:"definedTags"`
	// The user-friendly name for the DB System. It does not have to be unique.
	DisplayName string `pulumi:"displayName"`
	// Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
	FreeformTags map[string]interface{} `pulumi:"freeformTags"`
	// The OCID of the DB System.
	Id string `pulumi:"id"`
	// Whether the Channel has been enabled by the user.
	IsEnabled bool `pulumi:"isEnabled"`
	// Additional information about the current lifecycleState.
	LifecycleDetails string `pulumi:"lifecycleDetails"`
	// Parameters detailing how to provision the initial data of the DB System.
	Source GetMysqlDbSystemChannelSource `pulumi:"source"`
	// The current state of the DB System.
	State string `pulumi:"state"`
	// Details about the Channel target.
	Target GetMysqlDbSystemChannelTarget `pulumi:"target"`
	// The date and time the DB System was created.
	TimeCreated string `pulumi:"timeCreated"`
	// The time the DB System was last updated.
	TimeUpdated string `pulumi:"timeUpdated"`
}

// GetMysqlDbSystemChannelInput is an input type that accepts GetMysqlDbSystemChannelArgs and GetMysqlDbSystemChannelOutput values.
// You can construct a concrete instance of `GetMysqlDbSystemChannelInput` via:
//
//          GetMysqlDbSystemChannelArgs{...}
type GetMysqlDbSystemChannelInput interface {
	pulumi.Input

	ToGetMysqlDbSystemChannelOutput() GetMysqlDbSystemChannelOutput
	ToGetMysqlDbSystemChannelOutputWithContext(context.Context) GetMysqlDbSystemChannelOutput
}

type GetMysqlDbSystemChannelArgs struct {
	// The OCID of the compartment the DB System belongs in.
	CompartmentId pulumi.StringInput `pulumi:"compartmentId"`
	// Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
	DefinedTags pulumi.MapInput `pulumi:"definedTags"`
	// The user-friendly name for the DB System. It does not have to be unique.
	DisplayName pulumi.StringInput `pulumi:"displayName"`
	// Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
	FreeformTags pulumi.MapInput `pulumi:"freeformTags"`
	// The OCID of the DB System.
	Id pulumi.StringInput `pulumi:"id"`
	// Whether the Channel has been enabled by the user.
	IsEnabled pulumi.BoolInput `pulumi:"isEnabled"`
	// Additional information about the current lifecycleState.
	LifecycleDetails pulumi.StringInput `pulumi:"lifecycleDetails"`
	// Parameters detailing how to provision the initial data of the DB System.
	Source GetMysqlDbSystemChannelSourceInput `pulumi:"source"`
	// The current state of the DB System.
	State pulumi.StringInput `pulumi:"state"`
	// Details about the Channel target.
	Target GetMysqlDbSystemChannelTargetInput `pulumi:"target"`
	// The date and time the DB System was created.
	TimeCreated pulumi.StringInput `pulumi:"timeCreated"`
	// The time the DB System was last updated.
	TimeUpdated pulumi.StringInput `pulumi:"timeUpdated"`
}

func (GetMysqlDbSystemChannelArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetMysqlDbSystemChannel)(nil)).Elem()
}

func (i GetMysqlDbSystemChannelArgs) ToGetMysqlDbSystemChannelOutput() GetMysqlDbSystemChannelOutput {
	return i.ToGetMysqlDbSystemChannelOutputWithContext(context.Background())
}

func (i GetMysqlDbSystemChannelArgs) ToGetMysqlDbSystemChannelOutputWithContext(ctx context.Context) GetMysqlDbSystemChannelOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetMysqlDbSystemChannelOutput)
}

// GetMysqlDbSystemChannelArrayInput is an input type that accepts GetMysqlDbSystemChannelArray and GetMysqlDbSystemChannelArrayOutput values.
// You can construct a concrete instance of `GetMysqlDbSystemChannelArrayInput` via:
//
//          GetMysqlDbSystemChannelArray{ GetMysqlDbSystemChannelArgs{...} }
type GetMysqlDbSystemChannelArrayInput interface {
	pulumi.Input

	ToGetMysqlDbSystemChannelArrayOutput() GetMysqlDbSystemChannelArrayOutput
	ToGetMysqlDbSystemChannelArrayOutputWithContext(context.Context) GetMysqlDbSystemChannelArrayOutput
}

type GetMysqlDbSystemChannelArray []GetMysqlDbSystemChannelInput

func (GetMysqlDbSystemChannelArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetMysqlDbSystemChannel)(nil)).Elem()
}

func (i GetMysqlDbSystemChannelArray) ToGetMysqlDbSystemChannelArrayOutput() GetMysqlDbSystemChannelArrayOutput {
	return i.ToGetMysqlDbSystemChannelArrayOutputWithContext(context.Background())
}

func (i GetMysqlDbSystemChannelArray) ToGetMysqlDbSystemChannelArrayOutputWithContext(ctx context.Context) GetMysqlDbSystemChannelArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetMysqlDbSystemChannelArrayOutput)
}

type GetMysqlDbSystemChannelOutput struct{ *pulumi.OutputState }

func (GetMysqlDbSystemChannelOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetMysqlDbSystemChannel)(nil)).Elem()
}

func (o GetMysqlDbSystemChannelOutput) ToGetMysqlDbSystemChannelOutput() GetMysqlDbSystemChannelOutput {
	return o
}

func (o GetMysqlDbSystemChannelOutput) ToGetMysqlDbSystemChannelOutputWithContext(ctx context.Context) GetMysqlDbSystemChannelOutput {
	return o
}

// The OCID of the compartment the DB System belongs in.
func (o GetMysqlDbSystemChannelOutput) CompartmentId() pulumi.StringOutput {
	return o.ApplyT(func(v GetMysqlDbSystemChannel) string { return v.CompartmentId }).(pulumi.StringOutput)
}

// Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
func (o GetMysqlDbSystemChannelOutput) DefinedTags() pulumi.MapOutput {
	return o.ApplyT(func(v GetMysqlDbSystemChannel) map[string]interface{} { return v.DefinedTags }).(pulumi.MapOutput)
}

// The user-friendly name for the DB System. It does not have to be unique.
func (o GetMysqlDbSystemChannelOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v GetMysqlDbSystemChannel) string { return v.DisplayName }).(pulumi.StringOutput)
}

// Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
func (o GetMysqlDbSystemChannelOutput) FreeformTags() pulumi.MapOutput {
	return o.ApplyT(func(v GetMysqlDbSystemChannel) map[string]interface{} { return v.FreeformTags }).(pulumi.MapOutput)
}

// The OCID of the DB System.
func (o GetMysqlDbSystemChannelOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetMysqlDbSystemChannel) string { return v.Id }).(pulumi.StringOutput)
}

// Whether the Channel has been enabled by the user.
func (o GetMysqlDbSystemChannelOutput) IsEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v GetMysqlDbSystemChannel) bool { return v.IsEnabled }).(pulumi.BoolOutput)
}

// Additional information about the current lifecycleState.
func (o GetMysqlDbSystemChannelOutput) LifecycleDetails() pulumi.StringOutput {
	return o.ApplyT(func(v GetMysqlDbSystemChannel) string { return v.LifecycleDetails }).(pulumi.StringOutput)
}

// Parameters detailing how to provision the initial data of the DB System.
func (o GetMysqlDbSystemChannelOutput) Source() GetMysqlDbSystemChannelSourceOutput {
	return o.ApplyT(func(v GetMysqlDbSystemChannel) GetMysqlDbSystemChannelSource { return v.Source }).(GetMysqlDbSystemChannelSourceOutput)
}

// The current state of the DB System.
func (o GetMysqlDbSystemChannelOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v GetMysqlDbSystemChannel) string { return v.State }).(pulumi.StringOutput)
}

// Details about the Channel target.
func (o GetMysqlDbSystemChannelOutput) Target() GetMysqlDbSystemChannelTargetOutput {
	return o.ApplyT(func(v GetMysqlDbSystemChannel) GetMysqlDbSystemChannelTarget { return v.Target }).(GetMysqlDbSystemChannelTargetOutput)
}

// The date and time the DB System was created.
func (o GetMysqlDbSystemChannelOutput) TimeCreated() pulumi.StringOutput {
	return o.ApplyT(func(v GetMysqlDbSystemChannel) string { return v.TimeCreated }).(pulumi.StringOutput)
}

// The time the DB System was last updated.
func (o GetMysqlDbSystemChannelOutput) TimeUpdated() pulumi.StringOutput {
	return o.ApplyT(func(v GetMysqlDbSystemChannel) string { return v.TimeUpdated }).(pulumi.StringOutput)
}

type GetMysqlDbSystemChannelArrayOutput struct{ *pulumi.OutputState }

func (GetMysqlDbSystemChannelArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetMysqlDbSystemChannel)(nil)).Elem()
}

func (o GetMysqlDbSystemChannelArrayOutput) ToGetMysqlDbSystemChannelArrayOutput() GetMysqlDbSystemChannelArrayOutput {
	return o
}

func (o GetMysqlDbSystemChannelArrayOutput) ToGetMysqlDbSystemChannelArrayOutputWithContext(ctx context.Context) GetMysqlDbSystemChannelArrayOutput {
	return o
}

func (o GetMysqlDbSystemChannelArrayOutput) Index(i pulumi.IntInput) GetMysqlDbSystemChannelOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetMysqlDbSystemChannel {
		return vs[0].([]GetMysqlDbSystemChannel)[vs[1].(int)]
	}).(GetMysqlDbSystemChannelOutput)
}

type GetMysqlDbSystemChannelSource struct {
	// The network address of the DB System.
	Hostname string `pulumi:"hostname"`
	// The port for primary endpoint of the DB System to listen on.
	Port int `pulumi:"port"`
	// The specific source identifier.
	SourceType string `pulumi:"sourceType"`
	// The CA certificate of the server used for VERIFY_IDENTITY and VERIFY_CA ssl modes.
	SslCaCertificate GetMysqlDbSystemChannelSourceSslCaCertificate `pulumi:"sslCaCertificate"`
	// The SSL mode of the Channel.
	SslMode string `pulumi:"sslMode"`
	// The name of the replication user on the source MySQL instance. The username has a maximum length of 96 characters. For more information, please see the [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/change-master-to.html)
	Username string `pulumi:"username"`
}

// GetMysqlDbSystemChannelSourceInput is an input type that accepts GetMysqlDbSystemChannelSourceArgs and GetMysqlDbSystemChannelSourceOutput values.
// You can construct a concrete instance of `GetMysqlDbSystemChannelSourceInput` via:
//
//          GetMysqlDbSystemChannelSourceArgs{...}
type GetMysqlDbSystemChannelSourceInput interface {
	pulumi.Input

	ToGetMysqlDbSystemChannelSourceOutput() GetMysqlDbSystemChannelSourceOutput
	ToGetMysqlDbSystemChannelSourceOutputWithContext(context.Context) GetMysqlDbSystemChannelSourceOutput
}

type GetMysqlDbSystemChannelSourceArgs struct {
	// The network address of the DB System.
	Hostname pulumi.StringInput `pulumi:"hostname"`
	// The port for primary endpoint of the DB System to listen on.
	Port pulumi.IntInput `pulumi:"port"`
	// The specific source identifier.
	SourceType pulumi.StringInput `pulumi:"sourceType"`
	// The CA certificate of the server used for VERIFY_IDENTITY and VERIFY_CA ssl modes.
	SslCaCertificate GetMysqlDbSystemChannelSourceSslCaCertificateInput `pulumi:"sslCaCertificate"`
	// The SSL mode of the Channel.
	SslMode pulumi.StringInput `pulumi:"sslMode"`
	// The name of the replication user on the source MySQL instance. The username has a maximum length of 96 characters. For more information, please see the [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/change-master-to.html)
	Username pulumi.StringInput `pulumi:"username"`
}

func (GetMysqlDbSystemChannelSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetMysqlDbSystemChannelSource)(nil)).Elem()
}

func (i GetMysqlDbSystemChannelSourceArgs) ToGetMysqlDbSystemChannelSourceOutput() GetMysqlDbSystemChannelSourceOutput {
	return i.ToGetMysqlDbSystemChannelSourceOutputWithContext(context.Background())
}

func (i GetMysqlDbSystemChannelSourceArgs) ToGetMysqlDbSystemChannelSourceOutputWithContext(ctx context.Context) GetMysqlDbSystemChannelSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetMysqlDbSystemChannelSourceOutput)
}

type GetMysqlDbSystemChannelSourceOutput struct{ *pulumi.OutputState }

func (GetMysqlDbSystemChannelSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetMysqlDbSystemChannelSource)(nil)).Elem()
}

func (o GetMysqlDbSystemChannelSourceOutput) ToGetMysqlDbSystemChannelSourceOutput() GetMysqlDbSystemChannelSourceOutput {
	return o
}

func (o GetMysqlDbSystemChannelSourceOutput) ToGetMysqlDbSystemChannelSourceOutputWithContext(ctx context.Context) GetMysqlDbSystemChannelSourceOutput {
	return o
}

// The network address of the DB System.
func (o GetMysqlDbSystemChannelSourceOutput) Hostname() pulumi.StringOutput {
	return o.ApplyT(func(v GetMysqlDbSystemChannelSource) string { return v.Hostname }).(pulumi.StringOutput)
}

// The port for primary endpoint of the DB System to listen on.
func (o GetMysqlDbSystemChannelSourceOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v GetMysqlDbSystemChannelSource) int { return v.Port }).(pulumi.IntOutput)
}

// The specific source identifier.
func (o GetMysqlDbSystemChannelSourceOutput) SourceType() pulumi.StringOutput {
	return o.ApplyT(func(v GetMysqlDbSystemChannelSource) string { return v.SourceType }).(pulumi.StringOutput)
}

// The CA certificate of the server used for VERIFY_IDENTITY and VERIFY_CA ssl modes.
func (o GetMysqlDbSystemChannelSourceOutput) SslCaCertificate() GetMysqlDbSystemChannelSourceSslCaCertificateOutput {
	return o.ApplyT(func(v GetMysqlDbSystemChannelSource) GetMysqlDbSystemChannelSourceSslCaCertificate {
		return v.SslCaCertificate
	}).(GetMysqlDbSystemChannelSourceSslCaCertificateOutput)
}

// The SSL mode of the Channel.
func (o GetMysqlDbSystemChannelSourceOutput) SslMode() pulumi.StringOutput {
	return o.ApplyT(func(v GetMysqlDbSystemChannelSource) string { return v.SslMode }).(pulumi.StringOutput)
}

// The name of the replication user on the source MySQL instance. The username has a maximum length of 96 characters. For more information, please see the [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/change-master-to.html)
func (o GetMysqlDbSystemChannelSourceOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v GetMysqlDbSystemChannelSource) string { return v.Username }).(pulumi.StringOutput)
}

type GetMysqlDbSystemChannelSourceSslCaCertificate struct {
	// The type of CA certificate.
	CertificateType string `pulumi:"certificateType"`
	// The string containing the CA certificate in PEM format.
	Contents string `pulumi:"contents"`
}

// GetMysqlDbSystemChannelSourceSslCaCertificateInput is an input type that accepts GetMysqlDbSystemChannelSourceSslCaCertificateArgs and GetMysqlDbSystemChannelSourceSslCaCertificateOutput values.
// You can construct a concrete instance of `GetMysqlDbSystemChannelSourceSslCaCertificateInput` via:
//
//          GetMysqlDbSystemChannelSourceSslCaCertificateArgs{...}
type GetMysqlDbSystemChannelSourceSslCaCertificateInput interface {
	pulumi.Input

	ToGetMysqlDbSystemChannelSourceSslCaCertificateOutput() GetMysqlDbSystemChannelSourceSslCaCertificateOutput
	ToGetMysqlDbSystemChannelSourceSslCaCertificateOutputWithContext(context.Context) GetMysqlDbSystemChannelSourceSslCaCertificateOutput
}

type GetMysqlDbSystemChannelSourceSslCaCertificateArgs struct {
	// The type of CA certificate.
	CertificateType pulumi.StringInput `pulumi:"certificateType"`
	// The string containing the CA certificate in PEM format.
	Contents pulumi.StringInput `pulumi:"contents"`
}

func (GetMysqlDbSystemChannelSourceSslCaCertificateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetMysqlDbSystemChannelSourceSslCaCertificate)(nil)).Elem()
}

func (i GetMysqlDbSystemChannelSourceSslCaCertificateArgs) ToGetMysqlDbSystemChannelSourceSslCaCertificateOutput() GetMysqlDbSystemChannelSourceSslCaCertificateOutput {
	return i.ToGetMysqlDbSystemChannelSourceSslCaCertificateOutputWithContext(context.Background())
}

func (i GetMysqlDbSystemChannelSourceSslCaCertificateArgs) ToGetMysqlDbSystemChannelSourceSslCaCertificateOutputWithContext(ctx context.Context) GetMysqlDbSystemChannelSourceSslCaCertificateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetMysqlDbSystemChannelSourceSslCaCertificateOutput)
}

type GetMysqlDbSystemChannelSourceSslCaCertificateOutput struct{ *pulumi.OutputState }

func (GetMysqlDbSystemChannelSourceSslCaCertificateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetMysqlDbSystemChannelSourceSslCaCertificate)(nil)).Elem()
}

func (o GetMysqlDbSystemChannelSourceSslCaCertificateOutput) ToGetMysqlDbSystemChannelSourceSslCaCertificateOutput() GetMysqlDbSystemChannelSourceSslCaCertificateOutput {
	return o
}

func (o GetMysqlDbSystemChannelSourceSslCaCertificateOutput) ToGetMysqlDbSystemChannelSourceSslCaCertificateOutputWithContext(ctx context.Context) GetMysqlDbSystemChannelSourceSslCaCertificateOutput {
	return o
}

// The type of CA certificate.
func (o GetMysqlDbSystemChannelSourceSslCaCertificateOutput) CertificateType() pulumi.StringOutput {
	return o.ApplyT(func(v GetMysqlDbSystemChannelSourceSslCaCertificate) string { return v.CertificateType }).(pulumi.StringOutput)
}

// The string containing the CA certificate in PEM format.
func (o GetMysqlDbSystemChannelSourceSslCaCertificateOutput) Contents() pulumi.StringOutput {
	return o.ApplyT(func(v GetMysqlDbSystemChannelSourceSslCaCertificate) string { return v.Contents }).(pulumi.StringOutput)
}

type GetMysqlDbSystemChannelTarget struct {
	// The username for the replication applier of the target MySQL DB System.
	ApplierUsername string `pulumi:"applierUsername"`
	// The case-insensitive name that identifies the replication channel. Channel names must follow the rules defined for [MySQL identifiers](https://dev.mysql.com/doc/refman/8.0/en/identifiers.html). The names of non-Deleted Channels must be unique for each DB System.
	ChannelName string `pulumi:"channelName"`
	// The DB System [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
	DbSystemId string `pulumi:"dbSystemId"`
	// The specific target identifier.
	TargetType string `pulumi:"targetType"`
}

// GetMysqlDbSystemChannelTargetInput is an input type that accepts GetMysqlDbSystemChannelTargetArgs and GetMysqlDbSystemChannelTargetOutput values.
// You can construct a concrete instance of `GetMysqlDbSystemChannelTargetInput` via:
//
//          GetMysqlDbSystemChannelTargetArgs{...}
type GetMysqlDbSystemChannelTargetInput interface {
	pulumi.Input

	ToGetMysqlDbSystemChannelTargetOutput() GetMysqlDbSystemChannelTargetOutput
	ToGetMysqlDbSystemChannelTargetOutputWithContext(context.Context) GetMysqlDbSystemChannelTargetOutput
}

type GetMysqlDbSystemChannelTargetArgs struct {
	// The username for the replication applier of the target MySQL DB System.
	ApplierUsername pulumi.StringInput `pulumi:"applierUsername"`
	// The case-insensitive name that identifies the replication channel. Channel names must follow the rules defined for [MySQL identifiers](https://dev.mysql.com/doc/refman/8.0/en/identifiers.html). The names of non-Deleted Channels must be unique for each DB System.
	ChannelName pulumi.StringInput `pulumi:"channelName"`
	// The DB System [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
	DbSystemId pulumi.StringInput `pulumi:"dbSystemId"`
	// The specific target identifier.
	TargetType pulumi.StringInput `pulumi:"targetType"`
}

func (GetMysqlDbSystemChannelTargetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetMysqlDbSystemChannelTarget)(nil)).Elem()
}

func (i GetMysqlDbSystemChannelTargetArgs) ToGetMysqlDbSystemChannelTargetOutput() GetMysqlDbSystemChannelTargetOutput {
	return i.ToGetMysqlDbSystemChannelTargetOutputWithContext(context.Background())
}

func (i GetMysqlDbSystemChannelTargetArgs) ToGetMysqlDbSystemChannelTargetOutputWithContext(ctx context.Context) GetMysqlDbSystemChannelTargetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetMysqlDbSystemChannelTargetOutput)
}

type GetMysqlDbSystemChannelTargetOutput struct{ *pulumi.OutputState }

func (GetMysqlDbSystemChannelTargetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetMysqlDbSystemChannelTarget)(nil)).Elem()
}

func (o GetMysqlDbSystemChannelTargetOutput) ToGetMysqlDbSystemChannelTargetOutput() GetMysqlDbSystemChannelTargetOutput {
	return o
}

func (o GetMysqlDbSystemChannelTargetOutput) ToGetMysqlDbSystemChannelTargetOutputWithContext(ctx context.Context) GetMysqlDbSystemChannelTargetOutput {
	return o
}

// The username for the replication applier of the target MySQL DB System.
func (o GetMysqlDbSystemChannelTargetOutput) ApplierUsername() pulumi.StringOutput {
	return o.ApplyT(func(v GetMysqlDbSystemChannelTarget) string { return v.ApplierUsername }).(pulumi.StringOutput)
}

// The case-insensitive name that identifies the replication channel. Channel names must follow the rules defined for [MySQL identifiers](https://dev.mysql.com/doc/refman/8.0/en/identifiers.html). The names of non-Deleted Channels must be unique for each DB System.
func (o GetMysqlDbSystemChannelTargetOutput) ChannelName() pulumi.StringOutput {
	return o.ApplyT(func(v GetMysqlDbSystemChannelTarget) string { return v.ChannelName }).(pulumi.StringOutput)
}

// The DB System [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
func (o GetMysqlDbSystemChannelTargetOutput) DbSystemId() pulumi.StringOutput {
	return o.ApplyT(func(v GetMysqlDbSystemChannelTarget) string { return v.DbSystemId }).(pulumi.StringOutput)
}

// The specific target identifier.
func (o GetMysqlDbSystemChannelTargetOutput) TargetType() pulumi.StringOutput {
	return o.ApplyT(func(v GetMysqlDbSystemChannelTarget) string { return v.TargetType }).(pulumi.StringOutput)
}

type GetMysqlDbSystemCurrentPlacement struct {
	// The availability domain in which the DB System is placed.
	AvailabilityDomain string `pulumi:"availabilityDomain"`
	// The fault domain on which to deploy the Read/Write endpoint. This defines the preferred primary instance.
	FaultDomain string `pulumi:"faultDomain"`
}

// GetMysqlDbSystemCurrentPlacementInput is an input type that accepts GetMysqlDbSystemCurrentPlacementArgs and GetMysqlDbSystemCurrentPlacementOutput values.
// You can construct a concrete instance of `GetMysqlDbSystemCurrentPlacementInput` via:
//
//          GetMysqlDbSystemCurrentPlacementArgs{...}
type GetMysqlDbSystemCurrentPlacementInput interface {
	pulumi.Input

	ToGetMysqlDbSystemCurrentPlacementOutput() GetMysqlDbSystemCurrentPlacementOutput
	ToGetMysqlDbSystemCurrentPlacementOutputWithContext(context.Context) GetMysqlDbSystemCurrentPlacementOutput
}

type GetMysqlDbSystemCurrentPlacementArgs struct {
	// The availability domain in which the DB System is placed.
	AvailabilityDomain pulumi.StringInput `pulumi:"availabilityDomain"`
	// The fault domain on which to deploy the Read/Write endpoint. This defines the preferred primary instance.
	FaultDomain pulumi.StringInput `pulumi:"faultDomain"`
}

func (GetMysqlDbSystemCurrentPlacementArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetMysqlDbSystemCurrentPlacement)(nil)).Elem()
}

func (i GetMysqlDbSystemCurrentPlacementArgs) ToGetMysqlDbSystemCurrentPlacementOutput() GetMysqlDbSystemCurrentPlacementOutput {
	return i.ToGetMysqlDbSystemCurrentPlacementOutputWithContext(context.Background())
}

func (i GetMysqlDbSystemCurrentPlacementArgs) ToGetMysqlDbSystemCurrentPlacementOutputWithContext(ctx context.Context) GetMysqlDbSystemCurrentPlacementOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetMysqlDbSystemCurrentPlacementOutput)
}

type GetMysqlDbSystemCurrentPlacementOutput struct{ *pulumi.OutputState }

func (GetMysqlDbSystemCurrentPlacementOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetMysqlDbSystemCurrentPlacement)(nil)).Elem()
}

func (o GetMysqlDbSystemCurrentPlacementOutput) ToGetMysqlDbSystemCurrentPlacementOutput() GetMysqlDbSystemCurrentPlacementOutput {
	return o
}

func (o GetMysqlDbSystemCurrentPlacementOutput) ToGetMysqlDbSystemCurrentPlacementOutputWithContext(ctx context.Context) GetMysqlDbSystemCurrentPlacementOutput {
	return o
}

// The availability domain in which the DB System is placed.
func (o GetMysqlDbSystemCurrentPlacementOutput) AvailabilityDomain() pulumi.StringOutput {
	return o.ApplyT(func(v GetMysqlDbSystemCurrentPlacement) string { return v.AvailabilityDomain }).(pulumi.StringOutput)
}

// The fault domain on which to deploy the Read/Write endpoint. This defines the preferred primary instance.
func (o GetMysqlDbSystemCurrentPlacementOutput) FaultDomain() pulumi.StringOutput {
	return o.ApplyT(func(v GetMysqlDbSystemCurrentPlacement) string { return v.FaultDomain }).(pulumi.StringOutput)
}

type GetMysqlDbSystemEndpoint struct {
	// The network address of the DB System.
	Hostname string `pulumi:"hostname"`
	// The IP address the DB System is configured to listen on. A private IP address of the primary endpoint of the DB System. Must be an available IP address within the subnet's CIDR. This will be a "dotted-quad" style IPv4 address.
	IpAddress string `pulumi:"ipAddress"`
	// The access modes from the client that this endpoint supports.
	Modes []string `pulumi:"modes"`
	// The port for primary endpoint of the DB System to listen on.
	Port int `pulumi:"port"`
	// The network port on which X Plugin listens for TCP/IP connections. This is the X Plugin equivalent of port.
	PortX int `pulumi:"portX"`
	// The state of the endpoints, as far as it can seen from the DB System. There may be some inconsistency with the actual state of the MySQL service.
	Status string `pulumi:"status"`
	// Additional information about the current endpoint status.
	StatusDetails string `pulumi:"statusDetails"`
}

// GetMysqlDbSystemEndpointInput is an input type that accepts GetMysqlDbSystemEndpointArgs and GetMysqlDbSystemEndpointOutput values.
// You can construct a concrete instance of `GetMysqlDbSystemEndpointInput` via:
//
//          GetMysqlDbSystemEndpointArgs{...}
type GetMysqlDbSystemEndpointInput interface {
	pulumi.Input

	ToGetMysqlDbSystemEndpointOutput() GetMysqlDbSystemEndpointOutput
	ToGetMysqlDbSystemEndpointOutputWithContext(context.Context) GetMysqlDbSystemEndpointOutput
}

type GetMysqlDbSystemEndpointArgs struct {
	// The network address of the DB System.
	Hostname pulumi.StringInput `pulumi:"hostname"`
	// The IP address the DB System is configured to listen on. A private IP address of the primary endpoint of the DB System. Must be an available IP address within the subnet's CIDR. This will be a "dotted-quad" style IPv4 address.
	IpAddress pulumi.StringInput `pulumi:"ipAddress"`
	// The access modes from the client that this endpoint supports.
	Modes pulumi.StringArrayInput `pulumi:"modes"`
	// The port for primary endpoint of the DB System to listen on.
	Port pulumi.IntInput `pulumi:"port"`
	// The network port on which X Plugin listens for TCP/IP connections. This is the X Plugin equivalent of port.
	PortX pulumi.IntInput `pulumi:"portX"`
	// The state of the endpoints, as far as it can seen from the DB System. There may be some inconsistency with the actual state of the MySQL service.
	Status pulumi.StringInput `pulumi:"status"`
	// Additional information about the current endpoint status.
	StatusDetails pulumi.StringInput `pulumi:"statusDetails"`
}

func (GetMysqlDbSystemEndpointArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetMysqlDbSystemEndpoint)(nil)).Elem()
}

func (i GetMysqlDbSystemEndpointArgs) ToGetMysqlDbSystemEndpointOutput() GetMysqlDbSystemEndpointOutput {
	return i.ToGetMysqlDbSystemEndpointOutputWithContext(context.Background())
}

func (i GetMysqlDbSystemEndpointArgs) ToGetMysqlDbSystemEndpointOutputWithContext(ctx context.Context) GetMysqlDbSystemEndpointOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetMysqlDbSystemEndpointOutput)
}

// GetMysqlDbSystemEndpointArrayInput is an input type that accepts GetMysqlDbSystemEndpointArray and GetMysqlDbSystemEndpointArrayOutput values.
// You can construct a concrete instance of `GetMysqlDbSystemEndpointArrayInput` via:
//
//          GetMysqlDbSystemEndpointArray{ GetMysqlDbSystemEndpointArgs{...} }
type GetMysqlDbSystemEndpointArrayInput interface {
	pulumi.Input

	ToGetMysqlDbSystemEndpointArrayOutput() GetMysqlDbSystemEndpointArrayOutput
	ToGetMysqlDbSystemEndpointArrayOutputWithContext(context.Context) GetMysqlDbSystemEndpointArrayOutput
}

type GetMysqlDbSystemEndpointArray []GetMysqlDbSystemEndpointInput

func (GetMysqlDbSystemEndpointArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetMysqlDbSystemEndpoint)(nil)).Elem()
}

func (i GetMysqlDbSystemEndpointArray) ToGetMysqlDbSystemEndpointArrayOutput() GetMysqlDbSystemEndpointArrayOutput {
	return i.ToGetMysqlDbSystemEndpointArrayOutputWithContext(context.Background())
}

func (i GetMysqlDbSystemEndpointArray) ToGetMysqlDbSystemEndpointArrayOutputWithContext(ctx context.Context) GetMysqlDbSystemEndpointArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetMysqlDbSystemEndpointArrayOutput)
}

type GetMysqlDbSystemEndpointOutput struct{ *pulumi.OutputState }

func (GetMysqlDbSystemEndpointOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetMysqlDbSystemEndpoint)(nil)).Elem()
}

func (o GetMysqlDbSystemEndpointOutput) ToGetMysqlDbSystemEndpointOutput() GetMysqlDbSystemEndpointOutput {
	return o
}

func (o GetMysqlDbSystemEndpointOutput) ToGetMysqlDbSystemEndpointOutputWithContext(ctx context.Context) GetMysqlDbSystemEndpointOutput {
	return o
}

// The network address of the DB System.
func (o GetMysqlDbSystemEndpointOutput) Hostname() pulumi.StringOutput {
	return o.ApplyT(func(v GetMysqlDbSystemEndpoint) string { return v.Hostname }).(pulumi.StringOutput)
}

// The IP address the DB System is configured to listen on. A private IP address of the primary endpoint of the DB System. Must be an available IP address within the subnet's CIDR. This will be a "dotted-quad" style IPv4 address.
func (o GetMysqlDbSystemEndpointOutput) IpAddress() pulumi.StringOutput {
	return o.ApplyT(func(v GetMysqlDbSystemEndpoint) string { return v.IpAddress }).(pulumi.StringOutput)
}

// The access modes from the client that this endpoint supports.
func (o GetMysqlDbSystemEndpointOutput) Modes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetMysqlDbSystemEndpoint) []string { return v.Modes }).(pulumi.StringArrayOutput)
}

// The port for primary endpoint of the DB System to listen on.
func (o GetMysqlDbSystemEndpointOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v GetMysqlDbSystemEndpoint) int { return v.Port }).(pulumi.IntOutput)
}

// The network port on which X Plugin listens for TCP/IP connections. This is the X Plugin equivalent of port.
func (o GetMysqlDbSystemEndpointOutput) PortX() pulumi.IntOutput {
	return o.ApplyT(func(v GetMysqlDbSystemEndpoint) int { return v.PortX }).(pulumi.IntOutput)
}

// The state of the endpoints, as far as it can seen from the DB System. There may be some inconsistency with the actual state of the MySQL service.
func (o GetMysqlDbSystemEndpointOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v GetMysqlDbSystemEndpoint) string { return v.Status }).(pulumi.StringOutput)
}

// Additional information about the current endpoint status.
func (o GetMysqlDbSystemEndpointOutput) StatusDetails() pulumi.StringOutput {
	return o.ApplyT(func(v GetMysqlDbSystemEndpoint) string { return v.StatusDetails }).(pulumi.StringOutput)
}

type GetMysqlDbSystemEndpointArrayOutput struct{ *pulumi.OutputState }

func (GetMysqlDbSystemEndpointArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetMysqlDbSystemEndpoint)(nil)).Elem()
}

func (o GetMysqlDbSystemEndpointArrayOutput) ToGetMysqlDbSystemEndpointArrayOutput() GetMysqlDbSystemEndpointArrayOutput {
	return o
}

func (o GetMysqlDbSystemEndpointArrayOutput) ToGetMysqlDbSystemEndpointArrayOutputWithContext(ctx context.Context) GetMysqlDbSystemEndpointArrayOutput {
	return o
}

func (o GetMysqlDbSystemEndpointArrayOutput) Index(i pulumi.IntInput) GetMysqlDbSystemEndpointOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetMysqlDbSystemEndpoint {
		return vs[0].([]GetMysqlDbSystemEndpoint)[vs[1].(int)]
	}).(GetMysqlDbSystemEndpointOutput)
}

type GetMysqlDbSystemHeatWaveCluster struct {
	// The number of analytics-processing compute instances, of the specified shape, in the HeatWave cluster.
	ClusterSize int `pulumi:"clusterSize"`
	// The shape of the primary instances of the DB System. The shape determines resources allocated to a DB System - CPU cores and memory for VM shapes; CPU cores, memory and storage for non-VM (or bare metal) shapes. To get a list of shapes, use (the [ListShapes](https://docs.cloud.oracle.com/iaas/api/#/en/mysql/20181021/ShapeSummary/ListShapes) operation.
	ShapeName string `pulumi:"shapeName"`
	// The current state of the DB System.
	State string `pulumi:"state"`
	// The date and time the DB System was created.
	TimeCreated string `pulumi:"timeCreated"`
	// The time the DB System was last updated.
	TimeUpdated string `pulumi:"timeUpdated"`
}

// GetMysqlDbSystemHeatWaveClusterInput is an input type that accepts GetMysqlDbSystemHeatWaveClusterArgs and GetMysqlDbSystemHeatWaveClusterOutput values.
// You can construct a concrete instance of `GetMysqlDbSystemHeatWaveClusterInput` via:
//
//          GetMysqlDbSystemHeatWaveClusterArgs{...}
type GetMysqlDbSystemHeatWaveClusterInput interface {
	pulumi.Input

	ToGetMysqlDbSystemHeatWaveClusterOutput() GetMysqlDbSystemHeatWaveClusterOutput
	ToGetMysqlDbSystemHeatWaveClusterOutputWithContext(context.Context) GetMysqlDbSystemHeatWaveClusterOutput
}

type GetMysqlDbSystemHeatWaveClusterArgs struct {
	// The number of analytics-processing compute instances, of the specified shape, in the HeatWave cluster.
	ClusterSize pulumi.IntInput `pulumi:"clusterSize"`
	// The shape of the primary instances of the DB System. The shape determines resources allocated to a DB System - CPU cores and memory for VM shapes; CPU cores, memory and storage for non-VM (or bare metal) shapes. To get a list of shapes, use (the [ListShapes](https://docs.cloud.oracle.com/iaas/api/#/en/mysql/20181021/ShapeSummary/ListShapes) operation.
	ShapeName pulumi.StringInput `pulumi:"shapeName"`
	// The current state of the DB System.
	State pulumi.StringInput `pulumi:"state"`
	// The date and time the DB System was created.
	TimeCreated pulumi.StringInput `pulumi:"timeCreated"`
	// The time the DB System was last updated.
	TimeUpdated pulumi.StringInput `pulumi:"timeUpdated"`
}

func (GetMysqlDbSystemHeatWaveClusterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetMysqlDbSystemHeatWaveCluster)(nil)).Elem()
}

func (i GetMysqlDbSystemHeatWaveClusterArgs) ToGetMysqlDbSystemHeatWaveClusterOutput() GetMysqlDbSystemHeatWaveClusterOutput {
	return i.ToGetMysqlDbSystemHeatWaveClusterOutputWithContext(context.Background())
}

func (i GetMysqlDbSystemHeatWaveClusterArgs) ToGetMysqlDbSystemHeatWaveClusterOutputWithContext(ctx context.Context) GetMysqlDbSystemHeatWaveClusterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetMysqlDbSystemHeatWaveClusterOutput)
}

type GetMysqlDbSystemHeatWaveClusterOutput struct{ *pulumi.OutputState }

func (GetMysqlDbSystemHeatWaveClusterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetMysqlDbSystemHeatWaveCluster)(nil)).Elem()
}

func (o GetMysqlDbSystemHeatWaveClusterOutput) ToGetMysqlDbSystemHeatWaveClusterOutput() GetMysqlDbSystemHeatWaveClusterOutput {
	return o
}

func (o GetMysqlDbSystemHeatWaveClusterOutput) ToGetMysqlDbSystemHeatWaveClusterOutputWithContext(ctx context.Context) GetMysqlDbSystemHeatWaveClusterOutput {
	return o
}

// The number of analytics-processing compute instances, of the specified shape, in the HeatWave cluster.
func (o GetMysqlDbSystemHeatWaveClusterOutput) ClusterSize() pulumi.IntOutput {
	return o.ApplyT(func(v GetMysqlDbSystemHeatWaveCluster) int { return v.ClusterSize }).(pulumi.IntOutput)
}

// The shape of the primary instances of the DB System. The shape determines resources allocated to a DB System - CPU cores and memory for VM shapes; CPU cores, memory and storage for non-VM (or bare metal) shapes. To get a list of shapes, use (the [ListShapes](https://docs.cloud.oracle.com/iaas/api/#/en/mysql/20181021/ShapeSummary/ListShapes) operation.
func (o GetMysqlDbSystemHeatWaveClusterOutput) ShapeName() pulumi.StringOutput {
	return o.ApplyT(func(v GetMysqlDbSystemHeatWaveCluster) string { return v.ShapeName }).(pulumi.StringOutput)
}

// The current state of the DB System.
func (o GetMysqlDbSystemHeatWaveClusterOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v GetMysqlDbSystemHeatWaveCluster) string { return v.State }).(pulumi.StringOutput)
}

// The date and time the DB System was created.
func (o GetMysqlDbSystemHeatWaveClusterOutput) TimeCreated() pulumi.StringOutput {
	return o.ApplyT(func(v GetMysqlDbSystemHeatWaveCluster) string { return v.TimeCreated }).(pulumi.StringOutput)
}

// The time the DB System was last updated.
func (o GetMysqlDbSystemHeatWaveClusterOutput) TimeUpdated() pulumi.StringOutput {
	return o.ApplyT(func(v GetMysqlDbSystemHeatWaveCluster) string { return v.TimeUpdated }).(pulumi.StringOutput)
}

type GetMysqlDbSystemMaintenance struct {
	// The start time of the maintenance window.
	WindowStartTime string `pulumi:"windowStartTime"`
}

// GetMysqlDbSystemMaintenanceInput is an input type that accepts GetMysqlDbSystemMaintenanceArgs and GetMysqlDbSystemMaintenanceOutput values.
// You can construct a concrete instance of `GetMysqlDbSystemMaintenanceInput` via:
//
//          GetMysqlDbSystemMaintenanceArgs{...}
type GetMysqlDbSystemMaintenanceInput interface {
	pulumi.Input

	ToGetMysqlDbSystemMaintenanceOutput() GetMysqlDbSystemMaintenanceOutput
	ToGetMysqlDbSystemMaintenanceOutputWithContext(context.Context) GetMysqlDbSystemMaintenanceOutput
}

type GetMysqlDbSystemMaintenanceArgs struct {
	// The start time of the maintenance window.
	WindowStartTime pulumi.StringInput `pulumi:"windowStartTime"`
}

func (GetMysqlDbSystemMaintenanceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetMysqlDbSystemMaintenance)(nil)).Elem()
}

func (i GetMysqlDbSystemMaintenanceArgs) ToGetMysqlDbSystemMaintenanceOutput() GetMysqlDbSystemMaintenanceOutput {
	return i.ToGetMysqlDbSystemMaintenanceOutputWithContext(context.Background())
}

func (i GetMysqlDbSystemMaintenanceArgs) ToGetMysqlDbSystemMaintenanceOutputWithContext(ctx context.Context) GetMysqlDbSystemMaintenanceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetMysqlDbSystemMaintenanceOutput)
}

type GetMysqlDbSystemMaintenanceOutput struct{ *pulumi.OutputState }

func (GetMysqlDbSystemMaintenanceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetMysqlDbSystemMaintenance)(nil)).Elem()
}

func (o GetMysqlDbSystemMaintenanceOutput) ToGetMysqlDbSystemMaintenanceOutput() GetMysqlDbSystemMaintenanceOutput {
	return o
}

func (o GetMysqlDbSystemMaintenanceOutput) ToGetMysqlDbSystemMaintenanceOutputWithContext(ctx context.Context) GetMysqlDbSystemMaintenanceOutput {
	return o
}

// The start time of the maintenance window.
func (o GetMysqlDbSystemMaintenanceOutput) WindowStartTime() pulumi.StringOutput {
	return o.ApplyT(func(v GetMysqlDbSystemMaintenance) string { return v.WindowStartTime }).(pulumi.StringOutput)
}

type GetMysqlDbSystemSource struct {
	// The OCID of the backup to be used as the source for the new DB System.
	BackupId string `pulumi:"backupId"`
	// The specific source identifier.
	SourceType string `pulumi:"sourceType"`
}

// GetMysqlDbSystemSourceInput is an input type that accepts GetMysqlDbSystemSourceArgs and GetMysqlDbSystemSourceOutput values.
// You can construct a concrete instance of `GetMysqlDbSystemSourceInput` via:
//
//          GetMysqlDbSystemSourceArgs{...}
type GetMysqlDbSystemSourceInput interface {
	pulumi.Input

	ToGetMysqlDbSystemSourceOutput() GetMysqlDbSystemSourceOutput
	ToGetMysqlDbSystemSourceOutputWithContext(context.Context) GetMysqlDbSystemSourceOutput
}

type GetMysqlDbSystemSourceArgs struct {
	// The OCID of the backup to be used as the source for the new DB System.
	BackupId pulumi.StringInput `pulumi:"backupId"`
	// The specific source identifier.
	SourceType pulumi.StringInput `pulumi:"sourceType"`
}

func (GetMysqlDbSystemSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetMysqlDbSystemSource)(nil)).Elem()
}

func (i GetMysqlDbSystemSourceArgs) ToGetMysqlDbSystemSourceOutput() GetMysqlDbSystemSourceOutput {
	return i.ToGetMysqlDbSystemSourceOutputWithContext(context.Background())
}

func (i GetMysqlDbSystemSourceArgs) ToGetMysqlDbSystemSourceOutputWithContext(ctx context.Context) GetMysqlDbSystemSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetMysqlDbSystemSourceOutput)
}

type GetMysqlDbSystemSourceOutput struct{ *pulumi.OutputState }

func (GetMysqlDbSystemSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetMysqlDbSystemSource)(nil)).Elem()
}

func (o GetMysqlDbSystemSourceOutput) ToGetMysqlDbSystemSourceOutput() GetMysqlDbSystemSourceOutput {
	return o
}

func (o GetMysqlDbSystemSourceOutput) ToGetMysqlDbSystemSourceOutputWithContext(ctx context.Context) GetMysqlDbSystemSourceOutput {
	return o
}

// The OCID of the backup to be used as the source for the new DB System.
func (o GetMysqlDbSystemSourceOutput) BackupId() pulumi.StringOutput {
	return o.ApplyT(func(v GetMysqlDbSystemSource) string { return v.BackupId }).(pulumi.StringOutput)
}

// The specific source identifier.
func (o GetMysqlDbSystemSourceOutput) SourceType() pulumi.StringOutput {
	return o.ApplyT(func(v GetMysqlDbSystemSource) string { return v.SourceType }).(pulumi.StringOutput)
}

type GetMysqlDbSystemsDbSystem struct {
	AdminPassword string `pulumi:"adminPassword"`
	AdminUsername string `pulumi:"adminUsername"`
	// DEPRECATED -- please use HeatWave API instead. A summary of an Analytics Cluster.
	AnalyticsCluster GetMysqlDbSystemsDbSystemAnalyticsCluster `pulumi:"analyticsCluster"`
	// The availability domain in which the DB System is placed.
	AvailabilityDomain string `pulumi:"availabilityDomain"`
	// The Backup policy for the DB System.
	BackupPolicy GetMysqlDbSystemsDbSystemBackupPolicy `pulumi:"backupPolicy"`
	// A list with a summary of all the Channels attached to the DB System.
	Channels []GetMysqlDbSystemsDbSystemChannel `pulumi:"channels"`
	// The compartment [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
	CompartmentId string `pulumi:"compartmentId"`
	// The requested Configuration instance.
	ConfigurationId string `pulumi:"configurationId"`
	// The availability domain and fault domain a DB System is placed in.
	CurrentPlacement GetMysqlDbSystemsDbSystemCurrentPlacement `pulumi:"currentPlacement"`
	// Initial size of the data volume in GiBs that will be created and attached.
	DataStorageSizeInGb int `pulumi:"dataStorageSizeInGb"`
	// Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
	DefinedTags map[string]interface{} `pulumi:"definedTags"`
	// User-provided data about the DB System.
	Description string `pulumi:"description"`
	// A filter to return only the resource matching the given display name exactly.
	DisplayName string `pulumi:"displayName"`
	// The network endpoints available for this DB System.
	Endpoints []GetMysqlDbSystemsDbSystemEndpoint `pulumi:"endpoints"`
	// The fault domain on which to deploy the Read/Write endpoint. This defines the preferred primary instance.
	FaultDomain string `pulumi:"faultDomain"`
	// Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
	FreeformTags map[string]interface{} `pulumi:"freeformTags"`
	// A summary of a HeatWave cluster.
	HeatWaveCluster GetMysqlDbSystemsDbSystemHeatWaveCluster `pulumi:"heatWaveCluster"`
	// The hostname for the primary endpoint of the DB System. Used for DNS. The value is the hostname portion of the primary private IP's fully qualified domain name (FQDN) (for example, "dbsystem-1" in FQDN "dbsystem-1.subnet123.vcn1.oraclevcn.com"). Must be unique across all VNICs in the subnet and comply with RFC 952 and RFC 1123.
	HostnameLabel string `pulumi:"hostnameLabel"`
	// The OCID of the DB System.
	Id string `pulumi:"id"`
	// The IP address the DB System is configured to listen on. A private IP address of the primary endpoint of the DB System. Must be an available IP address within the subnet's CIDR. This will be a "dotted-quad" style IPv4 address.
	IpAddress string `pulumi:"ipAddress"`
	// DEPRECATED -- please use HeatWave API instead. If true, return only DB Systems with an Analytics Cluster attached, if false return only DB Systems with no Analytics Cluster attached. If not present, return all DB Systems.
	IsAnalyticsClusterAttached bool `pulumi:"isAnalyticsClusterAttached"`
	// If true, return only DB Systems with a HeatWave cluster attached, if false return only DB Systems with no HeatWave cluster attached. If not present, return all DB Systems.
	IsHeatWaveClusterAttached bool `pulumi:"isHeatWaveClusterAttached"`
	// If the policy is to enable high availability of the instance, by maintaining secondary/failover capacity as necessary.
	IsHighlyAvailable bool `pulumi:"isHighlyAvailable"`
	// Additional information about the current lifecycleState.
	LifecycleDetails string `pulumi:"lifecycleDetails"`
	// The Maintenance Policy for the DB System.
	Maintenance GetMysqlDbSystemsDbSystemMaintenance `pulumi:"maintenance"`
	// Name of the MySQL Version in use for the DB System.
	//
	// Deprecated: The 'mysql_version' field has been deprecated and may be removed in a future version. Do not use this field.
	MysqlVersion string `pulumi:"mysqlVersion"`
	// The port for primary endpoint of the DB System to listen on.
	Port int `pulumi:"port"`
	// The network port on which X Plugin listens for TCP/IP connections. This is the X Plugin equivalent of port.
	PortX int `pulumi:"portX"`
	// The shape of the primary instances of the DB System. The shape determines resources allocated to a DB System - CPU cores and memory for VM shapes; CPU cores, memory and storage for non-VM (or bare metal) shapes. To get a list of shapes, use (the [ListShapes](https://docs.cloud.oracle.com/iaas/api/#/en/mysql/20181021/ShapeSummary/ListShapes) operation.
	ShapeName    string `pulumi:"shapeName"`
	ShutdownType string `pulumi:"shutdownType"`
	// Parameters detailing how to provision the initial data of the DB System.
	Source GetMysqlDbSystemsDbSystemSource `pulumi:"source"`
	// DbSystem Lifecycle State
	State string `pulumi:"state"`
	// The OCID of the subnet the DB System is associated with.
	SubnetId string `pulumi:"subnetId"`
	// The date and time the DB System was created.
	TimeCreated string `pulumi:"timeCreated"`
	// The time the DB System was last updated.
	TimeUpdated string `pulumi:"timeUpdated"`
}

// GetMysqlDbSystemsDbSystemInput is an input type that accepts GetMysqlDbSystemsDbSystemArgs and GetMysqlDbSystemsDbSystemOutput values.
// You can construct a concrete instance of `GetMysqlDbSystemsDbSystemInput` via:
//
//          GetMysqlDbSystemsDbSystemArgs{...}
type GetMysqlDbSystemsDbSystemInput interface {
	pulumi.Input

	ToGetMysqlDbSystemsDbSystemOutput() GetMysqlDbSystemsDbSystemOutput
	ToGetMysqlDbSystemsDbSystemOutputWithContext(context.Context) GetMysqlDbSystemsDbSystemOutput
}

type GetMysqlDbSystemsDbSystemArgs struct {
	AdminPassword pulumi.StringInput `pulumi:"adminPassword"`
	AdminUsername pulumi.StringInput `pulumi:"adminUsername"`
	// DEPRECATED -- please use HeatWave API instead. A summary of an Analytics Cluster.
	AnalyticsCluster GetMysqlDbSystemsDbSystemAnalyticsClusterInput `pulumi:"analyticsCluster"`
	// The availability domain in which the DB System is placed.
	AvailabilityDomain pulumi.StringInput `pulumi:"availabilityDomain"`
	// The Backup policy for the DB System.
	BackupPolicy GetMysqlDbSystemsDbSystemBackupPolicyInput `pulumi:"backupPolicy"`
	// A list with a summary of all the Channels attached to the DB System.
	Channels GetMysqlDbSystemsDbSystemChannelArrayInput `pulumi:"channels"`
	// The compartment [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
	CompartmentId pulumi.StringInput `pulumi:"compartmentId"`
	// The requested Configuration instance.
	ConfigurationId pulumi.StringInput `pulumi:"configurationId"`
	// The availability domain and fault domain a DB System is placed in.
	CurrentPlacement GetMysqlDbSystemsDbSystemCurrentPlacementInput `pulumi:"currentPlacement"`
	// Initial size of the data volume in GiBs that will be created and attached.
	DataStorageSizeInGb pulumi.IntInput `pulumi:"dataStorageSizeInGb"`
	// Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
	DefinedTags pulumi.MapInput `pulumi:"definedTags"`
	// User-provided data about the DB System.
	Description pulumi.StringInput `pulumi:"description"`
	// A filter to return only the resource matching the given display name exactly.
	DisplayName pulumi.StringInput `pulumi:"displayName"`
	// The network endpoints available for this DB System.
	Endpoints GetMysqlDbSystemsDbSystemEndpointArrayInput `pulumi:"endpoints"`
	// The fault domain on which to deploy the Read/Write endpoint. This defines the preferred primary instance.
	FaultDomain pulumi.StringInput `pulumi:"faultDomain"`
	// Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
	FreeformTags pulumi.MapInput `pulumi:"freeformTags"`
	// A summary of a HeatWave cluster.
	HeatWaveCluster GetMysqlDbSystemsDbSystemHeatWaveClusterInput `pulumi:"heatWaveCluster"`
	// The hostname for the primary endpoint of the DB System. Used for DNS. The value is the hostname portion of the primary private IP's fully qualified domain name (FQDN) (for example, "dbsystem-1" in FQDN "dbsystem-1.subnet123.vcn1.oraclevcn.com"). Must be unique across all VNICs in the subnet and comply with RFC 952 and RFC 1123.
	HostnameLabel pulumi.StringInput `pulumi:"hostnameLabel"`
	// The OCID of the DB System.
	Id pulumi.StringInput `pulumi:"id"`
	// The IP address the DB System is configured to listen on. A private IP address of the primary endpoint of the DB System. Must be an available IP address within the subnet's CIDR. This will be a "dotted-quad" style IPv4 address.
	IpAddress pulumi.StringInput `pulumi:"ipAddress"`
	// DEPRECATED -- please use HeatWave API instead. If true, return only DB Systems with an Analytics Cluster attached, if false return only DB Systems with no Analytics Cluster attached. If not present, return all DB Systems.
	IsAnalyticsClusterAttached pulumi.BoolInput `pulumi:"isAnalyticsClusterAttached"`
	// If true, return only DB Systems with a HeatWave cluster attached, if false return only DB Systems with no HeatWave cluster attached. If not present, return all DB Systems.
	IsHeatWaveClusterAttached pulumi.BoolInput `pulumi:"isHeatWaveClusterAttached"`
	// If the policy is to enable high availability of the instance, by maintaining secondary/failover capacity as necessary.
	IsHighlyAvailable pulumi.BoolInput `pulumi:"isHighlyAvailable"`
	// Additional information about the current lifecycleState.
	LifecycleDetails pulumi.StringInput `pulumi:"lifecycleDetails"`
	// The Maintenance Policy for the DB System.
	Maintenance GetMysqlDbSystemsDbSystemMaintenanceInput `pulumi:"maintenance"`
	// Name of the MySQL Version in use for the DB System.
	//
	// Deprecated: The 'mysql_version' field has been deprecated and may be removed in a future version. Do not use this field.
	MysqlVersion pulumi.StringInput `pulumi:"mysqlVersion"`
	// The port for primary endpoint of the DB System to listen on.
	Port pulumi.IntInput `pulumi:"port"`
	// The network port on which X Plugin listens for TCP/IP connections. This is the X Plugin equivalent of port.
	PortX pulumi.IntInput `pulumi:"portX"`
	// The shape of the primary instances of the DB System. The shape determines resources allocated to a DB System - CPU cores and memory for VM shapes; CPU cores, memory and storage for non-VM (or bare metal) shapes. To get a list of shapes, use (the [ListShapes](https://docs.cloud.oracle.com/iaas/api/#/en/mysql/20181021/ShapeSummary/ListShapes) operation.
	ShapeName    pulumi.StringInput `pulumi:"shapeName"`
	ShutdownType pulumi.StringInput `pulumi:"shutdownType"`
	// Parameters detailing how to provision the initial data of the DB System.
	Source GetMysqlDbSystemsDbSystemSourceInput `pulumi:"source"`
	// DbSystem Lifecycle State
	State pulumi.StringInput `pulumi:"state"`
	// The OCID of the subnet the DB System is associated with.
	SubnetId pulumi.StringInput `pulumi:"subnetId"`
	// The date and time the DB System was created.
	TimeCreated pulumi.StringInput `pulumi:"timeCreated"`
	// The time the DB System was last updated.
	TimeUpdated pulumi.StringInput `pulumi:"timeUpdated"`
}

func (GetMysqlDbSystemsDbSystemArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetMysqlDbSystemsDbSystem)(nil)).Elem()
}

func (i GetMysqlDbSystemsDbSystemArgs) ToGetMysqlDbSystemsDbSystemOutput() GetMysqlDbSystemsDbSystemOutput {
	return i.ToGetMysqlDbSystemsDbSystemOutputWithContext(context.Background())
}

func (i GetMysqlDbSystemsDbSystemArgs) ToGetMysqlDbSystemsDbSystemOutputWithContext(ctx context.Context) GetMysqlDbSystemsDbSystemOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetMysqlDbSystemsDbSystemOutput)
}

// GetMysqlDbSystemsDbSystemArrayInput is an input type that accepts GetMysqlDbSystemsDbSystemArray and GetMysqlDbSystemsDbSystemArrayOutput values.
// You can construct a concrete instance of `GetMysqlDbSystemsDbSystemArrayInput` via:
//
//          GetMysqlDbSystemsDbSystemArray{ GetMysqlDbSystemsDbSystemArgs{...} }
type GetMysqlDbSystemsDbSystemArrayInput interface {
	pulumi.Input

	ToGetMysqlDbSystemsDbSystemArrayOutput() GetMysqlDbSystemsDbSystemArrayOutput
	ToGetMysqlDbSystemsDbSystemArrayOutputWithContext(context.Context) GetMysqlDbSystemsDbSystemArrayOutput
}

type GetMysqlDbSystemsDbSystemArray []GetMysqlDbSystemsDbSystemInput

func (GetMysqlDbSystemsDbSystemArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetMysqlDbSystemsDbSystem)(nil)).Elem()
}

func (i GetMysqlDbSystemsDbSystemArray) ToGetMysqlDbSystemsDbSystemArrayOutput() GetMysqlDbSystemsDbSystemArrayOutput {
	return i.ToGetMysqlDbSystemsDbSystemArrayOutputWithContext(context.Background())
}

func (i GetMysqlDbSystemsDbSystemArray) ToGetMysqlDbSystemsDbSystemArrayOutputWithContext(ctx context.Context) GetMysqlDbSystemsDbSystemArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetMysqlDbSystemsDbSystemArrayOutput)
}

type GetMysqlDbSystemsDbSystemOutput struct{ *pulumi.OutputState }

func (GetMysqlDbSystemsDbSystemOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetMysqlDbSystemsDbSystem)(nil)).Elem()
}

func (o GetMysqlDbSystemsDbSystemOutput) ToGetMysqlDbSystemsDbSystemOutput() GetMysqlDbSystemsDbSystemOutput {
	return o
}

func (o GetMysqlDbSystemsDbSystemOutput) ToGetMysqlDbSystemsDbSystemOutputWithContext(ctx context.Context) GetMysqlDbSystemsDbSystemOutput {
	return o
}

func (o GetMysqlDbSystemsDbSystemOutput) AdminPassword() pulumi.StringOutput {
	return o.ApplyT(func(v GetMysqlDbSystemsDbSystem) string { return v.AdminPassword }).(pulumi.StringOutput)
}

func (o GetMysqlDbSystemsDbSystemOutput) AdminUsername() pulumi.StringOutput {
	return o.ApplyT(func(v GetMysqlDbSystemsDbSystem) string { return v.AdminUsername }).(pulumi.StringOutput)
}

// DEPRECATED -- please use HeatWave API instead. A summary of an Analytics Cluster.
func (o GetMysqlDbSystemsDbSystemOutput) AnalyticsCluster() GetMysqlDbSystemsDbSystemAnalyticsClusterOutput {
	return o.ApplyT(func(v GetMysqlDbSystemsDbSystem) GetMysqlDbSystemsDbSystemAnalyticsCluster { return v.AnalyticsCluster }).(GetMysqlDbSystemsDbSystemAnalyticsClusterOutput)
}

// The availability domain in which the DB System is placed.
func (o GetMysqlDbSystemsDbSystemOutput) AvailabilityDomain() pulumi.StringOutput {
	return o.ApplyT(func(v GetMysqlDbSystemsDbSystem) string { return v.AvailabilityDomain }).(pulumi.StringOutput)
}

// The Backup policy for the DB System.
func (o GetMysqlDbSystemsDbSystemOutput) BackupPolicy() GetMysqlDbSystemsDbSystemBackupPolicyOutput {
	return o.ApplyT(func(v GetMysqlDbSystemsDbSystem) GetMysqlDbSystemsDbSystemBackupPolicy { return v.BackupPolicy }).(GetMysqlDbSystemsDbSystemBackupPolicyOutput)
}

// A list with a summary of all the Channels attached to the DB System.
func (o GetMysqlDbSystemsDbSystemOutput) Channels() GetMysqlDbSystemsDbSystemChannelArrayOutput {
	return o.ApplyT(func(v GetMysqlDbSystemsDbSystem) []GetMysqlDbSystemsDbSystemChannel { return v.Channels }).(GetMysqlDbSystemsDbSystemChannelArrayOutput)
}

// The compartment [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
func (o GetMysqlDbSystemsDbSystemOutput) CompartmentId() pulumi.StringOutput {
	return o.ApplyT(func(v GetMysqlDbSystemsDbSystem) string { return v.CompartmentId }).(pulumi.StringOutput)
}

// The requested Configuration instance.
func (o GetMysqlDbSystemsDbSystemOutput) ConfigurationId() pulumi.StringOutput {
	return o.ApplyT(func(v GetMysqlDbSystemsDbSystem) string { return v.ConfigurationId }).(pulumi.StringOutput)
}

// The availability domain and fault domain a DB System is placed in.
func (o GetMysqlDbSystemsDbSystemOutput) CurrentPlacement() GetMysqlDbSystemsDbSystemCurrentPlacementOutput {
	return o.ApplyT(func(v GetMysqlDbSystemsDbSystem) GetMysqlDbSystemsDbSystemCurrentPlacement { return v.CurrentPlacement }).(GetMysqlDbSystemsDbSystemCurrentPlacementOutput)
}

// Initial size of the data volume in GiBs that will be created and attached.
func (o GetMysqlDbSystemsDbSystemOutput) DataStorageSizeInGb() pulumi.IntOutput {
	return o.ApplyT(func(v GetMysqlDbSystemsDbSystem) int { return v.DataStorageSizeInGb }).(pulumi.IntOutput)
}

// Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
func (o GetMysqlDbSystemsDbSystemOutput) DefinedTags() pulumi.MapOutput {
	return o.ApplyT(func(v GetMysqlDbSystemsDbSystem) map[string]interface{} { return v.DefinedTags }).(pulumi.MapOutput)
}

// User-provided data about the DB System.
func (o GetMysqlDbSystemsDbSystemOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v GetMysqlDbSystemsDbSystem) string { return v.Description }).(pulumi.StringOutput)
}

// A filter to return only the resource matching the given display name exactly.
func (o GetMysqlDbSystemsDbSystemOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v GetMysqlDbSystemsDbSystem) string { return v.DisplayName }).(pulumi.StringOutput)
}

// The network endpoints available for this DB System.
func (o GetMysqlDbSystemsDbSystemOutput) Endpoints() GetMysqlDbSystemsDbSystemEndpointArrayOutput {
	return o.ApplyT(func(v GetMysqlDbSystemsDbSystem) []GetMysqlDbSystemsDbSystemEndpoint { return v.Endpoints }).(GetMysqlDbSystemsDbSystemEndpointArrayOutput)
}

// The fault domain on which to deploy the Read/Write endpoint. This defines the preferred primary instance.
func (o GetMysqlDbSystemsDbSystemOutput) FaultDomain() pulumi.StringOutput {
	return o.ApplyT(func(v GetMysqlDbSystemsDbSystem) string { return v.FaultDomain }).(pulumi.StringOutput)
}

// Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
func (o GetMysqlDbSystemsDbSystemOutput) FreeformTags() pulumi.MapOutput {
	return o.ApplyT(func(v GetMysqlDbSystemsDbSystem) map[string]interface{} { return v.FreeformTags }).(pulumi.MapOutput)
}

// A summary of a HeatWave cluster.
func (o GetMysqlDbSystemsDbSystemOutput) HeatWaveCluster() GetMysqlDbSystemsDbSystemHeatWaveClusterOutput {
	return o.ApplyT(func(v GetMysqlDbSystemsDbSystem) GetMysqlDbSystemsDbSystemHeatWaveCluster { return v.HeatWaveCluster }).(GetMysqlDbSystemsDbSystemHeatWaveClusterOutput)
}

// The hostname for the primary endpoint of the DB System. Used for DNS. The value is the hostname portion of the primary private IP's fully qualified domain name (FQDN) (for example, "dbsystem-1" in FQDN "dbsystem-1.subnet123.vcn1.oraclevcn.com"). Must be unique across all VNICs in the subnet and comply with RFC 952 and RFC 1123.
func (o GetMysqlDbSystemsDbSystemOutput) HostnameLabel() pulumi.StringOutput {
	return o.ApplyT(func(v GetMysqlDbSystemsDbSystem) string { return v.HostnameLabel }).(pulumi.StringOutput)
}

// The OCID of the DB System.
func (o GetMysqlDbSystemsDbSystemOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetMysqlDbSystemsDbSystem) string { return v.Id }).(pulumi.StringOutput)
}

// The IP address the DB System is configured to listen on. A private IP address of the primary endpoint of the DB System. Must be an available IP address within the subnet's CIDR. This will be a "dotted-quad" style IPv4 address.
func (o GetMysqlDbSystemsDbSystemOutput) IpAddress() pulumi.StringOutput {
	return o.ApplyT(func(v GetMysqlDbSystemsDbSystem) string { return v.IpAddress }).(pulumi.StringOutput)
}

// DEPRECATED -- please use HeatWave API instead. If true, return only DB Systems with an Analytics Cluster attached, if false return only DB Systems with no Analytics Cluster attached. If not present, return all DB Systems.
func (o GetMysqlDbSystemsDbSystemOutput) IsAnalyticsClusterAttached() pulumi.BoolOutput {
	return o.ApplyT(func(v GetMysqlDbSystemsDbSystem) bool { return v.IsAnalyticsClusterAttached }).(pulumi.BoolOutput)
}

// If true, return only DB Systems with a HeatWave cluster attached, if false return only DB Systems with no HeatWave cluster attached. If not present, return all DB Systems.
func (o GetMysqlDbSystemsDbSystemOutput) IsHeatWaveClusterAttached() pulumi.BoolOutput {
	return o.ApplyT(func(v GetMysqlDbSystemsDbSystem) bool { return v.IsHeatWaveClusterAttached }).(pulumi.BoolOutput)
}

// If the policy is to enable high availability of the instance, by maintaining secondary/failover capacity as necessary.
func (o GetMysqlDbSystemsDbSystemOutput) IsHighlyAvailable() pulumi.BoolOutput {
	return o.ApplyT(func(v GetMysqlDbSystemsDbSystem) bool { return v.IsHighlyAvailable }).(pulumi.BoolOutput)
}

// Additional information about the current lifecycleState.
func (o GetMysqlDbSystemsDbSystemOutput) LifecycleDetails() pulumi.StringOutput {
	return o.ApplyT(func(v GetMysqlDbSystemsDbSystem) string { return v.LifecycleDetails }).(pulumi.StringOutput)
}

// The Maintenance Policy for the DB System.
func (o GetMysqlDbSystemsDbSystemOutput) Maintenance() GetMysqlDbSystemsDbSystemMaintenanceOutput {
	return o.ApplyT(func(v GetMysqlDbSystemsDbSystem) GetMysqlDbSystemsDbSystemMaintenance { return v.Maintenance }).(GetMysqlDbSystemsDbSystemMaintenanceOutput)
}

// Name of the MySQL Version in use for the DB System.
//
// Deprecated: The 'mysql_version' field has been deprecated and may be removed in a future version. Do not use this field.
func (o GetMysqlDbSystemsDbSystemOutput) MysqlVersion() pulumi.StringOutput {
	return o.ApplyT(func(v GetMysqlDbSystemsDbSystem) string { return v.MysqlVersion }).(pulumi.StringOutput)
}

// The port for primary endpoint of the DB System to listen on.
func (o GetMysqlDbSystemsDbSystemOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v GetMysqlDbSystemsDbSystem) int { return v.Port }).(pulumi.IntOutput)
}

// The network port on which X Plugin listens for TCP/IP connections. This is the X Plugin equivalent of port.
func (o GetMysqlDbSystemsDbSystemOutput) PortX() pulumi.IntOutput {
	return o.ApplyT(func(v GetMysqlDbSystemsDbSystem) int { return v.PortX }).(pulumi.IntOutput)
}

// The shape of the primary instances of the DB System. The shape determines resources allocated to a DB System - CPU cores and memory for VM shapes; CPU cores, memory and storage for non-VM (or bare metal) shapes. To get a list of shapes, use (the [ListShapes](https://docs.cloud.oracle.com/iaas/api/#/en/mysql/20181021/ShapeSummary/ListShapes) operation.
func (o GetMysqlDbSystemsDbSystemOutput) ShapeName() pulumi.StringOutput {
	return o.ApplyT(func(v GetMysqlDbSystemsDbSystem) string { return v.ShapeName }).(pulumi.StringOutput)
}

func (o GetMysqlDbSystemsDbSystemOutput) ShutdownType() pulumi.StringOutput {
	return o.ApplyT(func(v GetMysqlDbSystemsDbSystem) string { return v.ShutdownType }).(pulumi.StringOutput)
}

// Parameters detailing how to provision the initial data of the DB System.
func (o GetMysqlDbSystemsDbSystemOutput) Source() GetMysqlDbSystemsDbSystemSourceOutput {
	return o.ApplyT(func(v GetMysqlDbSystemsDbSystem) GetMysqlDbSystemsDbSystemSource { return v.Source }).(GetMysqlDbSystemsDbSystemSourceOutput)
}

// DbSystem Lifecycle State
func (o GetMysqlDbSystemsDbSystemOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v GetMysqlDbSystemsDbSystem) string { return v.State }).(pulumi.StringOutput)
}

// The OCID of the subnet the DB System is associated with.
func (o GetMysqlDbSystemsDbSystemOutput) SubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v GetMysqlDbSystemsDbSystem) string { return v.SubnetId }).(pulumi.StringOutput)
}

// The date and time the DB System was created.
func (o GetMysqlDbSystemsDbSystemOutput) TimeCreated() pulumi.StringOutput {
	return o.ApplyT(func(v GetMysqlDbSystemsDbSystem) string { return v.TimeCreated }).(pulumi.StringOutput)
}

// The time the DB System was last updated.
func (o GetMysqlDbSystemsDbSystemOutput) TimeUpdated() pulumi.StringOutput {
	return o.ApplyT(func(v GetMysqlDbSystemsDbSystem) string { return v.TimeUpdated }).(pulumi.StringOutput)
}

type GetMysqlDbSystemsDbSystemArrayOutput struct{ *pulumi.OutputState }

func (GetMysqlDbSystemsDbSystemArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetMysqlDbSystemsDbSystem)(nil)).Elem()
}

func (o GetMysqlDbSystemsDbSystemArrayOutput) ToGetMysqlDbSystemsDbSystemArrayOutput() GetMysqlDbSystemsDbSystemArrayOutput {
	return o
}

func (o GetMysqlDbSystemsDbSystemArrayOutput) ToGetMysqlDbSystemsDbSystemArrayOutputWithContext(ctx context.Context) GetMysqlDbSystemsDbSystemArrayOutput {
	return o
}

func (o GetMysqlDbSystemsDbSystemArrayOutput) Index(i pulumi.IntInput) GetMysqlDbSystemsDbSystemOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetMysqlDbSystemsDbSystem {
		return vs[0].([]GetMysqlDbSystemsDbSystem)[vs[1].(int)]
	}).(GetMysqlDbSystemsDbSystemOutput)
}

type GetMysqlDbSystemsDbSystemAnalyticsCluster struct {
	// The number of analytics-processing compute instances, of the specified shape, in the HeatWave cluster.
	ClusterSize int `pulumi:"clusterSize"`
	// The shape of the primary instances of the DB System. The shape determines resources allocated to a DB System - CPU cores and memory for VM shapes; CPU cores, memory and storage for non-VM (or bare metal) shapes. To get a list of shapes, use (the [ListShapes](https://docs.cloud.oracle.com/iaas/api/#/en/mysql/20181021/ShapeSummary/ListShapes) operation.
	ShapeName string `pulumi:"shapeName"`
	// DbSystem Lifecycle State
	State string `pulumi:"state"`
	// The date and time the DB System was created.
	TimeCreated string `pulumi:"timeCreated"`
	// The time the DB System was last updated.
	TimeUpdated string `pulumi:"timeUpdated"`
}

// GetMysqlDbSystemsDbSystemAnalyticsClusterInput is an input type that accepts GetMysqlDbSystemsDbSystemAnalyticsClusterArgs and GetMysqlDbSystemsDbSystemAnalyticsClusterOutput values.
// You can construct a concrete instance of `GetMysqlDbSystemsDbSystemAnalyticsClusterInput` via:
//
//          GetMysqlDbSystemsDbSystemAnalyticsClusterArgs{...}
type GetMysqlDbSystemsDbSystemAnalyticsClusterInput interface {
	pulumi.Input

	ToGetMysqlDbSystemsDbSystemAnalyticsClusterOutput() GetMysqlDbSystemsDbSystemAnalyticsClusterOutput
	ToGetMysqlDbSystemsDbSystemAnalyticsClusterOutputWithContext(context.Context) GetMysqlDbSystemsDbSystemAnalyticsClusterOutput
}

type GetMysqlDbSystemsDbSystemAnalyticsClusterArgs struct {
	// The number of analytics-processing compute instances, of the specified shape, in the HeatWave cluster.
	ClusterSize pulumi.IntInput `pulumi:"clusterSize"`
	// The shape of the primary instances of the DB System. The shape determines resources allocated to a DB System - CPU cores and memory for VM shapes; CPU cores, memory and storage for non-VM (or bare metal) shapes. To get a list of shapes, use (the [ListShapes](https://docs.cloud.oracle.com/iaas/api/#/en/mysql/20181021/ShapeSummary/ListShapes) operation.
	ShapeName pulumi.StringInput `pulumi:"shapeName"`
	// DbSystem Lifecycle State
	State pulumi.StringInput `pulumi:"state"`
	// The date and time the DB System was created.
	TimeCreated pulumi.StringInput `pulumi:"timeCreated"`
	// The time the DB System was last updated.
	TimeUpdated pulumi.StringInput `pulumi:"timeUpdated"`
}

func (GetMysqlDbSystemsDbSystemAnalyticsClusterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetMysqlDbSystemsDbSystemAnalyticsCluster)(nil)).Elem()
}

func (i GetMysqlDbSystemsDbSystemAnalyticsClusterArgs) ToGetMysqlDbSystemsDbSystemAnalyticsClusterOutput() GetMysqlDbSystemsDbSystemAnalyticsClusterOutput {
	return i.ToGetMysqlDbSystemsDbSystemAnalyticsClusterOutputWithContext(context.Background())
}

func (i GetMysqlDbSystemsDbSystemAnalyticsClusterArgs) ToGetMysqlDbSystemsDbSystemAnalyticsClusterOutputWithContext(ctx context.Context) GetMysqlDbSystemsDbSystemAnalyticsClusterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetMysqlDbSystemsDbSystemAnalyticsClusterOutput)
}

type GetMysqlDbSystemsDbSystemAnalyticsClusterOutput struct{ *pulumi.OutputState }

func (GetMysqlDbSystemsDbSystemAnalyticsClusterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetMysqlDbSystemsDbSystemAnalyticsCluster)(nil)).Elem()
}

func (o GetMysqlDbSystemsDbSystemAnalyticsClusterOutput) ToGetMysqlDbSystemsDbSystemAnalyticsClusterOutput() GetMysqlDbSystemsDbSystemAnalyticsClusterOutput {
	return o
}

func (o GetMysqlDbSystemsDbSystemAnalyticsClusterOutput) ToGetMysqlDbSystemsDbSystemAnalyticsClusterOutputWithContext(ctx context.Context) GetMysqlDbSystemsDbSystemAnalyticsClusterOutput {
	return o
}

// The number of analytics-processing compute instances, of the specified shape, in the HeatWave cluster.
func (o GetMysqlDbSystemsDbSystemAnalyticsClusterOutput) ClusterSize() pulumi.IntOutput {
	return o.ApplyT(func(v GetMysqlDbSystemsDbSystemAnalyticsCluster) int { return v.ClusterSize }).(pulumi.IntOutput)
}

// The shape of the primary instances of the DB System. The shape determines resources allocated to a DB System - CPU cores and memory for VM shapes; CPU cores, memory and storage for non-VM (or bare metal) shapes. To get a list of shapes, use (the [ListShapes](https://docs.cloud.oracle.com/iaas/api/#/en/mysql/20181021/ShapeSummary/ListShapes) operation.
func (o GetMysqlDbSystemsDbSystemAnalyticsClusterOutput) ShapeName() pulumi.StringOutput {
	return o.ApplyT(func(v GetMysqlDbSystemsDbSystemAnalyticsCluster) string { return v.ShapeName }).(pulumi.StringOutput)
}

// DbSystem Lifecycle State
func (o GetMysqlDbSystemsDbSystemAnalyticsClusterOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v GetMysqlDbSystemsDbSystemAnalyticsCluster) string { return v.State }).(pulumi.StringOutput)
}

// The date and time the DB System was created.
func (o GetMysqlDbSystemsDbSystemAnalyticsClusterOutput) TimeCreated() pulumi.StringOutput {
	return o.ApplyT(func(v GetMysqlDbSystemsDbSystemAnalyticsCluster) string { return v.TimeCreated }).(pulumi.StringOutput)
}

// The time the DB System was last updated.
func (o GetMysqlDbSystemsDbSystemAnalyticsClusterOutput) TimeUpdated() pulumi.StringOutput {
	return o.ApplyT(func(v GetMysqlDbSystemsDbSystemAnalyticsCluster) string { return v.TimeUpdated }).(pulumi.StringOutput)
}

type GetMysqlDbSystemsDbSystemBackupPolicy struct {
	// Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
	DefinedTags map[string]interface{} `pulumi:"definedTags"`
	// Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
	FreeformTags map[string]interface{} `pulumi:"freeformTags"`
	// Whether the Channel has been enabled by the user.
	IsEnabled bool `pulumi:"isEnabled"`
	// The number of days automated backups are retained.
	RetentionInDays int `pulumi:"retentionInDays"`
	// The start time of the maintenance window.
	WindowStartTime string `pulumi:"windowStartTime"`
}

// GetMysqlDbSystemsDbSystemBackupPolicyInput is an input type that accepts GetMysqlDbSystemsDbSystemBackupPolicyArgs and GetMysqlDbSystemsDbSystemBackupPolicyOutput values.
// You can construct a concrete instance of `GetMysqlDbSystemsDbSystemBackupPolicyInput` via:
//
//          GetMysqlDbSystemsDbSystemBackupPolicyArgs{...}
type GetMysqlDbSystemsDbSystemBackupPolicyInput interface {
	pulumi.Input

	ToGetMysqlDbSystemsDbSystemBackupPolicyOutput() GetMysqlDbSystemsDbSystemBackupPolicyOutput
	ToGetMysqlDbSystemsDbSystemBackupPolicyOutputWithContext(context.Context) GetMysqlDbSystemsDbSystemBackupPolicyOutput
}

type GetMysqlDbSystemsDbSystemBackupPolicyArgs struct {
	// Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
	DefinedTags pulumi.MapInput `pulumi:"definedTags"`
	// Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
	FreeformTags pulumi.MapInput `pulumi:"freeformTags"`
	// Whether the Channel has been enabled by the user.
	IsEnabled pulumi.BoolInput `pulumi:"isEnabled"`
	// The number of days automated backups are retained.
	RetentionInDays pulumi.IntInput `pulumi:"retentionInDays"`
	// The start time of the maintenance window.
	WindowStartTime pulumi.StringInput `pulumi:"windowStartTime"`
}

func (GetMysqlDbSystemsDbSystemBackupPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetMysqlDbSystemsDbSystemBackupPolicy)(nil)).Elem()
}

func (i GetMysqlDbSystemsDbSystemBackupPolicyArgs) ToGetMysqlDbSystemsDbSystemBackupPolicyOutput() GetMysqlDbSystemsDbSystemBackupPolicyOutput {
	return i.ToGetMysqlDbSystemsDbSystemBackupPolicyOutputWithContext(context.Background())
}

func (i GetMysqlDbSystemsDbSystemBackupPolicyArgs) ToGetMysqlDbSystemsDbSystemBackupPolicyOutputWithContext(ctx context.Context) GetMysqlDbSystemsDbSystemBackupPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetMysqlDbSystemsDbSystemBackupPolicyOutput)
}

type GetMysqlDbSystemsDbSystemBackupPolicyOutput struct{ *pulumi.OutputState }

func (GetMysqlDbSystemsDbSystemBackupPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetMysqlDbSystemsDbSystemBackupPolicy)(nil)).Elem()
}

func (o GetMysqlDbSystemsDbSystemBackupPolicyOutput) ToGetMysqlDbSystemsDbSystemBackupPolicyOutput() GetMysqlDbSystemsDbSystemBackupPolicyOutput {
	return o
}

func (o GetMysqlDbSystemsDbSystemBackupPolicyOutput) ToGetMysqlDbSystemsDbSystemBackupPolicyOutputWithContext(ctx context.Context) GetMysqlDbSystemsDbSystemBackupPolicyOutput {
	return o
}

// Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
func (o GetMysqlDbSystemsDbSystemBackupPolicyOutput) DefinedTags() pulumi.MapOutput {
	return o.ApplyT(func(v GetMysqlDbSystemsDbSystemBackupPolicy) map[string]interface{} { return v.DefinedTags }).(pulumi.MapOutput)
}

// Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
func (o GetMysqlDbSystemsDbSystemBackupPolicyOutput) FreeformTags() pulumi.MapOutput {
	return o.ApplyT(func(v GetMysqlDbSystemsDbSystemBackupPolicy) map[string]interface{} { return v.FreeformTags }).(pulumi.MapOutput)
}

// Whether the Channel has been enabled by the user.
func (o GetMysqlDbSystemsDbSystemBackupPolicyOutput) IsEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v GetMysqlDbSystemsDbSystemBackupPolicy) bool { return v.IsEnabled }).(pulumi.BoolOutput)
}

// The number of days automated backups are retained.
func (o GetMysqlDbSystemsDbSystemBackupPolicyOutput) RetentionInDays() pulumi.IntOutput {
	return o.ApplyT(func(v GetMysqlDbSystemsDbSystemBackupPolicy) int { return v.RetentionInDays }).(pulumi.IntOutput)
}

// The start time of the maintenance window.
func (o GetMysqlDbSystemsDbSystemBackupPolicyOutput) WindowStartTime() pulumi.StringOutput {
	return o.ApplyT(func(v GetMysqlDbSystemsDbSystemBackupPolicy) string { return v.WindowStartTime }).(pulumi.StringOutput)
}

type GetMysqlDbSystemsDbSystemChannel struct {
	// The compartment [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
	CompartmentId string `pulumi:"compartmentId"`
	// Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
	DefinedTags map[string]interface{} `pulumi:"definedTags"`
	// A filter to return only the resource matching the given display name exactly.
	DisplayName string `pulumi:"displayName"`
	// Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
	FreeformTags map[string]interface{} `pulumi:"freeformTags"`
	// The OCID of the DB System.
	Id string `pulumi:"id"`
	// Whether the Channel has been enabled by the user.
	IsEnabled bool `pulumi:"isEnabled"`
	// Additional information about the current lifecycleState.
	LifecycleDetails string `pulumi:"lifecycleDetails"`
	// Parameters detailing how to provision the initial data of the DB System.
	Source GetMysqlDbSystemsDbSystemChannelSource `pulumi:"source"`
	// DbSystem Lifecycle State
	State string `pulumi:"state"`
	// Details about the Channel target.
	Target GetMysqlDbSystemsDbSystemChannelTarget `pulumi:"target"`
	// The date and time the DB System was created.
	TimeCreated string `pulumi:"timeCreated"`
	// The time the DB System was last updated.
	TimeUpdated string `pulumi:"timeUpdated"`
}

// GetMysqlDbSystemsDbSystemChannelInput is an input type that accepts GetMysqlDbSystemsDbSystemChannelArgs and GetMysqlDbSystemsDbSystemChannelOutput values.
// You can construct a concrete instance of `GetMysqlDbSystemsDbSystemChannelInput` via:
//
//          GetMysqlDbSystemsDbSystemChannelArgs{...}
type GetMysqlDbSystemsDbSystemChannelInput interface {
	pulumi.Input

	ToGetMysqlDbSystemsDbSystemChannelOutput() GetMysqlDbSystemsDbSystemChannelOutput
	ToGetMysqlDbSystemsDbSystemChannelOutputWithContext(context.Context) GetMysqlDbSystemsDbSystemChannelOutput
}

type GetMysqlDbSystemsDbSystemChannelArgs struct {
	// The compartment [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
	CompartmentId pulumi.StringInput `pulumi:"compartmentId"`
	// Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
	DefinedTags pulumi.MapInput `pulumi:"definedTags"`
	// A filter to return only the resource matching the given display name exactly.
	DisplayName pulumi.StringInput `pulumi:"displayName"`
	// Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
	FreeformTags pulumi.MapInput `pulumi:"freeformTags"`
	// The OCID of the DB System.
	Id pulumi.StringInput `pulumi:"id"`
	// Whether the Channel has been enabled by the user.
	IsEnabled pulumi.BoolInput `pulumi:"isEnabled"`
	// Additional information about the current lifecycleState.
	LifecycleDetails pulumi.StringInput `pulumi:"lifecycleDetails"`
	// Parameters detailing how to provision the initial data of the DB System.
	Source GetMysqlDbSystemsDbSystemChannelSourceInput `pulumi:"source"`
	// DbSystem Lifecycle State
	State pulumi.StringInput `pulumi:"state"`
	// Details about the Channel target.
	Target GetMysqlDbSystemsDbSystemChannelTargetInput `pulumi:"target"`
	// The date and time the DB System was created.
	TimeCreated pulumi.StringInput `pulumi:"timeCreated"`
	// The time the DB System was last updated.
	TimeUpdated pulumi.StringInput `pulumi:"timeUpdated"`
}

func (GetMysqlDbSystemsDbSystemChannelArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetMysqlDbSystemsDbSystemChannel)(nil)).Elem()
}

func (i GetMysqlDbSystemsDbSystemChannelArgs) ToGetMysqlDbSystemsDbSystemChannelOutput() GetMysqlDbSystemsDbSystemChannelOutput {
	return i.ToGetMysqlDbSystemsDbSystemChannelOutputWithContext(context.Background())
}

func (i GetMysqlDbSystemsDbSystemChannelArgs) ToGetMysqlDbSystemsDbSystemChannelOutputWithContext(ctx context.Context) GetMysqlDbSystemsDbSystemChannelOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetMysqlDbSystemsDbSystemChannelOutput)
}

// GetMysqlDbSystemsDbSystemChannelArrayInput is an input type that accepts GetMysqlDbSystemsDbSystemChannelArray and GetMysqlDbSystemsDbSystemChannelArrayOutput values.
// You can construct a concrete instance of `GetMysqlDbSystemsDbSystemChannelArrayInput` via:
//
//          GetMysqlDbSystemsDbSystemChannelArray{ GetMysqlDbSystemsDbSystemChannelArgs{...} }
type GetMysqlDbSystemsDbSystemChannelArrayInput interface {
	pulumi.Input

	ToGetMysqlDbSystemsDbSystemChannelArrayOutput() GetMysqlDbSystemsDbSystemChannelArrayOutput
	ToGetMysqlDbSystemsDbSystemChannelArrayOutputWithContext(context.Context) GetMysqlDbSystemsDbSystemChannelArrayOutput
}

type GetMysqlDbSystemsDbSystemChannelArray []GetMysqlDbSystemsDbSystemChannelInput

func (GetMysqlDbSystemsDbSystemChannelArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetMysqlDbSystemsDbSystemChannel)(nil)).Elem()
}

func (i GetMysqlDbSystemsDbSystemChannelArray) ToGetMysqlDbSystemsDbSystemChannelArrayOutput() GetMysqlDbSystemsDbSystemChannelArrayOutput {
	return i.ToGetMysqlDbSystemsDbSystemChannelArrayOutputWithContext(context.Background())
}

func (i GetMysqlDbSystemsDbSystemChannelArray) ToGetMysqlDbSystemsDbSystemChannelArrayOutputWithContext(ctx context.Context) GetMysqlDbSystemsDbSystemChannelArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetMysqlDbSystemsDbSystemChannelArrayOutput)
}

type GetMysqlDbSystemsDbSystemChannelOutput struct{ *pulumi.OutputState }

func (GetMysqlDbSystemsDbSystemChannelOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetMysqlDbSystemsDbSystemChannel)(nil)).Elem()
}

func (o GetMysqlDbSystemsDbSystemChannelOutput) ToGetMysqlDbSystemsDbSystemChannelOutput() GetMysqlDbSystemsDbSystemChannelOutput {
	return o
}

func (o GetMysqlDbSystemsDbSystemChannelOutput) ToGetMysqlDbSystemsDbSystemChannelOutputWithContext(ctx context.Context) GetMysqlDbSystemsDbSystemChannelOutput {
	return o
}

// The compartment [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
func (o GetMysqlDbSystemsDbSystemChannelOutput) CompartmentId() pulumi.StringOutput {
	return o.ApplyT(func(v GetMysqlDbSystemsDbSystemChannel) string { return v.CompartmentId }).(pulumi.StringOutput)
}

// Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
func (o GetMysqlDbSystemsDbSystemChannelOutput) DefinedTags() pulumi.MapOutput {
	return o.ApplyT(func(v GetMysqlDbSystemsDbSystemChannel) map[string]interface{} { return v.DefinedTags }).(pulumi.MapOutput)
}

// A filter to return only the resource matching the given display name exactly.
func (o GetMysqlDbSystemsDbSystemChannelOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v GetMysqlDbSystemsDbSystemChannel) string { return v.DisplayName }).(pulumi.StringOutput)
}

// Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
func (o GetMysqlDbSystemsDbSystemChannelOutput) FreeformTags() pulumi.MapOutput {
	return o.ApplyT(func(v GetMysqlDbSystemsDbSystemChannel) map[string]interface{} { return v.FreeformTags }).(pulumi.MapOutput)
}

// The OCID of the DB System.
func (o GetMysqlDbSystemsDbSystemChannelOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetMysqlDbSystemsDbSystemChannel) string { return v.Id }).(pulumi.StringOutput)
}

// Whether the Channel has been enabled by the user.
func (o GetMysqlDbSystemsDbSystemChannelOutput) IsEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v GetMysqlDbSystemsDbSystemChannel) bool { return v.IsEnabled }).(pulumi.BoolOutput)
}

// Additional information about the current lifecycleState.
func (o GetMysqlDbSystemsDbSystemChannelOutput) LifecycleDetails() pulumi.StringOutput {
	return o.ApplyT(func(v GetMysqlDbSystemsDbSystemChannel) string { return v.LifecycleDetails }).(pulumi.StringOutput)
}

// Parameters detailing how to provision the initial data of the DB System.
func (o GetMysqlDbSystemsDbSystemChannelOutput) Source() GetMysqlDbSystemsDbSystemChannelSourceOutput {
	return o.ApplyT(func(v GetMysqlDbSystemsDbSystemChannel) GetMysqlDbSystemsDbSystemChannelSource { return v.Source }).(GetMysqlDbSystemsDbSystemChannelSourceOutput)
}

// DbSystem Lifecycle State
func (o GetMysqlDbSystemsDbSystemChannelOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v GetMysqlDbSystemsDbSystemChannel) string { return v.State }).(pulumi.StringOutput)
}

// Details about the Channel target.
func (o GetMysqlDbSystemsDbSystemChannelOutput) Target() GetMysqlDbSystemsDbSystemChannelTargetOutput {
	return o.ApplyT(func(v GetMysqlDbSystemsDbSystemChannel) GetMysqlDbSystemsDbSystemChannelTarget { return v.Target }).(GetMysqlDbSystemsDbSystemChannelTargetOutput)
}

// The date and time the DB System was created.
func (o GetMysqlDbSystemsDbSystemChannelOutput) TimeCreated() pulumi.StringOutput {
	return o.ApplyT(func(v GetMysqlDbSystemsDbSystemChannel) string { return v.TimeCreated }).(pulumi.StringOutput)
}

// The time the DB System was last updated.
func (o GetMysqlDbSystemsDbSystemChannelOutput) TimeUpdated() pulumi.StringOutput {
	return o.ApplyT(func(v GetMysqlDbSystemsDbSystemChannel) string { return v.TimeUpdated }).(pulumi.StringOutput)
}

type GetMysqlDbSystemsDbSystemChannelArrayOutput struct{ *pulumi.OutputState }

func (GetMysqlDbSystemsDbSystemChannelArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetMysqlDbSystemsDbSystemChannel)(nil)).Elem()
}

func (o GetMysqlDbSystemsDbSystemChannelArrayOutput) ToGetMysqlDbSystemsDbSystemChannelArrayOutput() GetMysqlDbSystemsDbSystemChannelArrayOutput {
	return o
}

func (o GetMysqlDbSystemsDbSystemChannelArrayOutput) ToGetMysqlDbSystemsDbSystemChannelArrayOutputWithContext(ctx context.Context) GetMysqlDbSystemsDbSystemChannelArrayOutput {
	return o
}

func (o GetMysqlDbSystemsDbSystemChannelArrayOutput) Index(i pulumi.IntInput) GetMysqlDbSystemsDbSystemChannelOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetMysqlDbSystemsDbSystemChannel {
		return vs[0].([]GetMysqlDbSystemsDbSystemChannel)[vs[1].(int)]
	}).(GetMysqlDbSystemsDbSystemChannelOutput)
}

type GetMysqlDbSystemsDbSystemChannelSource struct {
	// The network address of the DB System.
	Hostname string `pulumi:"hostname"`
	// The port for primary endpoint of the DB System to listen on.
	Port int `pulumi:"port"`
	// The specific source identifier.
	SourceType string `pulumi:"sourceType"`
	// The CA certificate of the server used for VERIFY_IDENTITY and VERIFY_CA ssl modes.
	SslCaCertificate GetMysqlDbSystemsDbSystemChannelSourceSslCaCertificate `pulumi:"sslCaCertificate"`
	// The SSL mode of the Channel.
	SslMode string `pulumi:"sslMode"`
	// The name of the replication user on the source MySQL instance. The username has a maximum length of 96 characters. For more information, please see the [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/change-master-to.html)
	Username string `pulumi:"username"`
}

// GetMysqlDbSystemsDbSystemChannelSourceInput is an input type that accepts GetMysqlDbSystemsDbSystemChannelSourceArgs and GetMysqlDbSystemsDbSystemChannelSourceOutput values.
// You can construct a concrete instance of `GetMysqlDbSystemsDbSystemChannelSourceInput` via:
//
//          GetMysqlDbSystemsDbSystemChannelSourceArgs{...}
type GetMysqlDbSystemsDbSystemChannelSourceInput interface {
	pulumi.Input

	ToGetMysqlDbSystemsDbSystemChannelSourceOutput() GetMysqlDbSystemsDbSystemChannelSourceOutput
	ToGetMysqlDbSystemsDbSystemChannelSourceOutputWithContext(context.Context) GetMysqlDbSystemsDbSystemChannelSourceOutput
}

type GetMysqlDbSystemsDbSystemChannelSourceArgs struct {
	// The network address of the DB System.
	Hostname pulumi.StringInput `pulumi:"hostname"`
	// The port for primary endpoint of the DB System to listen on.
	Port pulumi.IntInput `pulumi:"port"`
	// The specific source identifier.
	SourceType pulumi.StringInput `pulumi:"sourceType"`
	// The CA certificate of the server used for VERIFY_IDENTITY and VERIFY_CA ssl modes.
	SslCaCertificate GetMysqlDbSystemsDbSystemChannelSourceSslCaCertificateInput `pulumi:"sslCaCertificate"`
	// The SSL mode of the Channel.
	SslMode pulumi.StringInput `pulumi:"sslMode"`
	// The name of the replication user on the source MySQL instance. The username has a maximum length of 96 characters. For more information, please see the [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/change-master-to.html)
	Username pulumi.StringInput `pulumi:"username"`
}

func (GetMysqlDbSystemsDbSystemChannelSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetMysqlDbSystemsDbSystemChannelSource)(nil)).Elem()
}

func (i GetMysqlDbSystemsDbSystemChannelSourceArgs) ToGetMysqlDbSystemsDbSystemChannelSourceOutput() GetMysqlDbSystemsDbSystemChannelSourceOutput {
	return i.ToGetMysqlDbSystemsDbSystemChannelSourceOutputWithContext(context.Background())
}

func (i GetMysqlDbSystemsDbSystemChannelSourceArgs) ToGetMysqlDbSystemsDbSystemChannelSourceOutputWithContext(ctx context.Context) GetMysqlDbSystemsDbSystemChannelSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetMysqlDbSystemsDbSystemChannelSourceOutput)
}

type GetMysqlDbSystemsDbSystemChannelSourceOutput struct{ *pulumi.OutputState }

func (GetMysqlDbSystemsDbSystemChannelSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetMysqlDbSystemsDbSystemChannelSource)(nil)).Elem()
}

func (o GetMysqlDbSystemsDbSystemChannelSourceOutput) ToGetMysqlDbSystemsDbSystemChannelSourceOutput() GetMysqlDbSystemsDbSystemChannelSourceOutput {
	return o
}

func (o GetMysqlDbSystemsDbSystemChannelSourceOutput) ToGetMysqlDbSystemsDbSystemChannelSourceOutputWithContext(ctx context.Context) GetMysqlDbSystemsDbSystemChannelSourceOutput {
	return o
}

// The network address of the DB System.
func (o GetMysqlDbSystemsDbSystemChannelSourceOutput) Hostname() pulumi.StringOutput {
	return o.ApplyT(func(v GetMysqlDbSystemsDbSystemChannelSource) string { return v.Hostname }).(pulumi.StringOutput)
}

// The port for primary endpoint of the DB System to listen on.
func (o GetMysqlDbSystemsDbSystemChannelSourceOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v GetMysqlDbSystemsDbSystemChannelSource) int { return v.Port }).(pulumi.IntOutput)
}

// The specific source identifier.
func (o GetMysqlDbSystemsDbSystemChannelSourceOutput) SourceType() pulumi.StringOutput {
	return o.ApplyT(func(v GetMysqlDbSystemsDbSystemChannelSource) string { return v.SourceType }).(pulumi.StringOutput)
}

// The CA certificate of the server used for VERIFY_IDENTITY and VERIFY_CA ssl modes.
func (o GetMysqlDbSystemsDbSystemChannelSourceOutput) SslCaCertificate() GetMysqlDbSystemsDbSystemChannelSourceSslCaCertificateOutput {
	return o.ApplyT(func(v GetMysqlDbSystemsDbSystemChannelSource) GetMysqlDbSystemsDbSystemChannelSourceSslCaCertificate {
		return v.SslCaCertificate
	}).(GetMysqlDbSystemsDbSystemChannelSourceSslCaCertificateOutput)
}

// The SSL mode of the Channel.
func (o GetMysqlDbSystemsDbSystemChannelSourceOutput) SslMode() pulumi.StringOutput {
	return o.ApplyT(func(v GetMysqlDbSystemsDbSystemChannelSource) string { return v.SslMode }).(pulumi.StringOutput)
}

// The name of the replication user on the source MySQL instance. The username has a maximum length of 96 characters. For more information, please see the [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/change-master-to.html)
func (o GetMysqlDbSystemsDbSystemChannelSourceOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v GetMysqlDbSystemsDbSystemChannelSource) string { return v.Username }).(pulumi.StringOutput)
}

type GetMysqlDbSystemsDbSystemChannelSourceSslCaCertificate struct {
	// The type of CA certificate.
	CertificateType string `pulumi:"certificateType"`
	// The string containing the CA certificate in PEM format.
	Contents string `pulumi:"contents"`
}

// GetMysqlDbSystemsDbSystemChannelSourceSslCaCertificateInput is an input type that accepts GetMysqlDbSystemsDbSystemChannelSourceSslCaCertificateArgs and GetMysqlDbSystemsDbSystemChannelSourceSslCaCertificateOutput values.
// You can construct a concrete instance of `GetMysqlDbSystemsDbSystemChannelSourceSslCaCertificateInput` via:
//
//          GetMysqlDbSystemsDbSystemChannelSourceSslCaCertificateArgs{...}
type GetMysqlDbSystemsDbSystemChannelSourceSslCaCertificateInput interface {
	pulumi.Input

	ToGetMysqlDbSystemsDbSystemChannelSourceSslCaCertificateOutput() GetMysqlDbSystemsDbSystemChannelSourceSslCaCertificateOutput
	ToGetMysqlDbSystemsDbSystemChannelSourceSslCaCertificateOutputWithContext(context.Context) GetMysqlDbSystemsDbSystemChannelSourceSslCaCertificateOutput
}

type GetMysqlDbSystemsDbSystemChannelSourceSslCaCertificateArgs struct {
	// The type of CA certificate.
	CertificateType pulumi.StringInput `pulumi:"certificateType"`
	// The string containing the CA certificate in PEM format.
	Contents pulumi.StringInput `pulumi:"contents"`
}

func (GetMysqlDbSystemsDbSystemChannelSourceSslCaCertificateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetMysqlDbSystemsDbSystemChannelSourceSslCaCertificate)(nil)).Elem()
}

func (i GetMysqlDbSystemsDbSystemChannelSourceSslCaCertificateArgs) ToGetMysqlDbSystemsDbSystemChannelSourceSslCaCertificateOutput() GetMysqlDbSystemsDbSystemChannelSourceSslCaCertificateOutput {
	return i.ToGetMysqlDbSystemsDbSystemChannelSourceSslCaCertificateOutputWithContext(context.Background())
}

func (i GetMysqlDbSystemsDbSystemChannelSourceSslCaCertificateArgs) ToGetMysqlDbSystemsDbSystemChannelSourceSslCaCertificateOutputWithContext(ctx context.Context) GetMysqlDbSystemsDbSystemChannelSourceSslCaCertificateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetMysqlDbSystemsDbSystemChannelSourceSslCaCertificateOutput)
}

type GetMysqlDbSystemsDbSystemChannelSourceSslCaCertificateOutput struct{ *pulumi.OutputState }

func (GetMysqlDbSystemsDbSystemChannelSourceSslCaCertificateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetMysqlDbSystemsDbSystemChannelSourceSslCaCertificate)(nil)).Elem()
}

func (o GetMysqlDbSystemsDbSystemChannelSourceSslCaCertificateOutput) ToGetMysqlDbSystemsDbSystemChannelSourceSslCaCertificateOutput() GetMysqlDbSystemsDbSystemChannelSourceSslCaCertificateOutput {
	return o
}

func (o GetMysqlDbSystemsDbSystemChannelSourceSslCaCertificateOutput) ToGetMysqlDbSystemsDbSystemChannelSourceSslCaCertificateOutputWithContext(ctx context.Context) GetMysqlDbSystemsDbSystemChannelSourceSslCaCertificateOutput {
	return o
}

// The type of CA certificate.
func (o GetMysqlDbSystemsDbSystemChannelSourceSslCaCertificateOutput) CertificateType() pulumi.StringOutput {
	return o.ApplyT(func(v GetMysqlDbSystemsDbSystemChannelSourceSslCaCertificate) string { return v.CertificateType }).(pulumi.StringOutput)
}

// The string containing the CA certificate in PEM format.
func (o GetMysqlDbSystemsDbSystemChannelSourceSslCaCertificateOutput) Contents() pulumi.StringOutput {
	return o.ApplyT(func(v GetMysqlDbSystemsDbSystemChannelSourceSslCaCertificate) string { return v.Contents }).(pulumi.StringOutput)
}

type GetMysqlDbSystemsDbSystemChannelTarget struct {
	// The username for the replication applier of the target MySQL DB System.
	ApplierUsername string `pulumi:"applierUsername"`
	// The case-insensitive name that identifies the replication channel. Channel names must follow the rules defined for [MySQL identifiers](https://dev.mysql.com/doc/refman/8.0/en/identifiers.html). The names of non-Deleted Channels must be unique for each DB System.
	ChannelName string `pulumi:"channelName"`
	// The DB System [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
	DbSystemId string `pulumi:"dbSystemId"`
	// The specific target identifier.
	TargetType string `pulumi:"targetType"`
}

// GetMysqlDbSystemsDbSystemChannelTargetInput is an input type that accepts GetMysqlDbSystemsDbSystemChannelTargetArgs and GetMysqlDbSystemsDbSystemChannelTargetOutput values.
// You can construct a concrete instance of `GetMysqlDbSystemsDbSystemChannelTargetInput` via:
//
//          GetMysqlDbSystemsDbSystemChannelTargetArgs{...}
type GetMysqlDbSystemsDbSystemChannelTargetInput interface {
	pulumi.Input

	ToGetMysqlDbSystemsDbSystemChannelTargetOutput() GetMysqlDbSystemsDbSystemChannelTargetOutput
	ToGetMysqlDbSystemsDbSystemChannelTargetOutputWithContext(context.Context) GetMysqlDbSystemsDbSystemChannelTargetOutput
}

type GetMysqlDbSystemsDbSystemChannelTargetArgs struct {
	// The username for the replication applier of the target MySQL DB System.
	ApplierUsername pulumi.StringInput `pulumi:"applierUsername"`
	// The case-insensitive name that identifies the replication channel. Channel names must follow the rules defined for [MySQL identifiers](https://dev.mysql.com/doc/refman/8.0/en/identifiers.html). The names of non-Deleted Channels must be unique for each DB System.
	ChannelName pulumi.StringInput `pulumi:"channelName"`
	// The DB System [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
	DbSystemId pulumi.StringInput `pulumi:"dbSystemId"`
	// The specific target identifier.
	TargetType pulumi.StringInput `pulumi:"targetType"`
}

func (GetMysqlDbSystemsDbSystemChannelTargetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetMysqlDbSystemsDbSystemChannelTarget)(nil)).Elem()
}

func (i GetMysqlDbSystemsDbSystemChannelTargetArgs) ToGetMysqlDbSystemsDbSystemChannelTargetOutput() GetMysqlDbSystemsDbSystemChannelTargetOutput {
	return i.ToGetMysqlDbSystemsDbSystemChannelTargetOutputWithContext(context.Background())
}

func (i GetMysqlDbSystemsDbSystemChannelTargetArgs) ToGetMysqlDbSystemsDbSystemChannelTargetOutputWithContext(ctx context.Context) GetMysqlDbSystemsDbSystemChannelTargetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetMysqlDbSystemsDbSystemChannelTargetOutput)
}

type GetMysqlDbSystemsDbSystemChannelTargetOutput struct{ *pulumi.OutputState }

func (GetMysqlDbSystemsDbSystemChannelTargetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetMysqlDbSystemsDbSystemChannelTarget)(nil)).Elem()
}

func (o GetMysqlDbSystemsDbSystemChannelTargetOutput) ToGetMysqlDbSystemsDbSystemChannelTargetOutput() GetMysqlDbSystemsDbSystemChannelTargetOutput {
	return o
}

func (o GetMysqlDbSystemsDbSystemChannelTargetOutput) ToGetMysqlDbSystemsDbSystemChannelTargetOutputWithContext(ctx context.Context) GetMysqlDbSystemsDbSystemChannelTargetOutput {
	return o
}

// The username for the replication applier of the target MySQL DB System.
func (o GetMysqlDbSystemsDbSystemChannelTargetOutput) ApplierUsername() pulumi.StringOutput {
	return o.ApplyT(func(v GetMysqlDbSystemsDbSystemChannelTarget) string { return v.ApplierUsername }).(pulumi.StringOutput)
}

// The case-insensitive name that identifies the replication channel. Channel names must follow the rules defined for [MySQL identifiers](https://dev.mysql.com/doc/refman/8.0/en/identifiers.html). The names of non-Deleted Channels must be unique for each DB System.
func (o GetMysqlDbSystemsDbSystemChannelTargetOutput) ChannelName() pulumi.StringOutput {
	return o.ApplyT(func(v GetMysqlDbSystemsDbSystemChannelTarget) string { return v.ChannelName }).(pulumi.StringOutput)
}

// The DB System [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
func (o GetMysqlDbSystemsDbSystemChannelTargetOutput) DbSystemId() pulumi.StringOutput {
	return o.ApplyT(func(v GetMysqlDbSystemsDbSystemChannelTarget) string { return v.DbSystemId }).(pulumi.StringOutput)
}

// The specific target identifier.
func (o GetMysqlDbSystemsDbSystemChannelTargetOutput) TargetType() pulumi.StringOutput {
	return o.ApplyT(func(v GetMysqlDbSystemsDbSystemChannelTarget) string { return v.TargetType }).(pulumi.StringOutput)
}

type GetMysqlDbSystemsDbSystemCurrentPlacement struct {
	// The availability domain in which the DB System is placed.
	AvailabilityDomain string `pulumi:"availabilityDomain"`
	// The fault domain on which to deploy the Read/Write endpoint. This defines the preferred primary instance.
	FaultDomain string `pulumi:"faultDomain"`
}

// GetMysqlDbSystemsDbSystemCurrentPlacementInput is an input type that accepts GetMysqlDbSystemsDbSystemCurrentPlacementArgs and GetMysqlDbSystemsDbSystemCurrentPlacementOutput values.
// You can construct a concrete instance of `GetMysqlDbSystemsDbSystemCurrentPlacementInput` via:
//
//          GetMysqlDbSystemsDbSystemCurrentPlacementArgs{...}
type GetMysqlDbSystemsDbSystemCurrentPlacementInput interface {
	pulumi.Input

	ToGetMysqlDbSystemsDbSystemCurrentPlacementOutput() GetMysqlDbSystemsDbSystemCurrentPlacementOutput
	ToGetMysqlDbSystemsDbSystemCurrentPlacementOutputWithContext(context.Context) GetMysqlDbSystemsDbSystemCurrentPlacementOutput
}

type GetMysqlDbSystemsDbSystemCurrentPlacementArgs struct {
	// The availability domain in which the DB System is placed.
	AvailabilityDomain pulumi.StringInput `pulumi:"availabilityDomain"`
	// The fault domain on which to deploy the Read/Write endpoint. This defines the preferred primary instance.
	FaultDomain pulumi.StringInput `pulumi:"faultDomain"`
}

func (GetMysqlDbSystemsDbSystemCurrentPlacementArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetMysqlDbSystemsDbSystemCurrentPlacement)(nil)).Elem()
}

func (i GetMysqlDbSystemsDbSystemCurrentPlacementArgs) ToGetMysqlDbSystemsDbSystemCurrentPlacementOutput() GetMysqlDbSystemsDbSystemCurrentPlacementOutput {
	return i.ToGetMysqlDbSystemsDbSystemCurrentPlacementOutputWithContext(context.Background())
}

func (i GetMysqlDbSystemsDbSystemCurrentPlacementArgs) ToGetMysqlDbSystemsDbSystemCurrentPlacementOutputWithContext(ctx context.Context) GetMysqlDbSystemsDbSystemCurrentPlacementOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetMysqlDbSystemsDbSystemCurrentPlacementOutput)
}

type GetMysqlDbSystemsDbSystemCurrentPlacementOutput struct{ *pulumi.OutputState }

func (GetMysqlDbSystemsDbSystemCurrentPlacementOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetMysqlDbSystemsDbSystemCurrentPlacement)(nil)).Elem()
}

func (o GetMysqlDbSystemsDbSystemCurrentPlacementOutput) ToGetMysqlDbSystemsDbSystemCurrentPlacementOutput() GetMysqlDbSystemsDbSystemCurrentPlacementOutput {
	return o
}

func (o GetMysqlDbSystemsDbSystemCurrentPlacementOutput) ToGetMysqlDbSystemsDbSystemCurrentPlacementOutputWithContext(ctx context.Context) GetMysqlDbSystemsDbSystemCurrentPlacementOutput {
	return o
}

// The availability domain in which the DB System is placed.
func (o GetMysqlDbSystemsDbSystemCurrentPlacementOutput) AvailabilityDomain() pulumi.StringOutput {
	return o.ApplyT(func(v GetMysqlDbSystemsDbSystemCurrentPlacement) string { return v.AvailabilityDomain }).(pulumi.StringOutput)
}

// The fault domain on which to deploy the Read/Write endpoint. This defines the preferred primary instance.
func (o GetMysqlDbSystemsDbSystemCurrentPlacementOutput) FaultDomain() pulumi.StringOutput {
	return o.ApplyT(func(v GetMysqlDbSystemsDbSystemCurrentPlacement) string { return v.FaultDomain }).(pulumi.StringOutput)
}

type GetMysqlDbSystemsDbSystemEndpoint struct {
	// The network address of the DB System.
	Hostname string `pulumi:"hostname"`
	// The IP address the DB System is configured to listen on. A private IP address of the primary endpoint of the DB System. Must be an available IP address within the subnet's CIDR. This will be a "dotted-quad" style IPv4 address.
	IpAddress string `pulumi:"ipAddress"`
	// The access modes from the client that this endpoint supports.
	Modes []string `pulumi:"modes"`
	// The port for primary endpoint of the DB System to listen on.
	Port int `pulumi:"port"`
	// The network port on which X Plugin listens for TCP/IP connections. This is the X Plugin equivalent of port.
	PortX int `pulumi:"portX"`
	// The state of the endpoints, as far as it can seen from the DB System. There may be some inconsistency with the actual state of the MySQL service.
	Status string `pulumi:"status"`
	// Additional information about the current endpoint status.
	StatusDetails string `pulumi:"statusDetails"`
}

// GetMysqlDbSystemsDbSystemEndpointInput is an input type that accepts GetMysqlDbSystemsDbSystemEndpointArgs and GetMysqlDbSystemsDbSystemEndpointOutput values.
// You can construct a concrete instance of `GetMysqlDbSystemsDbSystemEndpointInput` via:
//
//          GetMysqlDbSystemsDbSystemEndpointArgs{...}
type GetMysqlDbSystemsDbSystemEndpointInput interface {
	pulumi.Input

	ToGetMysqlDbSystemsDbSystemEndpointOutput() GetMysqlDbSystemsDbSystemEndpointOutput
	ToGetMysqlDbSystemsDbSystemEndpointOutputWithContext(context.Context) GetMysqlDbSystemsDbSystemEndpointOutput
}

type GetMysqlDbSystemsDbSystemEndpointArgs struct {
	// The network address of the DB System.
	Hostname pulumi.StringInput `pulumi:"hostname"`
	// The IP address the DB System is configured to listen on. A private IP address of the primary endpoint of the DB System. Must be an available IP address within the subnet's CIDR. This will be a "dotted-quad" style IPv4 address.
	IpAddress pulumi.StringInput `pulumi:"ipAddress"`
	// The access modes from the client that this endpoint supports.
	Modes pulumi.StringArrayInput `pulumi:"modes"`
	// The port for primary endpoint of the DB System to listen on.
	Port pulumi.IntInput `pulumi:"port"`
	// The network port on which X Plugin listens for TCP/IP connections. This is the X Plugin equivalent of port.
	PortX pulumi.IntInput `pulumi:"portX"`
	// The state of the endpoints, as far as it can seen from the DB System. There may be some inconsistency with the actual state of the MySQL service.
	Status pulumi.StringInput `pulumi:"status"`
	// Additional information about the current endpoint status.
	StatusDetails pulumi.StringInput `pulumi:"statusDetails"`
}

func (GetMysqlDbSystemsDbSystemEndpointArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetMysqlDbSystemsDbSystemEndpoint)(nil)).Elem()
}

func (i GetMysqlDbSystemsDbSystemEndpointArgs) ToGetMysqlDbSystemsDbSystemEndpointOutput() GetMysqlDbSystemsDbSystemEndpointOutput {
	return i.ToGetMysqlDbSystemsDbSystemEndpointOutputWithContext(context.Background())
}

func (i GetMysqlDbSystemsDbSystemEndpointArgs) ToGetMysqlDbSystemsDbSystemEndpointOutputWithContext(ctx context.Context) GetMysqlDbSystemsDbSystemEndpointOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetMysqlDbSystemsDbSystemEndpointOutput)
}

// GetMysqlDbSystemsDbSystemEndpointArrayInput is an input type that accepts GetMysqlDbSystemsDbSystemEndpointArray and GetMysqlDbSystemsDbSystemEndpointArrayOutput values.
// You can construct a concrete instance of `GetMysqlDbSystemsDbSystemEndpointArrayInput` via:
//
//          GetMysqlDbSystemsDbSystemEndpointArray{ GetMysqlDbSystemsDbSystemEndpointArgs{...} }
type GetMysqlDbSystemsDbSystemEndpointArrayInput interface {
	pulumi.Input

	ToGetMysqlDbSystemsDbSystemEndpointArrayOutput() GetMysqlDbSystemsDbSystemEndpointArrayOutput
	ToGetMysqlDbSystemsDbSystemEndpointArrayOutputWithContext(context.Context) GetMysqlDbSystemsDbSystemEndpointArrayOutput
}

type GetMysqlDbSystemsDbSystemEndpointArray []GetMysqlDbSystemsDbSystemEndpointInput

func (GetMysqlDbSystemsDbSystemEndpointArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetMysqlDbSystemsDbSystemEndpoint)(nil)).Elem()
}

func (i GetMysqlDbSystemsDbSystemEndpointArray) ToGetMysqlDbSystemsDbSystemEndpointArrayOutput() GetMysqlDbSystemsDbSystemEndpointArrayOutput {
	return i.ToGetMysqlDbSystemsDbSystemEndpointArrayOutputWithContext(context.Background())
}

func (i GetMysqlDbSystemsDbSystemEndpointArray) ToGetMysqlDbSystemsDbSystemEndpointArrayOutputWithContext(ctx context.Context) GetMysqlDbSystemsDbSystemEndpointArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetMysqlDbSystemsDbSystemEndpointArrayOutput)
}

type GetMysqlDbSystemsDbSystemEndpointOutput struct{ *pulumi.OutputState }

func (GetMysqlDbSystemsDbSystemEndpointOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetMysqlDbSystemsDbSystemEndpoint)(nil)).Elem()
}

func (o GetMysqlDbSystemsDbSystemEndpointOutput) ToGetMysqlDbSystemsDbSystemEndpointOutput() GetMysqlDbSystemsDbSystemEndpointOutput {
	return o
}

func (o GetMysqlDbSystemsDbSystemEndpointOutput) ToGetMysqlDbSystemsDbSystemEndpointOutputWithContext(ctx context.Context) GetMysqlDbSystemsDbSystemEndpointOutput {
	return o
}

// The network address of the DB System.
func (o GetMysqlDbSystemsDbSystemEndpointOutput) Hostname() pulumi.StringOutput {
	return o.ApplyT(func(v GetMysqlDbSystemsDbSystemEndpoint) string { return v.Hostname }).(pulumi.StringOutput)
}

// The IP address the DB System is configured to listen on. A private IP address of the primary endpoint of the DB System. Must be an available IP address within the subnet's CIDR. This will be a "dotted-quad" style IPv4 address.
func (o GetMysqlDbSystemsDbSystemEndpointOutput) IpAddress() pulumi.StringOutput {
	return o.ApplyT(func(v GetMysqlDbSystemsDbSystemEndpoint) string { return v.IpAddress }).(pulumi.StringOutput)
}

// The access modes from the client that this endpoint supports.
func (o GetMysqlDbSystemsDbSystemEndpointOutput) Modes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetMysqlDbSystemsDbSystemEndpoint) []string { return v.Modes }).(pulumi.StringArrayOutput)
}

// The port for primary endpoint of the DB System to listen on.
func (o GetMysqlDbSystemsDbSystemEndpointOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v GetMysqlDbSystemsDbSystemEndpoint) int { return v.Port }).(pulumi.IntOutput)
}

// The network port on which X Plugin listens for TCP/IP connections. This is the X Plugin equivalent of port.
func (o GetMysqlDbSystemsDbSystemEndpointOutput) PortX() pulumi.IntOutput {
	return o.ApplyT(func(v GetMysqlDbSystemsDbSystemEndpoint) int { return v.PortX }).(pulumi.IntOutput)
}

// The state of the endpoints, as far as it can seen from the DB System. There may be some inconsistency with the actual state of the MySQL service.
func (o GetMysqlDbSystemsDbSystemEndpointOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v GetMysqlDbSystemsDbSystemEndpoint) string { return v.Status }).(pulumi.StringOutput)
}

// Additional information about the current endpoint status.
func (o GetMysqlDbSystemsDbSystemEndpointOutput) StatusDetails() pulumi.StringOutput {
	return o.ApplyT(func(v GetMysqlDbSystemsDbSystemEndpoint) string { return v.StatusDetails }).(pulumi.StringOutput)
}

type GetMysqlDbSystemsDbSystemEndpointArrayOutput struct{ *pulumi.OutputState }

func (GetMysqlDbSystemsDbSystemEndpointArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetMysqlDbSystemsDbSystemEndpoint)(nil)).Elem()
}

func (o GetMysqlDbSystemsDbSystemEndpointArrayOutput) ToGetMysqlDbSystemsDbSystemEndpointArrayOutput() GetMysqlDbSystemsDbSystemEndpointArrayOutput {
	return o
}

func (o GetMysqlDbSystemsDbSystemEndpointArrayOutput) ToGetMysqlDbSystemsDbSystemEndpointArrayOutputWithContext(ctx context.Context) GetMysqlDbSystemsDbSystemEndpointArrayOutput {
	return o
}

func (o GetMysqlDbSystemsDbSystemEndpointArrayOutput) Index(i pulumi.IntInput) GetMysqlDbSystemsDbSystemEndpointOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetMysqlDbSystemsDbSystemEndpoint {
		return vs[0].([]GetMysqlDbSystemsDbSystemEndpoint)[vs[1].(int)]
	}).(GetMysqlDbSystemsDbSystemEndpointOutput)
}

type GetMysqlDbSystemsDbSystemHeatWaveCluster struct {
	// The number of analytics-processing compute instances, of the specified shape, in the HeatWave cluster.
	ClusterSize int `pulumi:"clusterSize"`
	// The shape of the primary instances of the DB System. The shape determines resources allocated to a DB System - CPU cores and memory for VM shapes; CPU cores, memory and storage for non-VM (or bare metal) shapes. To get a list of shapes, use (the [ListShapes](https://docs.cloud.oracle.com/iaas/api/#/en/mysql/20181021/ShapeSummary/ListShapes) operation.
	ShapeName string `pulumi:"shapeName"`
	// DbSystem Lifecycle State
	State string `pulumi:"state"`
	// The date and time the DB System was created.
	TimeCreated string `pulumi:"timeCreated"`
	// The time the DB System was last updated.
	TimeUpdated string `pulumi:"timeUpdated"`
}

// GetMysqlDbSystemsDbSystemHeatWaveClusterInput is an input type that accepts GetMysqlDbSystemsDbSystemHeatWaveClusterArgs and GetMysqlDbSystemsDbSystemHeatWaveClusterOutput values.
// You can construct a concrete instance of `GetMysqlDbSystemsDbSystemHeatWaveClusterInput` via:
//
//          GetMysqlDbSystemsDbSystemHeatWaveClusterArgs{...}
type GetMysqlDbSystemsDbSystemHeatWaveClusterInput interface {
	pulumi.Input

	ToGetMysqlDbSystemsDbSystemHeatWaveClusterOutput() GetMysqlDbSystemsDbSystemHeatWaveClusterOutput
	ToGetMysqlDbSystemsDbSystemHeatWaveClusterOutputWithContext(context.Context) GetMysqlDbSystemsDbSystemHeatWaveClusterOutput
}

type GetMysqlDbSystemsDbSystemHeatWaveClusterArgs struct {
	// The number of analytics-processing compute instances, of the specified shape, in the HeatWave cluster.
	ClusterSize pulumi.IntInput `pulumi:"clusterSize"`
	// The shape of the primary instances of the DB System. The shape determines resources allocated to a DB System - CPU cores and memory for VM shapes; CPU cores, memory and storage for non-VM (or bare metal) shapes. To get a list of shapes, use (the [ListShapes](https://docs.cloud.oracle.com/iaas/api/#/en/mysql/20181021/ShapeSummary/ListShapes) operation.
	ShapeName pulumi.StringInput `pulumi:"shapeName"`
	// DbSystem Lifecycle State
	State pulumi.StringInput `pulumi:"state"`
	// The date and time the DB System was created.
	TimeCreated pulumi.StringInput `pulumi:"timeCreated"`
	// The time the DB System was last updated.
	TimeUpdated pulumi.StringInput `pulumi:"timeUpdated"`
}

func (GetMysqlDbSystemsDbSystemHeatWaveClusterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetMysqlDbSystemsDbSystemHeatWaveCluster)(nil)).Elem()
}

func (i GetMysqlDbSystemsDbSystemHeatWaveClusterArgs) ToGetMysqlDbSystemsDbSystemHeatWaveClusterOutput() GetMysqlDbSystemsDbSystemHeatWaveClusterOutput {
	return i.ToGetMysqlDbSystemsDbSystemHeatWaveClusterOutputWithContext(context.Background())
}

func (i GetMysqlDbSystemsDbSystemHeatWaveClusterArgs) ToGetMysqlDbSystemsDbSystemHeatWaveClusterOutputWithContext(ctx context.Context) GetMysqlDbSystemsDbSystemHeatWaveClusterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetMysqlDbSystemsDbSystemHeatWaveClusterOutput)
}

type GetMysqlDbSystemsDbSystemHeatWaveClusterOutput struct{ *pulumi.OutputState }

func (GetMysqlDbSystemsDbSystemHeatWaveClusterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetMysqlDbSystemsDbSystemHeatWaveCluster)(nil)).Elem()
}

func (o GetMysqlDbSystemsDbSystemHeatWaveClusterOutput) ToGetMysqlDbSystemsDbSystemHeatWaveClusterOutput() GetMysqlDbSystemsDbSystemHeatWaveClusterOutput {
	return o
}

func (o GetMysqlDbSystemsDbSystemHeatWaveClusterOutput) ToGetMysqlDbSystemsDbSystemHeatWaveClusterOutputWithContext(ctx context.Context) GetMysqlDbSystemsDbSystemHeatWaveClusterOutput {
	return o
}

// The number of analytics-processing compute instances, of the specified shape, in the HeatWave cluster.
func (o GetMysqlDbSystemsDbSystemHeatWaveClusterOutput) ClusterSize() pulumi.IntOutput {
	return o.ApplyT(func(v GetMysqlDbSystemsDbSystemHeatWaveCluster) int { return v.ClusterSize }).(pulumi.IntOutput)
}

// The shape of the primary instances of the DB System. The shape determines resources allocated to a DB System - CPU cores and memory for VM shapes; CPU cores, memory and storage for non-VM (or bare metal) shapes. To get a list of shapes, use (the [ListShapes](https://docs.cloud.oracle.com/iaas/api/#/en/mysql/20181021/ShapeSummary/ListShapes) operation.
func (o GetMysqlDbSystemsDbSystemHeatWaveClusterOutput) ShapeName() pulumi.StringOutput {
	return o.ApplyT(func(v GetMysqlDbSystemsDbSystemHeatWaveCluster) string { return v.ShapeName }).(pulumi.StringOutput)
}

// DbSystem Lifecycle State
func (o GetMysqlDbSystemsDbSystemHeatWaveClusterOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v GetMysqlDbSystemsDbSystemHeatWaveCluster) string { return v.State }).(pulumi.StringOutput)
}

// The date and time the DB System was created.
func (o GetMysqlDbSystemsDbSystemHeatWaveClusterOutput) TimeCreated() pulumi.StringOutput {
	return o.ApplyT(func(v GetMysqlDbSystemsDbSystemHeatWaveCluster) string { return v.TimeCreated }).(pulumi.StringOutput)
}

// The time the DB System was last updated.
func (o GetMysqlDbSystemsDbSystemHeatWaveClusterOutput) TimeUpdated() pulumi.StringOutput {
	return o.ApplyT(func(v GetMysqlDbSystemsDbSystemHeatWaveCluster) string { return v.TimeUpdated }).(pulumi.StringOutput)
}

type GetMysqlDbSystemsDbSystemMaintenance struct {
	// The start time of the maintenance window.
	WindowStartTime string `pulumi:"windowStartTime"`
}

// GetMysqlDbSystemsDbSystemMaintenanceInput is an input type that accepts GetMysqlDbSystemsDbSystemMaintenanceArgs and GetMysqlDbSystemsDbSystemMaintenanceOutput values.
// You can construct a concrete instance of `GetMysqlDbSystemsDbSystemMaintenanceInput` via:
//
//          GetMysqlDbSystemsDbSystemMaintenanceArgs{...}
type GetMysqlDbSystemsDbSystemMaintenanceInput interface {
	pulumi.Input

	ToGetMysqlDbSystemsDbSystemMaintenanceOutput() GetMysqlDbSystemsDbSystemMaintenanceOutput
	ToGetMysqlDbSystemsDbSystemMaintenanceOutputWithContext(context.Context) GetMysqlDbSystemsDbSystemMaintenanceOutput
}

type GetMysqlDbSystemsDbSystemMaintenanceArgs struct {
	// The start time of the maintenance window.
	WindowStartTime pulumi.StringInput `pulumi:"windowStartTime"`
}

func (GetMysqlDbSystemsDbSystemMaintenanceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetMysqlDbSystemsDbSystemMaintenance)(nil)).Elem()
}

func (i GetMysqlDbSystemsDbSystemMaintenanceArgs) ToGetMysqlDbSystemsDbSystemMaintenanceOutput() GetMysqlDbSystemsDbSystemMaintenanceOutput {
	return i.ToGetMysqlDbSystemsDbSystemMaintenanceOutputWithContext(context.Background())
}

func (i GetMysqlDbSystemsDbSystemMaintenanceArgs) ToGetMysqlDbSystemsDbSystemMaintenanceOutputWithContext(ctx context.Context) GetMysqlDbSystemsDbSystemMaintenanceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetMysqlDbSystemsDbSystemMaintenanceOutput)
}

type GetMysqlDbSystemsDbSystemMaintenanceOutput struct{ *pulumi.OutputState }

func (GetMysqlDbSystemsDbSystemMaintenanceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetMysqlDbSystemsDbSystemMaintenance)(nil)).Elem()
}

func (o GetMysqlDbSystemsDbSystemMaintenanceOutput) ToGetMysqlDbSystemsDbSystemMaintenanceOutput() GetMysqlDbSystemsDbSystemMaintenanceOutput {
	return o
}

func (o GetMysqlDbSystemsDbSystemMaintenanceOutput) ToGetMysqlDbSystemsDbSystemMaintenanceOutputWithContext(ctx context.Context) GetMysqlDbSystemsDbSystemMaintenanceOutput {
	return o
}

// The start time of the maintenance window.
func (o GetMysqlDbSystemsDbSystemMaintenanceOutput) WindowStartTime() pulumi.StringOutput {
	return o.ApplyT(func(v GetMysqlDbSystemsDbSystemMaintenance) string { return v.WindowStartTime }).(pulumi.StringOutput)
}

type GetMysqlDbSystemsDbSystemSource struct {
	// The OCID of the backup to be used as the source for the new DB System.
	BackupId string `pulumi:"backupId"`
	// The specific source identifier.
	SourceType string `pulumi:"sourceType"`
}

// GetMysqlDbSystemsDbSystemSourceInput is an input type that accepts GetMysqlDbSystemsDbSystemSourceArgs and GetMysqlDbSystemsDbSystemSourceOutput values.
// You can construct a concrete instance of `GetMysqlDbSystemsDbSystemSourceInput` via:
//
//          GetMysqlDbSystemsDbSystemSourceArgs{...}
type GetMysqlDbSystemsDbSystemSourceInput interface {
	pulumi.Input

	ToGetMysqlDbSystemsDbSystemSourceOutput() GetMysqlDbSystemsDbSystemSourceOutput
	ToGetMysqlDbSystemsDbSystemSourceOutputWithContext(context.Context) GetMysqlDbSystemsDbSystemSourceOutput
}

type GetMysqlDbSystemsDbSystemSourceArgs struct {
	// The OCID of the backup to be used as the source for the new DB System.
	BackupId pulumi.StringInput `pulumi:"backupId"`
	// The specific source identifier.
	SourceType pulumi.StringInput `pulumi:"sourceType"`
}

func (GetMysqlDbSystemsDbSystemSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetMysqlDbSystemsDbSystemSource)(nil)).Elem()
}

func (i GetMysqlDbSystemsDbSystemSourceArgs) ToGetMysqlDbSystemsDbSystemSourceOutput() GetMysqlDbSystemsDbSystemSourceOutput {
	return i.ToGetMysqlDbSystemsDbSystemSourceOutputWithContext(context.Background())
}

func (i GetMysqlDbSystemsDbSystemSourceArgs) ToGetMysqlDbSystemsDbSystemSourceOutputWithContext(ctx context.Context) GetMysqlDbSystemsDbSystemSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetMysqlDbSystemsDbSystemSourceOutput)
}

type GetMysqlDbSystemsDbSystemSourceOutput struct{ *pulumi.OutputState }

func (GetMysqlDbSystemsDbSystemSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetMysqlDbSystemsDbSystemSource)(nil)).Elem()
}

func (o GetMysqlDbSystemsDbSystemSourceOutput) ToGetMysqlDbSystemsDbSystemSourceOutput() GetMysqlDbSystemsDbSystemSourceOutput {
	return o
}

func (o GetMysqlDbSystemsDbSystemSourceOutput) ToGetMysqlDbSystemsDbSystemSourceOutputWithContext(ctx context.Context) GetMysqlDbSystemsDbSystemSourceOutput {
	return o
}

// The OCID of the backup to be used as the source for the new DB System.
func (o GetMysqlDbSystemsDbSystemSourceOutput) BackupId() pulumi.StringOutput {
	return o.ApplyT(func(v GetMysqlDbSystemsDbSystemSource) string { return v.BackupId }).(pulumi.StringOutput)
}

// The specific source identifier.
func (o GetMysqlDbSystemsDbSystemSourceOutput) SourceType() pulumi.StringOutput {
	return o.ApplyT(func(v GetMysqlDbSystemsDbSystemSource) string { return v.SourceType }).(pulumi.StringOutput)
}

type GetMysqlDbSystemsFilter struct {
	Name   string   `pulumi:"name"`
	Regex  *bool    `pulumi:"regex"`
	Values []string `pulumi:"values"`
}

// GetMysqlDbSystemsFilterInput is an input type that accepts GetMysqlDbSystemsFilterArgs and GetMysqlDbSystemsFilterOutput values.
// You can construct a concrete instance of `GetMysqlDbSystemsFilterInput` via:
//
//          GetMysqlDbSystemsFilterArgs{...}
type GetMysqlDbSystemsFilterInput interface {
	pulumi.Input

	ToGetMysqlDbSystemsFilterOutput() GetMysqlDbSystemsFilterOutput
	ToGetMysqlDbSystemsFilterOutputWithContext(context.Context) GetMysqlDbSystemsFilterOutput
}

type GetMysqlDbSystemsFilterArgs struct {
	Name   pulumi.StringInput      `pulumi:"name"`
	Regex  pulumi.BoolPtrInput     `pulumi:"regex"`
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (GetMysqlDbSystemsFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetMysqlDbSystemsFilter)(nil)).Elem()
}

func (i GetMysqlDbSystemsFilterArgs) ToGetMysqlDbSystemsFilterOutput() GetMysqlDbSystemsFilterOutput {
	return i.ToGetMysqlDbSystemsFilterOutputWithContext(context.Background())
}

func (i GetMysqlDbSystemsFilterArgs) ToGetMysqlDbSystemsFilterOutputWithContext(ctx context.Context) GetMysqlDbSystemsFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetMysqlDbSystemsFilterOutput)
}

// GetMysqlDbSystemsFilterArrayInput is an input type that accepts GetMysqlDbSystemsFilterArray and GetMysqlDbSystemsFilterArrayOutput values.
// You can construct a concrete instance of `GetMysqlDbSystemsFilterArrayInput` via:
//
//          GetMysqlDbSystemsFilterArray{ GetMysqlDbSystemsFilterArgs{...} }
type GetMysqlDbSystemsFilterArrayInput interface {
	pulumi.Input

	ToGetMysqlDbSystemsFilterArrayOutput() GetMysqlDbSystemsFilterArrayOutput
	ToGetMysqlDbSystemsFilterArrayOutputWithContext(context.Context) GetMysqlDbSystemsFilterArrayOutput
}

type GetMysqlDbSystemsFilterArray []GetMysqlDbSystemsFilterInput

func (GetMysqlDbSystemsFilterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetMysqlDbSystemsFilter)(nil)).Elem()
}

func (i GetMysqlDbSystemsFilterArray) ToGetMysqlDbSystemsFilterArrayOutput() GetMysqlDbSystemsFilterArrayOutput {
	return i.ToGetMysqlDbSystemsFilterArrayOutputWithContext(context.Background())
}

func (i GetMysqlDbSystemsFilterArray) ToGetMysqlDbSystemsFilterArrayOutputWithContext(ctx context.Context) GetMysqlDbSystemsFilterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetMysqlDbSystemsFilterArrayOutput)
}

type GetMysqlDbSystemsFilterOutput struct{ *pulumi.OutputState }

func (GetMysqlDbSystemsFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetMysqlDbSystemsFilter)(nil)).Elem()
}

func (o GetMysqlDbSystemsFilterOutput) ToGetMysqlDbSystemsFilterOutput() GetMysqlDbSystemsFilterOutput {
	return o
}

func (o GetMysqlDbSystemsFilterOutput) ToGetMysqlDbSystemsFilterOutputWithContext(ctx context.Context) GetMysqlDbSystemsFilterOutput {
	return o
}

func (o GetMysqlDbSystemsFilterOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetMysqlDbSystemsFilter) string { return v.Name }).(pulumi.StringOutput)
}

func (o GetMysqlDbSystemsFilterOutput) Regex() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetMysqlDbSystemsFilter) *bool { return v.Regex }).(pulumi.BoolPtrOutput)
}

func (o GetMysqlDbSystemsFilterOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetMysqlDbSystemsFilter) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type GetMysqlDbSystemsFilterArrayOutput struct{ *pulumi.OutputState }

func (GetMysqlDbSystemsFilterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetMysqlDbSystemsFilter)(nil)).Elem()
}

func (o GetMysqlDbSystemsFilterArrayOutput) ToGetMysqlDbSystemsFilterArrayOutput() GetMysqlDbSystemsFilterArrayOutput {
	return o
}

func (o GetMysqlDbSystemsFilterArrayOutput) ToGetMysqlDbSystemsFilterArrayOutputWithContext(ctx context.Context) GetMysqlDbSystemsFilterArrayOutput {
	return o
}

func (o GetMysqlDbSystemsFilterArrayOutput) Index(i pulumi.IntInput) GetMysqlDbSystemsFilterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetMysqlDbSystemsFilter {
		return vs[0].([]GetMysqlDbSystemsFilter)[vs[1].(int)]
	}).(GetMysqlDbSystemsFilterOutput)
}

type GetMysqlVersionsFilter struct {
	Name   string   `pulumi:"name"`
	Regex  *bool    `pulumi:"regex"`
	Values []string `pulumi:"values"`
}

// GetMysqlVersionsFilterInput is an input type that accepts GetMysqlVersionsFilterArgs and GetMysqlVersionsFilterOutput values.
// You can construct a concrete instance of `GetMysqlVersionsFilterInput` via:
//
//          GetMysqlVersionsFilterArgs{...}
type GetMysqlVersionsFilterInput interface {
	pulumi.Input

	ToGetMysqlVersionsFilterOutput() GetMysqlVersionsFilterOutput
	ToGetMysqlVersionsFilterOutputWithContext(context.Context) GetMysqlVersionsFilterOutput
}

type GetMysqlVersionsFilterArgs struct {
	Name   pulumi.StringInput      `pulumi:"name"`
	Regex  pulumi.BoolPtrInput     `pulumi:"regex"`
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (GetMysqlVersionsFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetMysqlVersionsFilter)(nil)).Elem()
}

func (i GetMysqlVersionsFilterArgs) ToGetMysqlVersionsFilterOutput() GetMysqlVersionsFilterOutput {
	return i.ToGetMysqlVersionsFilterOutputWithContext(context.Background())
}

func (i GetMysqlVersionsFilterArgs) ToGetMysqlVersionsFilterOutputWithContext(ctx context.Context) GetMysqlVersionsFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetMysqlVersionsFilterOutput)
}

// GetMysqlVersionsFilterArrayInput is an input type that accepts GetMysqlVersionsFilterArray and GetMysqlVersionsFilterArrayOutput values.
// You can construct a concrete instance of `GetMysqlVersionsFilterArrayInput` via:
//
//          GetMysqlVersionsFilterArray{ GetMysqlVersionsFilterArgs{...} }
type GetMysqlVersionsFilterArrayInput interface {
	pulumi.Input

	ToGetMysqlVersionsFilterArrayOutput() GetMysqlVersionsFilterArrayOutput
	ToGetMysqlVersionsFilterArrayOutputWithContext(context.Context) GetMysqlVersionsFilterArrayOutput
}

type GetMysqlVersionsFilterArray []GetMysqlVersionsFilterInput

func (GetMysqlVersionsFilterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetMysqlVersionsFilter)(nil)).Elem()
}

func (i GetMysqlVersionsFilterArray) ToGetMysqlVersionsFilterArrayOutput() GetMysqlVersionsFilterArrayOutput {
	return i.ToGetMysqlVersionsFilterArrayOutputWithContext(context.Background())
}

func (i GetMysqlVersionsFilterArray) ToGetMysqlVersionsFilterArrayOutputWithContext(ctx context.Context) GetMysqlVersionsFilterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetMysqlVersionsFilterArrayOutput)
}

type GetMysqlVersionsFilterOutput struct{ *pulumi.OutputState }

func (GetMysqlVersionsFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetMysqlVersionsFilter)(nil)).Elem()
}

func (o GetMysqlVersionsFilterOutput) ToGetMysqlVersionsFilterOutput() GetMysqlVersionsFilterOutput {
	return o
}

func (o GetMysqlVersionsFilterOutput) ToGetMysqlVersionsFilterOutputWithContext(ctx context.Context) GetMysqlVersionsFilterOutput {
	return o
}

func (o GetMysqlVersionsFilterOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetMysqlVersionsFilter) string { return v.Name }).(pulumi.StringOutput)
}

func (o GetMysqlVersionsFilterOutput) Regex() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetMysqlVersionsFilter) *bool { return v.Regex }).(pulumi.BoolPtrOutput)
}

func (o GetMysqlVersionsFilterOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetMysqlVersionsFilter) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type GetMysqlVersionsFilterArrayOutput struct{ *pulumi.OutputState }

func (GetMysqlVersionsFilterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetMysqlVersionsFilter)(nil)).Elem()
}

func (o GetMysqlVersionsFilterArrayOutput) ToGetMysqlVersionsFilterArrayOutput() GetMysqlVersionsFilterArrayOutput {
	return o
}

func (o GetMysqlVersionsFilterArrayOutput) ToGetMysqlVersionsFilterArrayOutputWithContext(ctx context.Context) GetMysqlVersionsFilterArrayOutput {
	return o
}

func (o GetMysqlVersionsFilterArrayOutput) Index(i pulumi.IntInput) GetMysqlVersionsFilterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetMysqlVersionsFilter {
		return vs[0].([]GetMysqlVersionsFilter)[vs[1].(int)]
	}).(GetMysqlVersionsFilterOutput)
}

type GetMysqlVersionsVersion struct {
	// A descriptive summary of a group of versions.
	VersionFamily string `pulumi:"versionFamily"`
	// The list of supported MySQL Versions.
	Versions []GetMysqlVersionsVersionVersion `pulumi:"versions"`
}

// GetMysqlVersionsVersionInput is an input type that accepts GetMysqlVersionsVersionArgs and GetMysqlVersionsVersionOutput values.
// You can construct a concrete instance of `GetMysqlVersionsVersionInput` via:
//
//          GetMysqlVersionsVersionArgs{...}
type GetMysqlVersionsVersionInput interface {
	pulumi.Input

	ToGetMysqlVersionsVersionOutput() GetMysqlVersionsVersionOutput
	ToGetMysqlVersionsVersionOutputWithContext(context.Context) GetMysqlVersionsVersionOutput
}

type GetMysqlVersionsVersionArgs struct {
	// A descriptive summary of a group of versions.
	VersionFamily pulumi.StringInput `pulumi:"versionFamily"`
	// The list of supported MySQL Versions.
	Versions GetMysqlVersionsVersionVersionArrayInput `pulumi:"versions"`
}

func (GetMysqlVersionsVersionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetMysqlVersionsVersion)(nil)).Elem()
}

func (i GetMysqlVersionsVersionArgs) ToGetMysqlVersionsVersionOutput() GetMysqlVersionsVersionOutput {
	return i.ToGetMysqlVersionsVersionOutputWithContext(context.Background())
}

func (i GetMysqlVersionsVersionArgs) ToGetMysqlVersionsVersionOutputWithContext(ctx context.Context) GetMysqlVersionsVersionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetMysqlVersionsVersionOutput)
}

// GetMysqlVersionsVersionArrayInput is an input type that accepts GetMysqlVersionsVersionArray and GetMysqlVersionsVersionArrayOutput values.
// You can construct a concrete instance of `GetMysqlVersionsVersionArrayInput` via:
//
//          GetMysqlVersionsVersionArray{ GetMysqlVersionsVersionArgs{...} }
type GetMysqlVersionsVersionArrayInput interface {
	pulumi.Input

	ToGetMysqlVersionsVersionArrayOutput() GetMysqlVersionsVersionArrayOutput
	ToGetMysqlVersionsVersionArrayOutputWithContext(context.Context) GetMysqlVersionsVersionArrayOutput
}

type GetMysqlVersionsVersionArray []GetMysqlVersionsVersionInput

func (GetMysqlVersionsVersionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetMysqlVersionsVersion)(nil)).Elem()
}

func (i GetMysqlVersionsVersionArray) ToGetMysqlVersionsVersionArrayOutput() GetMysqlVersionsVersionArrayOutput {
	return i.ToGetMysqlVersionsVersionArrayOutputWithContext(context.Background())
}

func (i GetMysqlVersionsVersionArray) ToGetMysqlVersionsVersionArrayOutputWithContext(ctx context.Context) GetMysqlVersionsVersionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetMysqlVersionsVersionArrayOutput)
}

type GetMysqlVersionsVersionOutput struct{ *pulumi.OutputState }

func (GetMysqlVersionsVersionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetMysqlVersionsVersion)(nil)).Elem()
}

func (o GetMysqlVersionsVersionOutput) ToGetMysqlVersionsVersionOutput() GetMysqlVersionsVersionOutput {
	return o
}

func (o GetMysqlVersionsVersionOutput) ToGetMysqlVersionsVersionOutputWithContext(ctx context.Context) GetMysqlVersionsVersionOutput {
	return o
}

// A descriptive summary of a group of versions.
func (o GetMysqlVersionsVersionOutput) VersionFamily() pulumi.StringOutput {
	return o.ApplyT(func(v GetMysqlVersionsVersion) string { return v.VersionFamily }).(pulumi.StringOutput)
}

// The list of supported MySQL Versions.
func (o GetMysqlVersionsVersionOutput) Versions() GetMysqlVersionsVersionVersionArrayOutput {
	return o.ApplyT(func(v GetMysqlVersionsVersion) []GetMysqlVersionsVersionVersion { return v.Versions }).(GetMysqlVersionsVersionVersionArrayOutput)
}

type GetMysqlVersionsVersionArrayOutput struct{ *pulumi.OutputState }

func (GetMysqlVersionsVersionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetMysqlVersionsVersion)(nil)).Elem()
}

func (o GetMysqlVersionsVersionArrayOutput) ToGetMysqlVersionsVersionArrayOutput() GetMysqlVersionsVersionArrayOutput {
	return o
}

func (o GetMysqlVersionsVersionArrayOutput) ToGetMysqlVersionsVersionArrayOutputWithContext(ctx context.Context) GetMysqlVersionsVersionArrayOutput {
	return o
}

func (o GetMysqlVersionsVersionArrayOutput) Index(i pulumi.IntInput) GetMysqlVersionsVersionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetMysqlVersionsVersion {
		return vs[0].([]GetMysqlVersionsVersion)[vs[1].(int)]
	}).(GetMysqlVersionsVersionOutput)
}

type GetMysqlVersionsVersionVersion struct {
	// A link to a page describing the version.
	Description string `pulumi:"description"`
	// The specific version identifier
	Version string `pulumi:"version"`
}

// GetMysqlVersionsVersionVersionInput is an input type that accepts GetMysqlVersionsVersionVersionArgs and GetMysqlVersionsVersionVersionOutput values.
// You can construct a concrete instance of `GetMysqlVersionsVersionVersionInput` via:
//
//          GetMysqlVersionsVersionVersionArgs{...}
type GetMysqlVersionsVersionVersionInput interface {
	pulumi.Input

	ToGetMysqlVersionsVersionVersionOutput() GetMysqlVersionsVersionVersionOutput
	ToGetMysqlVersionsVersionVersionOutputWithContext(context.Context) GetMysqlVersionsVersionVersionOutput
}

type GetMysqlVersionsVersionVersionArgs struct {
	// A link to a page describing the version.
	Description pulumi.StringInput `pulumi:"description"`
	// The specific version identifier
	Version pulumi.StringInput `pulumi:"version"`
}

func (GetMysqlVersionsVersionVersionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetMysqlVersionsVersionVersion)(nil)).Elem()
}

func (i GetMysqlVersionsVersionVersionArgs) ToGetMysqlVersionsVersionVersionOutput() GetMysqlVersionsVersionVersionOutput {
	return i.ToGetMysqlVersionsVersionVersionOutputWithContext(context.Background())
}

func (i GetMysqlVersionsVersionVersionArgs) ToGetMysqlVersionsVersionVersionOutputWithContext(ctx context.Context) GetMysqlVersionsVersionVersionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetMysqlVersionsVersionVersionOutput)
}

// GetMysqlVersionsVersionVersionArrayInput is an input type that accepts GetMysqlVersionsVersionVersionArray and GetMysqlVersionsVersionVersionArrayOutput values.
// You can construct a concrete instance of `GetMysqlVersionsVersionVersionArrayInput` via:
//
//          GetMysqlVersionsVersionVersionArray{ GetMysqlVersionsVersionVersionArgs{...} }
type GetMysqlVersionsVersionVersionArrayInput interface {
	pulumi.Input

	ToGetMysqlVersionsVersionVersionArrayOutput() GetMysqlVersionsVersionVersionArrayOutput
	ToGetMysqlVersionsVersionVersionArrayOutputWithContext(context.Context) GetMysqlVersionsVersionVersionArrayOutput
}

type GetMysqlVersionsVersionVersionArray []GetMysqlVersionsVersionVersionInput

func (GetMysqlVersionsVersionVersionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetMysqlVersionsVersionVersion)(nil)).Elem()
}

func (i GetMysqlVersionsVersionVersionArray) ToGetMysqlVersionsVersionVersionArrayOutput() GetMysqlVersionsVersionVersionArrayOutput {
	return i.ToGetMysqlVersionsVersionVersionArrayOutputWithContext(context.Background())
}

func (i GetMysqlVersionsVersionVersionArray) ToGetMysqlVersionsVersionVersionArrayOutputWithContext(ctx context.Context) GetMysqlVersionsVersionVersionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetMysqlVersionsVersionVersionArrayOutput)
}

type GetMysqlVersionsVersionVersionOutput struct{ *pulumi.OutputState }

func (GetMysqlVersionsVersionVersionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetMysqlVersionsVersionVersion)(nil)).Elem()
}

func (o GetMysqlVersionsVersionVersionOutput) ToGetMysqlVersionsVersionVersionOutput() GetMysqlVersionsVersionVersionOutput {
	return o
}

func (o GetMysqlVersionsVersionVersionOutput) ToGetMysqlVersionsVersionVersionOutputWithContext(ctx context.Context) GetMysqlVersionsVersionVersionOutput {
	return o
}

// A link to a page describing the version.
func (o GetMysqlVersionsVersionVersionOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v GetMysqlVersionsVersionVersion) string { return v.Description }).(pulumi.StringOutput)
}

// The specific version identifier
func (o GetMysqlVersionsVersionVersionOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v GetMysqlVersionsVersionVersion) string { return v.Version }).(pulumi.StringOutput)
}

type GetMysqlVersionsVersionVersionArrayOutput struct{ *pulumi.OutputState }

func (GetMysqlVersionsVersionVersionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetMysqlVersionsVersionVersion)(nil)).Elem()
}

func (o GetMysqlVersionsVersionVersionArrayOutput) ToGetMysqlVersionsVersionVersionArrayOutput() GetMysqlVersionsVersionVersionArrayOutput {
	return o
}

func (o GetMysqlVersionsVersionVersionArrayOutput) ToGetMysqlVersionsVersionVersionArrayOutputWithContext(ctx context.Context) GetMysqlVersionsVersionVersionArrayOutput {
	return o
}

func (o GetMysqlVersionsVersionVersionArrayOutput) Index(i pulumi.IntInput) GetMysqlVersionsVersionVersionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetMysqlVersionsVersionVersion {
		return vs[0].([]GetMysqlVersionsVersionVersion)[vs[1].(int)]
	}).(GetMysqlVersionsVersionVersionOutput)
}

type GetShapesFilter struct {
	// Name
	Name   string   `pulumi:"name"`
	Regex  *bool    `pulumi:"regex"`
	Values []string `pulumi:"values"`
}

// GetShapesFilterInput is an input type that accepts GetShapesFilterArgs and GetShapesFilterOutput values.
// You can construct a concrete instance of `GetShapesFilterInput` via:
//
//          GetShapesFilterArgs{...}
type GetShapesFilterInput interface {
	pulumi.Input

	ToGetShapesFilterOutput() GetShapesFilterOutput
	ToGetShapesFilterOutputWithContext(context.Context) GetShapesFilterOutput
}

type GetShapesFilterArgs struct {
	// Name
	Name   pulumi.StringInput      `pulumi:"name"`
	Regex  pulumi.BoolPtrInput     `pulumi:"regex"`
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (GetShapesFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetShapesFilter)(nil)).Elem()
}

func (i GetShapesFilterArgs) ToGetShapesFilterOutput() GetShapesFilterOutput {
	return i.ToGetShapesFilterOutputWithContext(context.Background())
}

func (i GetShapesFilterArgs) ToGetShapesFilterOutputWithContext(ctx context.Context) GetShapesFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetShapesFilterOutput)
}

// GetShapesFilterArrayInput is an input type that accepts GetShapesFilterArray and GetShapesFilterArrayOutput values.
// You can construct a concrete instance of `GetShapesFilterArrayInput` via:
//
//          GetShapesFilterArray{ GetShapesFilterArgs{...} }
type GetShapesFilterArrayInput interface {
	pulumi.Input

	ToGetShapesFilterArrayOutput() GetShapesFilterArrayOutput
	ToGetShapesFilterArrayOutputWithContext(context.Context) GetShapesFilterArrayOutput
}

type GetShapesFilterArray []GetShapesFilterInput

func (GetShapesFilterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetShapesFilter)(nil)).Elem()
}

func (i GetShapesFilterArray) ToGetShapesFilterArrayOutput() GetShapesFilterArrayOutput {
	return i.ToGetShapesFilterArrayOutputWithContext(context.Background())
}

func (i GetShapesFilterArray) ToGetShapesFilterArrayOutputWithContext(ctx context.Context) GetShapesFilterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetShapesFilterArrayOutput)
}

type GetShapesFilterOutput struct{ *pulumi.OutputState }

func (GetShapesFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetShapesFilter)(nil)).Elem()
}

func (o GetShapesFilterOutput) ToGetShapesFilterOutput() GetShapesFilterOutput {
	return o
}

func (o GetShapesFilterOutput) ToGetShapesFilterOutputWithContext(ctx context.Context) GetShapesFilterOutput {
	return o
}

// Name
func (o GetShapesFilterOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetShapesFilter) string { return v.Name }).(pulumi.StringOutput)
}

func (o GetShapesFilterOutput) Regex() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetShapesFilter) *bool { return v.Regex }).(pulumi.BoolPtrOutput)
}

func (o GetShapesFilterOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetShapesFilter) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type GetShapesFilterArrayOutput struct{ *pulumi.OutputState }

func (GetShapesFilterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetShapesFilter)(nil)).Elem()
}

func (o GetShapesFilterArrayOutput) ToGetShapesFilterArrayOutput() GetShapesFilterArrayOutput {
	return o
}

func (o GetShapesFilterArrayOutput) ToGetShapesFilterArrayOutputWithContext(ctx context.Context) GetShapesFilterArrayOutput {
	return o
}

func (o GetShapesFilterArrayOutput) Index(i pulumi.IntInput) GetShapesFilterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetShapesFilter {
		return vs[0].([]GetShapesFilter)[vs[1].(int)]
	}).(GetShapesFilterOutput)
}

type GetShapesShape struct {
	// The number of CPU Cores the Instance provides. These are "OCPU"s.
	CpuCoreCount int `pulumi:"cpuCoreCount"`
	// Return shapes that are supported by the service feature.
	IsSupportedFors []string `pulumi:"isSupportedFors"`
	// The amount of RAM the Instance provides. This is an IEC base-2 number.
	MemorySizeInGbs int `pulumi:"memorySizeInGbs"`
	// Name
	Name string `pulumi:"name"`
}

// GetShapesShapeInput is an input type that accepts GetShapesShapeArgs and GetShapesShapeOutput values.
// You can construct a concrete instance of `GetShapesShapeInput` via:
//
//          GetShapesShapeArgs{...}
type GetShapesShapeInput interface {
	pulumi.Input

	ToGetShapesShapeOutput() GetShapesShapeOutput
	ToGetShapesShapeOutputWithContext(context.Context) GetShapesShapeOutput
}

type GetShapesShapeArgs struct {
	// The number of CPU Cores the Instance provides. These are "OCPU"s.
	CpuCoreCount pulumi.IntInput `pulumi:"cpuCoreCount"`
	// Return shapes that are supported by the service feature.
	IsSupportedFors pulumi.StringArrayInput `pulumi:"isSupportedFors"`
	// The amount of RAM the Instance provides. This is an IEC base-2 number.
	MemorySizeInGbs pulumi.IntInput `pulumi:"memorySizeInGbs"`
	// Name
	Name pulumi.StringInput `pulumi:"name"`
}

func (GetShapesShapeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetShapesShape)(nil)).Elem()
}

func (i GetShapesShapeArgs) ToGetShapesShapeOutput() GetShapesShapeOutput {
	return i.ToGetShapesShapeOutputWithContext(context.Background())
}

func (i GetShapesShapeArgs) ToGetShapesShapeOutputWithContext(ctx context.Context) GetShapesShapeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetShapesShapeOutput)
}

// GetShapesShapeArrayInput is an input type that accepts GetShapesShapeArray and GetShapesShapeArrayOutput values.
// You can construct a concrete instance of `GetShapesShapeArrayInput` via:
//
//          GetShapesShapeArray{ GetShapesShapeArgs{...} }
type GetShapesShapeArrayInput interface {
	pulumi.Input

	ToGetShapesShapeArrayOutput() GetShapesShapeArrayOutput
	ToGetShapesShapeArrayOutputWithContext(context.Context) GetShapesShapeArrayOutput
}

type GetShapesShapeArray []GetShapesShapeInput

func (GetShapesShapeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetShapesShape)(nil)).Elem()
}

func (i GetShapesShapeArray) ToGetShapesShapeArrayOutput() GetShapesShapeArrayOutput {
	return i.ToGetShapesShapeArrayOutputWithContext(context.Background())
}

func (i GetShapesShapeArray) ToGetShapesShapeArrayOutputWithContext(ctx context.Context) GetShapesShapeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetShapesShapeArrayOutput)
}

type GetShapesShapeOutput struct{ *pulumi.OutputState }

func (GetShapesShapeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetShapesShape)(nil)).Elem()
}

func (o GetShapesShapeOutput) ToGetShapesShapeOutput() GetShapesShapeOutput {
	return o
}

func (o GetShapesShapeOutput) ToGetShapesShapeOutputWithContext(ctx context.Context) GetShapesShapeOutput {
	return o
}

// The number of CPU Cores the Instance provides. These are "OCPU"s.
func (o GetShapesShapeOutput) CpuCoreCount() pulumi.IntOutput {
	return o.ApplyT(func(v GetShapesShape) int { return v.CpuCoreCount }).(pulumi.IntOutput)
}

// Return shapes that are supported by the service feature.
func (o GetShapesShapeOutput) IsSupportedFors() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetShapesShape) []string { return v.IsSupportedFors }).(pulumi.StringArrayOutput)
}

// The amount of RAM the Instance provides. This is an IEC base-2 number.
func (o GetShapesShapeOutput) MemorySizeInGbs() pulumi.IntOutput {
	return o.ApplyT(func(v GetShapesShape) int { return v.MemorySizeInGbs }).(pulumi.IntOutput)
}

// Name
func (o GetShapesShapeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetShapesShape) string { return v.Name }).(pulumi.StringOutput)
}

type GetShapesShapeArrayOutput struct{ *pulumi.OutputState }

func (GetShapesShapeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetShapesShape)(nil)).Elem()
}

func (o GetShapesShapeArrayOutput) ToGetShapesShapeArrayOutput() GetShapesShapeArrayOutput {
	return o
}

func (o GetShapesShapeArrayOutput) ToGetShapesShapeArrayOutputWithContext(ctx context.Context) GetShapesShapeArrayOutput {
	return o
}

func (o GetShapesShapeArrayOutput) Index(i pulumi.IntInput) GetShapesShapeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetShapesShape {
		return vs[0].([]GetShapesShape)[vs[1].(int)]
	}).(GetShapesShapeOutput)
}

func init() {
	pulumi.RegisterOutputType(AnalyticsClusterClusterNodeOutput{})
	pulumi.RegisterOutputType(AnalyticsClusterClusterNodeArrayOutput{})
	pulumi.RegisterOutputType(ChannelSourceOutput{})
	pulumi.RegisterOutputType(ChannelSourcePtrOutput{})
	pulumi.RegisterOutputType(ChannelSourceSslCaCertificateOutput{})
	pulumi.RegisterOutputType(ChannelSourceSslCaCertificatePtrOutput{})
	pulumi.RegisterOutputType(ChannelTargetOutput{})
	pulumi.RegisterOutputType(ChannelTargetPtrOutput{})
	pulumi.RegisterOutputType(HeatWaveClusterClusterNodeOutput{})
	pulumi.RegisterOutputType(HeatWaveClusterClusterNodeArrayOutput{})
	pulumi.RegisterOutputType(MysqlBackupDbSystemSnapshotOutput{})
	pulumi.RegisterOutputType(MysqlBackupDbSystemSnapshotPtrOutput{})
	pulumi.RegisterOutputType(MysqlBackupDbSystemSnapshotBackupPolicyOutput{})
	pulumi.RegisterOutputType(MysqlBackupDbSystemSnapshotBackupPolicyPtrOutput{})
	pulumi.RegisterOutputType(MysqlBackupDbSystemSnapshotEndpointOutput{})
	pulumi.RegisterOutputType(MysqlBackupDbSystemSnapshotEndpointArrayOutput{})
	pulumi.RegisterOutputType(MysqlBackupDbSystemSnapshotMaintenanceOutput{})
	pulumi.RegisterOutputType(MysqlBackupDbSystemSnapshotMaintenancePtrOutput{})
	pulumi.RegisterOutputType(MysqlDbSystemAnalyticsClusterOutput{})
	pulumi.RegisterOutputType(MysqlDbSystemAnalyticsClusterPtrOutput{})
	pulumi.RegisterOutputType(MysqlDbSystemBackupPolicyOutput{})
	pulumi.RegisterOutputType(MysqlDbSystemBackupPolicyPtrOutput{})
	pulumi.RegisterOutputType(MysqlDbSystemChannelOutput{})
	pulumi.RegisterOutputType(MysqlDbSystemChannelArrayOutput{})
	pulumi.RegisterOutputType(MysqlDbSystemChannelSourceOutput{})
	pulumi.RegisterOutputType(MysqlDbSystemChannelSourcePtrOutput{})
	pulumi.RegisterOutputType(MysqlDbSystemChannelSourceSslCaCertificateOutput{})
	pulumi.RegisterOutputType(MysqlDbSystemChannelSourceSslCaCertificatePtrOutput{})
	pulumi.RegisterOutputType(MysqlDbSystemChannelTargetOutput{})
	pulumi.RegisterOutputType(MysqlDbSystemChannelTargetPtrOutput{})
	pulumi.RegisterOutputType(MysqlDbSystemCurrentPlacementOutput{})
	pulumi.RegisterOutputType(MysqlDbSystemCurrentPlacementPtrOutput{})
	pulumi.RegisterOutputType(MysqlDbSystemEndpointOutput{})
	pulumi.RegisterOutputType(MysqlDbSystemEndpointArrayOutput{})
	pulumi.RegisterOutputType(MysqlDbSystemHeatWaveClusterOutput{})
	pulumi.RegisterOutputType(MysqlDbSystemHeatWaveClusterPtrOutput{})
	pulumi.RegisterOutputType(MysqlDbSystemMaintenanceOutput{})
	pulumi.RegisterOutputType(MysqlDbSystemMaintenancePtrOutput{})
	pulumi.RegisterOutputType(MysqlDbSystemSourceOutput{})
	pulumi.RegisterOutputType(MysqlDbSystemSourcePtrOutput{})
	pulumi.RegisterOutputType(GetAnalyticsClusterClusterNodeOutput{})
	pulumi.RegisterOutputType(GetAnalyticsClusterClusterNodeArrayOutput{})
	pulumi.RegisterOutputType(GetChannelSourceOutput{})
	pulumi.RegisterOutputType(GetChannelSourceSslCaCertificateOutput{})
	pulumi.RegisterOutputType(GetChannelTargetOutput{})
	pulumi.RegisterOutputType(GetChannelsChannelOutput{})
	pulumi.RegisterOutputType(GetChannelsChannelArrayOutput{})
	pulumi.RegisterOutputType(GetChannelsChannelSourceOutput{})
	pulumi.RegisterOutputType(GetChannelsChannelSourceSslCaCertificateOutput{})
	pulumi.RegisterOutputType(GetChannelsChannelTargetOutput{})
	pulumi.RegisterOutputType(GetChannelsFilterOutput{})
	pulumi.RegisterOutputType(GetChannelsFilterArrayOutput{})
	pulumi.RegisterOutputType(GetHeatWaveClusterClusterNodeOutput{})
	pulumi.RegisterOutputType(GetHeatWaveClusterClusterNodeArrayOutput{})
	pulumi.RegisterOutputType(GetMysqlBackupDbSystemSnapshotOutput{})
	pulumi.RegisterOutputType(GetMysqlBackupDbSystemSnapshotBackupPolicyOutput{})
	pulumi.RegisterOutputType(GetMysqlBackupDbSystemSnapshotEndpointOutput{})
	pulumi.RegisterOutputType(GetMysqlBackupDbSystemSnapshotEndpointArrayOutput{})
	pulumi.RegisterOutputType(GetMysqlBackupDbSystemSnapshotMaintenanceOutput{})
	pulumi.RegisterOutputType(GetMysqlBackupsBackupOutput{})
	pulumi.RegisterOutputType(GetMysqlBackupsBackupArrayOutput{})
	pulumi.RegisterOutputType(GetMysqlBackupsBackupDbSystemSnapshotOutput{})
	pulumi.RegisterOutputType(GetMysqlBackupsBackupDbSystemSnapshotBackupPolicyOutput{})
	pulumi.RegisterOutputType(GetMysqlBackupsBackupDbSystemSnapshotEndpointOutput{})
	pulumi.RegisterOutputType(GetMysqlBackupsBackupDbSystemSnapshotEndpointArrayOutput{})
	pulumi.RegisterOutputType(GetMysqlBackupsBackupDbSystemSnapshotMaintenanceOutput{})
	pulumi.RegisterOutputType(GetMysqlBackupsFilterOutput{})
	pulumi.RegisterOutputType(GetMysqlBackupsFilterArrayOutput{})
	pulumi.RegisterOutputType(GetMysqlConfigurationVariableOutput{})
	pulumi.RegisterOutputType(GetMysqlConfigurationVariableArrayOutput{})
	pulumi.RegisterOutputType(GetMysqlConfigurationsConfigurationOutput{})
	pulumi.RegisterOutputType(GetMysqlConfigurationsConfigurationArrayOutput{})
	pulumi.RegisterOutputType(GetMysqlConfigurationsConfigurationVariablesOutput{})
	pulumi.RegisterOutputType(GetMysqlConfigurationsFilterOutput{})
	pulumi.RegisterOutputType(GetMysqlConfigurationsFilterArrayOutput{})
	pulumi.RegisterOutputType(GetMysqlDbSystemAnalyticsClusterOutput{})
	pulumi.RegisterOutputType(GetMysqlDbSystemBackupPolicyOutput{})
	pulumi.RegisterOutputType(GetMysqlDbSystemChannelOutput{})
	pulumi.RegisterOutputType(GetMysqlDbSystemChannelArrayOutput{})
	pulumi.RegisterOutputType(GetMysqlDbSystemChannelSourceOutput{})
	pulumi.RegisterOutputType(GetMysqlDbSystemChannelSourceSslCaCertificateOutput{})
	pulumi.RegisterOutputType(GetMysqlDbSystemChannelTargetOutput{})
	pulumi.RegisterOutputType(GetMysqlDbSystemCurrentPlacementOutput{})
	pulumi.RegisterOutputType(GetMysqlDbSystemEndpointOutput{})
	pulumi.RegisterOutputType(GetMysqlDbSystemEndpointArrayOutput{})
	pulumi.RegisterOutputType(GetMysqlDbSystemHeatWaveClusterOutput{})
	pulumi.RegisterOutputType(GetMysqlDbSystemMaintenanceOutput{})
	pulumi.RegisterOutputType(GetMysqlDbSystemSourceOutput{})
	pulumi.RegisterOutputType(GetMysqlDbSystemsDbSystemOutput{})
	pulumi.RegisterOutputType(GetMysqlDbSystemsDbSystemArrayOutput{})
	pulumi.RegisterOutputType(GetMysqlDbSystemsDbSystemAnalyticsClusterOutput{})
	pulumi.RegisterOutputType(GetMysqlDbSystemsDbSystemBackupPolicyOutput{})
	pulumi.RegisterOutputType(GetMysqlDbSystemsDbSystemChannelOutput{})
	pulumi.RegisterOutputType(GetMysqlDbSystemsDbSystemChannelArrayOutput{})
	pulumi.RegisterOutputType(GetMysqlDbSystemsDbSystemChannelSourceOutput{})
	pulumi.RegisterOutputType(GetMysqlDbSystemsDbSystemChannelSourceSslCaCertificateOutput{})
	pulumi.RegisterOutputType(GetMysqlDbSystemsDbSystemChannelTargetOutput{})
	pulumi.RegisterOutputType(GetMysqlDbSystemsDbSystemCurrentPlacementOutput{})
	pulumi.RegisterOutputType(GetMysqlDbSystemsDbSystemEndpointOutput{})
	pulumi.RegisterOutputType(GetMysqlDbSystemsDbSystemEndpointArrayOutput{})
	pulumi.RegisterOutputType(GetMysqlDbSystemsDbSystemHeatWaveClusterOutput{})
	pulumi.RegisterOutputType(GetMysqlDbSystemsDbSystemMaintenanceOutput{})
	pulumi.RegisterOutputType(GetMysqlDbSystemsDbSystemSourceOutput{})
	pulumi.RegisterOutputType(GetMysqlDbSystemsFilterOutput{})
	pulumi.RegisterOutputType(GetMysqlDbSystemsFilterArrayOutput{})
	pulumi.RegisterOutputType(GetMysqlVersionsFilterOutput{})
	pulumi.RegisterOutputType(GetMysqlVersionsFilterArrayOutput{})
	pulumi.RegisterOutputType(GetMysqlVersionsVersionOutput{})
	pulumi.RegisterOutputType(GetMysqlVersionsVersionArrayOutput{})
	pulumi.RegisterOutputType(GetMysqlVersionsVersionVersionOutput{})
	pulumi.RegisterOutputType(GetMysqlVersionsVersionVersionArrayOutput{})
	pulumi.RegisterOutputType(GetShapesFilterOutput{})
	pulumi.RegisterOutputType(GetShapesFilterArrayOutput{})
	pulumi.RegisterOutputType(GetShapesShapeOutput{})
	pulumi.RegisterOutputType(GetShapesShapeArrayOutput{})
}
