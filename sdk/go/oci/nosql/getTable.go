// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package nosql

import (
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This data source provides details about a specific Table resource in Oracle Cloud Infrastructure NoSQL Database service.
//
// Get table info by identifier.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-oci/sdk/go/oci/nosql"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := nosql.LookupTable(ctx, &nosql.LookupTableArgs{
// 			TableNameOrId: oci_nosql_table_name_or.Test_table_name_or.Id,
// 			CompartmentId: _var.Compartment_id,
// 		}, nil)
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
func LookupTable(ctx *pulumi.Context, args *LookupTableArgs, opts ...pulumi.InvokeOption) (*LookupTableResult, error) {
	var rv LookupTableResult
	err := ctx.Invoke("oci:nosql/getTable:getTable", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getTable.
type LookupTableArgs struct {
	// The ID of a table's compartment. When a table is identified by name, the compartmentId is often needed to provide context for interpreting the name.
	CompartmentId string `pulumi:"compartmentId"`
	// A table name within the compartment, or a table OCID.
	TableNameOrId string `pulumi:"tableNameOrId"`
}

// A collection of values returned by getTable.
type LookupTableResult struct {
	// Compartment Identifier.
	CompartmentId string `pulumi:"compartmentId"`
	// A DDL statement representing the schema.
	DdlStatement string `pulumi:"ddlStatement"`
	// Defined tags for this resource. Each key is predefined and scoped to a namespace.  Example: `{"foo-namespace": {"bar-key": "value"}}`
	DefinedTags map[string]interface{} `pulumi:"definedTags"`
	// Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
	FreeformTags map[string]interface{} `pulumi:"freeformTags"`
	// Unique identifier that is immutable.
	Id string `pulumi:"id"`
	// True if this table can be reclaimed after an idle period.
	IsAutoReclaimable bool `pulumi:"isAutoReclaimable"`
	// A message describing the current state in more detail.
	LifecycleDetails string `pulumi:"lifecycleDetails"`
	// The column name.
	Name string `pulumi:"name"`
	// The table schema information as a JSON object.
	Schema GetTableSchema `pulumi:"schema"`
	// The state of a table.
	State string `pulumi:"state"`
	// Read-only system tag. These predefined keys are scoped to namespaces.  At present the only supported namespace is `"orcl-cloud"`; and the only key in that namespace is `"free-tier-retained"`. Example: `{"orcl-cloud"": {"free-tier-retained": "true"}}`
	SystemTags map[string]interface{} `pulumi:"systemTags"`
	// Throughput and storage limits configuration of a table.
	TableLimits   GetTableTableLimits `pulumi:"tableLimits"`
	TableNameOrId string              `pulumi:"tableNameOrId"`
	// The time the the table was created. An RFC3339 formatted datetime string.
	TimeCreated string `pulumi:"timeCreated"`
	// If lifecycleState is INACTIVE, indicates when this table will be automatically removed. An RFC3339 formatted datetime string.
	TimeOfExpiration string `pulumi:"timeOfExpiration"`
	// The time the the table's metadata was last updated. An RFC3339 formatted datetime string.
	TimeUpdated string `pulumi:"timeUpdated"`
}
