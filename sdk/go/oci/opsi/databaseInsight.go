// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package opsi

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Import
//
// DatabaseInsights can be imported using the `id`, e.g.
//
// ```sh
//  $ pulumi import oci:opsi/databaseInsight:DatabaseInsight test_database_insight "id"
// ```
type DatabaseInsight struct {
	pulumi.CustomResourceState

	// (Updatable) Compartment Identifier of database
	CompartmentId pulumi.StringOutput `pulumi:"compartmentId"`
	// Display name of database
	DatabaseDisplayName pulumi.StringOutput `pulumi:"databaseDisplayName"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the database.
	DatabaseId pulumi.StringOutput `pulumi:"databaseId"`
	// Name of database
	DatabaseName pulumi.StringOutput `pulumi:"databaseName"`
	// Operations Insights internal representation of the database type.
	DatabaseType pulumi.StringOutput `pulumi:"databaseType"`
	// The version of the database.
	DatabaseVersion pulumi.StringOutput `pulumi:"databaseVersion"`
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
	DefinedTags pulumi.MapOutput `pulumi:"definedTags"`
	// OPSI Enterprise Manager Bridge OCID
	EnterpriseManagerBridgeId pulumi.StringOutput `pulumi:"enterpriseManagerBridgeId"`
	// Enterprise Manager Entity Display Name
	EnterpriseManagerEntityDisplayName pulumi.StringOutput `pulumi:"enterpriseManagerEntityDisplayName"`
	// Enterprise Manager Entity Unique Identifier
	EnterpriseManagerEntityIdentifier pulumi.StringOutput `pulumi:"enterpriseManagerEntityIdentifier"`
	// Enterprise Manager Entity Name
	EnterpriseManagerEntityName pulumi.StringOutput `pulumi:"enterpriseManagerEntityName"`
	// Enterprise Manager Entity Type
	EnterpriseManagerEntityType pulumi.StringOutput `pulumi:"enterpriseManagerEntityType"`
	// Enterprise Manager Unqiue Identifier
	EnterpriseManagerIdentifier pulumi.StringOutput `pulumi:"enterpriseManagerIdentifier"`
	// (Updatable) Source of the database entity. The supported type is "EM_MANAGED_EXTERNAL_DATABASE"
	EntitySource pulumi.StringOutput `pulumi:"entitySource"`
	// (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
	FreeformTags pulumi.MapOutput `pulumi:"freeformTags"`
	// A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
	LifecycleDetails pulumi.StringOutput `pulumi:"lifecycleDetails"`
	// Processor count.
	ProcessorCount pulumi.IntOutput `pulumi:"processorCount"`
	// The current state of the database.
	State pulumi.StringOutput `pulumi:"state"`
	// (Updatable) Status of the resource. Example: "ENABLED", "DISABLED". Resource can be either enabled or disabled by updating the value of status field to either "ENABLED" or "DISABLED"
	Status pulumi.StringOutput `pulumi:"status"`
	// System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"orcl-cloud.free-tier-retained": "true"}`
	SystemTags pulumi.MapOutput `pulumi:"systemTags"`
	// The time the the database insight was first enabled. An RFC3339 formatted datetime string
	TimeCreated pulumi.StringOutput `pulumi:"timeCreated"`
	// The time the database insight was updated. An RFC3339 formatted datetime string
	TimeUpdated pulumi.StringOutput `pulumi:"timeUpdated"`
}

// NewDatabaseInsight registers a new resource with the given unique name, arguments, and options.
func NewDatabaseInsight(ctx *pulumi.Context,
	name string, args *DatabaseInsightArgs, opts ...pulumi.ResourceOption) (*DatabaseInsight, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CompartmentId == nil {
		return nil, errors.New("invalid value for required argument 'CompartmentId'")
	}
	if args.EnterpriseManagerBridgeId == nil {
		return nil, errors.New("invalid value for required argument 'EnterpriseManagerBridgeId'")
	}
	if args.EnterpriseManagerEntityIdentifier == nil {
		return nil, errors.New("invalid value for required argument 'EnterpriseManagerEntityIdentifier'")
	}
	if args.EnterpriseManagerIdentifier == nil {
		return nil, errors.New("invalid value for required argument 'EnterpriseManagerIdentifier'")
	}
	if args.EntitySource == nil {
		return nil, errors.New("invalid value for required argument 'EntitySource'")
	}
	var resource DatabaseInsight
	err := ctx.RegisterResource("oci:opsi/databaseInsight:DatabaseInsight", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDatabaseInsight gets an existing DatabaseInsight resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDatabaseInsight(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DatabaseInsightState, opts ...pulumi.ResourceOption) (*DatabaseInsight, error) {
	var resource DatabaseInsight
	err := ctx.ReadResource("oci:opsi/databaseInsight:DatabaseInsight", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DatabaseInsight resources.
type databaseInsightState struct {
	// (Updatable) Compartment Identifier of database
	CompartmentId *string `pulumi:"compartmentId"`
	// Display name of database
	DatabaseDisplayName *string `pulumi:"databaseDisplayName"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the database.
	DatabaseId *string `pulumi:"databaseId"`
	// Name of database
	DatabaseName *string `pulumi:"databaseName"`
	// Operations Insights internal representation of the database type.
	DatabaseType *string `pulumi:"databaseType"`
	// The version of the database.
	DatabaseVersion *string `pulumi:"databaseVersion"`
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
	DefinedTags map[string]interface{} `pulumi:"definedTags"`
	// OPSI Enterprise Manager Bridge OCID
	EnterpriseManagerBridgeId *string `pulumi:"enterpriseManagerBridgeId"`
	// Enterprise Manager Entity Display Name
	EnterpriseManagerEntityDisplayName *string `pulumi:"enterpriseManagerEntityDisplayName"`
	// Enterprise Manager Entity Unique Identifier
	EnterpriseManagerEntityIdentifier *string `pulumi:"enterpriseManagerEntityIdentifier"`
	// Enterprise Manager Entity Name
	EnterpriseManagerEntityName *string `pulumi:"enterpriseManagerEntityName"`
	// Enterprise Manager Entity Type
	EnterpriseManagerEntityType *string `pulumi:"enterpriseManagerEntityType"`
	// Enterprise Manager Unqiue Identifier
	EnterpriseManagerIdentifier *string `pulumi:"enterpriseManagerIdentifier"`
	// (Updatable) Source of the database entity. The supported type is "EM_MANAGED_EXTERNAL_DATABASE"
	EntitySource *string `pulumi:"entitySource"`
	// (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
	FreeformTags map[string]interface{} `pulumi:"freeformTags"`
	// A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
	LifecycleDetails *string `pulumi:"lifecycleDetails"`
	// Processor count.
	ProcessorCount *int `pulumi:"processorCount"`
	// The current state of the database.
	State *string `pulumi:"state"`
	// (Updatable) Status of the resource. Example: "ENABLED", "DISABLED". Resource can be either enabled or disabled by updating the value of status field to either "ENABLED" or "DISABLED"
	Status *string `pulumi:"status"`
	// System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"orcl-cloud.free-tier-retained": "true"}`
	SystemTags map[string]interface{} `pulumi:"systemTags"`
	// The time the the database insight was first enabled. An RFC3339 formatted datetime string
	TimeCreated *string `pulumi:"timeCreated"`
	// The time the database insight was updated. An RFC3339 formatted datetime string
	TimeUpdated *string `pulumi:"timeUpdated"`
}

type DatabaseInsightState struct {
	// (Updatable) Compartment Identifier of database
	CompartmentId pulumi.StringPtrInput
	// Display name of database
	DatabaseDisplayName pulumi.StringPtrInput
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the database.
	DatabaseId pulumi.StringPtrInput
	// Name of database
	DatabaseName pulumi.StringPtrInput
	// Operations Insights internal representation of the database type.
	DatabaseType pulumi.StringPtrInput
	// The version of the database.
	DatabaseVersion pulumi.StringPtrInput
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
	DefinedTags pulumi.MapInput
	// OPSI Enterprise Manager Bridge OCID
	EnterpriseManagerBridgeId pulumi.StringPtrInput
	// Enterprise Manager Entity Display Name
	EnterpriseManagerEntityDisplayName pulumi.StringPtrInput
	// Enterprise Manager Entity Unique Identifier
	EnterpriseManagerEntityIdentifier pulumi.StringPtrInput
	// Enterprise Manager Entity Name
	EnterpriseManagerEntityName pulumi.StringPtrInput
	// Enterprise Manager Entity Type
	EnterpriseManagerEntityType pulumi.StringPtrInput
	// Enterprise Manager Unqiue Identifier
	EnterpriseManagerIdentifier pulumi.StringPtrInput
	// (Updatable) Source of the database entity. The supported type is "EM_MANAGED_EXTERNAL_DATABASE"
	EntitySource pulumi.StringPtrInput
	// (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
	FreeformTags pulumi.MapInput
	// A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
	LifecycleDetails pulumi.StringPtrInput
	// Processor count.
	ProcessorCount pulumi.IntPtrInput
	// The current state of the database.
	State pulumi.StringPtrInput
	// (Updatable) Status of the resource. Example: "ENABLED", "DISABLED". Resource can be either enabled or disabled by updating the value of status field to either "ENABLED" or "DISABLED"
	Status pulumi.StringPtrInput
	// System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"orcl-cloud.free-tier-retained": "true"}`
	SystemTags pulumi.MapInput
	// The time the the database insight was first enabled. An RFC3339 formatted datetime string
	TimeCreated pulumi.StringPtrInput
	// The time the database insight was updated. An RFC3339 formatted datetime string
	TimeUpdated pulumi.StringPtrInput
}

func (DatabaseInsightState) ElementType() reflect.Type {
	return reflect.TypeOf((*databaseInsightState)(nil)).Elem()
}

type databaseInsightArgs struct {
	// (Updatable) Compartment Identifier of database
	CompartmentId string `pulumi:"compartmentId"`
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
	DefinedTags map[string]interface{} `pulumi:"definedTags"`
	// OPSI Enterprise Manager Bridge OCID
	EnterpriseManagerBridgeId string `pulumi:"enterpriseManagerBridgeId"`
	// Enterprise Manager Entity Unique Identifier
	EnterpriseManagerEntityIdentifier string `pulumi:"enterpriseManagerEntityIdentifier"`
	// Enterprise Manager Unqiue Identifier
	EnterpriseManagerIdentifier string `pulumi:"enterpriseManagerIdentifier"`
	// (Updatable) Source of the database entity. The supported type is "EM_MANAGED_EXTERNAL_DATABASE"
	EntitySource string `pulumi:"entitySource"`
	// (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
	FreeformTags map[string]interface{} `pulumi:"freeformTags"`
	// (Updatable) Status of the resource. Example: "ENABLED", "DISABLED". Resource can be either enabled or disabled by updating the value of status field to either "ENABLED" or "DISABLED"
	Status *string `pulumi:"status"`
}

// The set of arguments for constructing a DatabaseInsight resource.
type DatabaseInsightArgs struct {
	// (Updatable) Compartment Identifier of database
	CompartmentId pulumi.StringInput
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
	DefinedTags pulumi.MapInput
	// OPSI Enterprise Manager Bridge OCID
	EnterpriseManagerBridgeId pulumi.StringInput
	// Enterprise Manager Entity Unique Identifier
	EnterpriseManagerEntityIdentifier pulumi.StringInput
	// Enterprise Manager Unqiue Identifier
	EnterpriseManagerIdentifier pulumi.StringInput
	// (Updatable) Source of the database entity. The supported type is "EM_MANAGED_EXTERNAL_DATABASE"
	EntitySource pulumi.StringInput
	// (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
	FreeformTags pulumi.MapInput
	// (Updatable) Status of the resource. Example: "ENABLED", "DISABLED". Resource can be either enabled or disabled by updating the value of status field to either "ENABLED" or "DISABLED"
	Status pulumi.StringPtrInput
}

func (DatabaseInsightArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*databaseInsightArgs)(nil)).Elem()
}

type DatabaseInsightInput interface {
	pulumi.Input

	ToDatabaseInsightOutput() DatabaseInsightOutput
	ToDatabaseInsightOutputWithContext(ctx context.Context) DatabaseInsightOutput
}

func (*DatabaseInsight) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseInsight)(nil))
}

func (i *DatabaseInsight) ToDatabaseInsightOutput() DatabaseInsightOutput {
	return i.ToDatabaseInsightOutputWithContext(context.Background())
}

func (i *DatabaseInsight) ToDatabaseInsightOutputWithContext(ctx context.Context) DatabaseInsightOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseInsightOutput)
}

func (i *DatabaseInsight) ToDatabaseInsightPtrOutput() DatabaseInsightPtrOutput {
	return i.ToDatabaseInsightPtrOutputWithContext(context.Background())
}

func (i *DatabaseInsight) ToDatabaseInsightPtrOutputWithContext(ctx context.Context) DatabaseInsightPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseInsightPtrOutput)
}

type DatabaseInsightPtrInput interface {
	pulumi.Input

	ToDatabaseInsightPtrOutput() DatabaseInsightPtrOutput
	ToDatabaseInsightPtrOutputWithContext(ctx context.Context) DatabaseInsightPtrOutput
}

type databaseInsightPtrType DatabaseInsightArgs

func (*databaseInsightPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DatabaseInsight)(nil))
}

func (i *databaseInsightPtrType) ToDatabaseInsightPtrOutput() DatabaseInsightPtrOutput {
	return i.ToDatabaseInsightPtrOutputWithContext(context.Background())
}

func (i *databaseInsightPtrType) ToDatabaseInsightPtrOutputWithContext(ctx context.Context) DatabaseInsightPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseInsightPtrOutput)
}

// DatabaseInsightArrayInput is an input type that accepts DatabaseInsightArray and DatabaseInsightArrayOutput values.
// You can construct a concrete instance of `DatabaseInsightArrayInput` via:
//
//          DatabaseInsightArray{ DatabaseInsightArgs{...} }
type DatabaseInsightArrayInput interface {
	pulumi.Input

	ToDatabaseInsightArrayOutput() DatabaseInsightArrayOutput
	ToDatabaseInsightArrayOutputWithContext(context.Context) DatabaseInsightArrayOutput
}

type DatabaseInsightArray []DatabaseInsightInput

func (DatabaseInsightArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DatabaseInsight)(nil)).Elem()
}

func (i DatabaseInsightArray) ToDatabaseInsightArrayOutput() DatabaseInsightArrayOutput {
	return i.ToDatabaseInsightArrayOutputWithContext(context.Background())
}

func (i DatabaseInsightArray) ToDatabaseInsightArrayOutputWithContext(ctx context.Context) DatabaseInsightArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseInsightArrayOutput)
}

// DatabaseInsightMapInput is an input type that accepts DatabaseInsightMap and DatabaseInsightMapOutput values.
// You can construct a concrete instance of `DatabaseInsightMapInput` via:
//
//          DatabaseInsightMap{ "key": DatabaseInsightArgs{...} }
type DatabaseInsightMapInput interface {
	pulumi.Input

	ToDatabaseInsightMapOutput() DatabaseInsightMapOutput
	ToDatabaseInsightMapOutputWithContext(context.Context) DatabaseInsightMapOutput
}

type DatabaseInsightMap map[string]DatabaseInsightInput

func (DatabaseInsightMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DatabaseInsight)(nil)).Elem()
}

func (i DatabaseInsightMap) ToDatabaseInsightMapOutput() DatabaseInsightMapOutput {
	return i.ToDatabaseInsightMapOutputWithContext(context.Background())
}

func (i DatabaseInsightMap) ToDatabaseInsightMapOutputWithContext(ctx context.Context) DatabaseInsightMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseInsightMapOutput)
}

type DatabaseInsightOutput struct {
	*pulumi.OutputState
}

func (DatabaseInsightOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseInsight)(nil))
}

func (o DatabaseInsightOutput) ToDatabaseInsightOutput() DatabaseInsightOutput {
	return o
}

func (o DatabaseInsightOutput) ToDatabaseInsightOutputWithContext(ctx context.Context) DatabaseInsightOutput {
	return o
}

func (o DatabaseInsightOutput) ToDatabaseInsightPtrOutput() DatabaseInsightPtrOutput {
	return o.ToDatabaseInsightPtrOutputWithContext(context.Background())
}

func (o DatabaseInsightOutput) ToDatabaseInsightPtrOutputWithContext(ctx context.Context) DatabaseInsightPtrOutput {
	return o.ApplyT(func(v DatabaseInsight) *DatabaseInsight {
		return &v
	}).(DatabaseInsightPtrOutput)
}

type DatabaseInsightPtrOutput struct {
	*pulumi.OutputState
}

func (DatabaseInsightPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DatabaseInsight)(nil))
}

func (o DatabaseInsightPtrOutput) ToDatabaseInsightPtrOutput() DatabaseInsightPtrOutput {
	return o
}

func (o DatabaseInsightPtrOutput) ToDatabaseInsightPtrOutputWithContext(ctx context.Context) DatabaseInsightPtrOutput {
	return o
}

type DatabaseInsightArrayOutput struct{ *pulumi.OutputState }

func (DatabaseInsightArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DatabaseInsight)(nil))
}

func (o DatabaseInsightArrayOutput) ToDatabaseInsightArrayOutput() DatabaseInsightArrayOutput {
	return o
}

func (o DatabaseInsightArrayOutput) ToDatabaseInsightArrayOutputWithContext(ctx context.Context) DatabaseInsightArrayOutput {
	return o
}

func (o DatabaseInsightArrayOutput) Index(i pulumi.IntInput) DatabaseInsightOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DatabaseInsight {
		return vs[0].([]DatabaseInsight)[vs[1].(int)]
	}).(DatabaseInsightOutput)
}

type DatabaseInsightMapOutput struct{ *pulumi.OutputState }

func (DatabaseInsightMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]DatabaseInsight)(nil))
}

func (o DatabaseInsightMapOutput) ToDatabaseInsightMapOutput() DatabaseInsightMapOutput {
	return o
}

func (o DatabaseInsightMapOutput) ToDatabaseInsightMapOutputWithContext(ctx context.Context) DatabaseInsightMapOutput {
	return o
}

func (o DatabaseInsightMapOutput) MapIndex(k pulumi.StringInput) DatabaseInsightOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) DatabaseInsight {
		return vs[0].(map[string]DatabaseInsight)[vs[1].(string)]
	}).(DatabaseInsightOutput)
}

func init() {
	pulumi.RegisterOutputType(DatabaseInsightOutput{})
	pulumi.RegisterOutputType(DatabaseInsightPtrOutput{})
	pulumi.RegisterOutputType(DatabaseInsightArrayOutput{})
	pulumi.RegisterOutputType(DatabaseInsightMapOutput{})
}
