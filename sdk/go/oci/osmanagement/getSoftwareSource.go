// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package osmanagement

import (
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This data source provides details about a specific Software Source resource in Oracle Cloud Infrastructure OS Management service.
//
// Returns a specific Software Source.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-oci/sdk/go/oci/osmanagement"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := osmanagement.LookupSoftwareSource(ctx, &osmanagement.LookupSoftwareSourceArgs{
// 			SoftwareSourceId: oci_osmanagement_software_source.Test_software_source.Id,
// 		}, nil)
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
func LookupSoftwareSource(ctx *pulumi.Context, args *LookupSoftwareSourceArgs, opts ...pulumi.InvokeOption) (*LookupSoftwareSourceResult, error) {
	var rv LookupSoftwareSourceResult
	err := ctx.Invoke("oci:osmanagement/getSoftwareSource:getSoftwareSource", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getSoftwareSource.
type LookupSoftwareSourceArgs struct {
	// The OCID of the software source.
	SoftwareSourceId string `pulumi:"softwareSourceId"`
}

// A collection of values returned by getSoftwareSource.
type LookupSoftwareSourceResult struct {
	// The architecture type supported by the Software Source
	ArchType string `pulumi:"archType"`
	// list of the Managed Instances associated with this Software Sources
	AssociatedManagedInstances []GetSoftwareSourceAssociatedManagedInstance `pulumi:"associatedManagedInstances"`
	// The yum repository checksum type used by this software source
	ChecksumType string `pulumi:"checksumType"`
	// OCID for the Compartment
	CompartmentId string `pulumi:"compartmentId"`
	// Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
	DefinedTags map[string]interface{} `pulumi:"definedTags"`
	// Information specified by the user about the software source
	Description string `pulumi:"description"`
	// User friendly name for the software source
	DisplayName string `pulumi:"displayName"`
	// Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
	FreeformTags map[string]interface{} `pulumi:"freeformTags"`
	// Fingerprint of the GPG key for this software source
	GpgKeyFingerprint string `pulumi:"gpgKeyFingerprint"`
	// ID of the GPG key for this software source
	GpgKeyId string `pulumi:"gpgKeyId"`
	// URL of the GPG key for this software source
	GpgKeyUrl string `pulumi:"gpgKeyUrl"`
	// OCID for the Software Source
	Id string `pulumi:"id"`
	// Email address of the person maintaining this software source
	MaintainerEmail string `pulumi:"maintainerEmail"`
	// Name of the person maintaining this software source
	MaintainerName string `pulumi:"maintainerName"`
	// Phone number of the person maintaining this software source
	MaintainerPhone string `pulumi:"maintainerPhone"`
	// Number of packages
	Packages int `pulumi:"packages"`
	// OCID for the parent software source, if there is one
	ParentId string `pulumi:"parentId"`
	// Display name the parent software source, if there is one
	ParentName string `pulumi:"parentName"`
	// Type of the Software Source
	RepoType         string `pulumi:"repoType"`
	SoftwareSourceId string `pulumi:"softwareSourceId"`
	// The current state of the Software Source.
	State string `pulumi:"state"`
	// status of the software source.
	Status string `pulumi:"status"`
	// URL for the repostiory
	Url string `pulumi:"url"`
}
