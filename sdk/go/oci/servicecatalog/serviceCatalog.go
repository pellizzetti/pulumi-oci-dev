// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package servicecatalog

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource provides the Service Catalog resource in Oracle Cloud Infrastructure Service Catalog service.
//
// Creates a brand new service catalog in a given compartment.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-oci/sdk/go/oci/servicecatalog"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := servicecatalog.NewServiceCatalog(ctx, "testServiceCatalog", &servicecatalog.ServiceCatalogArgs{
// 			CompartmentId: pulumi.Any(_var.Compartment_id),
// 			DisplayName:   pulumi.Any(_var.Service_catalog_display_name),
// 			DefinedTags: pulumi.AnyMap{
// 				"foo-namespace.bar-key": pulumi.Any("value"),
// 			},
// 			FreeformTags: pulumi.AnyMap{
// 				"bar-key": pulumi.Any("value"),
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// ServiceCatalogs can be imported using the `id`, e.g.
//
// ```sh
//  $ pulumi import oci:servicecatalog/serviceCatalog:ServiceCatalog test_service_catalog "id"
// ```
type ServiceCatalog struct {
	pulumi.CustomResourceState

	// (Updatable) The unique identifier for the compartment where the service catalog will be created.
	CompartmentId pulumi.StringOutput `pulumi:"compartmentId"`
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
	DefinedTags pulumi.MapOutput `pulumi:"definedTags"`
	// (Updatable) The display name of the service catalog.
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
	FreeformTags pulumi.MapOutput `pulumi:"freeformTags"`
	// The lifecycle state of the service catalog.
	State pulumi.StringOutput `pulumi:"state"`
	// The date and time the service catalog was created, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format.  Example: `2021-05-26T21:10:29.600Z`
	TimeCreated pulumi.StringOutput `pulumi:"timeCreated"`
	// The date and time the service catalog was last modified, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format.  Example: `2021-12-10T05:10:29.721Z`
	TimeUpdated pulumi.StringOutput `pulumi:"timeUpdated"`
}

// NewServiceCatalog registers a new resource with the given unique name, arguments, and options.
func NewServiceCatalog(ctx *pulumi.Context,
	name string, args *ServiceCatalogArgs, opts ...pulumi.ResourceOption) (*ServiceCatalog, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CompartmentId == nil {
		return nil, errors.New("invalid value for required argument 'CompartmentId'")
	}
	if args.DisplayName == nil {
		return nil, errors.New("invalid value for required argument 'DisplayName'")
	}
	var resource ServiceCatalog
	err := ctx.RegisterResource("oci:servicecatalog/serviceCatalog:ServiceCatalog", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetServiceCatalog gets an existing ServiceCatalog resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetServiceCatalog(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ServiceCatalogState, opts ...pulumi.ResourceOption) (*ServiceCatalog, error) {
	var resource ServiceCatalog
	err := ctx.ReadResource("oci:servicecatalog/serviceCatalog:ServiceCatalog", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ServiceCatalog resources.
type serviceCatalogState struct {
	// (Updatable) The unique identifier for the compartment where the service catalog will be created.
	CompartmentId *string `pulumi:"compartmentId"`
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
	DefinedTags map[string]interface{} `pulumi:"definedTags"`
	// (Updatable) The display name of the service catalog.
	DisplayName *string `pulumi:"displayName"`
	// (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
	FreeformTags map[string]interface{} `pulumi:"freeformTags"`
	// The lifecycle state of the service catalog.
	State *string `pulumi:"state"`
	// The date and time the service catalog was created, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format.  Example: `2021-05-26T21:10:29.600Z`
	TimeCreated *string `pulumi:"timeCreated"`
	// The date and time the service catalog was last modified, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format.  Example: `2021-12-10T05:10:29.721Z`
	TimeUpdated *string `pulumi:"timeUpdated"`
}

type ServiceCatalogState struct {
	// (Updatable) The unique identifier for the compartment where the service catalog will be created.
	CompartmentId pulumi.StringPtrInput
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
	DefinedTags pulumi.MapInput
	// (Updatable) The display name of the service catalog.
	DisplayName pulumi.StringPtrInput
	// (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
	FreeformTags pulumi.MapInput
	// The lifecycle state of the service catalog.
	State pulumi.StringPtrInput
	// The date and time the service catalog was created, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format.  Example: `2021-05-26T21:10:29.600Z`
	TimeCreated pulumi.StringPtrInput
	// The date and time the service catalog was last modified, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format.  Example: `2021-12-10T05:10:29.721Z`
	TimeUpdated pulumi.StringPtrInput
}

func (ServiceCatalogState) ElementType() reflect.Type {
	return reflect.TypeOf((*serviceCatalogState)(nil)).Elem()
}

type serviceCatalogArgs struct {
	// (Updatable) The unique identifier for the compartment where the service catalog will be created.
	CompartmentId string `pulumi:"compartmentId"`
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
	DefinedTags map[string]interface{} `pulumi:"definedTags"`
	// (Updatable) The display name of the service catalog.
	DisplayName string `pulumi:"displayName"`
	// (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
	FreeformTags map[string]interface{} `pulumi:"freeformTags"`
}

// The set of arguments for constructing a ServiceCatalog resource.
type ServiceCatalogArgs struct {
	// (Updatable) The unique identifier for the compartment where the service catalog will be created.
	CompartmentId pulumi.StringInput
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
	DefinedTags pulumi.MapInput
	// (Updatable) The display name of the service catalog.
	DisplayName pulumi.StringInput
	// (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
	FreeformTags pulumi.MapInput
}

func (ServiceCatalogArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*serviceCatalogArgs)(nil)).Elem()
}

type ServiceCatalogInput interface {
	pulumi.Input

	ToServiceCatalogOutput() ServiceCatalogOutput
	ToServiceCatalogOutputWithContext(ctx context.Context) ServiceCatalogOutput
}

func (*ServiceCatalog) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceCatalog)(nil))
}

func (i *ServiceCatalog) ToServiceCatalogOutput() ServiceCatalogOutput {
	return i.ToServiceCatalogOutputWithContext(context.Background())
}

func (i *ServiceCatalog) ToServiceCatalogOutputWithContext(ctx context.Context) ServiceCatalogOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceCatalogOutput)
}

func (i *ServiceCatalog) ToServiceCatalogPtrOutput() ServiceCatalogPtrOutput {
	return i.ToServiceCatalogPtrOutputWithContext(context.Background())
}

func (i *ServiceCatalog) ToServiceCatalogPtrOutputWithContext(ctx context.Context) ServiceCatalogPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceCatalogPtrOutput)
}

type ServiceCatalogPtrInput interface {
	pulumi.Input

	ToServiceCatalogPtrOutput() ServiceCatalogPtrOutput
	ToServiceCatalogPtrOutputWithContext(ctx context.Context) ServiceCatalogPtrOutput
}

type serviceCatalogPtrType ServiceCatalogArgs

func (*serviceCatalogPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceCatalog)(nil))
}

func (i *serviceCatalogPtrType) ToServiceCatalogPtrOutput() ServiceCatalogPtrOutput {
	return i.ToServiceCatalogPtrOutputWithContext(context.Background())
}

func (i *serviceCatalogPtrType) ToServiceCatalogPtrOutputWithContext(ctx context.Context) ServiceCatalogPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceCatalogPtrOutput)
}

// ServiceCatalogArrayInput is an input type that accepts ServiceCatalogArray and ServiceCatalogArrayOutput values.
// You can construct a concrete instance of `ServiceCatalogArrayInput` via:
//
//          ServiceCatalogArray{ ServiceCatalogArgs{...} }
type ServiceCatalogArrayInput interface {
	pulumi.Input

	ToServiceCatalogArrayOutput() ServiceCatalogArrayOutput
	ToServiceCatalogArrayOutputWithContext(context.Context) ServiceCatalogArrayOutput
}

type ServiceCatalogArray []ServiceCatalogInput

func (ServiceCatalogArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ServiceCatalog)(nil)).Elem()
}

func (i ServiceCatalogArray) ToServiceCatalogArrayOutput() ServiceCatalogArrayOutput {
	return i.ToServiceCatalogArrayOutputWithContext(context.Background())
}

func (i ServiceCatalogArray) ToServiceCatalogArrayOutputWithContext(ctx context.Context) ServiceCatalogArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceCatalogArrayOutput)
}

// ServiceCatalogMapInput is an input type that accepts ServiceCatalogMap and ServiceCatalogMapOutput values.
// You can construct a concrete instance of `ServiceCatalogMapInput` via:
//
//          ServiceCatalogMap{ "key": ServiceCatalogArgs{...} }
type ServiceCatalogMapInput interface {
	pulumi.Input

	ToServiceCatalogMapOutput() ServiceCatalogMapOutput
	ToServiceCatalogMapOutputWithContext(context.Context) ServiceCatalogMapOutput
}

type ServiceCatalogMap map[string]ServiceCatalogInput

func (ServiceCatalogMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ServiceCatalog)(nil)).Elem()
}

func (i ServiceCatalogMap) ToServiceCatalogMapOutput() ServiceCatalogMapOutput {
	return i.ToServiceCatalogMapOutputWithContext(context.Background())
}

func (i ServiceCatalogMap) ToServiceCatalogMapOutputWithContext(ctx context.Context) ServiceCatalogMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceCatalogMapOutput)
}

type ServiceCatalogOutput struct {
	*pulumi.OutputState
}

func (ServiceCatalogOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceCatalog)(nil))
}

func (o ServiceCatalogOutput) ToServiceCatalogOutput() ServiceCatalogOutput {
	return o
}

func (o ServiceCatalogOutput) ToServiceCatalogOutputWithContext(ctx context.Context) ServiceCatalogOutput {
	return o
}

func (o ServiceCatalogOutput) ToServiceCatalogPtrOutput() ServiceCatalogPtrOutput {
	return o.ToServiceCatalogPtrOutputWithContext(context.Background())
}

func (o ServiceCatalogOutput) ToServiceCatalogPtrOutputWithContext(ctx context.Context) ServiceCatalogPtrOutput {
	return o.ApplyT(func(v ServiceCatalog) *ServiceCatalog {
		return &v
	}).(ServiceCatalogPtrOutput)
}

type ServiceCatalogPtrOutput struct {
	*pulumi.OutputState
}

func (ServiceCatalogPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceCatalog)(nil))
}

func (o ServiceCatalogPtrOutput) ToServiceCatalogPtrOutput() ServiceCatalogPtrOutput {
	return o
}

func (o ServiceCatalogPtrOutput) ToServiceCatalogPtrOutputWithContext(ctx context.Context) ServiceCatalogPtrOutput {
	return o
}

type ServiceCatalogArrayOutput struct{ *pulumi.OutputState }

func (ServiceCatalogArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceCatalog)(nil))
}

func (o ServiceCatalogArrayOutput) ToServiceCatalogArrayOutput() ServiceCatalogArrayOutput {
	return o
}

func (o ServiceCatalogArrayOutput) ToServiceCatalogArrayOutputWithContext(ctx context.Context) ServiceCatalogArrayOutput {
	return o
}

func (o ServiceCatalogArrayOutput) Index(i pulumi.IntInput) ServiceCatalogOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServiceCatalog {
		return vs[0].([]ServiceCatalog)[vs[1].(int)]
	}).(ServiceCatalogOutput)
}

type ServiceCatalogMapOutput struct{ *pulumi.OutputState }

func (ServiceCatalogMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]ServiceCatalog)(nil))
}

func (o ServiceCatalogMapOutput) ToServiceCatalogMapOutput() ServiceCatalogMapOutput {
	return o
}

func (o ServiceCatalogMapOutput) ToServiceCatalogMapOutputWithContext(ctx context.Context) ServiceCatalogMapOutput {
	return o
}

func (o ServiceCatalogMapOutput) MapIndex(k pulumi.StringInput) ServiceCatalogOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) ServiceCatalog {
		return vs[0].(map[string]ServiceCatalog)[vs[1].(string)]
	}).(ServiceCatalogOutput)
}

func init() {
	pulumi.RegisterOutputType(ServiceCatalogOutput{})
	pulumi.RegisterOutputType(ServiceCatalogPtrOutput{})
	pulumi.RegisterOutputType(ServiceCatalogArrayOutput{})
	pulumi.RegisterOutputType(ServiceCatalogMapOutput{})
}
