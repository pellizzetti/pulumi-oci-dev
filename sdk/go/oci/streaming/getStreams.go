// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package streaming

import (
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This data source provides the list of Streams in Oracle Cloud Infrastructure Streaming service.
//
// Lists the streams in the given compartment id.
// If the compartment id is specified, it will list streams in the compartment, regardless of their stream pool.
// If the stream pool id is specified, the action will be scoped to that stream pool.
// The compartment id and stream pool id cannot be specified at the same time.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-oci/sdk/go/oci/streaming"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		opt0 := _var.Compartment_id
// 		opt1 := _var.Stream_id
// 		opt2 := _var.Stream_name
// 		opt3 := _var.Stream_state
// 		opt4 := oci_streaming_stream_pool.Test_stream_pool.Id
// 		_, err := streaming.GetStreams(ctx, &streaming.GetStreamsArgs{
// 			CompartmentId: &opt0,
// 			Id:            &opt1,
// 			Name:          &opt2,
// 			State:         &opt3,
// 			StreamPoolId:  &opt4,
// 		}, nil)
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
func GetStreams(ctx *pulumi.Context, args *GetStreamsArgs, opts ...pulumi.InvokeOption) (*GetStreamsResult, error) {
	var rv GetStreamsResult
	err := ctx.Invoke("oci:streaming/getStreams:getStreams", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getStreams.
type GetStreamsArgs struct {
	// The OCID of the compartment. Is exclusive with the `streamPoolId` parameter. One of them is required.
	CompartmentId *string            `pulumi:"compartmentId"`
	Filters       []GetStreamsFilter `pulumi:"filters"`
	// A filter to return only resources that match the given ID exactly.
	Id *string `pulumi:"id"`
	// A filter to return only resources that match the given name exactly.
	Name *string `pulumi:"name"`
	// A filter to only return resources that match the given lifecycle state. The state value is case-insensitive.
	State *string `pulumi:"state"`
	// The OCID of the stream pool. Is exclusive with the `compartmentId` parameter. One of them is required.
	StreamPoolId *string `pulumi:"streamPoolId"`
}

// A collection of values returned by getStreams.
type GetStreamsResult struct {
	// The OCID of the compartment that contains the stream.
	CompartmentId *string            `pulumi:"compartmentId"`
	Filters       []GetStreamsFilter `pulumi:"filters"`
	// The OCID of the stream.
	Id *string `pulumi:"id"`
	// The name of the stream. Avoid entering confidential information.  Example: `TelemetryEvents`
	Name *string `pulumi:"name"`
	// The current state of the stream.
	State *string `pulumi:"state"`
	// The OCID of the stream pool that contains the stream.
	StreamPoolId *string `pulumi:"streamPoolId"`
	// The list of streams.
	Streams []GetStreamsStream `pulumi:"streams"`
}
