// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package vulnerabilityscanning

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource provides the Container Scan Target resource in Oracle Cloud Infrastructure Vulnerability Scanning service.
//
// Creates a new ContainerScanTarget
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-oci/sdk/go/oci/vulnerabilityscanning"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := vulnerabilityscanning.NewContainerScanTarget(ctx, "testContainerScanTarget", &vulnerabilityscanning.ContainerScanTargetArgs{
// 			CompartmentId:         pulumi.Any(_var.Compartment_id),
// 			ContainerScanRecipeId: pulumi.Any(oci_vulnerability_scanning_container_scan_recipe.Test_container_scan_recipe.Id),
// 			TargetRegistry: &vulnerabilityscanning.ContainerScanTargetTargetRegistryArgs{
// 				CompartmentId: pulumi.Any(_var.Compartment_id),
// 				Type:          pulumi.Any(_var.Container_scan_target_target_registry_type),
// 				Repositories:  pulumi.Any(_var.Container_scan_target_target_registry_repositories),
// 				Url:           pulumi.Any(_var.Container_scan_target_target_registry_url),
// 			},
// 			DefinedTags: pulumi.AnyMap{
// 				"foo-namespace.bar-key": pulumi.Any("value"),
// 			},
// 			Description: pulumi.Any(_var.Container_scan_target_description),
// 			DisplayName: pulumi.Any(_var.Container_scan_target_display_name),
// 			FreeformTags: pulumi.AnyMap{
// 				"bar-key": pulumi.Any("value"),
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// ContainerScanTargets can be imported using the `id`, e.g.
//
// ```sh
//  $ pulumi import oci:vulnerabilityscanning/containerScanTarget:ContainerScanTarget test_container_scan_target "id"
// ```
type ContainerScanTarget struct {
	pulumi.CustomResourceState

	// (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment to perform the scans in. All listed repositories must be in the compartment.
	CompartmentId pulumi.StringOutput `pulumi:"compartmentId"`
	// (Updatable) ID of the container scan recipe this target applies.
	ContainerScanRecipeId pulumi.StringOutput `pulumi:"containerScanRecipeId"`
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
	DefinedTags pulumi.MapOutput `pulumi:"definedTags"`
	// (Updatable) Target description.
	Description pulumi.StringOutput `pulumi:"description"`
	// (Updatable) User friendly name of container scan target. If not present, will be auto-generated.
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
	FreeformTags pulumi.MapOutput `pulumi:"freeformTags"`
	// The current state of the config.
	State pulumi.StringOutput `pulumi:"state"`
	// Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{"orcl-cloud.free-tier-retained": "true"}`
	SystemTags pulumi.MapOutput `pulumi:"systemTags"`
	// (Updatable) Registry information for a container scan target
	TargetRegistry ContainerScanTargetTargetRegistryOutput `pulumi:"targetRegistry"`
	// Date and time the target was created, format as described in [RFC 3339](https://tools.ietf.org/rfc/rfc3339)
	TimeCreated pulumi.StringOutput `pulumi:"timeCreated"`
	// Date and time the target was last updated, format as described in [RFC 3339](https://tools.ietf.org/rfc/rfc3339)
	TimeUpdated pulumi.StringOutput `pulumi:"timeUpdated"`
}

// NewContainerScanTarget registers a new resource with the given unique name, arguments, and options.
func NewContainerScanTarget(ctx *pulumi.Context,
	name string, args *ContainerScanTargetArgs, opts ...pulumi.ResourceOption) (*ContainerScanTarget, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CompartmentId == nil {
		return nil, errors.New("invalid value for required argument 'CompartmentId'")
	}
	if args.ContainerScanRecipeId == nil {
		return nil, errors.New("invalid value for required argument 'ContainerScanRecipeId'")
	}
	if args.TargetRegistry == nil {
		return nil, errors.New("invalid value for required argument 'TargetRegistry'")
	}
	var resource ContainerScanTarget
	err := ctx.RegisterResource("oci:vulnerabilityscanning/containerScanTarget:ContainerScanTarget", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetContainerScanTarget gets an existing ContainerScanTarget resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetContainerScanTarget(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ContainerScanTargetState, opts ...pulumi.ResourceOption) (*ContainerScanTarget, error) {
	var resource ContainerScanTarget
	err := ctx.ReadResource("oci:vulnerabilityscanning/containerScanTarget:ContainerScanTarget", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ContainerScanTarget resources.
type containerScanTargetState struct {
	// (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment to perform the scans in. All listed repositories must be in the compartment.
	CompartmentId *string `pulumi:"compartmentId"`
	// (Updatable) ID of the container scan recipe this target applies.
	ContainerScanRecipeId *string `pulumi:"containerScanRecipeId"`
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
	DefinedTags map[string]interface{} `pulumi:"definedTags"`
	// (Updatable) Target description.
	Description *string `pulumi:"description"`
	// (Updatable) User friendly name of container scan target. If not present, will be auto-generated.
	DisplayName *string `pulumi:"displayName"`
	// (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
	FreeformTags map[string]interface{} `pulumi:"freeformTags"`
	// The current state of the config.
	State *string `pulumi:"state"`
	// Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{"orcl-cloud.free-tier-retained": "true"}`
	SystemTags map[string]interface{} `pulumi:"systemTags"`
	// (Updatable) Registry information for a container scan target
	TargetRegistry *ContainerScanTargetTargetRegistry `pulumi:"targetRegistry"`
	// Date and time the target was created, format as described in [RFC 3339](https://tools.ietf.org/rfc/rfc3339)
	TimeCreated *string `pulumi:"timeCreated"`
	// Date and time the target was last updated, format as described in [RFC 3339](https://tools.ietf.org/rfc/rfc3339)
	TimeUpdated *string `pulumi:"timeUpdated"`
}

type ContainerScanTargetState struct {
	// (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment to perform the scans in. All listed repositories must be in the compartment.
	CompartmentId pulumi.StringPtrInput
	// (Updatable) ID of the container scan recipe this target applies.
	ContainerScanRecipeId pulumi.StringPtrInput
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
	DefinedTags pulumi.MapInput
	// (Updatable) Target description.
	Description pulumi.StringPtrInput
	// (Updatable) User friendly name of container scan target. If not present, will be auto-generated.
	DisplayName pulumi.StringPtrInput
	// (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
	FreeformTags pulumi.MapInput
	// The current state of the config.
	State pulumi.StringPtrInput
	// Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{"orcl-cloud.free-tier-retained": "true"}`
	SystemTags pulumi.MapInput
	// (Updatable) Registry information for a container scan target
	TargetRegistry ContainerScanTargetTargetRegistryPtrInput
	// Date and time the target was created, format as described in [RFC 3339](https://tools.ietf.org/rfc/rfc3339)
	TimeCreated pulumi.StringPtrInput
	// Date and time the target was last updated, format as described in [RFC 3339](https://tools.ietf.org/rfc/rfc3339)
	TimeUpdated pulumi.StringPtrInput
}

func (ContainerScanTargetState) ElementType() reflect.Type {
	return reflect.TypeOf((*containerScanTargetState)(nil)).Elem()
}

type containerScanTargetArgs struct {
	// (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment to perform the scans in. All listed repositories must be in the compartment.
	CompartmentId string `pulumi:"compartmentId"`
	// (Updatable) ID of the container scan recipe this target applies.
	ContainerScanRecipeId string `pulumi:"containerScanRecipeId"`
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
	DefinedTags map[string]interface{} `pulumi:"definedTags"`
	// (Updatable) Target description.
	Description *string `pulumi:"description"`
	// (Updatable) User friendly name of container scan target. If not present, will be auto-generated.
	DisplayName *string `pulumi:"displayName"`
	// (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
	FreeformTags map[string]interface{} `pulumi:"freeformTags"`
	// (Updatable) Registry information for a container scan target
	TargetRegistry ContainerScanTargetTargetRegistry `pulumi:"targetRegistry"`
}

// The set of arguments for constructing a ContainerScanTarget resource.
type ContainerScanTargetArgs struct {
	// (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment to perform the scans in. All listed repositories must be in the compartment.
	CompartmentId pulumi.StringInput
	// (Updatable) ID of the container scan recipe this target applies.
	ContainerScanRecipeId pulumi.StringInput
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
	DefinedTags pulumi.MapInput
	// (Updatable) Target description.
	Description pulumi.StringPtrInput
	// (Updatable) User friendly name of container scan target. If not present, will be auto-generated.
	DisplayName pulumi.StringPtrInput
	// (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
	FreeformTags pulumi.MapInput
	// (Updatable) Registry information for a container scan target
	TargetRegistry ContainerScanTargetTargetRegistryInput
}

func (ContainerScanTargetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*containerScanTargetArgs)(nil)).Elem()
}

type ContainerScanTargetInput interface {
	pulumi.Input

	ToContainerScanTargetOutput() ContainerScanTargetOutput
	ToContainerScanTargetOutputWithContext(ctx context.Context) ContainerScanTargetOutput
}

func (*ContainerScanTarget) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerScanTarget)(nil))
}

func (i *ContainerScanTarget) ToContainerScanTargetOutput() ContainerScanTargetOutput {
	return i.ToContainerScanTargetOutputWithContext(context.Background())
}

func (i *ContainerScanTarget) ToContainerScanTargetOutputWithContext(ctx context.Context) ContainerScanTargetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerScanTargetOutput)
}

func (i *ContainerScanTarget) ToContainerScanTargetPtrOutput() ContainerScanTargetPtrOutput {
	return i.ToContainerScanTargetPtrOutputWithContext(context.Background())
}

func (i *ContainerScanTarget) ToContainerScanTargetPtrOutputWithContext(ctx context.Context) ContainerScanTargetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerScanTargetPtrOutput)
}

type ContainerScanTargetPtrInput interface {
	pulumi.Input

	ToContainerScanTargetPtrOutput() ContainerScanTargetPtrOutput
	ToContainerScanTargetPtrOutputWithContext(ctx context.Context) ContainerScanTargetPtrOutput
}

type containerScanTargetPtrType ContainerScanTargetArgs

func (*containerScanTargetPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ContainerScanTarget)(nil))
}

func (i *containerScanTargetPtrType) ToContainerScanTargetPtrOutput() ContainerScanTargetPtrOutput {
	return i.ToContainerScanTargetPtrOutputWithContext(context.Background())
}

func (i *containerScanTargetPtrType) ToContainerScanTargetPtrOutputWithContext(ctx context.Context) ContainerScanTargetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerScanTargetPtrOutput)
}

// ContainerScanTargetArrayInput is an input type that accepts ContainerScanTargetArray and ContainerScanTargetArrayOutput values.
// You can construct a concrete instance of `ContainerScanTargetArrayInput` via:
//
//          ContainerScanTargetArray{ ContainerScanTargetArgs{...} }
type ContainerScanTargetArrayInput interface {
	pulumi.Input

	ToContainerScanTargetArrayOutput() ContainerScanTargetArrayOutput
	ToContainerScanTargetArrayOutputWithContext(context.Context) ContainerScanTargetArrayOutput
}

type ContainerScanTargetArray []ContainerScanTargetInput

func (ContainerScanTargetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ContainerScanTarget)(nil)).Elem()
}

func (i ContainerScanTargetArray) ToContainerScanTargetArrayOutput() ContainerScanTargetArrayOutput {
	return i.ToContainerScanTargetArrayOutputWithContext(context.Background())
}

func (i ContainerScanTargetArray) ToContainerScanTargetArrayOutputWithContext(ctx context.Context) ContainerScanTargetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerScanTargetArrayOutput)
}

// ContainerScanTargetMapInput is an input type that accepts ContainerScanTargetMap and ContainerScanTargetMapOutput values.
// You can construct a concrete instance of `ContainerScanTargetMapInput` via:
//
//          ContainerScanTargetMap{ "key": ContainerScanTargetArgs{...} }
type ContainerScanTargetMapInput interface {
	pulumi.Input

	ToContainerScanTargetMapOutput() ContainerScanTargetMapOutput
	ToContainerScanTargetMapOutputWithContext(context.Context) ContainerScanTargetMapOutput
}

type ContainerScanTargetMap map[string]ContainerScanTargetInput

func (ContainerScanTargetMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ContainerScanTarget)(nil)).Elem()
}

func (i ContainerScanTargetMap) ToContainerScanTargetMapOutput() ContainerScanTargetMapOutput {
	return i.ToContainerScanTargetMapOutputWithContext(context.Background())
}

func (i ContainerScanTargetMap) ToContainerScanTargetMapOutputWithContext(ctx context.Context) ContainerScanTargetMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerScanTargetMapOutput)
}

type ContainerScanTargetOutput struct {
	*pulumi.OutputState
}

func (ContainerScanTargetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerScanTarget)(nil))
}

func (o ContainerScanTargetOutput) ToContainerScanTargetOutput() ContainerScanTargetOutput {
	return o
}

func (o ContainerScanTargetOutput) ToContainerScanTargetOutputWithContext(ctx context.Context) ContainerScanTargetOutput {
	return o
}

func (o ContainerScanTargetOutput) ToContainerScanTargetPtrOutput() ContainerScanTargetPtrOutput {
	return o.ToContainerScanTargetPtrOutputWithContext(context.Background())
}

func (o ContainerScanTargetOutput) ToContainerScanTargetPtrOutputWithContext(ctx context.Context) ContainerScanTargetPtrOutput {
	return o.ApplyT(func(v ContainerScanTarget) *ContainerScanTarget {
		return &v
	}).(ContainerScanTargetPtrOutput)
}

type ContainerScanTargetPtrOutput struct {
	*pulumi.OutputState
}

func (ContainerScanTargetPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ContainerScanTarget)(nil))
}

func (o ContainerScanTargetPtrOutput) ToContainerScanTargetPtrOutput() ContainerScanTargetPtrOutput {
	return o
}

func (o ContainerScanTargetPtrOutput) ToContainerScanTargetPtrOutputWithContext(ctx context.Context) ContainerScanTargetPtrOutput {
	return o
}

type ContainerScanTargetArrayOutput struct{ *pulumi.OutputState }

func (ContainerScanTargetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContainerScanTarget)(nil))
}

func (o ContainerScanTargetArrayOutput) ToContainerScanTargetArrayOutput() ContainerScanTargetArrayOutput {
	return o
}

func (o ContainerScanTargetArrayOutput) ToContainerScanTargetArrayOutputWithContext(ctx context.Context) ContainerScanTargetArrayOutput {
	return o
}

func (o ContainerScanTargetArrayOutput) Index(i pulumi.IntInput) ContainerScanTargetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ContainerScanTarget {
		return vs[0].([]ContainerScanTarget)[vs[1].(int)]
	}).(ContainerScanTargetOutput)
}

type ContainerScanTargetMapOutput struct{ *pulumi.OutputState }

func (ContainerScanTargetMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]ContainerScanTarget)(nil))
}

func (o ContainerScanTargetMapOutput) ToContainerScanTargetMapOutput() ContainerScanTargetMapOutput {
	return o
}

func (o ContainerScanTargetMapOutput) ToContainerScanTargetMapOutputWithContext(ctx context.Context) ContainerScanTargetMapOutput {
	return o
}

func (o ContainerScanTargetMapOutput) MapIndex(k pulumi.StringInput) ContainerScanTargetOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) ContainerScanTarget {
		return vs[0].(map[string]ContainerScanTarget)[vs[1].(string)]
	}).(ContainerScanTargetOutput)
}

func init() {
	pulumi.RegisterOutputType(ContainerScanTargetOutput{})
	pulumi.RegisterOutputType(ContainerScanTargetPtrOutput{})
	pulumi.RegisterOutputType(ContainerScanTargetArrayOutput{})
	pulumi.RegisterOutputType(ContainerScanTargetMapOutput{})
}
