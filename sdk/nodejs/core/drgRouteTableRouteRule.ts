// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * This resource provides the Drg Route Table Route Rule resource in Oracle Cloud Infrastructure Core service.
 *
 * Adds one static route rule to the specified DRG route table.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testDrgRouteTableRouteRule = new oci.core.DrgRouteTableRouteRule("testDrgRouteTableRouteRule", {
 *     drgRouteTableId: oci_core_drg_route_table.test_drg_route_table.id,
 *     destination: _var.drg_route_table_route_rule_route_rules_destination,
 *     destinationType: _var.drg_route_table_route_rule_route_rules_destination_type,
 *     nextHopDrgAttachmentId: oci_core_drg_attachment.test_drg_attachment.id,
 * });
 * ```
 *
 * ## Import
 *
 * DrgRouteTableRouteRule can be imported using the `id`, e.g.
 *
 * ```sh
 *  $ pulumi import oci:core/drgRouteTableRouteRule:DrgRouteTableRouteRule test_drg_route_table_route_rule "drgRouteTables/{drgRouteTableId}/routeRules/{id}"
 * ```
 */
export class DrgRouteTableRouteRule extends pulumi.CustomResource {
    /**
     * Get an existing DrgRouteTableRouteRule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DrgRouteTableRouteRuleState, opts?: pulumi.CustomResourceOptions): DrgRouteTableRouteRule {
        return new DrgRouteTableRouteRule(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'oci:core/drgRouteTableRouteRule:DrgRouteTableRouteRule';

    /**
     * Returns true if the given object is an instance of DrgRouteTableRouteRule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DrgRouteTableRouteRule {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DrgRouteTableRouteRule.__pulumiType;
    }

    /**
     * (Updatable) This is the range of IP addresses used for matching when routing traffic. Only CIDR_BLOCK values are allowed.
     */
    public readonly destination!: pulumi.Output<string>;
    /**
     * (Updatable) Type of destination for the rule. Required if `direction` = `EGRESS`. Allowed values:
     * * `CIDR_BLOCK`: If the rule's `destination` is an IP address range in CIDR notation.
     */
    public readonly destinationType!: pulumi.Output<string>;
    /**
     * The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the DRG route table.
     */
    public readonly drgRouteTableId!: pulumi.Output<string>;
    /**
     * Indicates that if the next hop attachment does not exist, so traffic for this route is discarded without notification.
     */
    public /*out*/ readonly isBlackhole!: pulumi.Output<boolean>;
    /**
     * Indicates that the route was not imported due to a conflict between route rules.
     */
    public /*out*/ readonly isConflict!: pulumi.Output<boolean>;
    /**
     * (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the next hop DRG attachment. The next hop DRG attachment is responsible for reaching the network destination.
     */
    public readonly nextHopDrgAttachmentId!: pulumi.Output<string>;
    /**
     * The earliest origin of a route. If a route is advertised to a DRG through an IPsec tunnel attachment, and is propagated to peered DRGs via RPC attachments, the route's provenance in the peered DRGs remains `IPSEC_TUNNEL`, because that is the earliest origin.
     */
    public /*out*/ readonly routeProvenance!: pulumi.Output<string>;
    /**
     * You can specify static routes for the DRG route table using the API. The DRG learns dynamic routes from the DRG attachments using various routing protocols.
     */
    public /*out*/ readonly routeType!: pulumi.Output<string>;

    /**
     * Create a DrgRouteTableRouteRule resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DrgRouteTableRouteRuleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DrgRouteTableRouteRuleArgs | DrgRouteTableRouteRuleState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DrgRouteTableRouteRuleState | undefined;
            inputs["destination"] = state ? state.destination : undefined;
            inputs["destinationType"] = state ? state.destinationType : undefined;
            inputs["drgRouteTableId"] = state ? state.drgRouteTableId : undefined;
            inputs["isBlackhole"] = state ? state.isBlackhole : undefined;
            inputs["isConflict"] = state ? state.isConflict : undefined;
            inputs["nextHopDrgAttachmentId"] = state ? state.nextHopDrgAttachmentId : undefined;
            inputs["routeProvenance"] = state ? state.routeProvenance : undefined;
            inputs["routeType"] = state ? state.routeType : undefined;
        } else {
            const args = argsOrState as DrgRouteTableRouteRuleArgs | undefined;
            if ((!args || args.destination === undefined) && !opts.urn) {
                throw new Error("Missing required property 'destination'");
            }
            if ((!args || args.destinationType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'destinationType'");
            }
            if ((!args || args.drgRouteTableId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'drgRouteTableId'");
            }
            if ((!args || args.nextHopDrgAttachmentId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'nextHopDrgAttachmentId'");
            }
            inputs["destination"] = args ? args.destination : undefined;
            inputs["destinationType"] = args ? args.destinationType : undefined;
            inputs["drgRouteTableId"] = args ? args.drgRouteTableId : undefined;
            inputs["nextHopDrgAttachmentId"] = args ? args.nextHopDrgAttachmentId : undefined;
            inputs["isBlackhole"] = undefined /*out*/;
            inputs["isConflict"] = undefined /*out*/;
            inputs["routeProvenance"] = undefined /*out*/;
            inputs["routeType"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        super(DrgRouteTableRouteRule.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering DrgRouteTableRouteRule resources.
 */
export interface DrgRouteTableRouteRuleState {
    /**
     * (Updatable) This is the range of IP addresses used for matching when routing traffic. Only CIDR_BLOCK values are allowed.
     */
    destination?: pulumi.Input<string>;
    /**
     * (Updatable) Type of destination for the rule. Required if `direction` = `EGRESS`. Allowed values:
     * * `CIDR_BLOCK`: If the rule's `destination` is an IP address range in CIDR notation.
     */
    destinationType?: pulumi.Input<string>;
    /**
     * The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the DRG route table.
     */
    drgRouteTableId?: pulumi.Input<string>;
    /**
     * Indicates that if the next hop attachment does not exist, so traffic for this route is discarded without notification.
     */
    isBlackhole?: pulumi.Input<boolean>;
    /**
     * Indicates that the route was not imported due to a conflict between route rules.
     */
    isConflict?: pulumi.Input<boolean>;
    /**
     * (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the next hop DRG attachment. The next hop DRG attachment is responsible for reaching the network destination.
     */
    nextHopDrgAttachmentId?: pulumi.Input<string>;
    /**
     * The earliest origin of a route. If a route is advertised to a DRG through an IPsec tunnel attachment, and is propagated to peered DRGs via RPC attachments, the route's provenance in the peered DRGs remains `IPSEC_TUNNEL`, because that is the earliest origin.
     */
    routeProvenance?: pulumi.Input<string>;
    /**
     * You can specify static routes for the DRG route table using the API. The DRG learns dynamic routes from the DRG attachments using various routing protocols.
     */
    routeType?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a DrgRouteTableRouteRule resource.
 */
export interface DrgRouteTableRouteRuleArgs {
    /**
     * (Updatable) This is the range of IP addresses used for matching when routing traffic. Only CIDR_BLOCK values are allowed.
     */
    destination: pulumi.Input<string>;
    /**
     * (Updatable) Type of destination for the rule. Required if `direction` = `EGRESS`. Allowed values:
     * * `CIDR_BLOCK`: If the rule's `destination` is an IP address range in CIDR notation.
     */
    destinationType: pulumi.Input<string>;
    /**
     * The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the DRG route table.
     */
    drgRouteTableId: pulumi.Input<string>;
    /**
     * (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the next hop DRG attachment. The next hop DRG attachment is responsible for reaching the network destination.
     */
    nextHopDrgAttachmentId: pulumi.Input<string>;
}
