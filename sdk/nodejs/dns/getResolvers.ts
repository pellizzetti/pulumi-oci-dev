// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "../types";
import * as utilities from "../utilities";

/**
 * This data source provides the list of Resolvers in Oracle Cloud Infrastructure DNS service.
 *
 * Gets a list of all resolvers within a compartment. The collection can
 * be filtered by display name, id, or lifecycle state. It can be sorted
 * on creation time or displayName both in ASC or DESC order. Note that
 * when no lifecycleState query parameter is provided, the collection
 * does not include resolvers in the DELETED lifecycleState to be consistent
 * with other operations of the API. Requires a `PRIVATE` scope query parameter.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testResolvers = oci.dns.getResolvers({
 *     compartmentId: _var.compartment_id,
 *     scope: "PRIVATE",
 *     displayName: _var.resolver_display_name,
 *     id: _var.resolver_id,
 *     state: _var.resolver_state,
 * });
 * ```
 */
export function getResolvers(args: GetResolversArgs, opts?: pulumi.InvokeOptions): Promise<GetResolversResult> {
    if (!opts) {
        opts = {}
    }

    if (!opts.version) {
        opts.version = utilities.getVersion();
    }
    return pulumi.runtime.invoke("oci:dns/getResolvers:getResolvers", {
        "compartmentId": args.compartmentId,
        "displayName": args.displayName,
        "filters": args.filters,
        "id": args.id,
        "scope": args.scope,
        "state": args.state,
    }, opts);
}

/**
 * A collection of arguments for invoking getResolvers.
 */
export interface GetResolversArgs {
    /**
     * The OCID of the compartment the resource belongs to.
     */
    compartmentId: string;
    /**
     * The displayName of a resource.
     */
    displayName?: string;
    filters?: inputs.dns.GetResolversFilter[];
    /**
     * The OCID of a resource.
     */
    id?: string;
    /**
     * Value must be `PRIVATE` when listing private name resolvers.
     */
    scope: string;
    /**
     * The state of a resource.
     */
    state?: string;
}

/**
 * A collection of values returned by getResolvers.
 */
export interface GetResolversResult {
    /**
     * The OCID of the owning compartment.
     */
    readonly compartmentId: string;
    /**
     * The display name of the resolver.
     */
    readonly displayName?: string;
    readonly filters?: outputs.dns.GetResolversFilter[];
    /**
     * The OCID of the resolver.
     */
    readonly id?: string;
    /**
     * The list of resolvers.
     */
    readonly resolvers: outputs.dns.GetResolversResolver[];
    readonly scope: string;
    /**
     * The current state of the resource.
     */
    readonly state?: string;
}
