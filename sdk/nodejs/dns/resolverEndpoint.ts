// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * This resource provides the Resolver Endpoint resource in Oracle Cloud Infrastructure DNS service.
 *
 * Creates a new resolver endpoint. Requires a `PRIVATE` scope query parameter.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testResolverEndpoint = new oci.dns.ResolverEndpoint("testResolverEndpoint", {
 *     isForwarding: _var.resolver_endpoint_is_forwarding,
 *     isListening: _var.resolver_endpoint_is_listening,
 *     resolverId: oci_dns_resolver.test_resolver.id,
 *     subnetId: oci_core_subnet.test_subnet.id,
 *     scope: "PRIVATE",
 *     endpointType: _var.resolver_endpoint_endpoint_type,
 *     forwardingAddress: _var.resolver_endpoint_forwarding_address,
 *     listeningAddress: _var.resolver_endpoint_listening_address,
 *     nsgIds: _var.resolver_endpoint_nsg_ids,
 * });
 * ```
 *
 * ## Import
 *
 * For legacy ResolverEndpoints created without `scope`, these ResolverEndpoints can be imported using the `id`, e.g.
 *
 * ```sh
 *  $ pulumi import oci:dns/resolverEndpoint:ResolverEndpoint test_resolver_endpoint "resolverId/{resolverId}/name/{resolverEndpointName}"
 * ```
 *
 *  For ResolverEndpoints created using `scope`, these ResolverEndpoints can be imported using the `id`, e.g.
 *
 * ```sh
 *  $ pulumi import oci:dns/resolverEndpoint:ResolverEndpoint test_resolver_endpoint "resolverId/{resolverId}/name/{name}/scope/{scope}"
 * ```
 */
export class ResolverEndpoint extends pulumi.CustomResource {
    /**
     * Get an existing ResolverEndpoint resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ResolverEndpointState, opts?: pulumi.CustomResourceOptions): ResolverEndpoint {
        return new ResolverEndpoint(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'oci:dns/resolverEndpoint:ResolverEndpoint';

    /**
     * Returns true if the given object is an instance of ResolverEndpoint.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ResolverEndpoint {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ResolverEndpoint.__pulumiType;
    }

    /**
     * The OCID of the owning compartment. This will match the resolver that the resolver endpoint is under and will be updated if the resolver's compartment is changed.
     */
    public /*out*/ readonly compartmentId!: pulumi.Output<string>;
    /**
     * (Updatable) The type of resolver endpoint. VNIC is currently the only supported type.
     */
    public readonly endpointType!: pulumi.Output<string>;
    /**
     * An IP address from which forwarded queries may be sent. For VNIC endpoints, this IP address must be part of the subnet and will be assigned by the system if unspecified when isForwarding is true.
     */
    public readonly forwardingAddress!: pulumi.Output<string>;
    /**
     * A Boolean flag indicating whether or not the resolver endpoint is for forwarding.
     */
    public readonly isForwarding!: pulumi.Output<boolean>;
    /**
     * A Boolean flag indicating whether or not the resolver endpoint is for listening.
     */
    public readonly isListening!: pulumi.Output<boolean>;
    /**
     * An IP address to listen to queries on. For VNIC endpoints this IP address must be part of the subnet and will be assigned by the system if unspecified when isListening is true.
     */
    public readonly listeningAddress!: pulumi.Output<string>;
    /**
     * The name of the resolver endpoint. Must be unique, case-insensitive, within the resolver.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * An array of network security group OCIDs for the resolver endpoint. These must be part of the VCN that the resolver endpoint is a part of.
     */
    public readonly nsgIds!: pulumi.Output<string[] | undefined>;
    /**
     * The OCID of the target resolver.
     */
    public readonly resolverId!: pulumi.Output<string>;
    /**
     * Value must be `PRIVATE` when creating private name resolver endpoints.
     */
    public readonly scope!: pulumi.Output<string>;
    /**
     * The canonical absolute URL of the resource.
     */
    public /*out*/ readonly self!: pulumi.Output<string>;
    /**
     * The current state of the resource.
     */
    public /*out*/ readonly state!: pulumi.Output<string>;
    /**
     * The OCID of a subnet. Must be part of the VCN that the resolver is attached to.
     */
    public readonly subnetId!: pulumi.Output<string>;
    /**
     * The date and time the resource was created in "YYYY-MM-ddThh:mm:ssZ" format with a Z offset, as defined by RFC 3339.
     */
    public /*out*/ readonly timeCreated!: pulumi.Output<string>;
    /**
     * The date and time the resource was last updated in "YYYY-MM-ddThh:mm:ssZ" format with a Z offset, as defined by RFC 3339.
     */
    public /*out*/ readonly timeUpdated!: pulumi.Output<string>;

    /**
     * Create a ResolverEndpoint resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ResolverEndpointArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ResolverEndpointArgs | ResolverEndpointState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ResolverEndpointState | undefined;
            inputs["compartmentId"] = state ? state.compartmentId : undefined;
            inputs["endpointType"] = state ? state.endpointType : undefined;
            inputs["forwardingAddress"] = state ? state.forwardingAddress : undefined;
            inputs["isForwarding"] = state ? state.isForwarding : undefined;
            inputs["isListening"] = state ? state.isListening : undefined;
            inputs["listeningAddress"] = state ? state.listeningAddress : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["nsgIds"] = state ? state.nsgIds : undefined;
            inputs["resolverId"] = state ? state.resolverId : undefined;
            inputs["scope"] = state ? state.scope : undefined;
            inputs["self"] = state ? state.self : undefined;
            inputs["state"] = state ? state.state : undefined;
            inputs["subnetId"] = state ? state.subnetId : undefined;
            inputs["timeCreated"] = state ? state.timeCreated : undefined;
            inputs["timeUpdated"] = state ? state.timeUpdated : undefined;
        } else {
            const args = argsOrState as ResolverEndpointArgs | undefined;
            if ((!args || args.isForwarding === undefined) && !opts.urn) {
                throw new Error("Missing required property 'isForwarding'");
            }
            if ((!args || args.isListening === undefined) && !opts.urn) {
                throw new Error("Missing required property 'isListening'");
            }
            if ((!args || args.resolverId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resolverId'");
            }
            if ((!args || args.scope === undefined) && !opts.urn) {
                throw new Error("Missing required property 'scope'");
            }
            if ((!args || args.subnetId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'subnetId'");
            }
            inputs["endpointType"] = args ? args.endpointType : undefined;
            inputs["forwardingAddress"] = args ? args.forwardingAddress : undefined;
            inputs["isForwarding"] = args ? args.isForwarding : undefined;
            inputs["isListening"] = args ? args.isListening : undefined;
            inputs["listeningAddress"] = args ? args.listeningAddress : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["nsgIds"] = args ? args.nsgIds : undefined;
            inputs["resolverId"] = args ? args.resolverId : undefined;
            inputs["scope"] = args ? args.scope : undefined;
            inputs["subnetId"] = args ? args.subnetId : undefined;
            inputs["compartmentId"] = undefined /*out*/;
            inputs["self"] = undefined /*out*/;
            inputs["state"] = undefined /*out*/;
            inputs["timeCreated"] = undefined /*out*/;
            inputs["timeUpdated"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        super(ResolverEndpoint.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ResolverEndpoint resources.
 */
export interface ResolverEndpointState {
    /**
     * The OCID of the owning compartment. This will match the resolver that the resolver endpoint is under and will be updated if the resolver's compartment is changed.
     */
    compartmentId?: pulumi.Input<string>;
    /**
     * (Updatable) The type of resolver endpoint. VNIC is currently the only supported type.
     */
    endpointType?: pulumi.Input<string>;
    /**
     * An IP address from which forwarded queries may be sent. For VNIC endpoints, this IP address must be part of the subnet and will be assigned by the system if unspecified when isForwarding is true.
     */
    forwardingAddress?: pulumi.Input<string>;
    /**
     * A Boolean flag indicating whether or not the resolver endpoint is for forwarding.
     */
    isForwarding?: pulumi.Input<boolean>;
    /**
     * A Boolean flag indicating whether or not the resolver endpoint is for listening.
     */
    isListening?: pulumi.Input<boolean>;
    /**
     * An IP address to listen to queries on. For VNIC endpoints this IP address must be part of the subnet and will be assigned by the system if unspecified when isListening is true.
     */
    listeningAddress?: pulumi.Input<string>;
    /**
     * The name of the resolver endpoint. Must be unique, case-insensitive, within the resolver.
     */
    name?: pulumi.Input<string>;
    /**
     * An array of network security group OCIDs for the resolver endpoint. These must be part of the VCN that the resolver endpoint is a part of.
     */
    nsgIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The OCID of the target resolver.
     */
    resolverId?: pulumi.Input<string>;
    /**
     * Value must be `PRIVATE` when creating private name resolver endpoints.
     */
    scope?: pulumi.Input<string>;
    /**
     * The canonical absolute URL of the resource.
     */
    self?: pulumi.Input<string>;
    /**
     * The current state of the resource.
     */
    state?: pulumi.Input<string>;
    /**
     * The OCID of a subnet. Must be part of the VCN that the resolver is attached to.
     */
    subnetId?: pulumi.Input<string>;
    /**
     * The date and time the resource was created in "YYYY-MM-ddThh:mm:ssZ" format with a Z offset, as defined by RFC 3339.
     */
    timeCreated?: pulumi.Input<string>;
    /**
     * The date and time the resource was last updated in "YYYY-MM-ddThh:mm:ssZ" format with a Z offset, as defined by RFC 3339.
     */
    timeUpdated?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ResolverEndpoint resource.
 */
export interface ResolverEndpointArgs {
    /**
     * (Updatable) The type of resolver endpoint. VNIC is currently the only supported type.
     */
    endpointType?: pulumi.Input<string>;
    /**
     * An IP address from which forwarded queries may be sent. For VNIC endpoints, this IP address must be part of the subnet and will be assigned by the system if unspecified when isForwarding is true.
     */
    forwardingAddress?: pulumi.Input<string>;
    /**
     * A Boolean flag indicating whether or not the resolver endpoint is for forwarding.
     */
    isForwarding: pulumi.Input<boolean>;
    /**
     * A Boolean flag indicating whether or not the resolver endpoint is for listening.
     */
    isListening: pulumi.Input<boolean>;
    /**
     * An IP address to listen to queries on. For VNIC endpoints this IP address must be part of the subnet and will be assigned by the system if unspecified when isListening is true.
     */
    listeningAddress?: pulumi.Input<string>;
    /**
     * The name of the resolver endpoint. Must be unique, case-insensitive, within the resolver.
     */
    name?: pulumi.Input<string>;
    /**
     * An array of network security group OCIDs for the resolver endpoint. These must be part of the VCN that the resolver endpoint is a part of.
     */
    nsgIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The OCID of the target resolver.
     */
    resolverId: pulumi.Input<string>;
    /**
     * Value must be `PRIVATE` when creating private name resolver endpoints.
     */
    scope: pulumi.Input<string>;
    /**
     * The OCID of a subnet. Must be part of the VCN that the resolver is attached to.
     */
    subnetId: pulumi.Input<string>;
}
