// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export * from "./provider";

// Export sub-modules:
import * as aianomalydetection from "./aianomalydetection";
import * as analytics from "./analytics";
import * as apigateway from "./apigateway";
import * as apm from "./apm";
import * as apmsynthetics from "./apmsynthetics";
import * as artifacts from "./artifacts";
import * as audit from "./audit";
import * as autoscaling from "./autoscaling";
import * as bastion from "./bastion";
import * as bds from "./bds";
import * as blockchain from "./blockchain";
import * as budget from "./budget";
import * as cloudguard from "./cloudguard";
import * as computeinstanceagent from "./computeinstanceagent";
import * as config from "./config";
import * as containerengine from "./containerengine";
import * as core from "./core";
import * as database from "./database";
import * as databasemanagement from "./databasemanagement";
import * as databasemigration from "./databasemigration";
import * as datacatalog from "./datacatalog";
import * as dataflow from "./dataflow";
import * as dataintegration from "./dataintegration";
import * as datasafe from "./datasafe";
import * as datascience from "./datascience";
import * as devops from "./devops";
import * as dns from "./dns";
import * as email from "./email";
import * as events from "./events";
import * as filestorage from "./filestorage";
import * as functions from "./functions";
import * as genericartifactscontent from "./genericartifactscontent";
import * as goldengate from "./goldengate";
import * as healthchecks from "./healthchecks";
import * as identity from "./identity";
import * as integration from "./integration";
import * as jms from "./jms";
import * as kms from "./kms";
import * as limits from "./limits";
import * as loadbalancer from "./loadbalancer";
import * as loganalytics from "./loganalytics";
import * as logging from "./logging";
import * as managementagent from "./managementagent";
import * as managementdashboard from "./managementdashboard";
import * as marketplace from "./marketplace";
import * as meteringcomputation from "./meteringcomputation";
import * as monitoring from "./monitoring";
import * as mysql from "./mysql";
import * as networkloadbalancer from "./networkloadbalancer";
import * as nosql from "./nosql";
import * as objectstorage from "./objectstorage";
import * as oce from "./oce";
import * as ocvp from "./ocvp";
import * as oda from "./oda";
import * as ons from "./ons";
import * as opsi from "./opsi";
import * as optimizer from "./optimizer";
import * as osmanagement from "./osmanagement";
import * as resourcemanager from "./resourcemanager";
import * as sch from "./sch";
import * as servicecatalog from "./servicecatalog";
import * as streaming from "./streaming";
import * as types from "./types";
import * as vault from "./vault";
import * as vulnerabilityscanning from "./vulnerabilityscanning";
import * as waas from "./waas";

export {
    aianomalydetection,
    analytics,
    apigateway,
    apm,
    apmsynthetics,
    artifacts,
    audit,
    autoscaling,
    bastion,
    bds,
    blockchain,
    budget,
    cloudguard,
    computeinstanceagent,
    config,
    containerengine,
    core,
    database,
    databasemanagement,
    databasemigration,
    datacatalog,
    dataflow,
    dataintegration,
    datasafe,
    datascience,
    devops,
    dns,
    email,
    events,
    filestorage,
    functions,
    genericartifactscontent,
    goldengate,
    healthchecks,
    identity,
    integration,
    jms,
    kms,
    limits,
    loadbalancer,
    loganalytics,
    logging,
    managementagent,
    managementdashboard,
    marketplace,
    meteringcomputation,
    monitoring,
    mysql,
    networkloadbalancer,
    nosql,
    objectstorage,
    oce,
    ocvp,
    oda,
    ons,
    opsi,
    optimizer,
    osmanagement,
    resourcemanager,
    sch,
    servicecatalog,
    streaming,
    types,
    vault,
    vulnerabilityscanning,
    waas,
};

import { Provider } from "./provider";

pulumi.runtime.registerResourcePackage("oci", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:oci") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
