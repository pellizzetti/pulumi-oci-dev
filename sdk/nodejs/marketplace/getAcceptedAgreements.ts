// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "../types";
import * as utilities from "../utilities";

/**
 * This data source provides the list of Accepted Agreements in Oracle Cloud Infrastructure Marketplace service.
 *
 * Lists the terms of use agreements that have been accepted in the specified compartment.
 * You can filter results by specifying query parameters.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testAcceptedAgreements = oci.marketplace.getAcceptedAgreements({
 *     compartmentId: _var.compartment_id,
 *     acceptedAgreementId: oci_marketplace_accepted_agreement.test_accepted_agreement.id,
 *     displayName: _var.accepted_agreement_display_name,
 *     listingId: oci_marketplace_listing.test_listing.id,
 *     packageVersion: _var.accepted_agreement_package_version,
 * });
 * ```
 */
export function getAcceptedAgreements(args: GetAcceptedAgreementsArgs, opts?: pulumi.InvokeOptions): Promise<GetAcceptedAgreementsResult> {
    if (!opts) {
        opts = {}
    }

    if (!opts.version) {
        opts.version = utilities.getVersion();
    }
    return pulumi.runtime.invoke("oci:marketplace/getAcceptedAgreements:getAcceptedAgreements", {
        "acceptedAgreementId": args.acceptedAgreementId,
        "compartmentId": args.compartmentId,
        "displayName": args.displayName,
        "filters": args.filters,
        "listingId": args.listingId,
        "packageVersion": args.packageVersion,
    }, opts);
}

/**
 * A collection of arguments for invoking getAcceptedAgreements.
 */
export interface GetAcceptedAgreementsArgs {
    /**
     * The unique identifier for the accepted terms of use agreement.
     */
    acceptedAgreementId?: string;
    /**
     * The unique identifier for the compartment.
     */
    compartmentId: string;
    /**
     * The display name of the resource.
     */
    displayName?: string;
    filters?: inputs.marketplace.GetAcceptedAgreementsFilter[];
    /**
     * The unique identifier for the listing.
     */
    listingId?: string;
    /**
     * The version of the package. Package versions are unique within a listing.
     */
    packageVersion?: string;
}

/**
 * A collection of values returned by getAcceptedAgreements.
 */
export interface GetAcceptedAgreementsResult {
    readonly acceptedAgreementId?: string;
    /**
     * The list of accepted_agreements.
     */
    readonly acceptedAgreements: outputs.marketplace.GetAcceptedAgreementsAcceptedAgreement[];
    /**
     * The unique identifier for the compartment where the agreement was accepted.
     */
    readonly compartmentId: string;
    /**
     * A display name for the accepted agreement.
     */
    readonly displayName?: string;
    readonly filters?: outputs.marketplace.GetAcceptedAgreementsFilter[];
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * The unique identifier for the listing associated with the agreement.
     */
    readonly listingId?: string;
    /**
     * The package version associated with the agreement.
     */
    readonly packageVersion?: string;
}
