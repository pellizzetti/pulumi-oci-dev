// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "../types";
import * as utilities from "../utilities";

/**
 * This resource provides the Mysql Backup resource in Oracle Cloud Infrastructure MySQL Database service.
 *
 * Create a backup of a DB System.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testMysqlBackup = new oci.mysql.MysqlBackup("testMysqlBackup", {
 *     dbSystemId: oci_mysql_mysql_db_system.test_db_system.id,
 *     backupType: _var.mysql_backup_backup_type,
 *     definedTags: {
 *         "foo-namespace.bar-key": "value",
 *     },
 *     description: _var.mysql_backup_description,
 *     displayName: _var.mysql_backup_display_name,
 *     freeformTags: {
 *         "bar-key": "value",
 *     },
 *     retentionInDays: _var.mysql_backup_retention_in_days,
 * });
 * ```
 *
 * ## Import
 *
 * MysqlBackups can be imported using the `id`, e.g.
 *
 * ```sh
 *  $ pulumi import oci:mysql/mysqlBackup:MysqlBackup test_mysql_backup "id"
 * ```
 */
export class MysqlBackup extends pulumi.CustomResource {
    /**
     * Get an existing MysqlBackup resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: MysqlBackupState, opts?: pulumi.CustomResourceOptions): MysqlBackup {
        return new MysqlBackup(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'oci:mysql/mysqlBackup:MysqlBackup';

    /**
     * Returns true if the given object is an instance of MysqlBackup.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is MysqlBackup {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === MysqlBackup.__pulumiType;
    }

    /**
     * The size of the backup in base-2 (IEC) gibibytes. (GiB).
     */
    public /*out*/ readonly backupSizeInGbs!: pulumi.Output<number>;
    /**
     * The type of backup.
     */
    public readonly backupType!: pulumi.Output<string>;
    /**
     * (Updatable) The OCID of the compartment.
     */
    public readonly compartmentId!: pulumi.Output<string>;
    /**
     * If the backup was created automatically, or by a manual request.
     */
    public /*out*/ readonly creationType!: pulumi.Output<string>;
    /**
     * Initial size of the data volume in GiBs that will be created and attached.
     */
    public /*out*/ readonly dataStorageSizeInGb!: pulumi.Output<number>;
    /**
     * The OCID of the DB System the Backup is associated with.
     */
    public readonly dbSystemId!: pulumi.Output<string>;
    /**
     * Snapshot of the DbSystem details at the time of the backup
     */
    public /*out*/ readonly dbSystemSnapshot!: pulumi.Output<outputs.mysql.MysqlBackupDbSystemSnapshot>;
    /**
     * (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
     */
    public readonly definedTags!: pulumi.Output<{[key: string]: any}>;
    /**
     * (Updatable) A user-supplied description for the backup.
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * (Updatable) A user-supplied display name for the backup.
     */
    public readonly displayName!: pulumi.Output<string>;
    /**
     * (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
     */
    public readonly freeformTags!: pulumi.Output<{[key: string]: any}>;
    /**
     * Additional information about the current lifecycleState.
     */
    public /*out*/ readonly lifecycleDetails!: pulumi.Output<string>;
    /**
     * The MySQL server version of the DB System used for backup.
     */
    public /*out*/ readonly mysqlVersion!: pulumi.Output<string>;
    /**
     * (Updatable) Number of days to retain this backup.
     */
    public readonly retentionInDays!: pulumi.Output<number>;
    /**
     * The shape of the DB System instance used for backup.
     */
    public /*out*/ readonly shapeName!: pulumi.Output<string>;
    /**
     * The state of the backup.
     */
    public /*out*/ readonly state!: pulumi.Output<string>;
    /**
     * The time the backup record was created.
     */
    public /*out*/ readonly timeCreated!: pulumi.Output<string>;
    /**
     * The time at which the backup was updated.
     */
    public /*out*/ readonly timeUpdated!: pulumi.Output<string>;

    /**
     * Create a MysqlBackup resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: MysqlBackupArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: MysqlBackupArgs | MysqlBackupState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as MysqlBackupState | undefined;
            inputs["backupSizeInGbs"] = state ? state.backupSizeInGbs : undefined;
            inputs["backupType"] = state ? state.backupType : undefined;
            inputs["compartmentId"] = state ? state.compartmentId : undefined;
            inputs["creationType"] = state ? state.creationType : undefined;
            inputs["dataStorageSizeInGb"] = state ? state.dataStorageSizeInGb : undefined;
            inputs["dbSystemId"] = state ? state.dbSystemId : undefined;
            inputs["dbSystemSnapshot"] = state ? state.dbSystemSnapshot : undefined;
            inputs["definedTags"] = state ? state.definedTags : undefined;
            inputs["description"] = state ? state.description : undefined;
            inputs["displayName"] = state ? state.displayName : undefined;
            inputs["freeformTags"] = state ? state.freeformTags : undefined;
            inputs["lifecycleDetails"] = state ? state.lifecycleDetails : undefined;
            inputs["mysqlVersion"] = state ? state.mysqlVersion : undefined;
            inputs["retentionInDays"] = state ? state.retentionInDays : undefined;
            inputs["shapeName"] = state ? state.shapeName : undefined;
            inputs["state"] = state ? state.state : undefined;
            inputs["timeCreated"] = state ? state.timeCreated : undefined;
            inputs["timeUpdated"] = state ? state.timeUpdated : undefined;
        } else {
            const args = argsOrState as MysqlBackupArgs | undefined;
            if ((!args || args.dbSystemId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dbSystemId'");
            }
            inputs["backupType"] = args ? args.backupType : undefined;
            inputs["compartmentId"] = args ? args.compartmentId : undefined;
            inputs["dbSystemId"] = args ? args.dbSystemId : undefined;
            inputs["definedTags"] = args ? args.definedTags : undefined;
            inputs["description"] = args ? args.description : undefined;
            inputs["displayName"] = args ? args.displayName : undefined;
            inputs["freeformTags"] = args ? args.freeformTags : undefined;
            inputs["retentionInDays"] = args ? args.retentionInDays : undefined;
            inputs["backupSizeInGbs"] = undefined /*out*/;
            inputs["creationType"] = undefined /*out*/;
            inputs["dataStorageSizeInGb"] = undefined /*out*/;
            inputs["dbSystemSnapshot"] = undefined /*out*/;
            inputs["lifecycleDetails"] = undefined /*out*/;
            inputs["mysqlVersion"] = undefined /*out*/;
            inputs["shapeName"] = undefined /*out*/;
            inputs["state"] = undefined /*out*/;
            inputs["timeCreated"] = undefined /*out*/;
            inputs["timeUpdated"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        super(MysqlBackup.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering MysqlBackup resources.
 */
export interface MysqlBackupState {
    /**
     * The size of the backup in base-2 (IEC) gibibytes. (GiB).
     */
    backupSizeInGbs?: pulumi.Input<number>;
    /**
     * The type of backup.
     */
    backupType?: pulumi.Input<string>;
    /**
     * (Updatable) The OCID of the compartment.
     */
    compartmentId?: pulumi.Input<string>;
    /**
     * If the backup was created automatically, or by a manual request.
     */
    creationType?: pulumi.Input<string>;
    /**
     * Initial size of the data volume in GiBs that will be created and attached.
     */
    dataStorageSizeInGb?: pulumi.Input<number>;
    /**
     * The OCID of the DB System the Backup is associated with.
     */
    dbSystemId?: pulumi.Input<string>;
    /**
     * Snapshot of the DbSystem details at the time of the backup
     */
    dbSystemSnapshot?: pulumi.Input<inputs.mysql.MysqlBackupDbSystemSnapshot>;
    /**
     * (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
     */
    definedTags?: pulumi.Input<{[key: string]: any}>;
    /**
     * (Updatable) A user-supplied description for the backup.
     */
    description?: pulumi.Input<string>;
    /**
     * (Updatable) A user-supplied display name for the backup.
     */
    displayName?: pulumi.Input<string>;
    /**
     * (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
     */
    freeformTags?: pulumi.Input<{[key: string]: any}>;
    /**
     * Additional information about the current lifecycleState.
     */
    lifecycleDetails?: pulumi.Input<string>;
    /**
     * The MySQL server version of the DB System used for backup.
     */
    mysqlVersion?: pulumi.Input<string>;
    /**
     * (Updatable) Number of days to retain this backup.
     */
    retentionInDays?: pulumi.Input<number>;
    /**
     * The shape of the DB System instance used for backup.
     */
    shapeName?: pulumi.Input<string>;
    /**
     * The state of the backup.
     */
    state?: pulumi.Input<string>;
    /**
     * The time the backup record was created.
     */
    timeCreated?: pulumi.Input<string>;
    /**
     * The time at which the backup was updated.
     */
    timeUpdated?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a MysqlBackup resource.
 */
export interface MysqlBackupArgs {
    /**
     * The type of backup.
     */
    backupType?: pulumi.Input<string>;
    /**
     * (Updatable) The OCID of the compartment.
     */
    compartmentId?: pulumi.Input<string>;
    /**
     * The OCID of the DB System the Backup is associated with.
     */
    dbSystemId: pulumi.Input<string>;
    /**
     * (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
     */
    definedTags?: pulumi.Input<{[key: string]: any}>;
    /**
     * (Updatable) A user-supplied description for the backup.
     */
    description?: pulumi.Input<string>;
    /**
     * (Updatable) A user-supplied display name for the backup.
     */
    displayName?: pulumi.Input<string>;
    /**
     * (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
     */
    freeformTags?: pulumi.Input<{[key: string]: any}>;
    /**
     * (Updatable) Number of days to retain this backup.
     */
    retentionInDays?: pulumi.Input<number>;
}
