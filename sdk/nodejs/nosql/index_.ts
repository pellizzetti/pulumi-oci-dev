// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "../types";
import * as utilities from "../utilities";

/**
 * This resource provides the Index resource in Oracle Cloud Infrastructure NoSQL Database service.
 *
 * Create a new index on the table identified by tableNameOrId.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testIndex = new oci.nosql.Index("testIndex", {
 *     keys: [{
 *         columnName: _var.index_keys_column_name,
 *         jsonFieldType: _var.index_keys_json_field_type,
 *         jsonPath: _var.index_keys_json_path,
 *     }],
 *     tableNameOrId: oci_nosql_table_name_or.test_table_name_or.id,
 *     compartmentId: _var.compartment_id,
 *     isIfNotExists: _var.index_is_if_not_exists,
 * });
 * ```
 *
 * ## Import
 *
 * Indexes can be imported using the `id`, e.g.
 *
 * ```sh
 *  $ pulumi import oci:nosql/index:Index test_index "tables/{tableNameOrId}/indexes/{indexName}"
 * ```
 */
export class Index extends pulumi.CustomResource {
    /**
     * Get an existing Index resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: IndexState, opts?: pulumi.CustomResourceOptions): Index {
        return new Index(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'oci:nosql/index:Index';

    /**
     * Returns true if the given object is an instance of Index.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Index {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Index.__pulumiType;
    }

    /**
     * The OCID of the table's compartment.  Required if the tableNameOrId path parameter is a table name. Optional if tableNameOrId is an OCID.  If tableNameOrId is an OCID, and compartmentId is supplied, the latter must match the identified table's compartmentId.
     */
    public readonly compartmentId!: pulumi.Output<string>;
    /**
     * If true, the operation completes successfully even when the index exists.  Otherwise, an attempt to create an index that already exists will return an error.
     */
    public readonly isIfNotExists!: pulumi.Output<boolean>;
    /**
     * A set of keys for a secondary index.
     */
    public readonly keys!: pulumi.Output<outputs.nosql.IndexKey[]>;
    /**
     * A message describing the current state in more detail.
     */
    public /*out*/ readonly lifecycleDetails!: pulumi.Output<string>;
    /**
     * Index name.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The state of an index.
     */
    public /*out*/ readonly state!: pulumi.Output<string>;
    /**
     * the OCID of the table to which this index belongs.
     */
    public /*out*/ readonly tableId!: pulumi.Output<string>;
    /**
     * The name of the table to which this index belongs.
     */
    public /*out*/ readonly tableName!: pulumi.Output<string>;
    /**
     * A table name within the compartment, or a table OCID.
     */
    public readonly tableNameOrId!: pulumi.Output<string>;

    /**
     * Create a Index resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: IndexArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: IndexArgs | IndexState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as IndexState | undefined;
            inputs["compartmentId"] = state ? state.compartmentId : undefined;
            inputs["isIfNotExists"] = state ? state.isIfNotExists : undefined;
            inputs["keys"] = state ? state.keys : undefined;
            inputs["lifecycleDetails"] = state ? state.lifecycleDetails : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["state"] = state ? state.state : undefined;
            inputs["tableId"] = state ? state.tableId : undefined;
            inputs["tableName"] = state ? state.tableName : undefined;
            inputs["tableNameOrId"] = state ? state.tableNameOrId : undefined;
        } else {
            const args = argsOrState as IndexArgs | undefined;
            if ((!args || args.keys === undefined) && !opts.urn) {
                throw new Error("Missing required property 'keys'");
            }
            if ((!args || args.tableNameOrId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'tableNameOrId'");
            }
            inputs["compartmentId"] = args ? args.compartmentId : undefined;
            inputs["isIfNotExists"] = args ? args.isIfNotExists : undefined;
            inputs["keys"] = args ? args.keys : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["tableNameOrId"] = args ? args.tableNameOrId : undefined;
            inputs["lifecycleDetails"] = undefined /*out*/;
            inputs["state"] = undefined /*out*/;
            inputs["tableId"] = undefined /*out*/;
            inputs["tableName"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        super(Index.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Index resources.
 */
export interface IndexState {
    /**
     * The OCID of the table's compartment.  Required if the tableNameOrId path parameter is a table name. Optional if tableNameOrId is an OCID.  If tableNameOrId is an OCID, and compartmentId is supplied, the latter must match the identified table's compartmentId.
     */
    compartmentId?: pulumi.Input<string>;
    /**
     * If true, the operation completes successfully even when the index exists.  Otherwise, an attempt to create an index that already exists will return an error.
     */
    isIfNotExists?: pulumi.Input<boolean>;
    /**
     * A set of keys for a secondary index.
     */
    keys?: pulumi.Input<pulumi.Input<inputs.nosql.IndexKey>[]>;
    /**
     * A message describing the current state in more detail.
     */
    lifecycleDetails?: pulumi.Input<string>;
    /**
     * Index name.
     */
    name?: pulumi.Input<string>;
    /**
     * The state of an index.
     */
    state?: pulumi.Input<string>;
    /**
     * the OCID of the table to which this index belongs.
     */
    tableId?: pulumi.Input<string>;
    /**
     * The name of the table to which this index belongs.
     */
    tableName?: pulumi.Input<string>;
    /**
     * A table name within the compartment, or a table OCID.
     */
    tableNameOrId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Index resource.
 */
export interface IndexArgs {
    /**
     * The OCID of the table's compartment.  Required if the tableNameOrId path parameter is a table name. Optional if tableNameOrId is an OCID.  If tableNameOrId is an OCID, and compartmentId is supplied, the latter must match the identified table's compartmentId.
     */
    compartmentId?: pulumi.Input<string>;
    /**
     * If true, the operation completes successfully even when the index exists.  Otherwise, an attempt to create an index that already exists will return an error.
     */
    isIfNotExists?: pulumi.Input<boolean>;
    /**
     * A set of keys for a secondary index.
     */
    keys: pulumi.Input<pulumi.Input<inputs.nosql.IndexKey>[]>;
    /**
     * Index name.
     */
    name?: pulumi.Input<string>;
    /**
     * A table name within the compartment, or a table OCID.
     */
    tableNameOrId: pulumi.Input<string>;
}
