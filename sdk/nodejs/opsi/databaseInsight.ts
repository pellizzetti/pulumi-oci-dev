// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * ## Import
 *
 * DatabaseInsights can be imported using the `id`, e.g.
 *
 * ```sh
 *  $ pulumi import oci:opsi/databaseInsight:DatabaseInsight test_database_insight "id"
 * ```
 */
export class DatabaseInsight extends pulumi.CustomResource {
    /**
     * Get an existing DatabaseInsight resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DatabaseInsightState, opts?: pulumi.CustomResourceOptions): DatabaseInsight {
        return new DatabaseInsight(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'oci:opsi/databaseInsight:DatabaseInsight';

    /**
     * Returns true if the given object is an instance of DatabaseInsight.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DatabaseInsight {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DatabaseInsight.__pulumiType;
    }

    /**
     * (Updatable) Compartment Identifier of database
     */
    public readonly compartmentId!: pulumi.Output<string>;
    /**
     * Display name of database
     */
    public /*out*/ readonly databaseDisplayName!: pulumi.Output<string>;
    /**
     * The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the database.
     */
    public /*out*/ readonly databaseId!: pulumi.Output<string>;
    /**
     * Name of database
     */
    public /*out*/ readonly databaseName!: pulumi.Output<string>;
    /**
     * Operations Insights internal representation of the database type.
     */
    public /*out*/ readonly databaseType!: pulumi.Output<string>;
    /**
     * The version of the database.
     */
    public /*out*/ readonly databaseVersion!: pulumi.Output<string>;
    /**
     * (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
     */
    public readonly definedTags!: pulumi.Output<{[key: string]: any}>;
    /**
     * OPSI Enterprise Manager Bridge OCID
     */
    public readonly enterpriseManagerBridgeId!: pulumi.Output<string>;
    /**
     * Enterprise Manager Entity Display Name
     */
    public /*out*/ readonly enterpriseManagerEntityDisplayName!: pulumi.Output<string>;
    /**
     * Enterprise Manager Entity Unique Identifier
     */
    public readonly enterpriseManagerEntityIdentifier!: pulumi.Output<string>;
    /**
     * Enterprise Manager Entity Name
     */
    public /*out*/ readonly enterpriseManagerEntityName!: pulumi.Output<string>;
    /**
     * Enterprise Manager Entity Type
     */
    public /*out*/ readonly enterpriseManagerEntityType!: pulumi.Output<string>;
    /**
     * Enterprise Manager Unqiue Identifier
     */
    public readonly enterpriseManagerIdentifier!: pulumi.Output<string>;
    /**
     * (Updatable) Source of the database entity. The supported type is "EM_MANAGED_EXTERNAL_DATABASE"
     */
    public readonly entitySource!: pulumi.Output<string>;
    /**
     * (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
     */
    public readonly freeformTags!: pulumi.Output<{[key: string]: any}>;
    /**
     * A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
     */
    public /*out*/ readonly lifecycleDetails!: pulumi.Output<string>;
    /**
     * Processor count.
     */
    public /*out*/ readonly processorCount!: pulumi.Output<number>;
    /**
     * The current state of the database.
     */
    public /*out*/ readonly state!: pulumi.Output<string>;
    /**
     * (Updatable) Status of the resource. Example: "ENABLED", "DISABLED". Resource can be either enabled or disabled by updating the value of status field to either "ENABLED" or "DISABLED"
     */
    public readonly status!: pulumi.Output<string>;
    /**
     * System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"orcl-cloud.free-tier-retained": "true"}`
     */
    public /*out*/ readonly systemTags!: pulumi.Output<{[key: string]: any}>;
    /**
     * The time the the database insight was first enabled. An RFC3339 formatted datetime string
     */
    public /*out*/ readonly timeCreated!: pulumi.Output<string>;
    /**
     * The time the database insight was updated. An RFC3339 formatted datetime string
     */
    public /*out*/ readonly timeUpdated!: pulumi.Output<string>;

    /**
     * Create a DatabaseInsight resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DatabaseInsightArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DatabaseInsightArgs | DatabaseInsightState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DatabaseInsightState | undefined;
            inputs["compartmentId"] = state ? state.compartmentId : undefined;
            inputs["databaseDisplayName"] = state ? state.databaseDisplayName : undefined;
            inputs["databaseId"] = state ? state.databaseId : undefined;
            inputs["databaseName"] = state ? state.databaseName : undefined;
            inputs["databaseType"] = state ? state.databaseType : undefined;
            inputs["databaseVersion"] = state ? state.databaseVersion : undefined;
            inputs["definedTags"] = state ? state.definedTags : undefined;
            inputs["enterpriseManagerBridgeId"] = state ? state.enterpriseManagerBridgeId : undefined;
            inputs["enterpriseManagerEntityDisplayName"] = state ? state.enterpriseManagerEntityDisplayName : undefined;
            inputs["enterpriseManagerEntityIdentifier"] = state ? state.enterpriseManagerEntityIdentifier : undefined;
            inputs["enterpriseManagerEntityName"] = state ? state.enterpriseManagerEntityName : undefined;
            inputs["enterpriseManagerEntityType"] = state ? state.enterpriseManagerEntityType : undefined;
            inputs["enterpriseManagerIdentifier"] = state ? state.enterpriseManagerIdentifier : undefined;
            inputs["entitySource"] = state ? state.entitySource : undefined;
            inputs["freeformTags"] = state ? state.freeformTags : undefined;
            inputs["lifecycleDetails"] = state ? state.lifecycleDetails : undefined;
            inputs["processorCount"] = state ? state.processorCount : undefined;
            inputs["state"] = state ? state.state : undefined;
            inputs["status"] = state ? state.status : undefined;
            inputs["systemTags"] = state ? state.systemTags : undefined;
            inputs["timeCreated"] = state ? state.timeCreated : undefined;
            inputs["timeUpdated"] = state ? state.timeUpdated : undefined;
        } else {
            const args = argsOrState as DatabaseInsightArgs | undefined;
            if ((!args || args.compartmentId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'compartmentId'");
            }
            if ((!args || args.enterpriseManagerBridgeId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'enterpriseManagerBridgeId'");
            }
            if ((!args || args.enterpriseManagerEntityIdentifier === undefined) && !opts.urn) {
                throw new Error("Missing required property 'enterpriseManagerEntityIdentifier'");
            }
            if ((!args || args.enterpriseManagerIdentifier === undefined) && !opts.urn) {
                throw new Error("Missing required property 'enterpriseManagerIdentifier'");
            }
            if ((!args || args.entitySource === undefined) && !opts.urn) {
                throw new Error("Missing required property 'entitySource'");
            }
            inputs["compartmentId"] = args ? args.compartmentId : undefined;
            inputs["definedTags"] = args ? args.definedTags : undefined;
            inputs["enterpriseManagerBridgeId"] = args ? args.enterpriseManagerBridgeId : undefined;
            inputs["enterpriseManagerEntityIdentifier"] = args ? args.enterpriseManagerEntityIdentifier : undefined;
            inputs["enterpriseManagerIdentifier"] = args ? args.enterpriseManagerIdentifier : undefined;
            inputs["entitySource"] = args ? args.entitySource : undefined;
            inputs["freeformTags"] = args ? args.freeformTags : undefined;
            inputs["status"] = args ? args.status : undefined;
            inputs["databaseDisplayName"] = undefined /*out*/;
            inputs["databaseId"] = undefined /*out*/;
            inputs["databaseName"] = undefined /*out*/;
            inputs["databaseType"] = undefined /*out*/;
            inputs["databaseVersion"] = undefined /*out*/;
            inputs["enterpriseManagerEntityDisplayName"] = undefined /*out*/;
            inputs["enterpriseManagerEntityName"] = undefined /*out*/;
            inputs["enterpriseManagerEntityType"] = undefined /*out*/;
            inputs["lifecycleDetails"] = undefined /*out*/;
            inputs["processorCount"] = undefined /*out*/;
            inputs["state"] = undefined /*out*/;
            inputs["systemTags"] = undefined /*out*/;
            inputs["timeCreated"] = undefined /*out*/;
            inputs["timeUpdated"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        super(DatabaseInsight.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering DatabaseInsight resources.
 */
export interface DatabaseInsightState {
    /**
     * (Updatable) Compartment Identifier of database
     */
    compartmentId?: pulumi.Input<string>;
    /**
     * Display name of database
     */
    databaseDisplayName?: pulumi.Input<string>;
    /**
     * The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the database.
     */
    databaseId?: pulumi.Input<string>;
    /**
     * Name of database
     */
    databaseName?: pulumi.Input<string>;
    /**
     * Operations Insights internal representation of the database type.
     */
    databaseType?: pulumi.Input<string>;
    /**
     * The version of the database.
     */
    databaseVersion?: pulumi.Input<string>;
    /**
     * (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
     */
    definedTags?: pulumi.Input<{[key: string]: any}>;
    /**
     * OPSI Enterprise Manager Bridge OCID
     */
    enterpriseManagerBridgeId?: pulumi.Input<string>;
    /**
     * Enterprise Manager Entity Display Name
     */
    enterpriseManagerEntityDisplayName?: pulumi.Input<string>;
    /**
     * Enterprise Manager Entity Unique Identifier
     */
    enterpriseManagerEntityIdentifier?: pulumi.Input<string>;
    /**
     * Enterprise Manager Entity Name
     */
    enterpriseManagerEntityName?: pulumi.Input<string>;
    /**
     * Enterprise Manager Entity Type
     */
    enterpriseManagerEntityType?: pulumi.Input<string>;
    /**
     * Enterprise Manager Unqiue Identifier
     */
    enterpriseManagerIdentifier?: pulumi.Input<string>;
    /**
     * (Updatable) Source of the database entity. The supported type is "EM_MANAGED_EXTERNAL_DATABASE"
     */
    entitySource?: pulumi.Input<string>;
    /**
     * (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
     */
    freeformTags?: pulumi.Input<{[key: string]: any}>;
    /**
     * A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
     */
    lifecycleDetails?: pulumi.Input<string>;
    /**
     * Processor count.
     */
    processorCount?: pulumi.Input<number>;
    /**
     * The current state of the database.
     */
    state?: pulumi.Input<string>;
    /**
     * (Updatable) Status of the resource. Example: "ENABLED", "DISABLED". Resource can be either enabled or disabled by updating the value of status field to either "ENABLED" or "DISABLED"
     */
    status?: pulumi.Input<string>;
    /**
     * System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"orcl-cloud.free-tier-retained": "true"}`
     */
    systemTags?: pulumi.Input<{[key: string]: any}>;
    /**
     * The time the the database insight was first enabled. An RFC3339 formatted datetime string
     */
    timeCreated?: pulumi.Input<string>;
    /**
     * The time the database insight was updated. An RFC3339 formatted datetime string
     */
    timeUpdated?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a DatabaseInsight resource.
 */
export interface DatabaseInsightArgs {
    /**
     * (Updatable) Compartment Identifier of database
     */
    compartmentId: pulumi.Input<string>;
    /**
     * (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
     */
    definedTags?: pulumi.Input<{[key: string]: any}>;
    /**
     * OPSI Enterprise Manager Bridge OCID
     */
    enterpriseManagerBridgeId: pulumi.Input<string>;
    /**
     * Enterprise Manager Entity Unique Identifier
     */
    enterpriseManagerEntityIdentifier: pulumi.Input<string>;
    /**
     * Enterprise Manager Unqiue Identifier
     */
    enterpriseManagerIdentifier: pulumi.Input<string>;
    /**
     * (Updatable) Source of the database entity. The supported type is "EM_MANAGED_EXTERNAL_DATABASE"
     */
    entitySource: pulumi.Input<string>;
    /**
     * (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
     */
    freeformTags?: pulumi.Input<{[key: string]: any}>;
    /**
     * (Updatable) Status of the resource. Example: "ENABLED", "DISABLED". Resource can be either enabled or disabled by updating the value of status field to either "ENABLED" or "DISABLED"
     */
    status?: pulumi.Input<string>;
}
