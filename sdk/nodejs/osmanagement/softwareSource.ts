// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "../types";
import * as utilities from "../utilities";

/**
 * This resource provides the Software Source resource in Oracle Cloud Infrastructure OS Management service.
 *
 * Creates a new custom Software Source on the management system.
 * This will not contain any packages after it is first created,
 * and they must be added later.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testSoftwareSource = new oci.osmanagement.SoftwareSource("testSoftwareSource", {
 *     archType: _var.software_source_arch_type,
 *     compartmentId: _var.compartment_id,
 *     displayName: _var.software_source_display_name,
 *     checksumType: _var.software_source_checksum_type,
 *     definedTags: {
 *         "foo-namespace.bar-key": "value",
 *     },
 *     description: _var.software_source_description,
 *     freeformTags: {
 *         "bar-key": "value",
 *     },
 *     maintainerEmail: _var.software_source_maintainer_email,
 *     maintainerName: _var.software_source_maintainer_name,
 *     maintainerPhone: _var.software_source_maintainer_phone,
 *     parentId: oci_osmanagement_parent.test_parent.id,
 * });
 * ```
 *
 * ## Import
 *
 * SoftwareSources can be imported using the `id`, e.g.
 *
 * ```sh
 *  $ pulumi import oci:osmanagement/softwareSource:SoftwareSource test_software_source "id"
 * ```
 */
export class SoftwareSource extends pulumi.CustomResource {
    /**
     * Get an existing SoftwareSource resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SoftwareSourceState, opts?: pulumi.CustomResourceOptions): SoftwareSource {
        return new SoftwareSource(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'oci:osmanagement/softwareSource:SoftwareSource';

    /**
     * Returns true if the given object is an instance of SoftwareSource.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SoftwareSource {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SoftwareSource.__pulumiType;
    }

    /**
     * The architecture type supported by the Software Source
     */
    public readonly archType!: pulumi.Output<string>;
    /**
     * list of the Managed Instances associated with this Software Sources
     */
    public /*out*/ readonly associatedManagedInstances!: pulumi.Output<outputs.osmanagement.SoftwareSourceAssociatedManagedInstance[]>;
    /**
     * (Updatable) The yum repository checksum type used by this software source
     */
    public readonly checksumType!: pulumi.Output<string>;
    /**
     * (Updatable) OCID for the Compartment
     */
    public readonly compartmentId!: pulumi.Output<string>;
    /**
     * (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
     */
    public readonly definedTags!: pulumi.Output<{[key: string]: any}>;
    /**
     * (Updatable) Information specified by the user about the software source
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * (Updatable) User friendly name for the software source
     */
    public readonly displayName!: pulumi.Output<string>;
    /**
     * (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
     */
    public readonly freeformTags!: pulumi.Output<{[key: string]: any}>;
    /**
     * Fingerprint of the GPG key for this software source
     */
    public /*out*/ readonly gpgKeyFingerprint!: pulumi.Output<string>;
    /**
     * ID of the GPG key for this software source
     */
    public /*out*/ readonly gpgKeyId!: pulumi.Output<string>;
    /**
     * URL of the GPG key for this software source
     */
    public /*out*/ readonly gpgKeyUrl!: pulumi.Output<string>;
    /**
     * (Updatable) Email address of the person maintaining this software source
     */
    public readonly maintainerEmail!: pulumi.Output<string>;
    /**
     * (Updatable) Name of the person maintaining this software source
     */
    public readonly maintainerName!: pulumi.Output<string>;
    /**
     * (Updatable) Phone number of the person maintaining this software source
     */
    public readonly maintainerPhone!: pulumi.Output<string>;
    /**
     * Number of packages
     */
    public /*out*/ readonly packages!: pulumi.Output<number>;
    /**
     * OCID for the parent software source, if there is one
     */
    public readonly parentId!: pulumi.Output<string>;
    /**
     * Display name the parent software source, if there is one
     */
    public /*out*/ readonly parentName!: pulumi.Output<string>;
    /**
     * Type of the Software Source
     */
    public /*out*/ readonly repoType!: pulumi.Output<string>;
    /**
     * The current state of the Software Source.
     */
    public /*out*/ readonly state!: pulumi.Output<string>;
    /**
     * status of the software source.
     */
    public /*out*/ readonly status!: pulumi.Output<string>;
    /**
     * URL for the repostiory
     */
    public /*out*/ readonly url!: pulumi.Output<string>;

    /**
     * Create a SoftwareSource resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SoftwareSourceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SoftwareSourceArgs | SoftwareSourceState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SoftwareSourceState | undefined;
            inputs["archType"] = state ? state.archType : undefined;
            inputs["associatedManagedInstances"] = state ? state.associatedManagedInstances : undefined;
            inputs["checksumType"] = state ? state.checksumType : undefined;
            inputs["compartmentId"] = state ? state.compartmentId : undefined;
            inputs["definedTags"] = state ? state.definedTags : undefined;
            inputs["description"] = state ? state.description : undefined;
            inputs["displayName"] = state ? state.displayName : undefined;
            inputs["freeformTags"] = state ? state.freeformTags : undefined;
            inputs["gpgKeyFingerprint"] = state ? state.gpgKeyFingerprint : undefined;
            inputs["gpgKeyId"] = state ? state.gpgKeyId : undefined;
            inputs["gpgKeyUrl"] = state ? state.gpgKeyUrl : undefined;
            inputs["maintainerEmail"] = state ? state.maintainerEmail : undefined;
            inputs["maintainerName"] = state ? state.maintainerName : undefined;
            inputs["maintainerPhone"] = state ? state.maintainerPhone : undefined;
            inputs["packages"] = state ? state.packages : undefined;
            inputs["parentId"] = state ? state.parentId : undefined;
            inputs["parentName"] = state ? state.parentName : undefined;
            inputs["repoType"] = state ? state.repoType : undefined;
            inputs["state"] = state ? state.state : undefined;
            inputs["status"] = state ? state.status : undefined;
            inputs["url"] = state ? state.url : undefined;
        } else {
            const args = argsOrState as SoftwareSourceArgs | undefined;
            if ((!args || args.archType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'archType'");
            }
            if ((!args || args.compartmentId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'compartmentId'");
            }
            if ((!args || args.displayName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'displayName'");
            }
            inputs["archType"] = args ? args.archType : undefined;
            inputs["checksumType"] = args ? args.checksumType : undefined;
            inputs["compartmentId"] = args ? args.compartmentId : undefined;
            inputs["definedTags"] = args ? args.definedTags : undefined;
            inputs["description"] = args ? args.description : undefined;
            inputs["displayName"] = args ? args.displayName : undefined;
            inputs["freeformTags"] = args ? args.freeformTags : undefined;
            inputs["maintainerEmail"] = args ? args.maintainerEmail : undefined;
            inputs["maintainerName"] = args ? args.maintainerName : undefined;
            inputs["maintainerPhone"] = args ? args.maintainerPhone : undefined;
            inputs["parentId"] = args ? args.parentId : undefined;
            inputs["associatedManagedInstances"] = undefined /*out*/;
            inputs["gpgKeyFingerprint"] = undefined /*out*/;
            inputs["gpgKeyId"] = undefined /*out*/;
            inputs["gpgKeyUrl"] = undefined /*out*/;
            inputs["packages"] = undefined /*out*/;
            inputs["parentName"] = undefined /*out*/;
            inputs["repoType"] = undefined /*out*/;
            inputs["state"] = undefined /*out*/;
            inputs["status"] = undefined /*out*/;
            inputs["url"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        super(SoftwareSource.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering SoftwareSource resources.
 */
export interface SoftwareSourceState {
    /**
     * The architecture type supported by the Software Source
     */
    archType?: pulumi.Input<string>;
    /**
     * list of the Managed Instances associated with this Software Sources
     */
    associatedManagedInstances?: pulumi.Input<pulumi.Input<inputs.osmanagement.SoftwareSourceAssociatedManagedInstance>[]>;
    /**
     * (Updatable) The yum repository checksum type used by this software source
     */
    checksumType?: pulumi.Input<string>;
    /**
     * (Updatable) OCID for the Compartment
     */
    compartmentId?: pulumi.Input<string>;
    /**
     * (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
     */
    definedTags?: pulumi.Input<{[key: string]: any}>;
    /**
     * (Updatable) Information specified by the user about the software source
     */
    description?: pulumi.Input<string>;
    /**
     * (Updatable) User friendly name for the software source
     */
    displayName?: pulumi.Input<string>;
    /**
     * (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
     */
    freeformTags?: pulumi.Input<{[key: string]: any}>;
    /**
     * Fingerprint of the GPG key for this software source
     */
    gpgKeyFingerprint?: pulumi.Input<string>;
    /**
     * ID of the GPG key for this software source
     */
    gpgKeyId?: pulumi.Input<string>;
    /**
     * URL of the GPG key for this software source
     */
    gpgKeyUrl?: pulumi.Input<string>;
    /**
     * (Updatable) Email address of the person maintaining this software source
     */
    maintainerEmail?: pulumi.Input<string>;
    /**
     * (Updatable) Name of the person maintaining this software source
     */
    maintainerName?: pulumi.Input<string>;
    /**
     * (Updatable) Phone number of the person maintaining this software source
     */
    maintainerPhone?: pulumi.Input<string>;
    /**
     * Number of packages
     */
    packages?: pulumi.Input<number>;
    /**
     * OCID for the parent software source, if there is one
     */
    parentId?: pulumi.Input<string>;
    /**
     * Display name the parent software source, if there is one
     */
    parentName?: pulumi.Input<string>;
    /**
     * Type of the Software Source
     */
    repoType?: pulumi.Input<string>;
    /**
     * The current state of the Software Source.
     */
    state?: pulumi.Input<string>;
    /**
     * status of the software source.
     */
    status?: pulumi.Input<string>;
    /**
     * URL for the repostiory
     */
    url?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SoftwareSource resource.
 */
export interface SoftwareSourceArgs {
    /**
     * The architecture type supported by the Software Source
     */
    archType: pulumi.Input<string>;
    /**
     * (Updatable) The yum repository checksum type used by this software source
     */
    checksumType?: pulumi.Input<string>;
    /**
     * (Updatable) OCID for the Compartment
     */
    compartmentId: pulumi.Input<string>;
    /**
     * (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
     */
    definedTags?: pulumi.Input<{[key: string]: any}>;
    /**
     * (Updatable) Information specified by the user about the software source
     */
    description?: pulumi.Input<string>;
    /**
     * (Updatable) User friendly name for the software source
     */
    displayName: pulumi.Input<string>;
    /**
     * (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
     */
    freeformTags?: pulumi.Input<{[key: string]: any}>;
    /**
     * (Updatable) Email address of the person maintaining this software source
     */
    maintainerEmail?: pulumi.Input<string>;
    /**
     * (Updatable) Name of the person maintaining this software source
     */
    maintainerName?: pulumi.Input<string>;
    /**
     * (Updatable) Phone number of the person maintaining this software source
     */
    maintainerPhone?: pulumi.Input<string>;
    /**
     * OCID for the parent software source, if there is one
     */
    parentId?: pulumi.Input<string>;
}
