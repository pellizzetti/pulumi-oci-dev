# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'ApiValidationResult',
    'DeploymentSpecification',
    'DeploymentSpecificationLoggingPolicies',
    'DeploymentSpecificationLoggingPoliciesAccessLog',
    'DeploymentSpecificationLoggingPoliciesExecutionLog',
    'DeploymentSpecificationRequestPolicies',
    'DeploymentSpecificationRequestPoliciesAuthentication',
    'DeploymentSpecificationRequestPoliciesAuthenticationPublicKeys',
    'DeploymentSpecificationRequestPoliciesAuthenticationPublicKeysKey',
    'DeploymentSpecificationRequestPoliciesAuthenticationVerifyClaim',
    'DeploymentSpecificationRequestPoliciesCors',
    'DeploymentSpecificationRequestPoliciesRateLimiting',
    'DeploymentSpecificationRoute',
    'DeploymentSpecificationRouteBackend',
    'DeploymentSpecificationRouteBackendHeader',
    'DeploymentSpecificationRouteLoggingPolicies',
    'DeploymentSpecificationRouteLoggingPoliciesAccessLog',
    'DeploymentSpecificationRouteLoggingPoliciesExecutionLog',
    'DeploymentSpecificationRouteRequestPolicies',
    'DeploymentSpecificationRouteRequestPoliciesAuthorization',
    'DeploymentSpecificationRouteRequestPoliciesBodyValidation',
    'DeploymentSpecificationRouteRequestPoliciesBodyValidationContent',
    'DeploymentSpecificationRouteRequestPoliciesCors',
    'DeploymentSpecificationRouteRequestPoliciesHeaderTransformations',
    'DeploymentSpecificationRouteRequestPoliciesHeaderTransformationsFilterHeaders',
    'DeploymentSpecificationRouteRequestPoliciesHeaderTransformationsFilterHeadersItem',
    'DeploymentSpecificationRouteRequestPoliciesHeaderTransformationsRenameHeaders',
    'DeploymentSpecificationRouteRequestPoliciesHeaderTransformationsRenameHeadersItem',
    'DeploymentSpecificationRouteRequestPoliciesHeaderTransformationsSetHeaders',
    'DeploymentSpecificationRouteRequestPoliciesHeaderTransformationsSetHeadersItem',
    'DeploymentSpecificationRouteRequestPoliciesHeaderValidations',
    'DeploymentSpecificationRouteRequestPoliciesHeaderValidationsHeader',
    'DeploymentSpecificationRouteRequestPoliciesQueryParameterTransformations',
    'DeploymentSpecificationRouteRequestPoliciesQueryParameterTransformationsFilterQueryParameters',
    'DeploymentSpecificationRouteRequestPoliciesQueryParameterTransformationsFilterQueryParametersItem',
    'DeploymentSpecificationRouteRequestPoliciesQueryParameterTransformationsRenameQueryParameters',
    'DeploymentSpecificationRouteRequestPoliciesQueryParameterTransformationsRenameQueryParametersItem',
    'DeploymentSpecificationRouteRequestPoliciesQueryParameterTransformationsSetQueryParameters',
    'DeploymentSpecificationRouteRequestPoliciesQueryParameterTransformationsSetQueryParametersItem',
    'DeploymentSpecificationRouteRequestPoliciesQueryParameterValidations',
    'DeploymentSpecificationRouteRequestPoliciesQueryParameterValidationsParameter',
    'DeploymentSpecificationRouteRequestPoliciesResponseCacheLookup',
    'DeploymentSpecificationRouteResponsePolicies',
    'DeploymentSpecificationRouteResponsePoliciesHeaderTransformations',
    'DeploymentSpecificationRouteResponsePoliciesHeaderTransformationsFilterHeaders',
    'DeploymentSpecificationRouteResponsePoliciesHeaderTransformationsFilterHeadersItem',
    'DeploymentSpecificationRouteResponsePoliciesHeaderTransformationsRenameHeaders',
    'DeploymentSpecificationRouteResponsePoliciesHeaderTransformationsRenameHeadersItem',
    'DeploymentSpecificationRouteResponsePoliciesHeaderTransformationsSetHeaders',
    'DeploymentSpecificationRouteResponsePoliciesHeaderTransformationsSetHeadersItem',
    'DeploymentSpecificationRouteResponsePoliciesResponseCacheStore',
    'GatewayIpAddress',
    'GatewayResponseCacheDetails',
    'GatewayResponseCacheDetailsServer',
    'GetApiDeploymentSpecificationLoggingPolicyResult',
    'GetApiDeploymentSpecificationLoggingPolicyAccessLogResult',
    'GetApiDeploymentSpecificationLoggingPolicyExecutionLogResult',
    'GetApiDeploymentSpecificationRequestPolicyResult',
    'GetApiDeploymentSpecificationRequestPolicyAuthenticationResult',
    'GetApiDeploymentSpecificationRequestPolicyAuthenticationPublicKeysResult',
    'GetApiDeploymentSpecificationRequestPolicyAuthenticationPublicKeysKeyResult',
    'GetApiDeploymentSpecificationRequestPolicyAuthenticationVerifyClaimResult',
    'GetApiDeploymentSpecificationRequestPolicyCorsResult',
    'GetApiDeploymentSpecificationRequestPolicyRateLimitingResult',
    'GetApiDeploymentSpecificationRouteResult',
    'GetApiDeploymentSpecificationRouteBackendResult',
    'GetApiDeploymentSpecificationRouteBackendHeaderResult',
    'GetApiDeploymentSpecificationRouteLoggingPoliciesResult',
    'GetApiDeploymentSpecificationRouteLoggingPoliciesAccessLogResult',
    'GetApiDeploymentSpecificationRouteLoggingPoliciesExecutionLogResult',
    'GetApiDeploymentSpecificationRouteRequestPoliciesResult',
    'GetApiDeploymentSpecificationRouteRequestPoliciesAuthorizationResult',
    'GetApiDeploymentSpecificationRouteRequestPoliciesBodyValidationResult',
    'GetApiDeploymentSpecificationRouteRequestPoliciesBodyValidationContentResult',
    'GetApiDeploymentSpecificationRouteRequestPoliciesCorsResult',
    'GetApiDeploymentSpecificationRouteRequestPoliciesHeaderTransformationsResult',
    'GetApiDeploymentSpecificationRouteRequestPoliciesHeaderTransformationsFilterHeadersResult',
    'GetApiDeploymentSpecificationRouteRequestPoliciesHeaderTransformationsFilterHeadersItemResult',
    'GetApiDeploymentSpecificationRouteRequestPoliciesHeaderTransformationsRenameHeadersResult',
    'GetApiDeploymentSpecificationRouteRequestPoliciesHeaderTransformationsRenameHeadersItemResult',
    'GetApiDeploymentSpecificationRouteRequestPoliciesHeaderTransformationsSetHeadersResult',
    'GetApiDeploymentSpecificationRouteRequestPoliciesHeaderTransformationsSetHeadersItemResult',
    'GetApiDeploymentSpecificationRouteRequestPoliciesHeaderValidationsResult',
    'GetApiDeploymentSpecificationRouteRequestPoliciesHeaderValidationsHeaderResult',
    'GetApiDeploymentSpecificationRouteRequestPoliciesQueryParameterTransformationsResult',
    'GetApiDeploymentSpecificationRouteRequestPoliciesQueryParameterTransformationsFilterQueryParametersResult',
    'GetApiDeploymentSpecificationRouteRequestPoliciesQueryParameterTransformationsFilterQueryParametersItemResult',
    'GetApiDeploymentSpecificationRouteRequestPoliciesQueryParameterTransformationsRenameQueryParametersResult',
    'GetApiDeploymentSpecificationRouteRequestPoliciesQueryParameterTransformationsRenameQueryParametersItemResult',
    'GetApiDeploymentSpecificationRouteRequestPoliciesQueryParameterTransformationsSetQueryParametersResult',
    'GetApiDeploymentSpecificationRouteRequestPoliciesQueryParameterTransformationsSetQueryParametersItemResult',
    'GetApiDeploymentSpecificationRouteRequestPoliciesQueryParameterValidationsResult',
    'GetApiDeploymentSpecificationRouteRequestPoliciesQueryParameterValidationsParameterResult',
    'GetApiDeploymentSpecificationRouteRequestPoliciesResponseCacheLookupResult',
    'GetApiDeploymentSpecificationRouteResponsePoliciesResult',
    'GetApiDeploymentSpecificationRouteResponsePoliciesHeaderTransformationsResult',
    'GetApiDeploymentSpecificationRouteResponsePoliciesHeaderTransformationsFilterHeadersResult',
    'GetApiDeploymentSpecificationRouteResponsePoliciesHeaderTransformationsFilterHeadersItemResult',
    'GetApiDeploymentSpecificationRouteResponsePoliciesHeaderTransformationsRenameHeadersResult',
    'GetApiDeploymentSpecificationRouteResponsePoliciesHeaderTransformationsRenameHeadersItemResult',
    'GetApiDeploymentSpecificationRouteResponsePoliciesHeaderTransformationsSetHeadersResult',
    'GetApiDeploymentSpecificationRouteResponsePoliciesHeaderTransformationsSetHeadersItemResult',
    'GetApiDeploymentSpecificationRouteResponsePoliciesResponseCacheStoreResult',
    'GetApiValidationResultResult',
    'GetApiValidationValidationResult',
    'GetApiValidationValidationDetailResult',
    'GetApiValidationValidationDetailSrcResult',
    'GetApisApiCollectionResult',
    'GetApisApiCollectionItemResult',
    'GetApisApiCollectionItemValidationResultResult',
    'GetApisFilterResult',
    'GetCertificatesCertificateCollectionResult',
    'GetCertificatesCertificateCollectionItemResult',
    'GetCertificatesFilterResult',
    'GetDeploymentSpecificationResult',
    'GetDeploymentSpecificationLoggingPoliciesResult',
    'GetDeploymentSpecificationLoggingPoliciesAccessLogResult',
    'GetDeploymentSpecificationLoggingPoliciesExecutionLogResult',
    'GetDeploymentSpecificationRequestPoliciesResult',
    'GetDeploymentSpecificationRequestPoliciesAuthenticationResult',
    'GetDeploymentSpecificationRequestPoliciesAuthenticationPublicKeysResult',
    'GetDeploymentSpecificationRequestPoliciesAuthenticationPublicKeysKeyResult',
    'GetDeploymentSpecificationRequestPoliciesAuthenticationVerifyClaimResult',
    'GetDeploymentSpecificationRequestPoliciesCorsResult',
    'GetDeploymentSpecificationRequestPoliciesRateLimitingResult',
    'GetDeploymentSpecificationRouteResult',
    'GetDeploymentSpecificationRouteBackendResult',
    'GetDeploymentSpecificationRouteBackendHeaderResult',
    'GetDeploymentSpecificationRouteLoggingPoliciesResult',
    'GetDeploymentSpecificationRouteLoggingPoliciesAccessLogResult',
    'GetDeploymentSpecificationRouteLoggingPoliciesExecutionLogResult',
    'GetDeploymentSpecificationRouteRequestPoliciesResult',
    'GetDeploymentSpecificationRouteRequestPoliciesAuthorizationResult',
    'GetDeploymentSpecificationRouteRequestPoliciesBodyValidationResult',
    'GetDeploymentSpecificationRouteRequestPoliciesBodyValidationContentResult',
    'GetDeploymentSpecificationRouteRequestPoliciesCorsResult',
    'GetDeploymentSpecificationRouteRequestPoliciesHeaderTransformationsResult',
    'GetDeploymentSpecificationRouteRequestPoliciesHeaderTransformationsFilterHeadersResult',
    'GetDeploymentSpecificationRouteRequestPoliciesHeaderTransformationsFilterHeadersItemResult',
    'GetDeploymentSpecificationRouteRequestPoliciesHeaderTransformationsRenameHeadersResult',
    'GetDeploymentSpecificationRouteRequestPoliciesHeaderTransformationsRenameHeadersItemResult',
    'GetDeploymentSpecificationRouteRequestPoliciesHeaderTransformationsSetHeadersResult',
    'GetDeploymentSpecificationRouteRequestPoliciesHeaderTransformationsSetHeadersItemResult',
    'GetDeploymentSpecificationRouteRequestPoliciesHeaderValidationsResult',
    'GetDeploymentSpecificationRouteRequestPoliciesHeaderValidationsHeaderResult',
    'GetDeploymentSpecificationRouteRequestPoliciesQueryParameterTransformationsResult',
    'GetDeploymentSpecificationRouteRequestPoliciesQueryParameterTransformationsFilterQueryParametersResult',
    'GetDeploymentSpecificationRouteRequestPoliciesQueryParameterTransformationsFilterQueryParametersItemResult',
    'GetDeploymentSpecificationRouteRequestPoliciesQueryParameterTransformationsRenameQueryParametersResult',
    'GetDeploymentSpecificationRouteRequestPoliciesQueryParameterTransformationsRenameQueryParametersItemResult',
    'GetDeploymentSpecificationRouteRequestPoliciesQueryParameterTransformationsSetQueryParametersResult',
    'GetDeploymentSpecificationRouteRequestPoliciesQueryParameterTransformationsSetQueryParametersItemResult',
    'GetDeploymentSpecificationRouteRequestPoliciesQueryParameterValidationsResult',
    'GetDeploymentSpecificationRouteRequestPoliciesQueryParameterValidationsParameterResult',
    'GetDeploymentSpecificationRouteRequestPoliciesResponseCacheLookupResult',
    'GetDeploymentSpecificationRouteResponsePoliciesResult',
    'GetDeploymentSpecificationRouteResponsePoliciesHeaderTransformationsResult',
    'GetDeploymentSpecificationRouteResponsePoliciesHeaderTransformationsFilterHeadersResult',
    'GetDeploymentSpecificationRouteResponsePoliciesHeaderTransformationsFilterHeadersItemResult',
    'GetDeploymentSpecificationRouteResponsePoliciesHeaderTransformationsRenameHeadersResult',
    'GetDeploymentSpecificationRouteResponsePoliciesHeaderTransformationsRenameHeadersItemResult',
    'GetDeploymentSpecificationRouteResponsePoliciesHeaderTransformationsSetHeadersResult',
    'GetDeploymentSpecificationRouteResponsePoliciesHeaderTransformationsSetHeadersItemResult',
    'GetDeploymentSpecificationRouteResponsePoliciesResponseCacheStoreResult',
    'GetDeploymentsDeploymentCollectionResult',
    'GetDeploymentsDeploymentCollectionSpecificationResult',
    'GetDeploymentsDeploymentCollectionSpecificationLoggingPoliciesResult',
    'GetDeploymentsDeploymentCollectionSpecificationLoggingPoliciesAccessLogResult',
    'GetDeploymentsDeploymentCollectionSpecificationLoggingPoliciesExecutionLogResult',
    'GetDeploymentsDeploymentCollectionSpecificationRequestPoliciesResult',
    'GetDeploymentsDeploymentCollectionSpecificationRequestPoliciesAuthenticationResult',
    'GetDeploymentsDeploymentCollectionSpecificationRequestPoliciesAuthenticationPublicKeysResult',
    'GetDeploymentsDeploymentCollectionSpecificationRequestPoliciesAuthenticationPublicKeysKeyResult',
    'GetDeploymentsDeploymentCollectionSpecificationRequestPoliciesAuthenticationVerifyClaimResult',
    'GetDeploymentsDeploymentCollectionSpecificationRequestPoliciesCorsResult',
    'GetDeploymentsDeploymentCollectionSpecificationRequestPoliciesRateLimitingResult',
    'GetDeploymentsDeploymentCollectionSpecificationRouteResult',
    'GetDeploymentsDeploymentCollectionSpecificationRouteBackendResult',
    'GetDeploymentsDeploymentCollectionSpecificationRouteBackendHeaderResult',
    'GetDeploymentsDeploymentCollectionSpecificationRouteLoggingPoliciesResult',
    'GetDeploymentsDeploymentCollectionSpecificationRouteLoggingPoliciesAccessLogResult',
    'GetDeploymentsDeploymentCollectionSpecificationRouteLoggingPoliciesExecutionLogResult',
    'GetDeploymentsDeploymentCollectionSpecificationRouteRequestPoliciesResult',
    'GetDeploymentsDeploymentCollectionSpecificationRouteRequestPoliciesAuthorizationResult',
    'GetDeploymentsDeploymentCollectionSpecificationRouteRequestPoliciesBodyValidationResult',
    'GetDeploymentsDeploymentCollectionSpecificationRouteRequestPoliciesBodyValidationContentResult',
    'GetDeploymentsDeploymentCollectionSpecificationRouteRequestPoliciesCorsResult',
    'GetDeploymentsDeploymentCollectionSpecificationRouteRequestPoliciesHeaderTransformationsResult',
    'GetDeploymentsDeploymentCollectionSpecificationRouteRequestPoliciesHeaderTransformationsFilterHeadersResult',
    'GetDeploymentsDeploymentCollectionSpecificationRouteRequestPoliciesHeaderTransformationsFilterHeadersItemResult',
    'GetDeploymentsDeploymentCollectionSpecificationRouteRequestPoliciesHeaderTransformationsRenameHeadersResult',
    'GetDeploymentsDeploymentCollectionSpecificationRouteRequestPoliciesHeaderTransformationsRenameHeadersItemResult',
    'GetDeploymentsDeploymentCollectionSpecificationRouteRequestPoliciesHeaderTransformationsSetHeadersResult',
    'GetDeploymentsDeploymentCollectionSpecificationRouteRequestPoliciesHeaderTransformationsSetHeadersItemResult',
    'GetDeploymentsDeploymentCollectionSpecificationRouteRequestPoliciesHeaderValidationsResult',
    'GetDeploymentsDeploymentCollectionSpecificationRouteRequestPoliciesHeaderValidationsHeaderResult',
    'GetDeploymentsDeploymentCollectionSpecificationRouteRequestPoliciesQueryParameterTransformationsResult',
    'GetDeploymentsDeploymentCollectionSpecificationRouteRequestPoliciesQueryParameterTransformationsFilterQueryParametersResult',
    'GetDeploymentsDeploymentCollectionSpecificationRouteRequestPoliciesQueryParameterTransformationsFilterQueryParametersItemResult',
    'GetDeploymentsDeploymentCollectionSpecificationRouteRequestPoliciesQueryParameterTransformationsRenameQueryParametersResult',
    'GetDeploymentsDeploymentCollectionSpecificationRouteRequestPoliciesQueryParameterTransformationsRenameQueryParametersItemResult',
    'GetDeploymentsDeploymentCollectionSpecificationRouteRequestPoliciesQueryParameterTransformationsSetQueryParametersResult',
    'GetDeploymentsDeploymentCollectionSpecificationRouteRequestPoliciesQueryParameterTransformationsSetQueryParametersItemResult',
    'GetDeploymentsDeploymentCollectionSpecificationRouteRequestPoliciesQueryParameterValidationsResult',
    'GetDeploymentsDeploymentCollectionSpecificationRouteRequestPoliciesQueryParameterValidationsParameterResult',
    'GetDeploymentsDeploymentCollectionSpecificationRouteRequestPoliciesResponseCacheLookupResult',
    'GetDeploymentsDeploymentCollectionSpecificationRouteResponsePoliciesResult',
    'GetDeploymentsDeploymentCollectionSpecificationRouteResponsePoliciesHeaderTransformationsResult',
    'GetDeploymentsDeploymentCollectionSpecificationRouteResponsePoliciesHeaderTransformationsFilterHeadersResult',
    'GetDeploymentsDeploymentCollectionSpecificationRouteResponsePoliciesHeaderTransformationsFilterHeadersItemResult',
    'GetDeploymentsDeploymentCollectionSpecificationRouteResponsePoliciesHeaderTransformationsRenameHeadersResult',
    'GetDeploymentsDeploymentCollectionSpecificationRouteResponsePoliciesHeaderTransformationsRenameHeadersItemResult',
    'GetDeploymentsDeploymentCollectionSpecificationRouteResponsePoliciesHeaderTransformationsSetHeadersResult',
    'GetDeploymentsDeploymentCollectionSpecificationRouteResponsePoliciesHeaderTransformationsSetHeadersItemResult',
    'GetDeploymentsDeploymentCollectionSpecificationRouteResponsePoliciesResponseCacheStoreResult',
    'GetDeploymentsFilterResult',
    'GetGatewayIpAddressResult',
    'GetGatewayResponseCacheDetailsResult',
    'GetGatewayResponseCacheDetailsServerResult',
    'GetGatewaysFilterResult',
    'GetGatewaysGatewayCollectionResult',
    'GetGatewaysGatewayCollectionIpAddressResult',
    'GetGatewaysGatewayCollectionResponseCacheDetailsResult',
    'GetGatewaysGatewayCollectionResponseCacheDetailsServerResult',
]

@pulumi.output_type
class ApiValidationResult(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 result: Optional[str] = None):
        """
        :param str name: Name of the validation.
        :param str result: Result of the validation.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if result is not None:
            pulumi.set(__self__, "result", result)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the validation.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def result(self) -> Optional[str]:
        """
        Result of the validation.
        """
        return pulumi.get(self, "result")


@pulumi.output_type
class DeploymentSpecification(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "loggingPolicies":
            suggest = "logging_policies"
        elif key == "requestPolicies":
            suggest = "request_policies"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentSpecification. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentSpecification.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentSpecification.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 routes: Sequence['outputs.DeploymentSpecificationRoute'],
                 logging_policies: Optional['outputs.DeploymentSpecificationLoggingPolicies'] = None,
                 request_policies: Optional['outputs.DeploymentSpecificationRequestPolicies'] = None):
        """
        :param Sequence['DeploymentSpecificationRouteArgs'] routes: (Updatable) A list of routes that this API exposes.
        :param 'DeploymentSpecificationLoggingPoliciesArgs' logging_policies: (Updatable) Policies controlling the pushing of logs to Oracle Cloud Infrastructure Public Logging.
        :param 'DeploymentSpecificationRequestPoliciesArgs' request_policies: (Updatable) Behavior applied to any requests received by the API on this route.
        """
        pulumi.set(__self__, "routes", routes)
        if logging_policies is not None:
            pulumi.set(__self__, "logging_policies", logging_policies)
        if request_policies is not None:
            pulumi.set(__self__, "request_policies", request_policies)

    @property
    @pulumi.getter
    def routes(self) -> Sequence['outputs.DeploymentSpecificationRoute']:
        """
        (Updatable) A list of routes that this API exposes.
        """
        return pulumi.get(self, "routes")

    @property
    @pulumi.getter(name="loggingPolicies")
    def logging_policies(self) -> Optional['outputs.DeploymentSpecificationLoggingPolicies']:
        """
        (Updatable) Policies controlling the pushing of logs to Oracle Cloud Infrastructure Public Logging.
        """
        return pulumi.get(self, "logging_policies")

    @property
    @pulumi.getter(name="requestPolicies")
    def request_policies(self) -> Optional['outputs.DeploymentSpecificationRequestPolicies']:
        """
        (Updatable) Behavior applied to any requests received by the API on this route.
        """
        return pulumi.get(self, "request_policies")


@pulumi.output_type
class DeploymentSpecificationLoggingPolicies(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accessLog":
            suggest = "access_log"
        elif key == "executionLog":
            suggest = "execution_log"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentSpecificationLoggingPolicies. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentSpecificationLoggingPolicies.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentSpecificationLoggingPolicies.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 access_log: Optional['outputs.DeploymentSpecificationLoggingPoliciesAccessLog'] = None,
                 execution_log: Optional['outputs.DeploymentSpecificationLoggingPoliciesExecutionLog'] = None):
        """
        :param 'DeploymentSpecificationLoggingPoliciesAccessLogArgs' access_log: (Updatable) Configures the logging policies for the access logs of an API Deployment.
        :param 'DeploymentSpecificationLoggingPoliciesExecutionLogArgs' execution_log: (Updatable) Configures the logging policies for the execution logs of an API Deployment.
        """
        if access_log is not None:
            pulumi.set(__self__, "access_log", access_log)
        if execution_log is not None:
            pulumi.set(__self__, "execution_log", execution_log)

    @property
    @pulumi.getter(name="accessLog")
    def access_log(self) -> Optional['outputs.DeploymentSpecificationLoggingPoliciesAccessLog']:
        """
        (Updatable) Configures the logging policies for the access logs of an API Deployment.
        """
        return pulumi.get(self, "access_log")

    @property
    @pulumi.getter(name="executionLog")
    def execution_log(self) -> Optional['outputs.DeploymentSpecificationLoggingPoliciesExecutionLog']:
        """
        (Updatable) Configures the logging policies for the execution logs of an API Deployment.
        """
        return pulumi.get(self, "execution_log")


@pulumi.output_type
class DeploymentSpecificationLoggingPoliciesAccessLog(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "isEnabled":
            suggest = "is_enabled"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentSpecificationLoggingPoliciesAccessLog. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentSpecificationLoggingPoliciesAccessLog.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentSpecificationLoggingPoliciesAccessLog.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 is_enabled: Optional[bool] = None):
        """
        :param bool is_enabled: (Updatable) Whether this policy is currently enabled.
        """
        if is_enabled is not None:
            pulumi.set(__self__, "is_enabled", is_enabled)

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> Optional[bool]:
        """
        (Updatable) Whether this policy is currently enabled.
        """
        return pulumi.get(self, "is_enabled")


@pulumi.output_type
class DeploymentSpecificationLoggingPoliciesExecutionLog(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "isEnabled":
            suggest = "is_enabled"
        elif key == "logLevel":
            suggest = "log_level"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentSpecificationLoggingPoliciesExecutionLog. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentSpecificationLoggingPoliciesExecutionLog.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentSpecificationLoggingPoliciesExecutionLog.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 is_enabled: Optional[bool] = None,
                 log_level: Optional[str] = None):
        """
        :param bool is_enabled: (Updatable) Whether this policy is currently enabled.
        :param str log_level: (Updatable) Specifies the log level used to control logging output of execution logs. Enabling logging at a given level also enables logging at all higher levels.
        """
        if is_enabled is not None:
            pulumi.set(__self__, "is_enabled", is_enabled)
        if log_level is not None:
            pulumi.set(__self__, "log_level", log_level)

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> Optional[bool]:
        """
        (Updatable) Whether this policy is currently enabled.
        """
        return pulumi.get(self, "is_enabled")

    @property
    @pulumi.getter(name="logLevel")
    def log_level(self) -> Optional[str]:
        """
        (Updatable) Specifies the log level used to control logging output of execution logs. Enabling logging at a given level also enables logging at all higher levels.
        """
        return pulumi.get(self, "log_level")


@pulumi.output_type
class DeploymentSpecificationRequestPolicies(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "rateLimiting":
            suggest = "rate_limiting"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentSpecificationRequestPolicies. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentSpecificationRequestPolicies.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentSpecificationRequestPolicies.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 authentication: Optional['outputs.DeploymentSpecificationRequestPoliciesAuthentication'] = None,
                 cors: Optional['outputs.DeploymentSpecificationRequestPoliciesCors'] = None,
                 rate_limiting: Optional['outputs.DeploymentSpecificationRequestPoliciesRateLimiting'] = None):
        """
        :param 'DeploymentSpecificationRequestPoliciesAuthenticationArgs' authentication: (Updatable) Information on how to authenticate incoming requests.
        :param 'DeploymentSpecificationRequestPoliciesCorsArgs' cors: (Updatable) Enable CORS (Cross-Origin-Resource-Sharing) request handling.
        :param 'DeploymentSpecificationRequestPoliciesRateLimitingArgs' rate_limiting: (Updatable) Limit the number of requests that should be handled for the specified window using a specfic key.
        """
        if authentication is not None:
            pulumi.set(__self__, "authentication", authentication)
        if cors is not None:
            pulumi.set(__self__, "cors", cors)
        if rate_limiting is not None:
            pulumi.set(__self__, "rate_limiting", rate_limiting)

    @property
    @pulumi.getter
    def authentication(self) -> Optional['outputs.DeploymentSpecificationRequestPoliciesAuthentication']:
        """
        (Updatable) Information on how to authenticate incoming requests.
        """
        return pulumi.get(self, "authentication")

    @property
    @pulumi.getter
    def cors(self) -> Optional['outputs.DeploymentSpecificationRequestPoliciesCors']:
        """
        (Updatable) Enable CORS (Cross-Origin-Resource-Sharing) request handling.
        """
        return pulumi.get(self, "cors")

    @property
    @pulumi.getter(name="rateLimiting")
    def rate_limiting(self) -> Optional['outputs.DeploymentSpecificationRequestPoliciesRateLimiting']:
        """
        (Updatable) Limit the number of requests that should be handled for the specified window using a specfic key.
        """
        return pulumi.get(self, "rate_limiting")


@pulumi.output_type
class DeploymentSpecificationRequestPoliciesAuthentication(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "functionId":
            suggest = "function_id"
        elif key == "isAnonymousAccessAllowed":
            suggest = "is_anonymous_access_allowed"
        elif key == "maxClockSkewInSeconds":
            suggest = "max_clock_skew_in_seconds"
        elif key == "publicKeys":
            suggest = "public_keys"
        elif key == "tokenAuthScheme":
            suggest = "token_auth_scheme"
        elif key == "tokenHeader":
            suggest = "token_header"
        elif key == "tokenQueryParam":
            suggest = "token_query_param"
        elif key == "verifyClaims":
            suggest = "verify_claims"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentSpecificationRequestPoliciesAuthentication. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentSpecificationRequestPoliciesAuthentication.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentSpecificationRequestPoliciesAuthentication.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 audiences: Optional[Sequence[str]] = None,
                 function_id: Optional[str] = None,
                 is_anonymous_access_allowed: Optional[bool] = None,
                 issuers: Optional[Sequence[str]] = None,
                 max_clock_skew_in_seconds: Optional[float] = None,
                 public_keys: Optional['outputs.DeploymentSpecificationRequestPoliciesAuthenticationPublicKeys'] = None,
                 token_auth_scheme: Optional[str] = None,
                 token_header: Optional[str] = None,
                 token_query_param: Optional[str] = None,
                 verify_claims: Optional[Sequence['outputs.DeploymentSpecificationRequestPoliciesAuthenticationVerifyClaim']] = None):
        """
        :param str type: (Updatable) Type of the Response Cache Store Policy.
        :param Sequence[str] audiences: (Updatable) The list of intended recipients for the token.
        :param str function_id: (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Oracle Functions function resource.
        :param bool is_anonymous_access_allowed: (Updatable) Whether an unauthenticated user may access the API. Must be "true" to enable ANONYMOUS route authorization.
        :param Sequence[str] issuers: (Updatable) A list of parties that could have issued the token.
        :param float max_clock_skew_in_seconds: (Updatable) The maximum expected time difference between the system clocks of the token issuer and the API Gateway.
        :param 'DeploymentSpecificationRequestPoliciesAuthenticationPublicKeysArgs' public_keys: (Updatable) A set of Public Keys that will be used to verify the JWT signature.
        :param str token_auth_scheme: (Updatable) The authentication scheme that is to be used when authenticating the token. This must to be provided if "tokenHeader" is specified.
        :param str token_header: (Updatable) The name of the header containing the authentication token.
        :param str token_query_param: (Updatable) The name of the query parameter containing the authentication token.
        :param Sequence['DeploymentSpecificationRequestPoliciesAuthenticationVerifyClaimArgs'] verify_claims: (Updatable) A list of claims which should be validated to consider the token valid.
        """
        pulumi.set(__self__, "type", type)
        if audiences is not None:
            pulumi.set(__self__, "audiences", audiences)
        if function_id is not None:
            pulumi.set(__self__, "function_id", function_id)
        if is_anonymous_access_allowed is not None:
            pulumi.set(__self__, "is_anonymous_access_allowed", is_anonymous_access_allowed)
        if issuers is not None:
            pulumi.set(__self__, "issuers", issuers)
        if max_clock_skew_in_seconds is not None:
            pulumi.set(__self__, "max_clock_skew_in_seconds", max_clock_skew_in_seconds)
        if public_keys is not None:
            pulumi.set(__self__, "public_keys", public_keys)
        if token_auth_scheme is not None:
            pulumi.set(__self__, "token_auth_scheme", token_auth_scheme)
        if token_header is not None:
            pulumi.set(__self__, "token_header", token_header)
        if token_query_param is not None:
            pulumi.set(__self__, "token_query_param", token_query_param)
        if verify_claims is not None:
            pulumi.set(__self__, "verify_claims", verify_claims)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        (Updatable) Type of the Response Cache Store Policy.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def audiences(self) -> Optional[Sequence[str]]:
        """
        (Updatable) The list of intended recipients for the token.
        """
        return pulumi.get(self, "audiences")

    @property
    @pulumi.getter(name="functionId")
    def function_id(self) -> Optional[str]:
        """
        (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Oracle Functions function resource.
        """
        return pulumi.get(self, "function_id")

    @property
    @pulumi.getter(name="isAnonymousAccessAllowed")
    def is_anonymous_access_allowed(self) -> Optional[bool]:
        """
        (Updatable) Whether an unauthenticated user may access the API. Must be "true" to enable ANONYMOUS route authorization.
        """
        return pulumi.get(self, "is_anonymous_access_allowed")

    @property
    @pulumi.getter
    def issuers(self) -> Optional[Sequence[str]]:
        """
        (Updatable) A list of parties that could have issued the token.
        """
        return pulumi.get(self, "issuers")

    @property
    @pulumi.getter(name="maxClockSkewInSeconds")
    def max_clock_skew_in_seconds(self) -> Optional[float]:
        """
        (Updatable) The maximum expected time difference between the system clocks of the token issuer and the API Gateway.
        """
        return pulumi.get(self, "max_clock_skew_in_seconds")

    @property
    @pulumi.getter(name="publicKeys")
    def public_keys(self) -> Optional['outputs.DeploymentSpecificationRequestPoliciesAuthenticationPublicKeys']:
        """
        (Updatable) A set of Public Keys that will be used to verify the JWT signature.
        """
        return pulumi.get(self, "public_keys")

    @property
    @pulumi.getter(name="tokenAuthScheme")
    def token_auth_scheme(self) -> Optional[str]:
        """
        (Updatable) The authentication scheme that is to be used when authenticating the token. This must to be provided if "tokenHeader" is specified.
        """
        return pulumi.get(self, "token_auth_scheme")

    @property
    @pulumi.getter(name="tokenHeader")
    def token_header(self) -> Optional[str]:
        """
        (Updatable) The name of the header containing the authentication token.
        """
        return pulumi.get(self, "token_header")

    @property
    @pulumi.getter(name="tokenQueryParam")
    def token_query_param(self) -> Optional[str]:
        """
        (Updatable) The name of the query parameter containing the authentication token.
        """
        return pulumi.get(self, "token_query_param")

    @property
    @pulumi.getter(name="verifyClaims")
    def verify_claims(self) -> Optional[Sequence['outputs.DeploymentSpecificationRequestPoliciesAuthenticationVerifyClaim']]:
        """
        (Updatable) A list of claims which should be validated to consider the token valid.
        """
        return pulumi.get(self, "verify_claims")


@pulumi.output_type
class DeploymentSpecificationRequestPoliciesAuthenticationPublicKeys(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "isSslVerifyDisabled":
            suggest = "is_ssl_verify_disabled"
        elif key == "maxCacheDurationInHours":
            suggest = "max_cache_duration_in_hours"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentSpecificationRequestPoliciesAuthenticationPublicKeys. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentSpecificationRequestPoliciesAuthenticationPublicKeys.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentSpecificationRequestPoliciesAuthenticationPublicKeys.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 is_ssl_verify_disabled: Optional[bool] = None,
                 keys: Optional[Sequence['outputs.DeploymentSpecificationRequestPoliciesAuthenticationPublicKeysKey']] = None,
                 max_cache_duration_in_hours: Optional[int] = None,
                 uri: Optional[str] = None):
        """
        :param str type: (Updatable) Type of the Response Cache Store Policy.
        :param bool is_ssl_verify_disabled: (Updatable) Defines whether or not to uphold SSL verification.
        :param Sequence['DeploymentSpecificationRequestPoliciesAuthenticationPublicKeysKeyArgs'] keys: (Updatable) The set of static public keys.
        :param int max_cache_duration_in_hours: (Updatable) The duration for which the JWKS should be cached before it is fetched again.
        :param str uri: (Updatable) The uri from which to retrieve the key. It must be accessible without authentication.
        """
        pulumi.set(__self__, "type", type)
        if is_ssl_verify_disabled is not None:
            pulumi.set(__self__, "is_ssl_verify_disabled", is_ssl_verify_disabled)
        if keys is not None:
            pulumi.set(__self__, "keys", keys)
        if max_cache_duration_in_hours is not None:
            pulumi.set(__self__, "max_cache_duration_in_hours", max_cache_duration_in_hours)
        if uri is not None:
            pulumi.set(__self__, "uri", uri)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        (Updatable) Type of the Response Cache Store Policy.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="isSslVerifyDisabled")
    def is_ssl_verify_disabled(self) -> Optional[bool]:
        """
        (Updatable) Defines whether or not to uphold SSL verification.
        """
        return pulumi.get(self, "is_ssl_verify_disabled")

    @property
    @pulumi.getter
    def keys(self) -> Optional[Sequence['outputs.DeploymentSpecificationRequestPoliciesAuthenticationPublicKeysKey']]:
        """
        (Updatable) The set of static public keys.
        """
        return pulumi.get(self, "keys")

    @property
    @pulumi.getter(name="maxCacheDurationInHours")
    def max_cache_duration_in_hours(self) -> Optional[int]:
        """
        (Updatable) The duration for which the JWKS should be cached before it is fetched again.
        """
        return pulumi.get(self, "max_cache_duration_in_hours")

    @property
    @pulumi.getter
    def uri(self) -> Optional[str]:
        """
        (Updatable) The uri from which to retrieve the key. It must be accessible without authentication.
        """
        return pulumi.get(self, "uri")


@pulumi.output_type
class DeploymentSpecificationRequestPoliciesAuthenticationPublicKeysKey(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "keyOps":
            suggest = "key_ops"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentSpecificationRequestPoliciesAuthenticationPublicKeysKey. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentSpecificationRequestPoliciesAuthenticationPublicKeysKey.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentSpecificationRequestPoliciesAuthenticationPublicKeysKey.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 format: str,
                 alg: Optional[str] = None,
                 e: Optional[str] = None,
                 key: Optional[str] = None,
                 key_ops: Optional[Sequence[str]] = None,
                 kid: Optional[str] = None,
                 kty: Optional[str] = None,
                 n: Optional[str] = None,
                 use: Optional[str] = None):
        """
        :param str format: (Updatable) The format of the public key.
        :param str alg: (Updatable) The algorithm intended for use with this key.
        :param str e: (Updatable) The base64 url encoded exponent of the RSA public key represented by this key.
        :param str key: (Updatable) Name of the claim.
        :param Sequence[str] key_ops: (Updatable) The operations for which this key is to be used.
        :param str kid: (Updatable) A unique key ID. This key will be used to verify the signature of a JWT with matching "kid".
        :param str kty: (Updatable) The key type.
        :param str n: (Updatable) The base64 url encoded modulus of the RSA public key represented by this key.
        :param str use: (Updatable) The intended use of the public key.
        """
        pulumi.set(__self__, "format", format)
        if alg is not None:
            pulumi.set(__self__, "alg", alg)
        if e is not None:
            pulumi.set(__self__, "e", e)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if key_ops is not None:
            pulumi.set(__self__, "key_ops", key_ops)
        if kid is not None:
            pulumi.set(__self__, "kid", kid)
        if kty is not None:
            pulumi.set(__self__, "kty", kty)
        if n is not None:
            pulumi.set(__self__, "n", n)
        if use is not None:
            pulumi.set(__self__, "use", use)

    @property
    @pulumi.getter
    def format(self) -> str:
        """
        (Updatable) The format of the public key.
        """
        return pulumi.get(self, "format")

    @property
    @pulumi.getter
    def alg(self) -> Optional[str]:
        """
        (Updatable) The algorithm intended for use with this key.
        """
        return pulumi.get(self, "alg")

    @property
    @pulumi.getter
    def e(self) -> Optional[str]:
        """
        (Updatable) The base64 url encoded exponent of the RSA public key represented by this key.
        """
        return pulumi.get(self, "e")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        """
        (Updatable) Name of the claim.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter(name="keyOps")
    def key_ops(self) -> Optional[Sequence[str]]:
        """
        (Updatable) The operations for which this key is to be used.
        """
        return pulumi.get(self, "key_ops")

    @property
    @pulumi.getter
    def kid(self) -> Optional[str]:
        """
        (Updatable) A unique key ID. This key will be used to verify the signature of a JWT with matching "kid".
        """
        return pulumi.get(self, "kid")

    @property
    @pulumi.getter
    def kty(self) -> Optional[str]:
        """
        (Updatable) The key type.
        """
        return pulumi.get(self, "kty")

    @property
    @pulumi.getter
    def n(self) -> Optional[str]:
        """
        (Updatable) The base64 url encoded modulus of the RSA public key represented by this key.
        """
        return pulumi.get(self, "n")

    @property
    @pulumi.getter
    def use(self) -> Optional[str]:
        """
        (Updatable) The intended use of the public key.
        """
        return pulumi.get(self, "use")


@pulumi.output_type
class DeploymentSpecificationRequestPoliciesAuthenticationVerifyClaim(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "isRequired":
            suggest = "is_required"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentSpecificationRequestPoliciesAuthenticationVerifyClaim. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentSpecificationRequestPoliciesAuthenticationVerifyClaim.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentSpecificationRequestPoliciesAuthenticationVerifyClaim.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 is_required: Optional[bool] = None,
                 key: Optional[str] = None,
                 values: Optional[Sequence[str]] = None):
        """
        :param bool is_required: (Updatable) Whether the claim is required to be present in the JWT or not. If set to "false", the claim values will be matched only if the claim is present in the JWT.
        :param str key: (Updatable) Name of the claim.
        :param Sequence[str] values: (Updatable) A list of new values.  Each value can be a constant or may include one or more expressions enclosed within ${} delimiters.
        """
        if is_required is not None:
            pulumi.set(__self__, "is_required", is_required)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter(name="isRequired")
    def is_required(self) -> Optional[bool]:
        """
        (Updatable) Whether the claim is required to be present in the JWT or not. If set to "false", the claim values will be matched only if the claim is present in the JWT.
        """
        return pulumi.get(self, "is_required")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        """
        (Updatable) Name of the claim.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        """
        (Updatable) A list of new values.  Each value can be a constant or may include one or more expressions enclosed within ${} delimiters.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class DeploymentSpecificationRequestPoliciesCors(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allowedOrigins":
            suggest = "allowed_origins"
        elif key == "allowedHeaders":
            suggest = "allowed_headers"
        elif key == "allowedMethods":
            suggest = "allowed_methods"
        elif key == "exposedHeaders":
            suggest = "exposed_headers"
        elif key == "isAllowCredentialsEnabled":
            suggest = "is_allow_credentials_enabled"
        elif key == "maxAgeInSeconds":
            suggest = "max_age_in_seconds"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentSpecificationRequestPoliciesCors. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentSpecificationRequestPoliciesCors.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentSpecificationRequestPoliciesCors.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 allowed_origins: Sequence[str],
                 allowed_headers: Optional[Sequence[str]] = None,
                 allowed_methods: Optional[Sequence[str]] = None,
                 exposed_headers: Optional[Sequence[str]] = None,
                 is_allow_credentials_enabled: Optional[bool] = None,
                 max_age_in_seconds: Optional[int] = None):
        """
        :param Sequence[str] allowed_origins: (Updatable) The list of allowed origins that the CORS handler will use to respond to CORS requests. The gateway will send the Access-Control-Allow-Origin header with the best origin match for the circumstances. '*' will match any origins, and 'null' will match queries from 'file:' origins. All other origins must be qualified with the scheme, full hostname, and port if necessary.
        :param Sequence[str] allowed_headers: (Updatable) The list of headers that will be allowed from the client via the Access-Control-Allow-Headers header. '*' will allow all headers.
        :param Sequence[str] allowed_methods: (Updatable) The list of allowed HTTP methods that will be returned for the preflight OPTIONS request in the Access-Control-Allow-Methods header. '*' will allow all methods.
        :param Sequence[str] exposed_headers: (Updatable) The list of headers that the client will be allowed to see from the response as indicated by the Access-Control-Expose-Headers header. '*' will expose all headers.
        :param bool is_allow_credentials_enabled: (Updatable) Whether to send the Access-Control-Allow-Credentials header to allow CORS requests with cookies.
        :param int max_age_in_seconds: (Updatable) The time in seconds for the client to cache preflight responses. This is sent as the Access-Control-Max-Age if greater than 0.
        """
        pulumi.set(__self__, "allowed_origins", allowed_origins)
        if allowed_headers is not None:
            pulumi.set(__self__, "allowed_headers", allowed_headers)
        if allowed_methods is not None:
            pulumi.set(__self__, "allowed_methods", allowed_methods)
        if exposed_headers is not None:
            pulumi.set(__self__, "exposed_headers", exposed_headers)
        if is_allow_credentials_enabled is not None:
            pulumi.set(__self__, "is_allow_credentials_enabled", is_allow_credentials_enabled)
        if max_age_in_seconds is not None:
            pulumi.set(__self__, "max_age_in_seconds", max_age_in_seconds)

    @property
    @pulumi.getter(name="allowedOrigins")
    def allowed_origins(self) -> Sequence[str]:
        """
        (Updatable) The list of allowed origins that the CORS handler will use to respond to CORS requests. The gateway will send the Access-Control-Allow-Origin header with the best origin match for the circumstances. '*' will match any origins, and 'null' will match queries from 'file:' origins. All other origins must be qualified with the scheme, full hostname, and port if necessary.
        """
        return pulumi.get(self, "allowed_origins")

    @property
    @pulumi.getter(name="allowedHeaders")
    def allowed_headers(self) -> Optional[Sequence[str]]:
        """
        (Updatable) The list of headers that will be allowed from the client via the Access-Control-Allow-Headers header. '*' will allow all headers.
        """
        return pulumi.get(self, "allowed_headers")

    @property
    @pulumi.getter(name="allowedMethods")
    def allowed_methods(self) -> Optional[Sequence[str]]:
        """
        (Updatable) The list of allowed HTTP methods that will be returned for the preflight OPTIONS request in the Access-Control-Allow-Methods header. '*' will allow all methods.
        """
        return pulumi.get(self, "allowed_methods")

    @property
    @pulumi.getter(name="exposedHeaders")
    def exposed_headers(self) -> Optional[Sequence[str]]:
        """
        (Updatable) The list of headers that the client will be allowed to see from the response as indicated by the Access-Control-Expose-Headers header. '*' will expose all headers.
        """
        return pulumi.get(self, "exposed_headers")

    @property
    @pulumi.getter(name="isAllowCredentialsEnabled")
    def is_allow_credentials_enabled(self) -> Optional[bool]:
        """
        (Updatable) Whether to send the Access-Control-Allow-Credentials header to allow CORS requests with cookies.
        """
        return pulumi.get(self, "is_allow_credentials_enabled")

    @property
    @pulumi.getter(name="maxAgeInSeconds")
    def max_age_in_seconds(self) -> Optional[int]:
        """
        (Updatable) The time in seconds for the client to cache preflight responses. This is sent as the Access-Control-Max-Age if greater than 0.
        """
        return pulumi.get(self, "max_age_in_seconds")


@pulumi.output_type
class DeploymentSpecificationRequestPoliciesRateLimiting(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "rateInRequestsPerSecond":
            suggest = "rate_in_requests_per_second"
        elif key == "rateKey":
            suggest = "rate_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentSpecificationRequestPoliciesRateLimiting. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentSpecificationRequestPoliciesRateLimiting.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentSpecificationRequestPoliciesRateLimiting.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 rate_in_requests_per_second: int,
                 rate_key: str):
        """
        :param int rate_in_requests_per_second: (Updatable) The maximum number of requests per second to allow.
        :param str rate_key: (Updatable) The key used to group requests together.
        """
        pulumi.set(__self__, "rate_in_requests_per_second", rate_in_requests_per_second)
        pulumi.set(__self__, "rate_key", rate_key)

    @property
    @pulumi.getter(name="rateInRequestsPerSecond")
    def rate_in_requests_per_second(self) -> int:
        """
        (Updatable) The maximum number of requests per second to allow.
        """
        return pulumi.get(self, "rate_in_requests_per_second")

    @property
    @pulumi.getter(name="rateKey")
    def rate_key(self) -> str:
        """
        (Updatable) The key used to group requests together.
        """
        return pulumi.get(self, "rate_key")


@pulumi.output_type
class DeploymentSpecificationRoute(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "loggingPolicies":
            suggest = "logging_policies"
        elif key == "requestPolicies":
            suggest = "request_policies"
        elif key == "responsePolicies":
            suggest = "response_policies"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentSpecificationRoute. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentSpecificationRoute.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentSpecificationRoute.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 backend: 'outputs.DeploymentSpecificationRouteBackend',
                 path: str,
                 logging_policies: Optional['outputs.DeploymentSpecificationRouteLoggingPolicies'] = None,
                 methods: Optional[Sequence[str]] = None,
                 request_policies: Optional['outputs.DeploymentSpecificationRouteRequestPolicies'] = None,
                 response_policies: Optional['outputs.DeploymentSpecificationRouteResponsePolicies'] = None):
        """
        :param 'DeploymentSpecificationRouteBackendArgs' backend: (Updatable) The backend to forward requests to.
        :param str path: (Updatable) A URL path pattern that must be matched on this route. The path pattern may contain a subset of RFC 6570 identifiers to allow wildcard and parameterized matching.
        :param 'DeploymentSpecificationRouteLoggingPoliciesArgs' logging_policies: (Updatable) Policies controlling the pushing of logs to Oracle Cloud Infrastructure Public Logging.
        :param Sequence[str] methods: (Updatable) A list of allowed methods on this route.
        :param 'DeploymentSpecificationRouteRequestPoliciesArgs' request_policies: (Updatable) Behavior applied to any requests received by the API on this route.
        :param 'DeploymentSpecificationRouteResponsePoliciesArgs' response_policies: (Updatable) Behavior applied to any responses sent by the API for requests on this route.
        """
        pulumi.set(__self__, "backend", backend)
        pulumi.set(__self__, "path", path)
        if logging_policies is not None:
            pulumi.set(__self__, "logging_policies", logging_policies)
        if methods is not None:
            pulumi.set(__self__, "methods", methods)
        if request_policies is not None:
            pulumi.set(__self__, "request_policies", request_policies)
        if response_policies is not None:
            pulumi.set(__self__, "response_policies", response_policies)

    @property
    @pulumi.getter
    def backend(self) -> 'outputs.DeploymentSpecificationRouteBackend':
        """
        (Updatable) The backend to forward requests to.
        """
        return pulumi.get(self, "backend")

    @property
    @pulumi.getter
    def path(self) -> str:
        """
        (Updatable) A URL path pattern that must be matched on this route. The path pattern may contain a subset of RFC 6570 identifiers to allow wildcard and parameterized matching.
        """
        return pulumi.get(self, "path")

    @property
    @pulumi.getter(name="loggingPolicies")
    def logging_policies(self) -> Optional['outputs.DeploymentSpecificationRouteLoggingPolicies']:
        """
        (Updatable) Policies controlling the pushing of logs to Oracle Cloud Infrastructure Public Logging.
        """
        return pulumi.get(self, "logging_policies")

    @property
    @pulumi.getter
    def methods(self) -> Optional[Sequence[str]]:
        """
        (Updatable) A list of allowed methods on this route.
        """
        return pulumi.get(self, "methods")

    @property
    @pulumi.getter(name="requestPolicies")
    def request_policies(self) -> Optional['outputs.DeploymentSpecificationRouteRequestPolicies']:
        """
        (Updatable) Behavior applied to any requests received by the API on this route.
        """
        return pulumi.get(self, "request_policies")

    @property
    @pulumi.getter(name="responsePolicies")
    def response_policies(self) -> Optional['outputs.DeploymentSpecificationRouteResponsePolicies']:
        """
        (Updatable) Behavior applied to any responses sent by the API for requests on this route.
        """
        return pulumi.get(self, "response_policies")


@pulumi.output_type
class DeploymentSpecificationRouteBackend(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "connectTimeoutInSeconds":
            suggest = "connect_timeout_in_seconds"
        elif key == "functionId":
            suggest = "function_id"
        elif key == "isSslVerifyDisabled":
            suggest = "is_ssl_verify_disabled"
        elif key == "readTimeoutInSeconds":
            suggest = "read_timeout_in_seconds"
        elif key == "sendTimeoutInSeconds":
            suggest = "send_timeout_in_seconds"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentSpecificationRouteBackend. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentSpecificationRouteBackend.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentSpecificationRouteBackend.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 body: Optional[str] = None,
                 connect_timeout_in_seconds: Optional[float] = None,
                 function_id: Optional[str] = None,
                 headers: Optional[Sequence['outputs.DeploymentSpecificationRouteBackendHeader']] = None,
                 is_ssl_verify_disabled: Optional[bool] = None,
                 read_timeout_in_seconds: Optional[float] = None,
                 send_timeout_in_seconds: Optional[float] = None,
                 status: Optional[int] = None,
                 url: Optional[str] = None):
        """
        :param str type: (Updatable) Type of the Response Cache Store Policy.
        :param str body: (Updatable) The body of the stock response from the mock backend.
        :param float connect_timeout_in_seconds: (Updatable) Defines a timeout for establishing a connection with a proxied server.
        :param str function_id: (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Oracle Functions function resource.
        :param Sequence['DeploymentSpecificationRouteBackendHeaderArgs'] headers: (Updatable)
        :param bool is_ssl_verify_disabled: (Updatable) Defines whether or not to uphold SSL verification.
        :param float read_timeout_in_seconds: (Updatable) Defines a timeout for reading a response from the proxied server.
        :param float send_timeout_in_seconds: (Updatable) Defines a timeout for transmitting a request to the proxied server.
        :param int status: (Updatable) The status code of the stock response from the mock backend.
        :param str url: (Updatable)
        """
        pulumi.set(__self__, "type", type)
        if body is not None:
            pulumi.set(__self__, "body", body)
        if connect_timeout_in_seconds is not None:
            pulumi.set(__self__, "connect_timeout_in_seconds", connect_timeout_in_seconds)
        if function_id is not None:
            pulumi.set(__self__, "function_id", function_id)
        if headers is not None:
            pulumi.set(__self__, "headers", headers)
        if is_ssl_verify_disabled is not None:
            pulumi.set(__self__, "is_ssl_verify_disabled", is_ssl_verify_disabled)
        if read_timeout_in_seconds is not None:
            pulumi.set(__self__, "read_timeout_in_seconds", read_timeout_in_seconds)
        if send_timeout_in_seconds is not None:
            pulumi.set(__self__, "send_timeout_in_seconds", send_timeout_in_seconds)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if url is not None:
            pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        (Updatable) Type of the Response Cache Store Policy.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def body(self) -> Optional[str]:
        """
        (Updatable) The body of the stock response from the mock backend.
        """
        return pulumi.get(self, "body")

    @property
    @pulumi.getter(name="connectTimeoutInSeconds")
    def connect_timeout_in_seconds(self) -> Optional[float]:
        """
        (Updatable) Defines a timeout for establishing a connection with a proxied server.
        """
        return pulumi.get(self, "connect_timeout_in_seconds")

    @property
    @pulumi.getter(name="functionId")
    def function_id(self) -> Optional[str]:
        """
        (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Oracle Functions function resource.
        """
        return pulumi.get(self, "function_id")

    @property
    @pulumi.getter
    def headers(self) -> Optional[Sequence['outputs.DeploymentSpecificationRouteBackendHeader']]:
        """
        (Updatable)
        """
        return pulumi.get(self, "headers")

    @property
    @pulumi.getter(name="isSslVerifyDisabled")
    def is_ssl_verify_disabled(self) -> Optional[bool]:
        """
        (Updatable) Defines whether or not to uphold SSL verification.
        """
        return pulumi.get(self, "is_ssl_verify_disabled")

    @property
    @pulumi.getter(name="readTimeoutInSeconds")
    def read_timeout_in_seconds(self) -> Optional[float]:
        """
        (Updatable) Defines a timeout for reading a response from the proxied server.
        """
        return pulumi.get(self, "read_timeout_in_seconds")

    @property
    @pulumi.getter(name="sendTimeoutInSeconds")
    def send_timeout_in_seconds(self) -> Optional[float]:
        """
        (Updatable) Defines a timeout for transmitting a request to the proxied server.
        """
        return pulumi.get(self, "send_timeout_in_seconds")

    @property
    @pulumi.getter
    def status(self) -> Optional[int]:
        """
        (Updatable) The status code of the stock response from the mock backend.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def url(self) -> Optional[str]:
        """
        (Updatable)
        """
        return pulumi.get(self, "url")


@pulumi.output_type
class DeploymentSpecificationRouteBackendHeader(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str name: (Updatable) The case-insensitive name of the header.  This name must be unique across transformation policies.
        :param str value: (Updatable) Value of the header.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        (Updatable) The case-insensitive name of the header.  This name must be unique across transformation policies.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        (Updatable) Value of the header.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class DeploymentSpecificationRouteLoggingPolicies(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accessLog":
            suggest = "access_log"
        elif key == "executionLog":
            suggest = "execution_log"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentSpecificationRouteLoggingPolicies. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentSpecificationRouteLoggingPolicies.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentSpecificationRouteLoggingPolicies.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 access_log: Optional['outputs.DeploymentSpecificationRouteLoggingPoliciesAccessLog'] = None,
                 execution_log: Optional['outputs.DeploymentSpecificationRouteLoggingPoliciesExecutionLog'] = None):
        """
        :param 'DeploymentSpecificationRouteLoggingPoliciesAccessLogArgs' access_log: (Updatable) Configures the logging policies for the access logs of an API Deployment.
        :param 'DeploymentSpecificationRouteLoggingPoliciesExecutionLogArgs' execution_log: (Updatable) Configures the logging policies for the execution logs of an API Deployment.
        """
        if access_log is not None:
            pulumi.set(__self__, "access_log", access_log)
        if execution_log is not None:
            pulumi.set(__self__, "execution_log", execution_log)

    @property
    @pulumi.getter(name="accessLog")
    def access_log(self) -> Optional['outputs.DeploymentSpecificationRouteLoggingPoliciesAccessLog']:
        """
        (Updatable) Configures the logging policies for the access logs of an API Deployment.
        """
        return pulumi.get(self, "access_log")

    @property
    @pulumi.getter(name="executionLog")
    def execution_log(self) -> Optional['outputs.DeploymentSpecificationRouteLoggingPoliciesExecutionLog']:
        """
        (Updatable) Configures the logging policies for the execution logs of an API Deployment.
        """
        return pulumi.get(self, "execution_log")


@pulumi.output_type
class DeploymentSpecificationRouteLoggingPoliciesAccessLog(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "isEnabled":
            suggest = "is_enabled"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentSpecificationRouteLoggingPoliciesAccessLog. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentSpecificationRouteLoggingPoliciesAccessLog.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentSpecificationRouteLoggingPoliciesAccessLog.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 is_enabled: Optional[bool] = None):
        """
        :param bool is_enabled: (Updatable) Whether this policy is currently enabled.
        """
        if is_enabled is not None:
            pulumi.set(__self__, "is_enabled", is_enabled)

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> Optional[bool]:
        """
        (Updatable) Whether this policy is currently enabled.
        """
        return pulumi.get(self, "is_enabled")


@pulumi.output_type
class DeploymentSpecificationRouteLoggingPoliciesExecutionLog(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "isEnabled":
            suggest = "is_enabled"
        elif key == "logLevel":
            suggest = "log_level"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentSpecificationRouteLoggingPoliciesExecutionLog. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentSpecificationRouteLoggingPoliciesExecutionLog.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentSpecificationRouteLoggingPoliciesExecutionLog.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 is_enabled: Optional[bool] = None,
                 log_level: Optional[str] = None):
        """
        :param bool is_enabled: (Updatable) Whether this policy is currently enabled.
        :param str log_level: (Updatable) Specifies the log level used to control logging output of execution logs. Enabling logging at a given level also enables logging at all higher levels.
        """
        if is_enabled is not None:
            pulumi.set(__self__, "is_enabled", is_enabled)
        if log_level is not None:
            pulumi.set(__self__, "log_level", log_level)

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> Optional[bool]:
        """
        (Updatable) Whether this policy is currently enabled.
        """
        return pulumi.get(self, "is_enabled")

    @property
    @pulumi.getter(name="logLevel")
    def log_level(self) -> Optional[str]:
        """
        (Updatable) Specifies the log level used to control logging output of execution logs. Enabling logging at a given level also enables logging at all higher levels.
        """
        return pulumi.get(self, "log_level")


@pulumi.output_type
class DeploymentSpecificationRouteRequestPolicies(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "bodyValidation":
            suggest = "body_validation"
        elif key == "headerTransformations":
            suggest = "header_transformations"
        elif key == "headerValidations":
            suggest = "header_validations"
        elif key == "queryParameterTransformations":
            suggest = "query_parameter_transformations"
        elif key == "queryParameterValidations":
            suggest = "query_parameter_validations"
        elif key == "responseCacheLookup":
            suggest = "response_cache_lookup"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentSpecificationRouteRequestPolicies. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentSpecificationRouteRequestPolicies.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentSpecificationRouteRequestPolicies.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 authorization: Optional['outputs.DeploymentSpecificationRouteRequestPoliciesAuthorization'] = None,
                 body_validation: Optional['outputs.DeploymentSpecificationRouteRequestPoliciesBodyValidation'] = None,
                 cors: Optional['outputs.DeploymentSpecificationRouteRequestPoliciesCors'] = None,
                 header_transformations: Optional['outputs.DeploymentSpecificationRouteRequestPoliciesHeaderTransformations'] = None,
                 header_validations: Optional['outputs.DeploymentSpecificationRouteRequestPoliciesHeaderValidations'] = None,
                 query_parameter_transformations: Optional['outputs.DeploymentSpecificationRouteRequestPoliciesQueryParameterTransformations'] = None,
                 query_parameter_validations: Optional['outputs.DeploymentSpecificationRouteRequestPoliciesQueryParameterValidations'] = None,
                 response_cache_lookup: Optional['outputs.DeploymentSpecificationRouteRequestPoliciesResponseCacheLookup'] = None):
        """
        :param 'DeploymentSpecificationRouteRequestPoliciesAuthorizationArgs' authorization: (Updatable) If authentication has been performed, validate whether the request scope (if any) applies to this route. If no RouteAuthorizationPolicy is defined for a route, a policy with a type of AUTHENTICATION_ONLY is applied.
        :param 'DeploymentSpecificationRouteRequestPoliciesBodyValidationArgs' body_validation: (Updatable) Validate the payload body of the incoming API requests on a specific route.
        :param 'DeploymentSpecificationRouteRequestPoliciesCorsArgs' cors: (Updatable) Enable CORS (Cross-Origin-Resource-Sharing) request handling.
        :param 'DeploymentSpecificationRouteRequestPoliciesHeaderTransformationsArgs' header_transformations: (Updatable) A set of transformations to apply to HTTP headers that pass through the gateway.
        :param 'DeploymentSpecificationRouteRequestPoliciesHeaderValidationsArgs' header_validations: (Updatable) Validate the HTTP headers on the incoming API requests on a specific route.
        :param 'DeploymentSpecificationRouteRequestPoliciesQueryParameterTransformationsArgs' query_parameter_transformations: (Updatable) A set of transformations to apply to query parameters that pass through the gateway.
        :param 'DeploymentSpecificationRouteRequestPoliciesQueryParameterValidationsArgs' query_parameter_validations: (Updatable) Validate the URL query parameters on the incoming API requests on a specific route.
        :param 'DeploymentSpecificationRouteRequestPoliciesResponseCacheLookupArgs' response_cache_lookup: (Updatable) Base policy for Response Cache lookup.
        """
        if authorization is not None:
            pulumi.set(__self__, "authorization", authorization)
        if body_validation is not None:
            pulumi.set(__self__, "body_validation", body_validation)
        if cors is not None:
            pulumi.set(__self__, "cors", cors)
        if header_transformations is not None:
            pulumi.set(__self__, "header_transformations", header_transformations)
        if header_validations is not None:
            pulumi.set(__self__, "header_validations", header_validations)
        if query_parameter_transformations is not None:
            pulumi.set(__self__, "query_parameter_transformations", query_parameter_transformations)
        if query_parameter_validations is not None:
            pulumi.set(__self__, "query_parameter_validations", query_parameter_validations)
        if response_cache_lookup is not None:
            pulumi.set(__self__, "response_cache_lookup", response_cache_lookup)

    @property
    @pulumi.getter
    def authorization(self) -> Optional['outputs.DeploymentSpecificationRouteRequestPoliciesAuthorization']:
        """
        (Updatable) If authentication has been performed, validate whether the request scope (if any) applies to this route. If no RouteAuthorizationPolicy is defined for a route, a policy with a type of AUTHENTICATION_ONLY is applied.
        """
        return pulumi.get(self, "authorization")

    @property
    @pulumi.getter(name="bodyValidation")
    def body_validation(self) -> Optional['outputs.DeploymentSpecificationRouteRequestPoliciesBodyValidation']:
        """
        (Updatable) Validate the payload body of the incoming API requests on a specific route.
        """
        return pulumi.get(self, "body_validation")

    @property
    @pulumi.getter
    def cors(self) -> Optional['outputs.DeploymentSpecificationRouteRequestPoliciesCors']:
        """
        (Updatable) Enable CORS (Cross-Origin-Resource-Sharing) request handling.
        """
        return pulumi.get(self, "cors")

    @property
    @pulumi.getter(name="headerTransformations")
    def header_transformations(self) -> Optional['outputs.DeploymentSpecificationRouteRequestPoliciesHeaderTransformations']:
        """
        (Updatable) A set of transformations to apply to HTTP headers that pass through the gateway.
        """
        return pulumi.get(self, "header_transformations")

    @property
    @pulumi.getter(name="headerValidations")
    def header_validations(self) -> Optional['outputs.DeploymentSpecificationRouteRequestPoliciesHeaderValidations']:
        """
        (Updatable) Validate the HTTP headers on the incoming API requests on a specific route.
        """
        return pulumi.get(self, "header_validations")

    @property
    @pulumi.getter(name="queryParameterTransformations")
    def query_parameter_transformations(self) -> Optional['outputs.DeploymentSpecificationRouteRequestPoliciesQueryParameterTransformations']:
        """
        (Updatable) A set of transformations to apply to query parameters that pass through the gateway.
        """
        return pulumi.get(self, "query_parameter_transformations")

    @property
    @pulumi.getter(name="queryParameterValidations")
    def query_parameter_validations(self) -> Optional['outputs.DeploymentSpecificationRouteRequestPoliciesQueryParameterValidations']:
        """
        (Updatable) Validate the URL query parameters on the incoming API requests on a specific route.
        """
        return pulumi.get(self, "query_parameter_validations")

    @property
    @pulumi.getter(name="responseCacheLookup")
    def response_cache_lookup(self) -> Optional['outputs.DeploymentSpecificationRouteRequestPoliciesResponseCacheLookup']:
        """
        (Updatable) Base policy for Response Cache lookup.
        """
        return pulumi.get(self, "response_cache_lookup")


@pulumi.output_type
class DeploymentSpecificationRouteRequestPoliciesAuthorization(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allowedScopes":
            suggest = "allowed_scopes"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentSpecificationRouteRequestPoliciesAuthorization. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentSpecificationRouteRequestPoliciesAuthorization.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentSpecificationRouteRequestPoliciesAuthorization.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 allowed_scopes: Optional[Sequence[str]] = None,
                 type: Optional[str] = None):
        """
        :param Sequence[str] allowed_scopes: (Updatable) A user whose scope includes any of these access ranges is allowed on this route. Access ranges are case-sensitive.
        :param str type: (Updatable) Type of the Response Cache Store Policy.
        """
        if allowed_scopes is not None:
            pulumi.set(__self__, "allowed_scopes", allowed_scopes)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="allowedScopes")
    def allowed_scopes(self) -> Optional[Sequence[str]]:
        """
        (Updatable) A user whose scope includes any of these access ranges is allowed on this route. Access ranges are case-sensitive.
        """
        return pulumi.get(self, "allowed_scopes")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        (Updatable) Type of the Response Cache Store Policy.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class DeploymentSpecificationRouteRequestPoliciesBodyValidation(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "validationMode":
            suggest = "validation_mode"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentSpecificationRouteRequestPoliciesBodyValidation. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentSpecificationRouteRequestPoliciesBodyValidation.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentSpecificationRouteRequestPoliciesBodyValidation.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 contents: Optional[Sequence['outputs.DeploymentSpecificationRouteRequestPoliciesBodyValidationContent']] = None,
                 required: Optional[bool] = None,
                 validation_mode: Optional[str] = None):
        """
        :param Sequence['DeploymentSpecificationRouteRequestPoliciesBodyValidationContentArgs'] contents: (Updatable) The content of the request body.
        :param bool required: (Updatable) Determines if the parameter is required in the request.
        :param str validation_mode: (Updatable) Validation behavior mode.
        """
        if contents is not None:
            pulumi.set(__self__, "contents", contents)
        if required is not None:
            pulumi.set(__self__, "required", required)
        if validation_mode is not None:
            pulumi.set(__self__, "validation_mode", validation_mode)

    @property
    @pulumi.getter
    def contents(self) -> Optional[Sequence['outputs.DeploymentSpecificationRouteRequestPoliciesBodyValidationContent']]:
        """
        (Updatable) The content of the request body.
        """
        return pulumi.get(self, "contents")

    @property
    @pulumi.getter
    def required(self) -> Optional[bool]:
        """
        (Updatable) Determines if the parameter is required in the request.
        """
        return pulumi.get(self, "required")

    @property
    @pulumi.getter(name="validationMode")
    def validation_mode(self) -> Optional[str]:
        """
        (Updatable) Validation behavior mode.
        """
        return pulumi.get(self, "validation_mode")


@pulumi.output_type
class DeploymentSpecificationRouteRequestPoliciesBodyValidationContent(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "mediaType":
            suggest = "media_type"
        elif key == "validationType":
            suggest = "validation_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentSpecificationRouteRequestPoliciesBodyValidationContent. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentSpecificationRouteRequestPoliciesBodyValidationContent.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentSpecificationRouteRequestPoliciesBodyValidationContent.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 media_type: str,
                 validation_type: str):
        """
        :param str media_type: (Updatable) The media_type is a [media type range](https://tools.ietf.org/html/rfc7231#appendix-D) subset restricted to the following schema
        :param str validation_type: (Updatable) Validation type defines the content validation method.
        """
        pulumi.set(__self__, "media_type", media_type)
        pulumi.set(__self__, "validation_type", validation_type)

    @property
    @pulumi.getter(name="mediaType")
    def media_type(self) -> str:
        """
        (Updatable) The media_type is a [media type range](https://tools.ietf.org/html/rfc7231#appendix-D) subset restricted to the following schema
        """
        return pulumi.get(self, "media_type")

    @property
    @pulumi.getter(name="validationType")
    def validation_type(self) -> str:
        """
        (Updatable) Validation type defines the content validation method.
        """
        return pulumi.get(self, "validation_type")


@pulumi.output_type
class DeploymentSpecificationRouteRequestPoliciesCors(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allowedOrigins":
            suggest = "allowed_origins"
        elif key == "allowedHeaders":
            suggest = "allowed_headers"
        elif key == "allowedMethods":
            suggest = "allowed_methods"
        elif key == "exposedHeaders":
            suggest = "exposed_headers"
        elif key == "isAllowCredentialsEnabled":
            suggest = "is_allow_credentials_enabled"
        elif key == "maxAgeInSeconds":
            suggest = "max_age_in_seconds"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentSpecificationRouteRequestPoliciesCors. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentSpecificationRouteRequestPoliciesCors.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentSpecificationRouteRequestPoliciesCors.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 allowed_origins: Sequence[str],
                 allowed_headers: Optional[Sequence[str]] = None,
                 allowed_methods: Optional[Sequence[str]] = None,
                 exposed_headers: Optional[Sequence[str]] = None,
                 is_allow_credentials_enabled: Optional[bool] = None,
                 max_age_in_seconds: Optional[int] = None):
        """
        :param Sequence[str] allowed_origins: (Updatable) The list of allowed origins that the CORS handler will use to respond to CORS requests. The gateway will send the Access-Control-Allow-Origin header with the best origin match for the circumstances. '*' will match any origins, and 'null' will match queries from 'file:' origins. All other origins must be qualified with the scheme, full hostname, and port if necessary.
        :param Sequence[str] allowed_headers: (Updatable) The list of headers that will be allowed from the client via the Access-Control-Allow-Headers header. '*' will allow all headers.
        :param Sequence[str] allowed_methods: (Updatable) The list of allowed HTTP methods that will be returned for the preflight OPTIONS request in the Access-Control-Allow-Methods header. '*' will allow all methods.
        :param Sequence[str] exposed_headers: (Updatable) The list of headers that the client will be allowed to see from the response as indicated by the Access-Control-Expose-Headers header. '*' will expose all headers.
        :param bool is_allow_credentials_enabled: (Updatable) Whether to send the Access-Control-Allow-Credentials header to allow CORS requests with cookies.
        :param int max_age_in_seconds: (Updatable) The time in seconds for the client to cache preflight responses. This is sent as the Access-Control-Max-Age if greater than 0.
        """
        pulumi.set(__self__, "allowed_origins", allowed_origins)
        if allowed_headers is not None:
            pulumi.set(__self__, "allowed_headers", allowed_headers)
        if allowed_methods is not None:
            pulumi.set(__self__, "allowed_methods", allowed_methods)
        if exposed_headers is not None:
            pulumi.set(__self__, "exposed_headers", exposed_headers)
        if is_allow_credentials_enabled is not None:
            pulumi.set(__self__, "is_allow_credentials_enabled", is_allow_credentials_enabled)
        if max_age_in_seconds is not None:
            pulumi.set(__self__, "max_age_in_seconds", max_age_in_seconds)

    @property
    @pulumi.getter(name="allowedOrigins")
    def allowed_origins(self) -> Sequence[str]:
        """
        (Updatable) The list of allowed origins that the CORS handler will use to respond to CORS requests. The gateway will send the Access-Control-Allow-Origin header with the best origin match for the circumstances. '*' will match any origins, and 'null' will match queries from 'file:' origins. All other origins must be qualified with the scheme, full hostname, and port if necessary.
        """
        return pulumi.get(self, "allowed_origins")

    @property
    @pulumi.getter(name="allowedHeaders")
    def allowed_headers(self) -> Optional[Sequence[str]]:
        """
        (Updatable) The list of headers that will be allowed from the client via the Access-Control-Allow-Headers header. '*' will allow all headers.
        """
        return pulumi.get(self, "allowed_headers")

    @property
    @pulumi.getter(name="allowedMethods")
    def allowed_methods(self) -> Optional[Sequence[str]]:
        """
        (Updatable) The list of allowed HTTP methods that will be returned for the preflight OPTIONS request in the Access-Control-Allow-Methods header. '*' will allow all methods.
        """
        return pulumi.get(self, "allowed_methods")

    @property
    @pulumi.getter(name="exposedHeaders")
    def exposed_headers(self) -> Optional[Sequence[str]]:
        """
        (Updatable) The list of headers that the client will be allowed to see from the response as indicated by the Access-Control-Expose-Headers header. '*' will expose all headers.
        """
        return pulumi.get(self, "exposed_headers")

    @property
    @pulumi.getter(name="isAllowCredentialsEnabled")
    def is_allow_credentials_enabled(self) -> Optional[bool]:
        """
        (Updatable) Whether to send the Access-Control-Allow-Credentials header to allow CORS requests with cookies.
        """
        return pulumi.get(self, "is_allow_credentials_enabled")

    @property
    @pulumi.getter(name="maxAgeInSeconds")
    def max_age_in_seconds(self) -> Optional[int]:
        """
        (Updatable) The time in seconds for the client to cache preflight responses. This is sent as the Access-Control-Max-Age if greater than 0.
        """
        return pulumi.get(self, "max_age_in_seconds")


@pulumi.output_type
class DeploymentSpecificationRouteRequestPoliciesHeaderTransformations(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "filterHeaders":
            suggest = "filter_headers"
        elif key == "renameHeaders":
            suggest = "rename_headers"
        elif key == "setHeaders":
            suggest = "set_headers"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentSpecificationRouteRequestPoliciesHeaderTransformations. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentSpecificationRouteRequestPoliciesHeaderTransformations.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentSpecificationRouteRequestPoliciesHeaderTransformations.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 filter_headers: Optional['outputs.DeploymentSpecificationRouteRequestPoliciesHeaderTransformationsFilterHeaders'] = None,
                 rename_headers: Optional['outputs.DeploymentSpecificationRouteRequestPoliciesHeaderTransformationsRenameHeaders'] = None,
                 set_headers: Optional['outputs.DeploymentSpecificationRouteRequestPoliciesHeaderTransformationsSetHeaders'] = None):
        """
        :param 'DeploymentSpecificationRouteRequestPoliciesHeaderTransformationsFilterHeadersArgs' filter_headers: (Updatable) Filter HTTP headers as they pass through the gateway.  The gateway applies filters after other transformations, so any headers set or renamed must also be listed here when using an ALLOW type policy.
        :param 'DeploymentSpecificationRouteRequestPoliciesHeaderTransformationsRenameHeadersArgs' rename_headers: (Updatable) Rename HTTP headers as they pass through the gateway.
        :param 'DeploymentSpecificationRouteRequestPoliciesHeaderTransformationsSetHeadersArgs' set_headers: (Updatable) Set HTTP headers as they pass through the gateway.
        """
        if filter_headers is not None:
            pulumi.set(__self__, "filter_headers", filter_headers)
        if rename_headers is not None:
            pulumi.set(__self__, "rename_headers", rename_headers)
        if set_headers is not None:
            pulumi.set(__self__, "set_headers", set_headers)

    @property
    @pulumi.getter(name="filterHeaders")
    def filter_headers(self) -> Optional['outputs.DeploymentSpecificationRouteRequestPoliciesHeaderTransformationsFilterHeaders']:
        """
        (Updatable) Filter HTTP headers as they pass through the gateway.  The gateway applies filters after other transformations, so any headers set or renamed must also be listed here when using an ALLOW type policy.
        """
        return pulumi.get(self, "filter_headers")

    @property
    @pulumi.getter(name="renameHeaders")
    def rename_headers(self) -> Optional['outputs.DeploymentSpecificationRouteRequestPoliciesHeaderTransformationsRenameHeaders']:
        """
        (Updatable) Rename HTTP headers as they pass through the gateway.
        """
        return pulumi.get(self, "rename_headers")

    @property
    @pulumi.getter(name="setHeaders")
    def set_headers(self) -> Optional['outputs.DeploymentSpecificationRouteRequestPoliciesHeaderTransformationsSetHeaders']:
        """
        (Updatable) Set HTTP headers as they pass through the gateway.
        """
        return pulumi.get(self, "set_headers")


@pulumi.output_type
class DeploymentSpecificationRouteRequestPoliciesHeaderTransformationsFilterHeaders(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.DeploymentSpecificationRouteRequestPoliciesHeaderTransformationsFilterHeadersItem'],
                 type: str):
        """
        :param Sequence['DeploymentSpecificationRouteRequestPoliciesHeaderTransformationsFilterHeadersItemArgs'] items: (Updatable) The list of headers.
        :param str type: (Updatable) Type of the Response Cache Store Policy.
        """
        pulumi.set(__self__, "items", items)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.DeploymentSpecificationRouteRequestPoliciesHeaderTransformationsFilterHeadersItem']:
        """
        (Updatable) The list of headers.
        """
        return pulumi.get(self, "items")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        (Updatable) Type of the Response Cache Store Policy.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class DeploymentSpecificationRouteRequestPoliciesHeaderTransformationsFilterHeadersItem(dict):
    def __init__(__self__, *,
                 name: str):
        """
        :param str name: (Updatable) The case-insensitive name of the header.  This name must be unique across transformation policies.
        """
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        (Updatable) The case-insensitive name of the header.  This name must be unique across transformation policies.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class DeploymentSpecificationRouteRequestPoliciesHeaderTransformationsRenameHeaders(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.DeploymentSpecificationRouteRequestPoliciesHeaderTransformationsRenameHeadersItem']):
        """
        :param Sequence['DeploymentSpecificationRouteRequestPoliciesHeaderTransformationsRenameHeadersItemArgs'] items: (Updatable) The list of headers.
        """
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.DeploymentSpecificationRouteRequestPoliciesHeaderTransformationsRenameHeadersItem']:
        """
        (Updatable) The list of headers.
        """
        return pulumi.get(self, "items")


@pulumi.output_type
class DeploymentSpecificationRouteRequestPoliciesHeaderTransformationsRenameHeadersItem(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "from":
            suggest = "from_"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentSpecificationRouteRequestPoliciesHeaderTransformationsRenameHeadersItem. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentSpecificationRouteRequestPoliciesHeaderTransformationsRenameHeadersItem.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentSpecificationRouteRequestPoliciesHeaderTransformationsRenameHeadersItem.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 from_: str,
                 to: str):
        """
        :param str from_: (Updatable) The original case-insensitive name of the header.  This name must be unique across transformation policies.
        :param str to: (Updatable) The new name of the header.  This name must be unique across transformation policies.
        """
        pulumi.set(__self__, "from_", from_)
        pulumi.set(__self__, "to", to)

    @property
    @pulumi.getter(name="from")
    def from_(self) -> str:
        """
        (Updatable) The original case-insensitive name of the header.  This name must be unique across transformation policies.
        """
        return pulumi.get(self, "from_")

    @property
    @pulumi.getter
    def to(self) -> str:
        """
        (Updatable) The new name of the header.  This name must be unique across transformation policies.
        """
        return pulumi.get(self, "to")


@pulumi.output_type
class DeploymentSpecificationRouteRequestPoliciesHeaderTransformationsSetHeaders(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.DeploymentSpecificationRouteRequestPoliciesHeaderTransformationsSetHeadersItem']):
        """
        :param Sequence['DeploymentSpecificationRouteRequestPoliciesHeaderTransformationsSetHeadersItemArgs'] items: (Updatable) The list of headers.
        """
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.DeploymentSpecificationRouteRequestPoliciesHeaderTransformationsSetHeadersItem']:
        """
        (Updatable) The list of headers.
        """
        return pulumi.get(self, "items")


@pulumi.output_type
class DeploymentSpecificationRouteRequestPoliciesHeaderTransformationsSetHeadersItem(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ifExists":
            suggest = "if_exists"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentSpecificationRouteRequestPoliciesHeaderTransformationsSetHeadersItem. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentSpecificationRouteRequestPoliciesHeaderTransformationsSetHeadersItem.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentSpecificationRouteRequestPoliciesHeaderTransformationsSetHeadersItem.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 if_exists: Optional[str] = None):
        """
        :param str name: (Updatable) The case-insensitive name of the header.  This name must be unique across transformation policies.
        :param Sequence[str] values: (Updatable) A list of new values.  Each value can be a constant or may include one or more expressions enclosed within ${} delimiters.
        :param str if_exists: (Updatable) If a header with the same name already exists in the request, OVERWRITE will overwrite the value, APPEND will append to the existing value, or SKIP will keep the existing value.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if if_exists is not None:
            pulumi.set(__self__, "if_exists", if_exists)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        (Updatable) The case-insensitive name of the header.  This name must be unique across transformation policies.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        """
        (Updatable) A list of new values.  Each value can be a constant or may include one or more expressions enclosed within ${} delimiters.
        """
        return pulumi.get(self, "values")

    @property
    @pulumi.getter(name="ifExists")
    def if_exists(self) -> Optional[str]:
        """
        (Updatable) If a header with the same name already exists in the request, OVERWRITE will overwrite the value, APPEND will append to the existing value, or SKIP will keep the existing value.
        """
        return pulumi.get(self, "if_exists")


@pulumi.output_type
class DeploymentSpecificationRouteRequestPoliciesHeaderValidations(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "validationMode":
            suggest = "validation_mode"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentSpecificationRouteRequestPoliciesHeaderValidations. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentSpecificationRouteRequestPoliciesHeaderValidations.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentSpecificationRouteRequestPoliciesHeaderValidations.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 headers: Optional[Sequence['outputs.DeploymentSpecificationRouteRequestPoliciesHeaderValidationsHeader']] = None,
                 validation_mode: Optional[str] = None):
        """
        :param Sequence['DeploymentSpecificationRouteRequestPoliciesHeaderValidationsHeaderArgs'] headers: (Updatable)
        :param str validation_mode: (Updatable) Validation behavior mode.
        """
        if headers is not None:
            pulumi.set(__self__, "headers", headers)
        if validation_mode is not None:
            pulumi.set(__self__, "validation_mode", validation_mode)

    @property
    @pulumi.getter
    def headers(self) -> Optional[Sequence['outputs.DeploymentSpecificationRouteRequestPoliciesHeaderValidationsHeader']]:
        """
        (Updatable)
        """
        return pulumi.get(self, "headers")

    @property
    @pulumi.getter(name="validationMode")
    def validation_mode(self) -> Optional[str]:
        """
        (Updatable) Validation behavior mode.
        """
        return pulumi.get(self, "validation_mode")


@pulumi.output_type
class DeploymentSpecificationRouteRequestPoliciesHeaderValidationsHeader(dict):
    def __init__(__self__, *,
                 name: str,
                 required: Optional[bool] = None):
        """
        :param str name: (Updatable) The case-insensitive name of the header.  This name must be unique across transformation policies.
        :param bool required: (Updatable) Determines if the parameter is required in the request.
        """
        pulumi.set(__self__, "name", name)
        if required is not None:
            pulumi.set(__self__, "required", required)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        (Updatable) The case-insensitive name of the header.  This name must be unique across transformation policies.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def required(self) -> Optional[bool]:
        """
        (Updatable) Determines if the parameter is required in the request.
        """
        return pulumi.get(self, "required")


@pulumi.output_type
class DeploymentSpecificationRouteRequestPoliciesQueryParameterTransformations(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "filterQueryParameters":
            suggest = "filter_query_parameters"
        elif key == "renameQueryParameters":
            suggest = "rename_query_parameters"
        elif key == "setQueryParameters":
            suggest = "set_query_parameters"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentSpecificationRouteRequestPoliciesQueryParameterTransformations. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentSpecificationRouteRequestPoliciesQueryParameterTransformations.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentSpecificationRouteRequestPoliciesQueryParameterTransformations.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 filter_query_parameters: Optional['outputs.DeploymentSpecificationRouteRequestPoliciesQueryParameterTransformationsFilterQueryParameters'] = None,
                 rename_query_parameters: Optional['outputs.DeploymentSpecificationRouteRequestPoliciesQueryParameterTransformationsRenameQueryParameters'] = None,
                 set_query_parameters: Optional['outputs.DeploymentSpecificationRouteRequestPoliciesQueryParameterTransformationsSetQueryParameters'] = None):
        """
        :param 'DeploymentSpecificationRouteRequestPoliciesQueryParameterTransformationsFilterQueryParametersArgs' filter_query_parameters: (Updatable) Filter parameters from the query string as they pass through the gateway.  The gateway applies filters after other transformations, so any parameters set or renamed must also be listed here when using an ALLOW type policy.
        :param 'DeploymentSpecificationRouteRequestPoliciesQueryParameterTransformationsRenameQueryParametersArgs' rename_query_parameters: (Updatable) Rename parameters on the query string as they pass through the gateway.
        :param 'DeploymentSpecificationRouteRequestPoliciesQueryParameterTransformationsSetQueryParametersArgs' set_query_parameters: (Updatable) Set parameters on the query string as they pass through the gateway.
        """
        if filter_query_parameters is not None:
            pulumi.set(__self__, "filter_query_parameters", filter_query_parameters)
        if rename_query_parameters is not None:
            pulumi.set(__self__, "rename_query_parameters", rename_query_parameters)
        if set_query_parameters is not None:
            pulumi.set(__self__, "set_query_parameters", set_query_parameters)

    @property
    @pulumi.getter(name="filterQueryParameters")
    def filter_query_parameters(self) -> Optional['outputs.DeploymentSpecificationRouteRequestPoliciesQueryParameterTransformationsFilterQueryParameters']:
        """
        (Updatable) Filter parameters from the query string as they pass through the gateway.  The gateway applies filters after other transformations, so any parameters set or renamed must also be listed here when using an ALLOW type policy.
        """
        return pulumi.get(self, "filter_query_parameters")

    @property
    @pulumi.getter(name="renameQueryParameters")
    def rename_query_parameters(self) -> Optional['outputs.DeploymentSpecificationRouteRequestPoliciesQueryParameterTransformationsRenameQueryParameters']:
        """
        (Updatable) Rename parameters on the query string as they pass through the gateway.
        """
        return pulumi.get(self, "rename_query_parameters")

    @property
    @pulumi.getter(name="setQueryParameters")
    def set_query_parameters(self) -> Optional['outputs.DeploymentSpecificationRouteRequestPoliciesQueryParameterTransformationsSetQueryParameters']:
        """
        (Updatable) Set parameters on the query string as they pass through the gateway.
        """
        return pulumi.get(self, "set_query_parameters")


@pulumi.output_type
class DeploymentSpecificationRouteRequestPoliciesQueryParameterTransformationsFilterQueryParameters(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.DeploymentSpecificationRouteRequestPoliciesQueryParameterTransformationsFilterQueryParametersItem'],
                 type: str):
        """
        :param Sequence['DeploymentSpecificationRouteRequestPoliciesQueryParameterTransformationsFilterQueryParametersItemArgs'] items: (Updatable) The list of headers.
        :param str type: (Updatable) Type of the Response Cache Store Policy.
        """
        pulumi.set(__self__, "items", items)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.DeploymentSpecificationRouteRequestPoliciesQueryParameterTransformationsFilterQueryParametersItem']:
        """
        (Updatable) The list of headers.
        """
        return pulumi.get(self, "items")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        (Updatable) Type of the Response Cache Store Policy.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class DeploymentSpecificationRouteRequestPoliciesQueryParameterTransformationsFilterQueryParametersItem(dict):
    def __init__(__self__, *,
                 name: str):
        """
        :param str name: (Updatable) The case-insensitive name of the header.  This name must be unique across transformation policies.
        """
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        (Updatable) The case-insensitive name of the header.  This name must be unique across transformation policies.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class DeploymentSpecificationRouteRequestPoliciesQueryParameterTransformationsRenameQueryParameters(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.DeploymentSpecificationRouteRequestPoliciesQueryParameterTransformationsRenameQueryParametersItem']):
        """
        :param Sequence['DeploymentSpecificationRouteRequestPoliciesQueryParameterTransformationsRenameQueryParametersItemArgs'] items: (Updatable) The list of headers.
        """
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.DeploymentSpecificationRouteRequestPoliciesQueryParameterTransformationsRenameQueryParametersItem']:
        """
        (Updatable) The list of headers.
        """
        return pulumi.get(self, "items")


@pulumi.output_type
class DeploymentSpecificationRouteRequestPoliciesQueryParameterTransformationsRenameQueryParametersItem(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "from":
            suggest = "from_"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentSpecificationRouteRequestPoliciesQueryParameterTransformationsRenameQueryParametersItem. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentSpecificationRouteRequestPoliciesQueryParameterTransformationsRenameQueryParametersItem.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentSpecificationRouteRequestPoliciesQueryParameterTransformationsRenameQueryParametersItem.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 from_: str,
                 to: str):
        """
        :param str from_: (Updatable) The original case-insensitive name of the header.  This name must be unique across transformation policies.
        :param str to: (Updatable) The new name of the header.  This name must be unique across transformation policies.
        """
        pulumi.set(__self__, "from_", from_)
        pulumi.set(__self__, "to", to)

    @property
    @pulumi.getter(name="from")
    def from_(self) -> str:
        """
        (Updatable) The original case-insensitive name of the header.  This name must be unique across transformation policies.
        """
        return pulumi.get(self, "from_")

    @property
    @pulumi.getter
    def to(self) -> str:
        """
        (Updatable) The new name of the header.  This name must be unique across transformation policies.
        """
        return pulumi.get(self, "to")


@pulumi.output_type
class DeploymentSpecificationRouteRequestPoliciesQueryParameterTransformationsSetQueryParameters(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.DeploymentSpecificationRouteRequestPoliciesQueryParameterTransformationsSetQueryParametersItem']):
        """
        :param Sequence['DeploymentSpecificationRouteRequestPoliciesQueryParameterTransformationsSetQueryParametersItemArgs'] items: (Updatable) The list of headers.
        """
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.DeploymentSpecificationRouteRequestPoliciesQueryParameterTransformationsSetQueryParametersItem']:
        """
        (Updatable) The list of headers.
        """
        return pulumi.get(self, "items")


@pulumi.output_type
class DeploymentSpecificationRouteRequestPoliciesQueryParameterTransformationsSetQueryParametersItem(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ifExists":
            suggest = "if_exists"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentSpecificationRouteRequestPoliciesQueryParameterTransformationsSetQueryParametersItem. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentSpecificationRouteRequestPoliciesQueryParameterTransformationsSetQueryParametersItem.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentSpecificationRouteRequestPoliciesQueryParameterTransformationsSetQueryParametersItem.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 if_exists: Optional[str] = None):
        """
        :param str name: (Updatable) The case-insensitive name of the header.  This name must be unique across transformation policies.
        :param Sequence[str] values: (Updatable) A list of new values.  Each value can be a constant or may include one or more expressions enclosed within ${} delimiters.
        :param str if_exists: (Updatable) If a header with the same name already exists in the request, OVERWRITE will overwrite the value, APPEND will append to the existing value, or SKIP will keep the existing value.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if if_exists is not None:
            pulumi.set(__self__, "if_exists", if_exists)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        (Updatable) The case-insensitive name of the header.  This name must be unique across transformation policies.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        """
        (Updatable) A list of new values.  Each value can be a constant or may include one or more expressions enclosed within ${} delimiters.
        """
        return pulumi.get(self, "values")

    @property
    @pulumi.getter(name="ifExists")
    def if_exists(self) -> Optional[str]:
        """
        (Updatable) If a header with the same name already exists in the request, OVERWRITE will overwrite the value, APPEND will append to the existing value, or SKIP will keep the existing value.
        """
        return pulumi.get(self, "if_exists")


@pulumi.output_type
class DeploymentSpecificationRouteRequestPoliciesQueryParameterValidations(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "validationMode":
            suggest = "validation_mode"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentSpecificationRouteRequestPoliciesQueryParameterValidations. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentSpecificationRouteRequestPoliciesQueryParameterValidations.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentSpecificationRouteRequestPoliciesQueryParameterValidations.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 parameters: Optional[Sequence['outputs.DeploymentSpecificationRouteRequestPoliciesQueryParameterValidationsParameter']] = None,
                 validation_mode: Optional[str] = None):
        """
        :param Sequence['DeploymentSpecificationRouteRequestPoliciesQueryParameterValidationsParameterArgs'] parameters: (Updatable)
        :param str validation_mode: (Updatable) Validation behavior mode.
        """
        if parameters is not None:
            pulumi.set(__self__, "parameters", parameters)
        if validation_mode is not None:
            pulumi.set(__self__, "validation_mode", validation_mode)

    @property
    @pulumi.getter
    def parameters(self) -> Optional[Sequence['outputs.DeploymentSpecificationRouteRequestPoliciesQueryParameterValidationsParameter']]:
        """
        (Updatable)
        """
        return pulumi.get(self, "parameters")

    @property
    @pulumi.getter(name="validationMode")
    def validation_mode(self) -> Optional[str]:
        """
        (Updatable) Validation behavior mode.
        """
        return pulumi.get(self, "validation_mode")


@pulumi.output_type
class DeploymentSpecificationRouteRequestPoliciesQueryParameterValidationsParameter(dict):
    def __init__(__self__, *,
                 name: str,
                 required: Optional[bool] = None):
        """
        :param str name: (Updatable) The case-insensitive name of the header.  This name must be unique across transformation policies.
        :param bool required: (Updatable) Determines if the parameter is required in the request.
        """
        pulumi.set(__self__, "name", name)
        if required is not None:
            pulumi.set(__self__, "required", required)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        (Updatable) The case-insensitive name of the header.  This name must be unique across transformation policies.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def required(self) -> Optional[bool]:
        """
        (Updatable) Determines if the parameter is required in the request.
        """
        return pulumi.get(self, "required")


@pulumi.output_type
class DeploymentSpecificationRouteRequestPoliciesResponseCacheLookup(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cacheKeyAdditions":
            suggest = "cache_key_additions"
        elif key == "isEnabled":
            suggest = "is_enabled"
        elif key == "isPrivateCachingEnabled":
            suggest = "is_private_caching_enabled"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentSpecificationRouteRequestPoliciesResponseCacheLookup. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentSpecificationRouteRequestPoliciesResponseCacheLookup.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentSpecificationRouteRequestPoliciesResponseCacheLookup.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 cache_key_additions: Optional[Sequence[str]] = None,
                 is_enabled: Optional[bool] = None,
                 is_private_caching_enabled: Optional[bool] = None):
        """
        :param str type: (Updatable) Type of the Response Cache Store Policy.
        :param Sequence[str] cache_key_additions: (Updatable) A list of context expressions whose values will be added to the base cache key. Values should contain an expression enclosed within ${} delimiters. Only the request context is available.
        :param bool is_enabled: (Updatable) Whether this policy is currently enabled.
        :param bool is_private_caching_enabled: (Updatable) Set true to allow caching responses where the request has an Authorization header. Ensure you have configured your  cache key additions to get the level of isolation across authenticated requests that you require.
        """
        pulumi.set(__self__, "type", type)
        if cache_key_additions is not None:
            pulumi.set(__self__, "cache_key_additions", cache_key_additions)
        if is_enabled is not None:
            pulumi.set(__self__, "is_enabled", is_enabled)
        if is_private_caching_enabled is not None:
            pulumi.set(__self__, "is_private_caching_enabled", is_private_caching_enabled)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        (Updatable) Type of the Response Cache Store Policy.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="cacheKeyAdditions")
    def cache_key_additions(self) -> Optional[Sequence[str]]:
        """
        (Updatable) A list of context expressions whose values will be added to the base cache key. Values should contain an expression enclosed within ${} delimiters. Only the request context is available.
        """
        return pulumi.get(self, "cache_key_additions")

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> Optional[bool]:
        """
        (Updatable) Whether this policy is currently enabled.
        """
        return pulumi.get(self, "is_enabled")

    @property
    @pulumi.getter(name="isPrivateCachingEnabled")
    def is_private_caching_enabled(self) -> Optional[bool]:
        """
        (Updatable) Set true to allow caching responses where the request has an Authorization header. Ensure you have configured your  cache key additions to get the level of isolation across authenticated requests that you require.
        """
        return pulumi.get(self, "is_private_caching_enabled")


@pulumi.output_type
class DeploymentSpecificationRouteResponsePolicies(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "headerTransformations":
            suggest = "header_transformations"
        elif key == "responseCacheStore":
            suggest = "response_cache_store"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentSpecificationRouteResponsePolicies. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentSpecificationRouteResponsePolicies.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentSpecificationRouteResponsePolicies.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 header_transformations: Optional['outputs.DeploymentSpecificationRouteResponsePoliciesHeaderTransformations'] = None,
                 response_cache_store: Optional['outputs.DeploymentSpecificationRouteResponsePoliciesResponseCacheStore'] = None):
        """
        :param 'DeploymentSpecificationRouteResponsePoliciesHeaderTransformationsArgs' header_transformations: (Updatable) A set of transformations to apply to HTTP headers that pass through the gateway.
        :param 'DeploymentSpecificationRouteResponsePoliciesResponseCacheStoreArgs' response_cache_store: (Updatable) Base policy for how a response from a backend is cached in the Response Cache.
        """
        if header_transformations is not None:
            pulumi.set(__self__, "header_transformations", header_transformations)
        if response_cache_store is not None:
            pulumi.set(__self__, "response_cache_store", response_cache_store)

    @property
    @pulumi.getter(name="headerTransformations")
    def header_transformations(self) -> Optional['outputs.DeploymentSpecificationRouteResponsePoliciesHeaderTransformations']:
        """
        (Updatable) A set of transformations to apply to HTTP headers that pass through the gateway.
        """
        return pulumi.get(self, "header_transformations")

    @property
    @pulumi.getter(name="responseCacheStore")
    def response_cache_store(self) -> Optional['outputs.DeploymentSpecificationRouteResponsePoliciesResponseCacheStore']:
        """
        (Updatable) Base policy for how a response from a backend is cached in the Response Cache.
        """
        return pulumi.get(self, "response_cache_store")


@pulumi.output_type
class DeploymentSpecificationRouteResponsePoliciesHeaderTransformations(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "filterHeaders":
            suggest = "filter_headers"
        elif key == "renameHeaders":
            suggest = "rename_headers"
        elif key == "setHeaders":
            suggest = "set_headers"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentSpecificationRouteResponsePoliciesHeaderTransformations. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentSpecificationRouteResponsePoliciesHeaderTransformations.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentSpecificationRouteResponsePoliciesHeaderTransformations.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 filter_headers: Optional['outputs.DeploymentSpecificationRouteResponsePoliciesHeaderTransformationsFilterHeaders'] = None,
                 rename_headers: Optional['outputs.DeploymentSpecificationRouteResponsePoliciesHeaderTransformationsRenameHeaders'] = None,
                 set_headers: Optional['outputs.DeploymentSpecificationRouteResponsePoliciesHeaderTransformationsSetHeaders'] = None):
        """
        :param 'DeploymentSpecificationRouteResponsePoliciesHeaderTransformationsFilterHeadersArgs' filter_headers: (Updatable) Filter HTTP headers as they pass through the gateway.  The gateway applies filters after other transformations, so any headers set or renamed must also be listed here when using an ALLOW type policy.
        :param 'DeploymentSpecificationRouteResponsePoliciesHeaderTransformationsRenameHeadersArgs' rename_headers: (Updatable) Rename HTTP headers as they pass through the gateway.
        :param 'DeploymentSpecificationRouteResponsePoliciesHeaderTransformationsSetHeadersArgs' set_headers: (Updatable) Set HTTP headers as they pass through the gateway.
        """
        if filter_headers is not None:
            pulumi.set(__self__, "filter_headers", filter_headers)
        if rename_headers is not None:
            pulumi.set(__self__, "rename_headers", rename_headers)
        if set_headers is not None:
            pulumi.set(__self__, "set_headers", set_headers)

    @property
    @pulumi.getter(name="filterHeaders")
    def filter_headers(self) -> Optional['outputs.DeploymentSpecificationRouteResponsePoliciesHeaderTransformationsFilterHeaders']:
        """
        (Updatable) Filter HTTP headers as they pass through the gateway.  The gateway applies filters after other transformations, so any headers set or renamed must also be listed here when using an ALLOW type policy.
        """
        return pulumi.get(self, "filter_headers")

    @property
    @pulumi.getter(name="renameHeaders")
    def rename_headers(self) -> Optional['outputs.DeploymentSpecificationRouteResponsePoliciesHeaderTransformationsRenameHeaders']:
        """
        (Updatable) Rename HTTP headers as they pass through the gateway.
        """
        return pulumi.get(self, "rename_headers")

    @property
    @pulumi.getter(name="setHeaders")
    def set_headers(self) -> Optional['outputs.DeploymentSpecificationRouteResponsePoliciesHeaderTransformationsSetHeaders']:
        """
        (Updatable) Set HTTP headers as they pass through the gateway.
        """
        return pulumi.get(self, "set_headers")


@pulumi.output_type
class DeploymentSpecificationRouteResponsePoliciesHeaderTransformationsFilterHeaders(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.DeploymentSpecificationRouteResponsePoliciesHeaderTransformationsFilterHeadersItem'],
                 type: str):
        """
        :param Sequence['DeploymentSpecificationRouteResponsePoliciesHeaderTransformationsFilterHeadersItemArgs'] items: (Updatable) The list of headers.
        :param str type: (Updatable) Type of the Response Cache Store Policy.
        """
        pulumi.set(__self__, "items", items)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.DeploymentSpecificationRouteResponsePoliciesHeaderTransformationsFilterHeadersItem']:
        """
        (Updatable) The list of headers.
        """
        return pulumi.get(self, "items")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        (Updatable) Type of the Response Cache Store Policy.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class DeploymentSpecificationRouteResponsePoliciesHeaderTransformationsFilterHeadersItem(dict):
    def __init__(__self__, *,
                 name: str):
        """
        :param str name: (Updatable) The case-insensitive name of the header.  This name must be unique across transformation policies.
        """
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        (Updatable) The case-insensitive name of the header.  This name must be unique across transformation policies.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class DeploymentSpecificationRouteResponsePoliciesHeaderTransformationsRenameHeaders(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.DeploymentSpecificationRouteResponsePoliciesHeaderTransformationsRenameHeadersItem']):
        """
        :param Sequence['DeploymentSpecificationRouteResponsePoliciesHeaderTransformationsRenameHeadersItemArgs'] items: (Updatable) The list of headers.
        """
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.DeploymentSpecificationRouteResponsePoliciesHeaderTransformationsRenameHeadersItem']:
        """
        (Updatable) The list of headers.
        """
        return pulumi.get(self, "items")


@pulumi.output_type
class DeploymentSpecificationRouteResponsePoliciesHeaderTransformationsRenameHeadersItem(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "from":
            suggest = "from_"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentSpecificationRouteResponsePoliciesHeaderTransformationsRenameHeadersItem. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentSpecificationRouteResponsePoliciesHeaderTransformationsRenameHeadersItem.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentSpecificationRouteResponsePoliciesHeaderTransformationsRenameHeadersItem.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 from_: str,
                 to: str):
        """
        :param str from_: (Updatable) The original case-insensitive name of the header.  This name must be unique across transformation policies.
        :param str to: (Updatable) The new name of the header.  This name must be unique across transformation policies.
        """
        pulumi.set(__self__, "from_", from_)
        pulumi.set(__self__, "to", to)

    @property
    @pulumi.getter(name="from")
    def from_(self) -> str:
        """
        (Updatable) The original case-insensitive name of the header.  This name must be unique across transformation policies.
        """
        return pulumi.get(self, "from_")

    @property
    @pulumi.getter
    def to(self) -> str:
        """
        (Updatable) The new name of the header.  This name must be unique across transformation policies.
        """
        return pulumi.get(self, "to")


@pulumi.output_type
class DeploymentSpecificationRouteResponsePoliciesHeaderTransformationsSetHeaders(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.DeploymentSpecificationRouteResponsePoliciesHeaderTransformationsSetHeadersItem']):
        """
        :param Sequence['DeploymentSpecificationRouteResponsePoliciesHeaderTransformationsSetHeadersItemArgs'] items: (Updatable) The list of headers.
        """
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.DeploymentSpecificationRouteResponsePoliciesHeaderTransformationsSetHeadersItem']:
        """
        (Updatable) The list of headers.
        """
        return pulumi.get(self, "items")


@pulumi.output_type
class DeploymentSpecificationRouteResponsePoliciesHeaderTransformationsSetHeadersItem(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ifExists":
            suggest = "if_exists"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentSpecificationRouteResponsePoliciesHeaderTransformationsSetHeadersItem. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentSpecificationRouteResponsePoliciesHeaderTransformationsSetHeadersItem.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentSpecificationRouteResponsePoliciesHeaderTransformationsSetHeadersItem.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 if_exists: Optional[str] = None):
        """
        :param str name: (Updatable) The case-insensitive name of the header.  This name must be unique across transformation policies.
        :param Sequence[str] values: (Updatable) A list of new values.  Each value can be a constant or may include one or more expressions enclosed within ${} delimiters.
        :param str if_exists: (Updatable) If a header with the same name already exists in the request, OVERWRITE will overwrite the value, APPEND will append to the existing value, or SKIP will keep the existing value.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if if_exists is not None:
            pulumi.set(__self__, "if_exists", if_exists)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        (Updatable) The case-insensitive name of the header.  This name must be unique across transformation policies.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        """
        (Updatable) A list of new values.  Each value can be a constant or may include one or more expressions enclosed within ${} delimiters.
        """
        return pulumi.get(self, "values")

    @property
    @pulumi.getter(name="ifExists")
    def if_exists(self) -> Optional[str]:
        """
        (Updatable) If a header with the same name already exists in the request, OVERWRITE will overwrite the value, APPEND will append to the existing value, or SKIP will keep the existing value.
        """
        return pulumi.get(self, "if_exists")


@pulumi.output_type
class DeploymentSpecificationRouteResponsePoliciesResponseCacheStore(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "timeToLiveInSeconds":
            suggest = "time_to_live_in_seconds"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentSpecificationRouteResponsePoliciesResponseCacheStore. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentSpecificationRouteResponsePoliciesResponseCacheStore.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentSpecificationRouteResponsePoliciesResponseCacheStore.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 time_to_live_in_seconds: int,
                 type: str):
        """
        :param int time_to_live_in_seconds: (Updatable) Sets the number of seconds for a response from a backend being stored in the Response Cache before it expires.
        :param str type: (Updatable) Type of the Response Cache Store Policy.
        """
        pulumi.set(__self__, "time_to_live_in_seconds", time_to_live_in_seconds)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="timeToLiveInSeconds")
    def time_to_live_in_seconds(self) -> int:
        """
        (Updatable) Sets the number of seconds for a response from a backend being stored in the Response Cache before it expires.
        """
        return pulumi.get(self, "time_to_live_in_seconds")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        (Updatable) Type of the Response Cache Store Policy.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GatewayIpAddress(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ipAddress":
            suggest = "ip_address"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GatewayIpAddress. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GatewayIpAddress.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GatewayIpAddress.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ip_address: Optional[str] = None):
        """
        :param str ip_address: An IP address.
        """
        if ip_address is not None:
            pulumi.set(__self__, "ip_address", ip_address)

    @property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> Optional[str]:
        """
        An IP address.
        """
        return pulumi.get(self, "ip_address")


@pulumi.output_type
class GatewayResponseCacheDetails(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "authenticationSecretId":
            suggest = "authentication_secret_id"
        elif key == "authenticationSecretVersionNumber":
            suggest = "authentication_secret_version_number"
        elif key == "connectTimeoutInMs":
            suggest = "connect_timeout_in_ms"
        elif key == "isSslEnabled":
            suggest = "is_ssl_enabled"
        elif key == "isSslVerifyDisabled":
            suggest = "is_ssl_verify_disabled"
        elif key == "readTimeoutInMs":
            suggest = "read_timeout_in_ms"
        elif key == "sendTimeoutInMs":
            suggest = "send_timeout_in_ms"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GatewayResponseCacheDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GatewayResponseCacheDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GatewayResponseCacheDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 authentication_secret_id: Optional[str] = None,
                 authentication_secret_version_number: Optional[str] = None,
                 connect_timeout_in_ms: Optional[int] = None,
                 is_ssl_enabled: Optional[bool] = None,
                 is_ssl_verify_disabled: Optional[bool] = None,
                 read_timeout_in_ms: Optional[int] = None,
                 send_timeout_in_ms: Optional[int] = None,
                 servers: Optional[Sequence['outputs.GatewayResponseCacheDetailsServer']] = None):
        """
        :param str type: (Updatable) Type of the Response Cache.
        :param str authentication_secret_id: (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Oracle Vault Service secret resource.
        :param str authentication_secret_version_number: (Updatable) The version number of the authentication secret to use.
        :param int connect_timeout_in_ms: (Updatable) Defines the timeout for establishing a connection with the Response Cache.
        :param bool is_ssl_enabled: (Updatable) Defines if the connection should be over SSL.
        :param bool is_ssl_verify_disabled: (Updatable) Defines whether or not to uphold SSL verification.
        :param int read_timeout_in_ms: (Updatable) Defines the timeout for reading data from the Response Cache.
        :param int send_timeout_in_ms: (Updatable) Defines the timeout for transmitting data to the Response Cache.
        :param Sequence['GatewayResponseCacheDetailsServerArgs'] servers: (Updatable) The set of cache store members to connect to. At present only a single server is supported.
        """
        pulumi.set(__self__, "type", type)
        if authentication_secret_id is not None:
            pulumi.set(__self__, "authentication_secret_id", authentication_secret_id)
        if authentication_secret_version_number is not None:
            pulumi.set(__self__, "authentication_secret_version_number", authentication_secret_version_number)
        if connect_timeout_in_ms is not None:
            pulumi.set(__self__, "connect_timeout_in_ms", connect_timeout_in_ms)
        if is_ssl_enabled is not None:
            pulumi.set(__self__, "is_ssl_enabled", is_ssl_enabled)
        if is_ssl_verify_disabled is not None:
            pulumi.set(__self__, "is_ssl_verify_disabled", is_ssl_verify_disabled)
        if read_timeout_in_ms is not None:
            pulumi.set(__self__, "read_timeout_in_ms", read_timeout_in_ms)
        if send_timeout_in_ms is not None:
            pulumi.set(__self__, "send_timeout_in_ms", send_timeout_in_ms)
        if servers is not None:
            pulumi.set(__self__, "servers", servers)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        (Updatable) Type of the Response Cache.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="authenticationSecretId")
    def authentication_secret_id(self) -> Optional[str]:
        """
        (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Oracle Vault Service secret resource.
        """
        return pulumi.get(self, "authentication_secret_id")

    @property
    @pulumi.getter(name="authenticationSecretVersionNumber")
    def authentication_secret_version_number(self) -> Optional[str]:
        """
        (Updatable) The version number of the authentication secret to use.
        """
        return pulumi.get(self, "authentication_secret_version_number")

    @property
    @pulumi.getter(name="connectTimeoutInMs")
    def connect_timeout_in_ms(self) -> Optional[int]:
        """
        (Updatable) Defines the timeout for establishing a connection with the Response Cache.
        """
        return pulumi.get(self, "connect_timeout_in_ms")

    @property
    @pulumi.getter(name="isSslEnabled")
    def is_ssl_enabled(self) -> Optional[bool]:
        """
        (Updatable) Defines if the connection should be over SSL.
        """
        return pulumi.get(self, "is_ssl_enabled")

    @property
    @pulumi.getter(name="isSslVerifyDisabled")
    def is_ssl_verify_disabled(self) -> Optional[bool]:
        """
        (Updatable) Defines whether or not to uphold SSL verification.
        """
        return pulumi.get(self, "is_ssl_verify_disabled")

    @property
    @pulumi.getter(name="readTimeoutInMs")
    def read_timeout_in_ms(self) -> Optional[int]:
        """
        (Updatable) Defines the timeout for reading data from the Response Cache.
        """
        return pulumi.get(self, "read_timeout_in_ms")

    @property
    @pulumi.getter(name="sendTimeoutInMs")
    def send_timeout_in_ms(self) -> Optional[int]:
        """
        (Updatable) Defines the timeout for transmitting data to the Response Cache.
        """
        return pulumi.get(self, "send_timeout_in_ms")

    @property
    @pulumi.getter
    def servers(self) -> Optional[Sequence['outputs.GatewayResponseCacheDetailsServer']]:
        """
        (Updatable) The set of cache store members to connect to. At present only a single server is supported.
        """
        return pulumi.get(self, "servers")


@pulumi.output_type
class GatewayResponseCacheDetailsServer(dict):
    def __init__(__self__, *,
                 host: Optional[str] = None,
                 port: Optional[int] = None):
        """
        :param str host: (Updatable) Hostname or IP address (IPv4 only) where the cache store is running.
        :param int port: (Updatable) The port the cache store is exposed on.
        """
        if host is not None:
            pulumi.set(__self__, "host", host)
        if port is not None:
            pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        """
        (Updatable) Hostname or IP address (IPv4 only) where the cache store is running.
        """
        return pulumi.get(self, "host")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        """
        (Updatable) The port the cache store is exposed on.
        """
        return pulumi.get(self, "port")


@pulumi.output_type
class GetApiDeploymentSpecificationLoggingPolicyResult(dict):
    def __init__(__self__, *,
                 access_log: 'outputs.GetApiDeploymentSpecificationLoggingPolicyAccessLogResult',
                 execution_log: 'outputs.GetApiDeploymentSpecificationLoggingPolicyExecutionLogResult'):
        """
        :param 'GetApiDeploymentSpecificationLoggingPolicyAccessLogArgs' access_log: Configures the logging policies for the access logs of an API Deployment.
        :param 'GetApiDeploymentSpecificationLoggingPolicyExecutionLogArgs' execution_log: Configures the logging policies for the execution logs of an API Deployment.
        """
        pulumi.set(__self__, "access_log", access_log)
        pulumi.set(__self__, "execution_log", execution_log)

    @property
    @pulumi.getter(name="accessLog")
    def access_log(self) -> 'outputs.GetApiDeploymentSpecificationLoggingPolicyAccessLogResult':
        """
        Configures the logging policies for the access logs of an API Deployment.
        """
        return pulumi.get(self, "access_log")

    @property
    @pulumi.getter(name="executionLog")
    def execution_log(self) -> 'outputs.GetApiDeploymentSpecificationLoggingPolicyExecutionLogResult':
        """
        Configures the logging policies for the execution logs of an API Deployment.
        """
        return pulumi.get(self, "execution_log")


@pulumi.output_type
class GetApiDeploymentSpecificationLoggingPolicyAccessLogResult(dict):
    def __init__(__self__, *,
                 is_enabled: bool):
        """
        :param bool is_enabled: Whether this policy is currently enabled.
        """
        pulumi.set(__self__, "is_enabled", is_enabled)

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> bool:
        """
        Whether this policy is currently enabled.
        """
        return pulumi.get(self, "is_enabled")


@pulumi.output_type
class GetApiDeploymentSpecificationLoggingPolicyExecutionLogResult(dict):
    def __init__(__self__, *,
                 is_enabled: bool,
                 log_level: str):
        """
        :param bool is_enabled: Whether this policy is currently enabled.
        :param str log_level: Specifies the log level used to control logging output of execution logs. Enabling logging at a given level also enables logging at all higher levels.
        """
        pulumi.set(__self__, "is_enabled", is_enabled)
        pulumi.set(__self__, "log_level", log_level)

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> bool:
        """
        Whether this policy is currently enabled.
        """
        return pulumi.get(self, "is_enabled")

    @property
    @pulumi.getter(name="logLevel")
    def log_level(self) -> str:
        """
        Specifies the log level used to control logging output of execution logs. Enabling logging at a given level also enables logging at all higher levels.
        """
        return pulumi.get(self, "log_level")


@pulumi.output_type
class GetApiDeploymentSpecificationRequestPolicyResult(dict):
    def __init__(__self__, *,
                 authentication: 'outputs.GetApiDeploymentSpecificationRequestPolicyAuthenticationResult',
                 cors: 'outputs.GetApiDeploymentSpecificationRequestPolicyCorsResult',
                 rate_limiting: 'outputs.GetApiDeploymentSpecificationRequestPolicyRateLimitingResult'):
        """
        :param 'GetApiDeploymentSpecificationRequestPolicyAuthenticationArgs' authentication: Information on how to authenticate incoming requests.
        :param 'GetApiDeploymentSpecificationRequestPolicyCorsArgs' cors: Enable CORS (Cross-Origin-Resource-Sharing) request handling.
        :param 'GetApiDeploymentSpecificationRequestPolicyRateLimitingArgs' rate_limiting: Limit the number of requests that should be handled for the specified window using a specfic key.
        """
        pulumi.set(__self__, "authentication", authentication)
        pulumi.set(__self__, "cors", cors)
        pulumi.set(__self__, "rate_limiting", rate_limiting)

    @property
    @pulumi.getter
    def authentication(self) -> 'outputs.GetApiDeploymentSpecificationRequestPolicyAuthenticationResult':
        """
        Information on how to authenticate incoming requests.
        """
        return pulumi.get(self, "authentication")

    @property
    @pulumi.getter
    def cors(self) -> 'outputs.GetApiDeploymentSpecificationRequestPolicyCorsResult':
        """
        Enable CORS (Cross-Origin-Resource-Sharing) request handling.
        """
        return pulumi.get(self, "cors")

    @property
    @pulumi.getter(name="rateLimiting")
    def rate_limiting(self) -> 'outputs.GetApiDeploymentSpecificationRequestPolicyRateLimitingResult':
        """
        Limit the number of requests that should be handled for the specified window using a specfic key.
        """
        return pulumi.get(self, "rate_limiting")


@pulumi.output_type
class GetApiDeploymentSpecificationRequestPolicyAuthenticationResult(dict):
    def __init__(__self__, *,
                 audiences: Sequence[str],
                 function_id: str,
                 is_anonymous_access_allowed: bool,
                 issuers: Sequence[str],
                 max_clock_skew_in_seconds: float,
                 public_keys: 'outputs.GetApiDeploymentSpecificationRequestPolicyAuthenticationPublicKeysResult',
                 token_auth_scheme: str,
                 token_header: str,
                 token_query_param: str,
                 type: str,
                 verify_claims: Sequence['outputs.GetApiDeploymentSpecificationRequestPolicyAuthenticationVerifyClaimResult']):
        """
        :param Sequence[str] audiences: The list of intended recipients for the token.
        :param str function_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Oracle Functions function resource.
        :param bool is_anonymous_access_allowed: Whether an unauthenticated user may access the API. Must be "true" to enable ANONYMOUS route authorization.
        :param Sequence[str] issuers: A list of parties that could have issued the token.
        :param float max_clock_skew_in_seconds: The maximum expected time difference between the system clocks of the token issuer and the API Gateway.
        :param 'GetApiDeploymentSpecificationRequestPolicyAuthenticationPublicKeysArgs' public_keys: A set of Public Keys that will be used to verify the JWT signature.
        :param str token_auth_scheme: The authentication scheme that is to be used when authenticating the token. This must to be provided if "tokenHeader" is specified.
        :param str token_header: The name of the header containing the authentication token.
        :param str token_query_param: The name of the query parameter containing the authentication token.
        :param str type: Type of the Response Cache Store Policy.
        :param Sequence['GetApiDeploymentSpecificationRequestPolicyAuthenticationVerifyClaimArgs'] verify_claims: A list of claims which should be validated to consider the token valid.
        """
        pulumi.set(__self__, "audiences", audiences)
        pulumi.set(__self__, "function_id", function_id)
        pulumi.set(__self__, "is_anonymous_access_allowed", is_anonymous_access_allowed)
        pulumi.set(__self__, "issuers", issuers)
        pulumi.set(__self__, "max_clock_skew_in_seconds", max_clock_skew_in_seconds)
        pulumi.set(__self__, "public_keys", public_keys)
        pulumi.set(__self__, "token_auth_scheme", token_auth_scheme)
        pulumi.set(__self__, "token_header", token_header)
        pulumi.set(__self__, "token_query_param", token_query_param)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "verify_claims", verify_claims)

    @property
    @pulumi.getter
    def audiences(self) -> Sequence[str]:
        """
        The list of intended recipients for the token.
        """
        return pulumi.get(self, "audiences")

    @property
    @pulumi.getter(name="functionId")
    def function_id(self) -> str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Oracle Functions function resource.
        """
        return pulumi.get(self, "function_id")

    @property
    @pulumi.getter(name="isAnonymousAccessAllowed")
    def is_anonymous_access_allowed(self) -> bool:
        """
        Whether an unauthenticated user may access the API. Must be "true" to enable ANONYMOUS route authorization.
        """
        return pulumi.get(self, "is_anonymous_access_allowed")

    @property
    @pulumi.getter
    def issuers(self) -> Sequence[str]:
        """
        A list of parties that could have issued the token.
        """
        return pulumi.get(self, "issuers")

    @property
    @pulumi.getter(name="maxClockSkewInSeconds")
    def max_clock_skew_in_seconds(self) -> float:
        """
        The maximum expected time difference between the system clocks of the token issuer and the API Gateway.
        """
        return pulumi.get(self, "max_clock_skew_in_seconds")

    @property
    @pulumi.getter(name="publicKeys")
    def public_keys(self) -> 'outputs.GetApiDeploymentSpecificationRequestPolicyAuthenticationPublicKeysResult':
        """
        A set of Public Keys that will be used to verify the JWT signature.
        """
        return pulumi.get(self, "public_keys")

    @property
    @pulumi.getter(name="tokenAuthScheme")
    def token_auth_scheme(self) -> str:
        """
        The authentication scheme that is to be used when authenticating the token. This must to be provided if "tokenHeader" is specified.
        """
        return pulumi.get(self, "token_auth_scheme")

    @property
    @pulumi.getter(name="tokenHeader")
    def token_header(self) -> str:
        """
        The name of the header containing the authentication token.
        """
        return pulumi.get(self, "token_header")

    @property
    @pulumi.getter(name="tokenQueryParam")
    def token_query_param(self) -> str:
        """
        The name of the query parameter containing the authentication token.
        """
        return pulumi.get(self, "token_query_param")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Type of the Response Cache Store Policy.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="verifyClaims")
    def verify_claims(self) -> Sequence['outputs.GetApiDeploymentSpecificationRequestPolicyAuthenticationVerifyClaimResult']:
        """
        A list of claims which should be validated to consider the token valid.
        """
        return pulumi.get(self, "verify_claims")


@pulumi.output_type
class GetApiDeploymentSpecificationRequestPolicyAuthenticationPublicKeysResult(dict):
    def __init__(__self__, *,
                 is_ssl_verify_disabled: bool,
                 keys: Sequence['outputs.GetApiDeploymentSpecificationRequestPolicyAuthenticationPublicKeysKeyResult'],
                 max_cache_duration_in_hours: int,
                 type: str,
                 uri: str):
        """
        :param bool is_ssl_verify_disabled: Defines whether or not to uphold SSL verification.
        :param Sequence['GetApiDeploymentSpecificationRequestPolicyAuthenticationPublicKeysKeyArgs'] keys: The set of static public keys.
        :param int max_cache_duration_in_hours: The duration for which the JWKS should be cached before it is fetched again.
        :param str type: Type of the Response Cache Store Policy.
        :param str uri: The uri from which to retrieve the key. It must be accessible without authentication.
        """
        pulumi.set(__self__, "is_ssl_verify_disabled", is_ssl_verify_disabled)
        pulumi.set(__self__, "keys", keys)
        pulumi.set(__self__, "max_cache_duration_in_hours", max_cache_duration_in_hours)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "uri", uri)

    @property
    @pulumi.getter(name="isSslVerifyDisabled")
    def is_ssl_verify_disabled(self) -> bool:
        """
        Defines whether or not to uphold SSL verification.
        """
        return pulumi.get(self, "is_ssl_verify_disabled")

    @property
    @pulumi.getter
    def keys(self) -> Sequence['outputs.GetApiDeploymentSpecificationRequestPolicyAuthenticationPublicKeysKeyResult']:
        """
        The set of static public keys.
        """
        return pulumi.get(self, "keys")

    @property
    @pulumi.getter(name="maxCacheDurationInHours")
    def max_cache_duration_in_hours(self) -> int:
        """
        The duration for which the JWKS should be cached before it is fetched again.
        """
        return pulumi.get(self, "max_cache_duration_in_hours")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Type of the Response Cache Store Policy.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def uri(self) -> str:
        """
        The uri from which to retrieve the key. It must be accessible without authentication.
        """
        return pulumi.get(self, "uri")


@pulumi.output_type
class GetApiDeploymentSpecificationRequestPolicyAuthenticationPublicKeysKeyResult(dict):
    def __init__(__self__, *,
                 alg: str,
                 e: str,
                 format: str,
                 key: str,
                 key_ops: Sequence[str],
                 kid: str,
                 kty: str,
                 n: str,
                 use: str):
        """
        :param str alg: The algorithm intended for use with this key.
        :param str e: The base64 url encoded exponent of the RSA public key represented by this key.
        :param str format: The format of the public key.
        :param str key: Name of the claim.
        :param Sequence[str] key_ops: The operations for which this key is to be used.
        :param str kid: A unique key ID. This key will be used to verify the signature of a JWT with matching "kid".
        :param str kty: The key type.
        :param str n: The base64 url encoded modulus of the RSA public key represented by this key.
        :param str use: The intended use of the public key.
        """
        pulumi.set(__self__, "alg", alg)
        pulumi.set(__self__, "e", e)
        pulumi.set(__self__, "format", format)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "key_ops", key_ops)
        pulumi.set(__self__, "kid", kid)
        pulumi.set(__self__, "kty", kty)
        pulumi.set(__self__, "n", n)
        pulumi.set(__self__, "use", use)

    @property
    @pulumi.getter
    def alg(self) -> str:
        """
        The algorithm intended for use with this key.
        """
        return pulumi.get(self, "alg")

    @property
    @pulumi.getter
    def e(self) -> str:
        """
        The base64 url encoded exponent of the RSA public key represented by this key.
        """
        return pulumi.get(self, "e")

    @property
    @pulumi.getter
    def format(self) -> str:
        """
        The format of the public key.
        """
        return pulumi.get(self, "format")

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        Name of the claim.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter(name="keyOps")
    def key_ops(self) -> Sequence[str]:
        """
        The operations for which this key is to be used.
        """
        return pulumi.get(self, "key_ops")

    @property
    @pulumi.getter
    def kid(self) -> str:
        """
        A unique key ID. This key will be used to verify the signature of a JWT with matching "kid".
        """
        return pulumi.get(self, "kid")

    @property
    @pulumi.getter
    def kty(self) -> str:
        """
        The key type.
        """
        return pulumi.get(self, "kty")

    @property
    @pulumi.getter
    def n(self) -> str:
        """
        The base64 url encoded modulus of the RSA public key represented by this key.
        """
        return pulumi.get(self, "n")

    @property
    @pulumi.getter
    def use(self) -> str:
        """
        The intended use of the public key.
        """
        return pulumi.get(self, "use")


@pulumi.output_type
class GetApiDeploymentSpecificationRequestPolicyAuthenticationVerifyClaimResult(dict):
    def __init__(__self__, *,
                 is_required: bool,
                 key: str,
                 values: Sequence[str]):
        """
        :param bool is_required: Whether the claim is required to be present in the JWT or not. If set to "false", the claim values will be matched only if the claim is present in the JWT.
        :param str key: Name of the claim.
        :param Sequence[str] values: A list of new values.  Each value can be a constant or may include one or more expressions enclosed within ${} delimiters.
        """
        pulumi.set(__self__, "is_required", is_required)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter(name="isRequired")
    def is_required(self) -> bool:
        """
        Whether the claim is required to be present in the JWT or not. If set to "false", the claim values will be matched only if the claim is present in the JWT.
        """
        return pulumi.get(self, "is_required")

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        Name of the claim.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        """
        A list of new values.  Each value can be a constant or may include one or more expressions enclosed within ${} delimiters.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class GetApiDeploymentSpecificationRequestPolicyCorsResult(dict):
    def __init__(__self__, *,
                 allowed_headers: Sequence[str],
                 allowed_methods: Sequence[str],
                 allowed_origins: Sequence[str],
                 exposed_headers: Sequence[str],
                 is_allow_credentials_enabled: bool,
                 max_age_in_seconds: int):
        """
        :param Sequence[str] allowed_headers: The list of headers that will be allowed from the client via the Access-Control-Allow-Headers header. '*' will allow all headers.
        :param Sequence[str] allowed_methods: The list of allowed HTTP methods that will be returned for the preflight OPTIONS request in the Access-Control-Allow-Methods header. '*' will allow all methods.
        :param Sequence[str] allowed_origins: The list of allowed origins that the CORS handler will use to respond to CORS requests. The gateway will send the Access-Control-Allow-Origin header with the best origin match for the circumstances. '*' will match any origins, and 'null' will match queries from 'file:' origins. All other origins must be qualified with the scheme, full hostname, and port if necessary.
        :param Sequence[str] exposed_headers: The list of headers that the client will be allowed to see from the response as indicated by the Access-Control-Expose-Headers header. '*' will expose all headers.
        :param bool is_allow_credentials_enabled: Whether to send the Access-Control-Allow-Credentials header to allow CORS requests with cookies.
        :param int max_age_in_seconds: The time in seconds for the client to cache preflight responses. This is sent as the Access-Control-Max-Age if greater than 0.
        """
        pulumi.set(__self__, "allowed_headers", allowed_headers)
        pulumi.set(__self__, "allowed_methods", allowed_methods)
        pulumi.set(__self__, "allowed_origins", allowed_origins)
        pulumi.set(__self__, "exposed_headers", exposed_headers)
        pulumi.set(__self__, "is_allow_credentials_enabled", is_allow_credentials_enabled)
        pulumi.set(__self__, "max_age_in_seconds", max_age_in_seconds)

    @property
    @pulumi.getter(name="allowedHeaders")
    def allowed_headers(self) -> Sequence[str]:
        """
        The list of headers that will be allowed from the client via the Access-Control-Allow-Headers header. '*' will allow all headers.
        """
        return pulumi.get(self, "allowed_headers")

    @property
    @pulumi.getter(name="allowedMethods")
    def allowed_methods(self) -> Sequence[str]:
        """
        The list of allowed HTTP methods that will be returned for the preflight OPTIONS request in the Access-Control-Allow-Methods header. '*' will allow all methods.
        """
        return pulumi.get(self, "allowed_methods")

    @property
    @pulumi.getter(name="allowedOrigins")
    def allowed_origins(self) -> Sequence[str]:
        """
        The list of allowed origins that the CORS handler will use to respond to CORS requests. The gateway will send the Access-Control-Allow-Origin header with the best origin match for the circumstances. '*' will match any origins, and 'null' will match queries from 'file:' origins. All other origins must be qualified with the scheme, full hostname, and port if necessary.
        """
        return pulumi.get(self, "allowed_origins")

    @property
    @pulumi.getter(name="exposedHeaders")
    def exposed_headers(self) -> Sequence[str]:
        """
        The list of headers that the client will be allowed to see from the response as indicated by the Access-Control-Expose-Headers header. '*' will expose all headers.
        """
        return pulumi.get(self, "exposed_headers")

    @property
    @pulumi.getter(name="isAllowCredentialsEnabled")
    def is_allow_credentials_enabled(self) -> bool:
        """
        Whether to send the Access-Control-Allow-Credentials header to allow CORS requests with cookies.
        """
        return pulumi.get(self, "is_allow_credentials_enabled")

    @property
    @pulumi.getter(name="maxAgeInSeconds")
    def max_age_in_seconds(self) -> int:
        """
        The time in seconds for the client to cache preflight responses. This is sent as the Access-Control-Max-Age if greater than 0.
        """
        return pulumi.get(self, "max_age_in_seconds")


@pulumi.output_type
class GetApiDeploymentSpecificationRequestPolicyRateLimitingResult(dict):
    def __init__(__self__, *,
                 rate_in_requests_per_second: int,
                 rate_key: str):
        """
        :param int rate_in_requests_per_second: The maximum number of requests per second to allow.
        :param str rate_key: The key used to group requests together.
        """
        pulumi.set(__self__, "rate_in_requests_per_second", rate_in_requests_per_second)
        pulumi.set(__self__, "rate_key", rate_key)

    @property
    @pulumi.getter(name="rateInRequestsPerSecond")
    def rate_in_requests_per_second(self) -> int:
        """
        The maximum number of requests per second to allow.
        """
        return pulumi.get(self, "rate_in_requests_per_second")

    @property
    @pulumi.getter(name="rateKey")
    def rate_key(self) -> str:
        """
        The key used to group requests together.
        """
        return pulumi.get(self, "rate_key")


@pulumi.output_type
class GetApiDeploymentSpecificationRouteResult(dict):
    def __init__(__self__, *,
                 backend: 'outputs.GetApiDeploymentSpecificationRouteBackendResult',
                 logging_policies: 'outputs.GetApiDeploymentSpecificationRouteLoggingPoliciesResult',
                 methods: Sequence[str],
                 path: str,
                 request_policies: 'outputs.GetApiDeploymentSpecificationRouteRequestPoliciesResult',
                 response_policies: 'outputs.GetApiDeploymentSpecificationRouteResponsePoliciesResult'):
        """
        :param 'GetApiDeploymentSpecificationRouteBackendArgs' backend: The backend to forward requests to.
        :param 'GetApiDeploymentSpecificationRouteLoggingPoliciesArgs' logging_policies: Policies controlling the pushing of logs to Oracle Cloud Infrastructure Public Logging.
        :param Sequence[str] methods: A list of allowed methods on this route.
        :param str path: A URL path pattern that must be matched on this route. The path pattern may contain a subset of RFC 6570 identifiers to allow wildcard and parameterized matching.
        :param 'GetApiDeploymentSpecificationRouteRequestPoliciesArgs' request_policies: Behavior applied to any requests received by the API on this route.
        :param 'GetApiDeploymentSpecificationRouteResponsePoliciesArgs' response_policies: Behavior applied to any responses sent by the API for requests on this route.
        """
        pulumi.set(__self__, "backend", backend)
        pulumi.set(__self__, "logging_policies", logging_policies)
        pulumi.set(__self__, "methods", methods)
        pulumi.set(__self__, "path", path)
        pulumi.set(__self__, "request_policies", request_policies)
        pulumi.set(__self__, "response_policies", response_policies)

    @property
    @pulumi.getter
    def backend(self) -> 'outputs.GetApiDeploymentSpecificationRouteBackendResult':
        """
        The backend to forward requests to.
        """
        return pulumi.get(self, "backend")

    @property
    @pulumi.getter(name="loggingPolicies")
    def logging_policies(self) -> 'outputs.GetApiDeploymentSpecificationRouteLoggingPoliciesResult':
        """
        Policies controlling the pushing of logs to Oracle Cloud Infrastructure Public Logging.
        """
        return pulumi.get(self, "logging_policies")

    @property
    @pulumi.getter
    def methods(self) -> Sequence[str]:
        """
        A list of allowed methods on this route.
        """
        return pulumi.get(self, "methods")

    @property
    @pulumi.getter
    def path(self) -> str:
        """
        A URL path pattern that must be matched on this route. The path pattern may contain a subset of RFC 6570 identifiers to allow wildcard and parameterized matching.
        """
        return pulumi.get(self, "path")

    @property
    @pulumi.getter(name="requestPolicies")
    def request_policies(self) -> 'outputs.GetApiDeploymentSpecificationRouteRequestPoliciesResult':
        """
        Behavior applied to any requests received by the API on this route.
        """
        return pulumi.get(self, "request_policies")

    @property
    @pulumi.getter(name="responsePolicies")
    def response_policies(self) -> 'outputs.GetApiDeploymentSpecificationRouteResponsePoliciesResult':
        """
        Behavior applied to any responses sent by the API for requests on this route.
        """
        return pulumi.get(self, "response_policies")


@pulumi.output_type
class GetApiDeploymentSpecificationRouteBackendResult(dict):
    def __init__(__self__, *,
                 body: str,
                 connect_timeout_in_seconds: float,
                 function_id: str,
                 headers: Sequence['outputs.GetApiDeploymentSpecificationRouteBackendHeaderResult'],
                 is_ssl_verify_disabled: bool,
                 read_timeout_in_seconds: float,
                 send_timeout_in_seconds: float,
                 status: int,
                 type: str,
                 url: str):
        """
        :param str body: The body of the stock response from the mock backend.
        :param float connect_timeout_in_seconds: Defines a timeout for establishing a connection with a proxied server.
        :param str function_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Oracle Functions function resource.
        :param bool is_ssl_verify_disabled: Defines whether or not to uphold SSL verification.
        :param float read_timeout_in_seconds: Defines a timeout for reading a response from the proxied server.
        :param float send_timeout_in_seconds: Defines a timeout for transmitting a request to the proxied server.
        :param int status: The status code of the stock response from the mock backend.
        :param str type: Type of the Response Cache Store Policy.
        """
        pulumi.set(__self__, "body", body)
        pulumi.set(__self__, "connect_timeout_in_seconds", connect_timeout_in_seconds)
        pulumi.set(__self__, "function_id", function_id)
        pulumi.set(__self__, "headers", headers)
        pulumi.set(__self__, "is_ssl_verify_disabled", is_ssl_verify_disabled)
        pulumi.set(__self__, "read_timeout_in_seconds", read_timeout_in_seconds)
        pulumi.set(__self__, "send_timeout_in_seconds", send_timeout_in_seconds)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def body(self) -> str:
        """
        The body of the stock response from the mock backend.
        """
        return pulumi.get(self, "body")

    @property
    @pulumi.getter(name="connectTimeoutInSeconds")
    def connect_timeout_in_seconds(self) -> float:
        """
        Defines a timeout for establishing a connection with a proxied server.
        """
        return pulumi.get(self, "connect_timeout_in_seconds")

    @property
    @pulumi.getter(name="functionId")
    def function_id(self) -> str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Oracle Functions function resource.
        """
        return pulumi.get(self, "function_id")

    @property
    @pulumi.getter
    def headers(self) -> Sequence['outputs.GetApiDeploymentSpecificationRouteBackendHeaderResult']:
        return pulumi.get(self, "headers")

    @property
    @pulumi.getter(name="isSslVerifyDisabled")
    def is_ssl_verify_disabled(self) -> bool:
        """
        Defines whether or not to uphold SSL verification.
        """
        return pulumi.get(self, "is_ssl_verify_disabled")

    @property
    @pulumi.getter(name="readTimeoutInSeconds")
    def read_timeout_in_seconds(self) -> float:
        """
        Defines a timeout for reading a response from the proxied server.
        """
        return pulumi.get(self, "read_timeout_in_seconds")

    @property
    @pulumi.getter(name="sendTimeoutInSeconds")
    def send_timeout_in_seconds(self) -> float:
        """
        Defines a timeout for transmitting a request to the proxied server.
        """
        return pulumi.get(self, "send_timeout_in_seconds")

    @property
    @pulumi.getter
    def status(self) -> int:
        """
        The status code of the stock response from the mock backend.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Type of the Response Cache Store Policy.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def url(self) -> str:
        return pulumi.get(self, "url")


@pulumi.output_type
class GetApiDeploymentSpecificationRouteBackendHeaderResult(dict):
    def __init__(__self__, *,
                 name: str,
                 value: str):
        """
        :param str name: The case-insensitive name of the header.  This name must be unique across transformation policies.
        :param str value: Value of the header.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The case-insensitive name of the header.  This name must be unique across transformation policies.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Value of the header.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetApiDeploymentSpecificationRouteLoggingPoliciesResult(dict):
    def __init__(__self__, *,
                 access_log: 'outputs.GetApiDeploymentSpecificationRouteLoggingPoliciesAccessLogResult',
                 execution_log: 'outputs.GetApiDeploymentSpecificationRouteLoggingPoliciesExecutionLogResult'):
        """
        :param 'GetApiDeploymentSpecificationRouteLoggingPoliciesAccessLogArgs' access_log: Configures the logging policies for the access logs of an API Deployment.
        :param 'GetApiDeploymentSpecificationRouteLoggingPoliciesExecutionLogArgs' execution_log: Configures the logging policies for the execution logs of an API Deployment.
        """
        pulumi.set(__self__, "access_log", access_log)
        pulumi.set(__self__, "execution_log", execution_log)

    @property
    @pulumi.getter(name="accessLog")
    def access_log(self) -> 'outputs.GetApiDeploymentSpecificationRouteLoggingPoliciesAccessLogResult':
        """
        Configures the logging policies for the access logs of an API Deployment.
        """
        return pulumi.get(self, "access_log")

    @property
    @pulumi.getter(name="executionLog")
    def execution_log(self) -> 'outputs.GetApiDeploymentSpecificationRouteLoggingPoliciesExecutionLogResult':
        """
        Configures the logging policies for the execution logs of an API Deployment.
        """
        return pulumi.get(self, "execution_log")


@pulumi.output_type
class GetApiDeploymentSpecificationRouteLoggingPoliciesAccessLogResult(dict):
    def __init__(__self__, *,
                 is_enabled: bool):
        """
        :param bool is_enabled: Whether this policy is currently enabled.
        """
        pulumi.set(__self__, "is_enabled", is_enabled)

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> bool:
        """
        Whether this policy is currently enabled.
        """
        return pulumi.get(self, "is_enabled")


@pulumi.output_type
class GetApiDeploymentSpecificationRouteLoggingPoliciesExecutionLogResult(dict):
    def __init__(__self__, *,
                 is_enabled: bool,
                 log_level: str):
        """
        :param bool is_enabled: Whether this policy is currently enabled.
        :param str log_level: Specifies the log level used to control logging output of execution logs. Enabling logging at a given level also enables logging at all higher levels.
        """
        pulumi.set(__self__, "is_enabled", is_enabled)
        pulumi.set(__self__, "log_level", log_level)

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> bool:
        """
        Whether this policy is currently enabled.
        """
        return pulumi.get(self, "is_enabled")

    @property
    @pulumi.getter(name="logLevel")
    def log_level(self) -> str:
        """
        Specifies the log level used to control logging output of execution logs. Enabling logging at a given level also enables logging at all higher levels.
        """
        return pulumi.get(self, "log_level")


@pulumi.output_type
class GetApiDeploymentSpecificationRouteRequestPoliciesResult(dict):
    def __init__(__self__, *,
                 authorization: 'outputs.GetApiDeploymentSpecificationRouteRequestPoliciesAuthorizationResult',
                 body_validation: 'outputs.GetApiDeploymentSpecificationRouteRequestPoliciesBodyValidationResult',
                 cors: 'outputs.GetApiDeploymentSpecificationRouteRequestPoliciesCorsResult',
                 header_transformations: 'outputs.GetApiDeploymentSpecificationRouteRequestPoliciesHeaderTransformationsResult',
                 header_validations: 'outputs.GetApiDeploymentSpecificationRouteRequestPoliciesHeaderValidationsResult',
                 query_parameter_transformations: 'outputs.GetApiDeploymentSpecificationRouteRequestPoliciesQueryParameterTransformationsResult',
                 query_parameter_validations: 'outputs.GetApiDeploymentSpecificationRouteRequestPoliciesQueryParameterValidationsResult',
                 response_cache_lookup: 'outputs.GetApiDeploymentSpecificationRouteRequestPoliciesResponseCacheLookupResult'):
        """
        :param 'GetApiDeploymentSpecificationRouteRequestPoliciesAuthorizationArgs' authorization: If authentication has been performed, validate whether the request scope (if any) applies to this route. If no RouteAuthorizationPolicy is defined for a route, a policy with a type of AUTHENTICATION_ONLY is applied.
        :param 'GetApiDeploymentSpecificationRouteRequestPoliciesBodyValidationArgs' body_validation: Validate the payload body of the incoming API requests on a specific route.
        :param 'GetApiDeploymentSpecificationRouteRequestPoliciesCorsArgs' cors: Enable CORS (Cross-Origin-Resource-Sharing) request handling.
        :param 'GetApiDeploymentSpecificationRouteRequestPoliciesHeaderTransformationsArgs' header_transformations: A set of transformations to apply to HTTP headers that pass through the gateway.
        :param 'GetApiDeploymentSpecificationRouteRequestPoliciesHeaderValidationsArgs' header_validations: Validate the HTTP headers on the incoming API requests on a specific route.
        :param 'GetApiDeploymentSpecificationRouteRequestPoliciesQueryParameterTransformationsArgs' query_parameter_transformations: A set of transformations to apply to query parameters that pass through the gateway.
        :param 'GetApiDeploymentSpecificationRouteRequestPoliciesQueryParameterValidationsArgs' query_parameter_validations: Validate the URL query parameters on the incoming API requests on a specific route.
        :param 'GetApiDeploymentSpecificationRouteRequestPoliciesResponseCacheLookupArgs' response_cache_lookup: Base policy for Response Cache lookup.
        """
        pulumi.set(__self__, "authorization", authorization)
        pulumi.set(__self__, "body_validation", body_validation)
        pulumi.set(__self__, "cors", cors)
        pulumi.set(__self__, "header_transformations", header_transformations)
        pulumi.set(__self__, "header_validations", header_validations)
        pulumi.set(__self__, "query_parameter_transformations", query_parameter_transformations)
        pulumi.set(__self__, "query_parameter_validations", query_parameter_validations)
        pulumi.set(__self__, "response_cache_lookup", response_cache_lookup)

    @property
    @pulumi.getter
    def authorization(self) -> 'outputs.GetApiDeploymentSpecificationRouteRequestPoliciesAuthorizationResult':
        """
        If authentication has been performed, validate whether the request scope (if any) applies to this route. If no RouteAuthorizationPolicy is defined for a route, a policy with a type of AUTHENTICATION_ONLY is applied.
        """
        return pulumi.get(self, "authorization")

    @property
    @pulumi.getter(name="bodyValidation")
    def body_validation(self) -> 'outputs.GetApiDeploymentSpecificationRouteRequestPoliciesBodyValidationResult':
        """
        Validate the payload body of the incoming API requests on a specific route.
        """
        return pulumi.get(self, "body_validation")

    @property
    @pulumi.getter
    def cors(self) -> 'outputs.GetApiDeploymentSpecificationRouteRequestPoliciesCorsResult':
        """
        Enable CORS (Cross-Origin-Resource-Sharing) request handling.
        """
        return pulumi.get(self, "cors")

    @property
    @pulumi.getter(name="headerTransformations")
    def header_transformations(self) -> 'outputs.GetApiDeploymentSpecificationRouteRequestPoliciesHeaderTransformationsResult':
        """
        A set of transformations to apply to HTTP headers that pass through the gateway.
        """
        return pulumi.get(self, "header_transformations")

    @property
    @pulumi.getter(name="headerValidations")
    def header_validations(self) -> 'outputs.GetApiDeploymentSpecificationRouteRequestPoliciesHeaderValidationsResult':
        """
        Validate the HTTP headers on the incoming API requests on a specific route.
        """
        return pulumi.get(self, "header_validations")

    @property
    @pulumi.getter(name="queryParameterTransformations")
    def query_parameter_transformations(self) -> 'outputs.GetApiDeploymentSpecificationRouteRequestPoliciesQueryParameterTransformationsResult':
        """
        A set of transformations to apply to query parameters that pass through the gateway.
        """
        return pulumi.get(self, "query_parameter_transformations")

    @property
    @pulumi.getter(name="queryParameterValidations")
    def query_parameter_validations(self) -> 'outputs.GetApiDeploymentSpecificationRouteRequestPoliciesQueryParameterValidationsResult':
        """
        Validate the URL query parameters on the incoming API requests on a specific route.
        """
        return pulumi.get(self, "query_parameter_validations")

    @property
    @pulumi.getter(name="responseCacheLookup")
    def response_cache_lookup(self) -> 'outputs.GetApiDeploymentSpecificationRouteRequestPoliciesResponseCacheLookupResult':
        """
        Base policy for Response Cache lookup.
        """
        return pulumi.get(self, "response_cache_lookup")


@pulumi.output_type
class GetApiDeploymentSpecificationRouteRequestPoliciesAuthorizationResult(dict):
    def __init__(__self__, *,
                 allowed_scopes: Sequence[str],
                 type: str):
        """
        :param Sequence[str] allowed_scopes: A user whose scope includes any of these access ranges is allowed on this route. Access ranges are case-sensitive.
        :param str type: Type of the Response Cache Store Policy.
        """
        pulumi.set(__self__, "allowed_scopes", allowed_scopes)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="allowedScopes")
    def allowed_scopes(self) -> Sequence[str]:
        """
        A user whose scope includes any of these access ranges is allowed on this route. Access ranges are case-sensitive.
        """
        return pulumi.get(self, "allowed_scopes")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Type of the Response Cache Store Policy.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetApiDeploymentSpecificationRouteRequestPoliciesBodyValidationResult(dict):
    def __init__(__self__, *,
                 contents: Sequence['outputs.GetApiDeploymentSpecificationRouteRequestPoliciesBodyValidationContentResult'],
                 required: bool,
                 validation_mode: str):
        """
        :param Sequence['GetApiDeploymentSpecificationRouteRequestPoliciesBodyValidationContentArgs'] contents: The content of the request body.
        :param bool required: Determines if the parameter is required in the request.
        :param str validation_mode: Validation behavior mode.
        """
        pulumi.set(__self__, "contents", contents)
        pulumi.set(__self__, "required", required)
        pulumi.set(__self__, "validation_mode", validation_mode)

    @property
    @pulumi.getter
    def contents(self) -> Sequence['outputs.GetApiDeploymentSpecificationRouteRequestPoliciesBodyValidationContentResult']:
        """
        The content of the request body.
        """
        return pulumi.get(self, "contents")

    @property
    @pulumi.getter
    def required(self) -> bool:
        """
        Determines if the parameter is required in the request.
        """
        return pulumi.get(self, "required")

    @property
    @pulumi.getter(name="validationMode")
    def validation_mode(self) -> str:
        """
        Validation behavior mode.
        """
        return pulumi.get(self, "validation_mode")


@pulumi.output_type
class GetApiDeploymentSpecificationRouteRequestPoliciesBodyValidationContentResult(dict):
    def __init__(__self__, *,
                 media_type: str,
                 validation_type: str):
        """
        :param str media_type: The media type is a [media type range](https://tools.ietf.org/html/rfc7231#appendix-D) subset restricted to the following schema
        :param str validation_type: Validation type defines the content validation method.
        """
        pulumi.set(__self__, "media_type", media_type)
        pulumi.set(__self__, "validation_type", validation_type)

    @property
    @pulumi.getter(name="mediaType")
    def media_type(self) -> str:
        """
        The media type is a [media type range](https://tools.ietf.org/html/rfc7231#appendix-D) subset restricted to the following schema
        """
        return pulumi.get(self, "media_type")

    @property
    @pulumi.getter(name="validationType")
    def validation_type(self) -> str:
        """
        Validation type defines the content validation method.
        """
        return pulumi.get(self, "validation_type")


@pulumi.output_type
class GetApiDeploymentSpecificationRouteRequestPoliciesCorsResult(dict):
    def __init__(__self__, *,
                 allowed_headers: Sequence[str],
                 allowed_methods: Sequence[str],
                 allowed_origins: Sequence[str],
                 exposed_headers: Sequence[str],
                 is_allow_credentials_enabled: bool,
                 max_age_in_seconds: int):
        """
        :param Sequence[str] allowed_headers: The list of headers that will be allowed from the client via the Access-Control-Allow-Headers header. '*' will allow all headers.
        :param Sequence[str] allowed_methods: The list of allowed HTTP methods that will be returned for the preflight OPTIONS request in the Access-Control-Allow-Methods header. '*' will allow all methods.
        :param Sequence[str] allowed_origins: The list of allowed origins that the CORS handler will use to respond to CORS requests. The gateway will send the Access-Control-Allow-Origin header with the best origin match for the circumstances. '*' will match any origins, and 'null' will match queries from 'file:' origins. All other origins must be qualified with the scheme, full hostname, and port if necessary.
        :param Sequence[str] exposed_headers: The list of headers that the client will be allowed to see from the response as indicated by the Access-Control-Expose-Headers header. '*' will expose all headers.
        :param bool is_allow_credentials_enabled: Whether to send the Access-Control-Allow-Credentials header to allow CORS requests with cookies.
        :param int max_age_in_seconds: The time in seconds for the client to cache preflight responses. This is sent as the Access-Control-Max-Age if greater than 0.
        """
        pulumi.set(__self__, "allowed_headers", allowed_headers)
        pulumi.set(__self__, "allowed_methods", allowed_methods)
        pulumi.set(__self__, "allowed_origins", allowed_origins)
        pulumi.set(__self__, "exposed_headers", exposed_headers)
        pulumi.set(__self__, "is_allow_credentials_enabled", is_allow_credentials_enabled)
        pulumi.set(__self__, "max_age_in_seconds", max_age_in_seconds)

    @property
    @pulumi.getter(name="allowedHeaders")
    def allowed_headers(self) -> Sequence[str]:
        """
        The list of headers that will be allowed from the client via the Access-Control-Allow-Headers header. '*' will allow all headers.
        """
        return pulumi.get(self, "allowed_headers")

    @property
    @pulumi.getter(name="allowedMethods")
    def allowed_methods(self) -> Sequence[str]:
        """
        The list of allowed HTTP methods that will be returned for the preflight OPTIONS request in the Access-Control-Allow-Methods header. '*' will allow all methods.
        """
        return pulumi.get(self, "allowed_methods")

    @property
    @pulumi.getter(name="allowedOrigins")
    def allowed_origins(self) -> Sequence[str]:
        """
        The list of allowed origins that the CORS handler will use to respond to CORS requests. The gateway will send the Access-Control-Allow-Origin header with the best origin match for the circumstances. '*' will match any origins, and 'null' will match queries from 'file:' origins. All other origins must be qualified with the scheme, full hostname, and port if necessary.
        """
        return pulumi.get(self, "allowed_origins")

    @property
    @pulumi.getter(name="exposedHeaders")
    def exposed_headers(self) -> Sequence[str]:
        """
        The list of headers that the client will be allowed to see from the response as indicated by the Access-Control-Expose-Headers header. '*' will expose all headers.
        """
        return pulumi.get(self, "exposed_headers")

    @property
    @pulumi.getter(name="isAllowCredentialsEnabled")
    def is_allow_credentials_enabled(self) -> bool:
        """
        Whether to send the Access-Control-Allow-Credentials header to allow CORS requests with cookies.
        """
        return pulumi.get(self, "is_allow_credentials_enabled")

    @property
    @pulumi.getter(name="maxAgeInSeconds")
    def max_age_in_seconds(self) -> int:
        """
        The time in seconds for the client to cache preflight responses. This is sent as the Access-Control-Max-Age if greater than 0.
        """
        return pulumi.get(self, "max_age_in_seconds")


@pulumi.output_type
class GetApiDeploymentSpecificationRouteRequestPoliciesHeaderTransformationsResult(dict):
    def __init__(__self__, *,
                 filter_headers: 'outputs.GetApiDeploymentSpecificationRouteRequestPoliciesHeaderTransformationsFilterHeadersResult',
                 rename_headers: 'outputs.GetApiDeploymentSpecificationRouteRequestPoliciesHeaderTransformationsRenameHeadersResult',
                 set_headers: 'outputs.GetApiDeploymentSpecificationRouteRequestPoliciesHeaderTransformationsSetHeadersResult'):
        """
        :param 'GetApiDeploymentSpecificationRouteRequestPoliciesHeaderTransformationsFilterHeadersArgs' filter_headers: Filter HTTP headers as they pass through the gateway.  The gateway applies filters after other transformations, so any headers set or renamed must also be listed here when using an ALLOW type policy.
        :param 'GetApiDeploymentSpecificationRouteRequestPoliciesHeaderTransformationsRenameHeadersArgs' rename_headers: Rename HTTP headers as they pass through the gateway.
        :param 'GetApiDeploymentSpecificationRouteRequestPoliciesHeaderTransformationsSetHeadersArgs' set_headers: Set HTTP headers as they pass through the gateway.
        """
        pulumi.set(__self__, "filter_headers", filter_headers)
        pulumi.set(__self__, "rename_headers", rename_headers)
        pulumi.set(__self__, "set_headers", set_headers)

    @property
    @pulumi.getter(name="filterHeaders")
    def filter_headers(self) -> 'outputs.GetApiDeploymentSpecificationRouteRequestPoliciesHeaderTransformationsFilterHeadersResult':
        """
        Filter HTTP headers as they pass through the gateway.  The gateway applies filters after other transformations, so any headers set or renamed must also be listed here when using an ALLOW type policy.
        """
        return pulumi.get(self, "filter_headers")

    @property
    @pulumi.getter(name="renameHeaders")
    def rename_headers(self) -> 'outputs.GetApiDeploymentSpecificationRouteRequestPoliciesHeaderTransformationsRenameHeadersResult':
        """
        Rename HTTP headers as they pass through the gateway.
        """
        return pulumi.get(self, "rename_headers")

    @property
    @pulumi.getter(name="setHeaders")
    def set_headers(self) -> 'outputs.GetApiDeploymentSpecificationRouteRequestPoliciesHeaderTransformationsSetHeadersResult':
        """
        Set HTTP headers as they pass through the gateway.
        """
        return pulumi.get(self, "set_headers")


@pulumi.output_type
class GetApiDeploymentSpecificationRouteRequestPoliciesHeaderTransformationsFilterHeadersResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetApiDeploymentSpecificationRouteRequestPoliciesHeaderTransformationsFilterHeadersItemResult'],
                 type: str):
        """
        :param Sequence['GetApiDeploymentSpecificationRouteRequestPoliciesHeaderTransformationsFilterHeadersItemArgs'] items: The list of headers.
        :param str type: Type of the Response Cache Store Policy.
        """
        pulumi.set(__self__, "items", items)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetApiDeploymentSpecificationRouteRequestPoliciesHeaderTransformationsFilterHeadersItemResult']:
        """
        The list of headers.
        """
        return pulumi.get(self, "items")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Type of the Response Cache Store Policy.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetApiDeploymentSpecificationRouteRequestPoliciesHeaderTransformationsFilterHeadersItemResult(dict):
    def __init__(__self__, *,
                 name: str):
        """
        :param str name: The case-insensitive name of the header.  This name must be unique across transformation policies.
        """
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The case-insensitive name of the header.  This name must be unique across transformation policies.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetApiDeploymentSpecificationRouteRequestPoliciesHeaderTransformationsRenameHeadersResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetApiDeploymentSpecificationRouteRequestPoliciesHeaderTransformationsRenameHeadersItemResult']):
        """
        :param Sequence['GetApiDeploymentSpecificationRouteRequestPoliciesHeaderTransformationsRenameHeadersItemArgs'] items: The list of headers.
        """
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetApiDeploymentSpecificationRouteRequestPoliciesHeaderTransformationsRenameHeadersItemResult']:
        """
        The list of headers.
        """
        return pulumi.get(self, "items")


@pulumi.output_type
class GetApiDeploymentSpecificationRouteRequestPoliciesHeaderTransformationsRenameHeadersItemResult(dict):
    def __init__(__self__, *,
                 from_: str,
                 to: str):
        """
        :param str from_: The original case-insensitive name of the header.  This name must be unique across transformation policies.
        :param str to: The new name of the header.  This name must be unique across transformation policies.
        """
        pulumi.set(__self__, "from_", from_)
        pulumi.set(__self__, "to", to)

    @property
    @pulumi.getter(name="from")
    def from_(self) -> str:
        """
        The original case-insensitive name of the header.  This name must be unique across transformation policies.
        """
        return pulumi.get(self, "from_")

    @property
    @pulumi.getter
    def to(self) -> str:
        """
        The new name of the header.  This name must be unique across transformation policies.
        """
        return pulumi.get(self, "to")


@pulumi.output_type
class GetApiDeploymentSpecificationRouteRequestPoliciesHeaderTransformationsSetHeadersResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetApiDeploymentSpecificationRouteRequestPoliciesHeaderTransformationsSetHeadersItemResult']):
        """
        :param Sequence['GetApiDeploymentSpecificationRouteRequestPoliciesHeaderTransformationsSetHeadersItemArgs'] items: The list of headers.
        """
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetApiDeploymentSpecificationRouteRequestPoliciesHeaderTransformationsSetHeadersItemResult']:
        """
        The list of headers.
        """
        return pulumi.get(self, "items")


@pulumi.output_type
class GetApiDeploymentSpecificationRouteRequestPoliciesHeaderTransformationsSetHeadersItemResult(dict):
    def __init__(__self__, *,
                 if_exists: str,
                 name: str,
                 values: Sequence[str]):
        """
        :param str if_exists: If a header with the same name already exists in the request, OVERWRITE will overwrite the value, APPEND will append to the existing value, or SKIP will keep the existing value.
        :param str name: The case-insensitive name of the header.  This name must be unique across transformation policies.
        :param Sequence[str] values: A list of new values.  Each value can be a constant or may include one or more expressions enclosed within ${} delimiters.
        """
        pulumi.set(__self__, "if_exists", if_exists)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter(name="ifExists")
    def if_exists(self) -> str:
        """
        If a header with the same name already exists in the request, OVERWRITE will overwrite the value, APPEND will append to the existing value, or SKIP will keep the existing value.
        """
        return pulumi.get(self, "if_exists")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The case-insensitive name of the header.  This name must be unique across transformation policies.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        """
        A list of new values.  Each value can be a constant or may include one or more expressions enclosed within ${} delimiters.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class GetApiDeploymentSpecificationRouteRequestPoliciesHeaderValidationsResult(dict):
    def __init__(__self__, *,
                 headers: Sequence['outputs.GetApiDeploymentSpecificationRouteRequestPoliciesHeaderValidationsHeaderResult'],
                 validation_mode: str):
        """
        :param str validation_mode: Validation behavior mode.
        """
        pulumi.set(__self__, "headers", headers)
        pulumi.set(__self__, "validation_mode", validation_mode)

    @property
    @pulumi.getter
    def headers(self) -> Sequence['outputs.GetApiDeploymentSpecificationRouteRequestPoliciesHeaderValidationsHeaderResult']:
        return pulumi.get(self, "headers")

    @property
    @pulumi.getter(name="validationMode")
    def validation_mode(self) -> str:
        """
        Validation behavior mode.
        """
        return pulumi.get(self, "validation_mode")


@pulumi.output_type
class GetApiDeploymentSpecificationRouteRequestPoliciesHeaderValidationsHeaderResult(dict):
    def __init__(__self__, *,
                 name: str,
                 required: bool):
        """
        :param str name: The case-insensitive name of the header.  This name must be unique across transformation policies.
        :param bool required: Determines if the parameter is required in the request.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "required", required)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The case-insensitive name of the header.  This name must be unique across transformation policies.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def required(self) -> bool:
        """
        Determines if the parameter is required in the request.
        """
        return pulumi.get(self, "required")


@pulumi.output_type
class GetApiDeploymentSpecificationRouteRequestPoliciesQueryParameterTransformationsResult(dict):
    def __init__(__self__, *,
                 filter_query_parameters: 'outputs.GetApiDeploymentSpecificationRouteRequestPoliciesQueryParameterTransformationsFilterQueryParametersResult',
                 rename_query_parameters: 'outputs.GetApiDeploymentSpecificationRouteRequestPoliciesQueryParameterTransformationsRenameQueryParametersResult',
                 set_query_parameters: 'outputs.GetApiDeploymentSpecificationRouteRequestPoliciesQueryParameterTransformationsSetQueryParametersResult'):
        """
        :param 'GetApiDeploymentSpecificationRouteRequestPoliciesQueryParameterTransformationsFilterQueryParametersArgs' filter_query_parameters: Filter parameters from the query string as they pass through the gateway.  The gateway applies filters after other transformations, so any parameters set or renamed must also be listed here when using an ALLOW type policy.
        :param 'GetApiDeploymentSpecificationRouteRequestPoliciesQueryParameterTransformationsRenameQueryParametersArgs' rename_query_parameters: Rename parameters on the query string as they pass through the gateway.
        :param 'GetApiDeploymentSpecificationRouteRequestPoliciesQueryParameterTransformationsSetQueryParametersArgs' set_query_parameters: Set parameters on the query string as they pass through the gateway.
        """
        pulumi.set(__self__, "filter_query_parameters", filter_query_parameters)
        pulumi.set(__self__, "rename_query_parameters", rename_query_parameters)
        pulumi.set(__self__, "set_query_parameters", set_query_parameters)

    @property
    @pulumi.getter(name="filterQueryParameters")
    def filter_query_parameters(self) -> 'outputs.GetApiDeploymentSpecificationRouteRequestPoliciesQueryParameterTransformationsFilterQueryParametersResult':
        """
        Filter parameters from the query string as they pass through the gateway.  The gateway applies filters after other transformations, so any parameters set or renamed must also be listed here when using an ALLOW type policy.
        """
        return pulumi.get(self, "filter_query_parameters")

    @property
    @pulumi.getter(name="renameQueryParameters")
    def rename_query_parameters(self) -> 'outputs.GetApiDeploymentSpecificationRouteRequestPoliciesQueryParameterTransformationsRenameQueryParametersResult':
        """
        Rename parameters on the query string as they pass through the gateway.
        """
        return pulumi.get(self, "rename_query_parameters")

    @property
    @pulumi.getter(name="setQueryParameters")
    def set_query_parameters(self) -> 'outputs.GetApiDeploymentSpecificationRouteRequestPoliciesQueryParameterTransformationsSetQueryParametersResult':
        """
        Set parameters on the query string as they pass through the gateway.
        """
        return pulumi.get(self, "set_query_parameters")


@pulumi.output_type
class GetApiDeploymentSpecificationRouteRequestPoliciesQueryParameterTransformationsFilterQueryParametersResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetApiDeploymentSpecificationRouteRequestPoliciesQueryParameterTransformationsFilterQueryParametersItemResult'],
                 type: str):
        """
        :param Sequence['GetApiDeploymentSpecificationRouteRequestPoliciesQueryParameterTransformationsFilterQueryParametersItemArgs'] items: The list of headers.
        :param str type: Type of the Response Cache Store Policy.
        """
        pulumi.set(__self__, "items", items)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetApiDeploymentSpecificationRouteRequestPoliciesQueryParameterTransformationsFilterQueryParametersItemResult']:
        """
        The list of headers.
        """
        return pulumi.get(self, "items")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Type of the Response Cache Store Policy.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetApiDeploymentSpecificationRouteRequestPoliciesQueryParameterTransformationsFilterQueryParametersItemResult(dict):
    def __init__(__self__, *,
                 name: str):
        """
        :param str name: The case-insensitive name of the header.  This name must be unique across transformation policies.
        """
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The case-insensitive name of the header.  This name must be unique across transformation policies.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetApiDeploymentSpecificationRouteRequestPoliciesQueryParameterTransformationsRenameQueryParametersResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetApiDeploymentSpecificationRouteRequestPoliciesQueryParameterTransformationsRenameQueryParametersItemResult']):
        """
        :param Sequence['GetApiDeploymentSpecificationRouteRequestPoliciesQueryParameterTransformationsRenameQueryParametersItemArgs'] items: The list of headers.
        """
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetApiDeploymentSpecificationRouteRequestPoliciesQueryParameterTransformationsRenameQueryParametersItemResult']:
        """
        The list of headers.
        """
        return pulumi.get(self, "items")


@pulumi.output_type
class GetApiDeploymentSpecificationRouteRequestPoliciesQueryParameterTransformationsRenameQueryParametersItemResult(dict):
    def __init__(__self__, *,
                 from_: str,
                 to: str):
        """
        :param str from_: The original case-insensitive name of the header.  This name must be unique across transformation policies.
        :param str to: The new name of the header.  This name must be unique across transformation policies.
        """
        pulumi.set(__self__, "from_", from_)
        pulumi.set(__self__, "to", to)

    @property
    @pulumi.getter(name="from")
    def from_(self) -> str:
        """
        The original case-insensitive name of the header.  This name must be unique across transformation policies.
        """
        return pulumi.get(self, "from_")

    @property
    @pulumi.getter
    def to(self) -> str:
        """
        The new name of the header.  This name must be unique across transformation policies.
        """
        return pulumi.get(self, "to")


@pulumi.output_type
class GetApiDeploymentSpecificationRouteRequestPoliciesQueryParameterTransformationsSetQueryParametersResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetApiDeploymentSpecificationRouteRequestPoliciesQueryParameterTransformationsSetQueryParametersItemResult']):
        """
        :param Sequence['GetApiDeploymentSpecificationRouteRequestPoliciesQueryParameterTransformationsSetQueryParametersItemArgs'] items: The list of headers.
        """
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetApiDeploymentSpecificationRouteRequestPoliciesQueryParameterTransformationsSetQueryParametersItemResult']:
        """
        The list of headers.
        """
        return pulumi.get(self, "items")


@pulumi.output_type
class GetApiDeploymentSpecificationRouteRequestPoliciesQueryParameterTransformationsSetQueryParametersItemResult(dict):
    def __init__(__self__, *,
                 if_exists: str,
                 name: str,
                 values: Sequence[str]):
        """
        :param str if_exists: If a header with the same name already exists in the request, OVERWRITE will overwrite the value, APPEND will append to the existing value, or SKIP will keep the existing value.
        :param str name: The case-insensitive name of the header.  This name must be unique across transformation policies.
        :param Sequence[str] values: A list of new values.  Each value can be a constant or may include one or more expressions enclosed within ${} delimiters.
        """
        pulumi.set(__self__, "if_exists", if_exists)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter(name="ifExists")
    def if_exists(self) -> str:
        """
        If a header with the same name already exists in the request, OVERWRITE will overwrite the value, APPEND will append to the existing value, or SKIP will keep the existing value.
        """
        return pulumi.get(self, "if_exists")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The case-insensitive name of the header.  This name must be unique across transformation policies.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        """
        A list of new values.  Each value can be a constant or may include one or more expressions enclosed within ${} delimiters.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class GetApiDeploymentSpecificationRouteRequestPoliciesQueryParameterValidationsResult(dict):
    def __init__(__self__, *,
                 parameters: Sequence['outputs.GetApiDeploymentSpecificationRouteRequestPoliciesQueryParameterValidationsParameterResult'],
                 validation_mode: str):
        """
        :param str validation_mode: Validation behavior mode.
        """
        pulumi.set(__self__, "parameters", parameters)
        pulumi.set(__self__, "validation_mode", validation_mode)

    @property
    @pulumi.getter
    def parameters(self) -> Sequence['outputs.GetApiDeploymentSpecificationRouteRequestPoliciesQueryParameterValidationsParameterResult']:
        return pulumi.get(self, "parameters")

    @property
    @pulumi.getter(name="validationMode")
    def validation_mode(self) -> str:
        """
        Validation behavior mode.
        """
        return pulumi.get(self, "validation_mode")


@pulumi.output_type
class GetApiDeploymentSpecificationRouteRequestPoliciesQueryParameterValidationsParameterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 required: bool):
        """
        :param str name: The case-insensitive name of the header.  This name must be unique across transformation policies.
        :param bool required: Determines if the parameter is required in the request.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "required", required)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The case-insensitive name of the header.  This name must be unique across transformation policies.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def required(self) -> bool:
        """
        Determines if the parameter is required in the request.
        """
        return pulumi.get(self, "required")


@pulumi.output_type
class GetApiDeploymentSpecificationRouteRequestPoliciesResponseCacheLookupResult(dict):
    def __init__(__self__, *,
                 cache_key_additions: Sequence[str],
                 is_enabled: bool,
                 is_private_caching_enabled: bool,
                 type: str):
        """
        :param Sequence[str] cache_key_additions: A list of context expressions whose values will be added to the base cache key. Values should contain an expression enclosed within ${} delimiters. Only the request context is available.
        :param bool is_enabled: Whether this policy is currently enabled.
        :param bool is_private_caching_enabled: Set true to allow caching responses where the request has an Authorization header. Ensure you have configured your  cache key additions to get the level of isolation across authenticated requests that you require.
        :param str type: Type of the Response Cache Store Policy.
        """
        pulumi.set(__self__, "cache_key_additions", cache_key_additions)
        pulumi.set(__self__, "is_enabled", is_enabled)
        pulumi.set(__self__, "is_private_caching_enabled", is_private_caching_enabled)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="cacheKeyAdditions")
    def cache_key_additions(self) -> Sequence[str]:
        """
        A list of context expressions whose values will be added to the base cache key. Values should contain an expression enclosed within ${} delimiters. Only the request context is available.
        """
        return pulumi.get(self, "cache_key_additions")

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> bool:
        """
        Whether this policy is currently enabled.
        """
        return pulumi.get(self, "is_enabled")

    @property
    @pulumi.getter(name="isPrivateCachingEnabled")
    def is_private_caching_enabled(self) -> bool:
        """
        Set true to allow caching responses where the request has an Authorization header. Ensure you have configured your  cache key additions to get the level of isolation across authenticated requests that you require.
        """
        return pulumi.get(self, "is_private_caching_enabled")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Type of the Response Cache Store Policy.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetApiDeploymentSpecificationRouteResponsePoliciesResult(dict):
    def __init__(__self__, *,
                 header_transformations: 'outputs.GetApiDeploymentSpecificationRouteResponsePoliciesHeaderTransformationsResult',
                 response_cache_store: 'outputs.GetApiDeploymentSpecificationRouteResponsePoliciesResponseCacheStoreResult'):
        """
        :param 'GetApiDeploymentSpecificationRouteResponsePoliciesHeaderTransformationsArgs' header_transformations: A set of transformations to apply to HTTP headers that pass through the gateway.
        :param 'GetApiDeploymentSpecificationRouteResponsePoliciesResponseCacheStoreArgs' response_cache_store: Base policy for how a response from a backend is cached in the Response Cache.
        """
        pulumi.set(__self__, "header_transformations", header_transformations)
        pulumi.set(__self__, "response_cache_store", response_cache_store)

    @property
    @pulumi.getter(name="headerTransformations")
    def header_transformations(self) -> 'outputs.GetApiDeploymentSpecificationRouteResponsePoliciesHeaderTransformationsResult':
        """
        A set of transformations to apply to HTTP headers that pass through the gateway.
        """
        return pulumi.get(self, "header_transformations")

    @property
    @pulumi.getter(name="responseCacheStore")
    def response_cache_store(self) -> 'outputs.GetApiDeploymentSpecificationRouteResponsePoliciesResponseCacheStoreResult':
        """
        Base policy for how a response from a backend is cached in the Response Cache.
        """
        return pulumi.get(self, "response_cache_store")


@pulumi.output_type
class GetApiDeploymentSpecificationRouteResponsePoliciesHeaderTransformationsResult(dict):
    def __init__(__self__, *,
                 filter_headers: 'outputs.GetApiDeploymentSpecificationRouteResponsePoliciesHeaderTransformationsFilterHeadersResult',
                 rename_headers: 'outputs.GetApiDeploymentSpecificationRouteResponsePoliciesHeaderTransformationsRenameHeadersResult',
                 set_headers: 'outputs.GetApiDeploymentSpecificationRouteResponsePoliciesHeaderTransformationsSetHeadersResult'):
        """
        :param 'GetApiDeploymentSpecificationRouteResponsePoliciesHeaderTransformationsFilterHeadersArgs' filter_headers: Filter HTTP headers as they pass through the gateway.  The gateway applies filters after other transformations, so any headers set or renamed must also be listed here when using an ALLOW type policy.
        :param 'GetApiDeploymentSpecificationRouteResponsePoliciesHeaderTransformationsRenameHeadersArgs' rename_headers: Rename HTTP headers as they pass through the gateway.
        :param 'GetApiDeploymentSpecificationRouteResponsePoliciesHeaderTransformationsSetHeadersArgs' set_headers: Set HTTP headers as they pass through the gateway.
        """
        pulumi.set(__self__, "filter_headers", filter_headers)
        pulumi.set(__self__, "rename_headers", rename_headers)
        pulumi.set(__self__, "set_headers", set_headers)

    @property
    @pulumi.getter(name="filterHeaders")
    def filter_headers(self) -> 'outputs.GetApiDeploymentSpecificationRouteResponsePoliciesHeaderTransformationsFilterHeadersResult':
        """
        Filter HTTP headers as they pass through the gateway.  The gateway applies filters after other transformations, so any headers set or renamed must also be listed here when using an ALLOW type policy.
        """
        return pulumi.get(self, "filter_headers")

    @property
    @pulumi.getter(name="renameHeaders")
    def rename_headers(self) -> 'outputs.GetApiDeploymentSpecificationRouteResponsePoliciesHeaderTransformationsRenameHeadersResult':
        """
        Rename HTTP headers as they pass through the gateway.
        """
        return pulumi.get(self, "rename_headers")

    @property
    @pulumi.getter(name="setHeaders")
    def set_headers(self) -> 'outputs.GetApiDeploymentSpecificationRouteResponsePoliciesHeaderTransformationsSetHeadersResult':
        """
        Set HTTP headers as they pass through the gateway.
        """
        return pulumi.get(self, "set_headers")


@pulumi.output_type
class GetApiDeploymentSpecificationRouteResponsePoliciesHeaderTransformationsFilterHeadersResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetApiDeploymentSpecificationRouteResponsePoliciesHeaderTransformationsFilterHeadersItemResult'],
                 type: str):
        """
        :param Sequence['GetApiDeploymentSpecificationRouteResponsePoliciesHeaderTransformationsFilterHeadersItemArgs'] items: The list of headers.
        :param str type: Type of the Response Cache Store Policy.
        """
        pulumi.set(__self__, "items", items)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetApiDeploymentSpecificationRouteResponsePoliciesHeaderTransformationsFilterHeadersItemResult']:
        """
        The list of headers.
        """
        return pulumi.get(self, "items")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Type of the Response Cache Store Policy.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetApiDeploymentSpecificationRouteResponsePoliciesHeaderTransformationsFilterHeadersItemResult(dict):
    def __init__(__self__, *,
                 name: str):
        """
        :param str name: The case-insensitive name of the header.  This name must be unique across transformation policies.
        """
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The case-insensitive name of the header.  This name must be unique across transformation policies.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetApiDeploymentSpecificationRouteResponsePoliciesHeaderTransformationsRenameHeadersResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetApiDeploymentSpecificationRouteResponsePoliciesHeaderTransformationsRenameHeadersItemResult']):
        """
        :param Sequence['GetApiDeploymentSpecificationRouteResponsePoliciesHeaderTransformationsRenameHeadersItemArgs'] items: The list of headers.
        """
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetApiDeploymentSpecificationRouteResponsePoliciesHeaderTransformationsRenameHeadersItemResult']:
        """
        The list of headers.
        """
        return pulumi.get(self, "items")


@pulumi.output_type
class GetApiDeploymentSpecificationRouteResponsePoliciesHeaderTransformationsRenameHeadersItemResult(dict):
    def __init__(__self__, *,
                 from_: str,
                 to: str):
        """
        :param str from_: The original case-insensitive name of the header.  This name must be unique across transformation policies.
        :param str to: The new name of the header.  This name must be unique across transformation policies.
        """
        pulumi.set(__self__, "from_", from_)
        pulumi.set(__self__, "to", to)

    @property
    @pulumi.getter(name="from")
    def from_(self) -> str:
        """
        The original case-insensitive name of the header.  This name must be unique across transformation policies.
        """
        return pulumi.get(self, "from_")

    @property
    @pulumi.getter
    def to(self) -> str:
        """
        The new name of the header.  This name must be unique across transformation policies.
        """
        return pulumi.get(self, "to")


@pulumi.output_type
class GetApiDeploymentSpecificationRouteResponsePoliciesHeaderTransformationsSetHeadersResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetApiDeploymentSpecificationRouteResponsePoliciesHeaderTransformationsSetHeadersItemResult']):
        """
        :param Sequence['GetApiDeploymentSpecificationRouteResponsePoliciesHeaderTransformationsSetHeadersItemArgs'] items: The list of headers.
        """
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetApiDeploymentSpecificationRouteResponsePoliciesHeaderTransformationsSetHeadersItemResult']:
        """
        The list of headers.
        """
        return pulumi.get(self, "items")


@pulumi.output_type
class GetApiDeploymentSpecificationRouteResponsePoliciesHeaderTransformationsSetHeadersItemResult(dict):
    def __init__(__self__, *,
                 if_exists: str,
                 name: str,
                 values: Sequence[str]):
        """
        :param str if_exists: If a header with the same name already exists in the request, OVERWRITE will overwrite the value, APPEND will append to the existing value, or SKIP will keep the existing value.
        :param str name: The case-insensitive name of the header.  This name must be unique across transformation policies.
        :param Sequence[str] values: A list of new values.  Each value can be a constant or may include one or more expressions enclosed within ${} delimiters.
        """
        pulumi.set(__self__, "if_exists", if_exists)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter(name="ifExists")
    def if_exists(self) -> str:
        """
        If a header with the same name already exists in the request, OVERWRITE will overwrite the value, APPEND will append to the existing value, or SKIP will keep the existing value.
        """
        return pulumi.get(self, "if_exists")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The case-insensitive name of the header.  This name must be unique across transformation policies.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        """
        A list of new values.  Each value can be a constant or may include one or more expressions enclosed within ${} delimiters.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class GetApiDeploymentSpecificationRouteResponsePoliciesResponseCacheStoreResult(dict):
    def __init__(__self__, *,
                 time_to_live_in_seconds: int,
                 type: str):
        """
        :param int time_to_live_in_seconds: Sets the number of seconds for a response from a backend being stored in the Response Cache before it expires.
        :param str type: Type of the Response Cache Store Policy.
        """
        pulumi.set(__self__, "time_to_live_in_seconds", time_to_live_in_seconds)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="timeToLiveInSeconds")
    def time_to_live_in_seconds(self) -> int:
        """
        Sets the number of seconds for a response from a backend being stored in the Response Cache before it expires.
        """
        return pulumi.get(self, "time_to_live_in_seconds")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Type of the Response Cache Store Policy.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetApiValidationResultResult(dict):
    def __init__(__self__, *,
                 name: str,
                 result: str):
        """
        :param str name: Name of the validation.
        :param str result: Result of the validation.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "result", result)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the validation.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def result(self) -> str:
        """
        Result of the validation.
        """
        return pulumi.get(self, "result")


@pulumi.output_type
class GetApiValidationValidationResult(dict):
    def __init__(__self__, *,
                 details: Sequence['outputs.GetApiValidationValidationDetailResult'],
                 name: str,
                 result: str):
        """
        :param Sequence['GetApiValidationValidationDetailArgs'] details: Details of validation.
        :param str name: Name of the validation.
        :param str result: Result of the validation.
        """
        pulumi.set(__self__, "details", details)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "result", result)

    @property
    @pulumi.getter
    def details(self) -> Sequence['outputs.GetApiValidationValidationDetailResult']:
        """
        Details of validation.
        """
        return pulumi.get(self, "details")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the validation.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def result(self) -> str:
        """
        Result of the validation.
        """
        return pulumi.get(self, "result")


@pulumi.output_type
class GetApiValidationValidationDetailResult(dict):
    def __init__(__self__, *,
                 msg: str,
                 severity: str,
                 srcs: Sequence['outputs.GetApiValidationValidationDetailSrcResult']):
        """
        :param str msg: Description of the warning/error.
        :param str severity: Severity of the issue.
        :param Sequence['GetApiValidationValidationDetailSrcArgs'] srcs: Position of the issue in the specification file (line, column).
        """
        pulumi.set(__self__, "msg", msg)
        pulumi.set(__self__, "severity", severity)
        pulumi.set(__self__, "srcs", srcs)

    @property
    @pulumi.getter
    def msg(self) -> str:
        """
        Description of the warning/error.
        """
        return pulumi.get(self, "msg")

    @property
    @pulumi.getter
    def severity(self) -> str:
        """
        Severity of the issue.
        """
        return pulumi.get(self, "severity")

    @property
    @pulumi.getter
    def srcs(self) -> Sequence['outputs.GetApiValidationValidationDetailSrcResult']:
        """
        Position of the issue in the specification file (line, column).
        """
        return pulumi.get(self, "srcs")


@pulumi.output_type
class GetApiValidationValidationDetailSrcResult(dict):
    def __init__(__self__, *,
                 items: Sequence[Any]):
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence[Any]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetApisApiCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetApisApiCollectionItemResult']):
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetApisApiCollectionItemResult']:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetApisApiCollectionItemResult(dict):
    def __init__(__self__, *,
                 compartment_id: str,
                 content: str,
                 defined_tags: Mapping[str, Any],
                 display_name: str,
                 freeform_tags: Mapping[str, Any],
                 id: str,
                 lifecycle_details: str,
                 specification_type: str,
                 state: str,
                 time_created: str,
                 time_updated: str,
                 validation_results: Sequence['outputs.GetApisApiCollectionItemValidationResultResult']):
        """
        :param str compartment_id: The ocid of the compartment in which to list resources.
        :param Mapping[str, Any] defined_tags: Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Operations.CostCenter": "42"}`
        :param str display_name: A user-friendly name. Does not have to be unique, and it's changeable.  Example: `My new resource`
        :param Mapping[str, Any] freeform_tags: Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Department": "Finance"}`
        :param str id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the resource.
        :param str lifecycle_details: A message describing the current lifecycleState in more detail. For ACTIVE state it describes if the document has been validated and the possible values are:
               * 'New' for just updated API Specifications
               * 'Validating' for a document which is being validated.
               * 'Valid' the document has been validated without any errors or warnings
               * 'Warning' the document has been validated and contains warnings
               * 'Error' the document has been validated and contains errors
               * 'Failed' the document validation failed
               * 'Canceled' the document validation was canceled
        :param str specification_type: Type of API Specification file.
        :param str state: A filter to return only resources that match the given lifecycle state.  Example: `ACTIVE`
        :param str time_created: The time this resource was created. An RFC3339 formatted datetime string.
        :param str time_updated: The time this resource was last updated. An RFC3339 formatted datetime string.
        :param Sequence['GetApisApiCollectionItemValidationResultArgs'] validation_results: Status of each feature available from the API.
        """
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "content", content)
        pulumi.set(__self__, "defined_tags", defined_tags)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "freeform_tags", freeform_tags)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        pulumi.set(__self__, "specification_type", specification_type)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "time_created", time_created)
        pulumi.set(__self__, "time_updated", time_updated)
        pulumi.set(__self__, "validation_results", validation_results)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> str:
        """
        The ocid of the compartment in which to list resources.
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter
    def content(self) -> str:
        return pulumi.get(self, "content")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Mapping[str, Any]:
        """
        Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Operations.CostCenter": "42"}`
        """
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        A user-friendly name. Does not have to be unique, and it's changeable.  Example: `My new resource`
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Mapping[str, Any]:
        """
        Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Department": "Finance"}`
        """
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> str:
        """
        A message describing the current lifecycleState in more detail. For ACTIVE state it describes if the document has been validated and the possible values are:
        * 'New' for just updated API Specifications
        * 'Validating' for a document which is being validated.
        * 'Valid' the document has been validated without any errors or warnings
        * 'Warning' the document has been validated and contains warnings
        * 'Error' the document has been validated and contains errors
        * 'Failed' the document validation failed
        * 'Canceled' the document validation was canceled
        """
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter(name="specificationType")
    def specification_type(self) -> str:
        """
        Type of API Specification file.
        """
        return pulumi.get(self, "specification_type")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        A filter to return only resources that match the given lifecycle state.  Example: `ACTIVE`
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> str:
        """
        The time this resource was created. An RFC3339 formatted datetime string.
        """
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> str:
        """
        The time this resource was last updated. An RFC3339 formatted datetime string.
        """
        return pulumi.get(self, "time_updated")

    @property
    @pulumi.getter(name="validationResults")
    def validation_results(self) -> Sequence['outputs.GetApisApiCollectionItemValidationResultResult']:
        """
        Status of each feature available from the API.
        """
        return pulumi.get(self, "validation_results")


@pulumi.output_type
class GetApisApiCollectionItemValidationResultResult(dict):
    def __init__(__self__, *,
                 name: str,
                 result: str):
        """
        :param str name: Name of the validation.
        :param str result: Result of the validation.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "result", result)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the validation.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def result(self) -> str:
        """
        Result of the validation.
        """
        return pulumi.get(self, "result")


@pulumi.output_type
class GetApisFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        """
        :param str name: Name of the validation.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the validation.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetCertificatesCertificateCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetCertificatesCertificateCollectionItemResult']):
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetCertificatesCertificateCollectionItemResult']:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetCertificatesCertificateCollectionItemResult(dict):
    def __init__(__self__, *,
                 certificate: str,
                 compartment_id: str,
                 defined_tags: Mapping[str, Any],
                 display_name: str,
                 freeform_tags: Mapping[str, Any],
                 id: str,
                 intermediate_certificates: str,
                 lifecycle_details: str,
                 private_key: str,
                 state: str,
                 subject_names: Sequence[str],
                 time_created: str,
                 time_not_valid_after: str,
                 time_updated: str):
        """
        :param str certificate: The data of the leaf certificate in pem format.
        :param str compartment_id: The ocid of the compartment in which to list resources.
        :param Mapping[str, Any] defined_tags: Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Operations.CostCenter": "42"}`
        :param str display_name: A user-friendly name. Does not have to be unique, and it's changeable.  Example: `My new resource`
        :param Mapping[str, Any] freeform_tags: Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Department": "Finance"}`
        :param str id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the resource.
        :param str intermediate_certificates: The intermediate certificate data associated with the certificate in pem format.
        :param str lifecycle_details: A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in a Failed state.
        :param str state: A filter to return only resources that match the given lifecycle state.  Example: `ACTIVE` or `DELETED`
        :param Sequence[str] subject_names: The entity to be secured by the certificate and additional host names.
        :param str time_created: The time this resource was created. An RFC3339 formatted datetime string.
        :param str time_not_valid_after: The date and time the certificate will expire.
        :param str time_updated: The time this resource was last updated. An RFC3339 formatted datetime string.
        """
        pulumi.set(__self__, "certificate", certificate)
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "defined_tags", defined_tags)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "freeform_tags", freeform_tags)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "intermediate_certificates", intermediate_certificates)
        pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        pulumi.set(__self__, "private_key", private_key)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "subject_names", subject_names)
        pulumi.set(__self__, "time_created", time_created)
        pulumi.set(__self__, "time_not_valid_after", time_not_valid_after)
        pulumi.set(__self__, "time_updated", time_updated)

    @property
    @pulumi.getter
    def certificate(self) -> str:
        """
        The data of the leaf certificate in pem format.
        """
        return pulumi.get(self, "certificate")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> str:
        """
        The ocid of the compartment in which to list resources.
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Mapping[str, Any]:
        """
        Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Operations.CostCenter": "42"}`
        """
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        A user-friendly name. Does not have to be unique, and it's changeable.  Example: `My new resource`
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Mapping[str, Any]:
        """
        Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Department": "Finance"}`
        """
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="intermediateCertificates")
    def intermediate_certificates(self) -> str:
        """
        The intermediate certificate data associated with the certificate in pem format.
        """
        return pulumi.get(self, "intermediate_certificates")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> str:
        """
        A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in a Failed state.
        """
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter(name="privateKey")
    def private_key(self) -> str:
        return pulumi.get(self, "private_key")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        A filter to return only resources that match the given lifecycle state.  Example: `ACTIVE` or `DELETED`
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="subjectNames")
    def subject_names(self) -> Sequence[str]:
        """
        The entity to be secured by the certificate and additional host names.
        """
        return pulumi.get(self, "subject_names")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> str:
        """
        The time this resource was created. An RFC3339 formatted datetime string.
        """
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeNotValidAfter")
    def time_not_valid_after(self) -> str:
        """
        The date and time the certificate will expire.
        """
        return pulumi.get(self, "time_not_valid_after")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> str:
        """
        The time this resource was last updated. An RFC3339 formatted datetime string.
        """
        return pulumi.get(self, "time_updated")


@pulumi.output_type
class GetCertificatesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetDeploymentSpecificationResult(dict):
    def __init__(__self__, *,
                 logging_policies: 'outputs.GetDeploymentSpecificationLoggingPoliciesResult',
                 request_policies: 'outputs.GetDeploymentSpecificationRequestPoliciesResult',
                 routes: Sequence['outputs.GetDeploymentSpecificationRouteResult']):
        """
        :param 'GetDeploymentSpecificationLoggingPoliciesArgs' logging_policies: Policies controlling the pushing of logs to Oracle Cloud Infrastructure Public Logging.
        :param 'GetDeploymentSpecificationRequestPoliciesArgs' request_policies: Behavior applied to any requests received by the API on this route.
        :param Sequence['GetDeploymentSpecificationRouteArgs'] routes: A list of routes that this API exposes.
        """
        pulumi.set(__self__, "logging_policies", logging_policies)
        pulumi.set(__self__, "request_policies", request_policies)
        pulumi.set(__self__, "routes", routes)

    @property
    @pulumi.getter(name="loggingPolicies")
    def logging_policies(self) -> 'outputs.GetDeploymentSpecificationLoggingPoliciesResult':
        """
        Policies controlling the pushing of logs to Oracle Cloud Infrastructure Public Logging.
        """
        return pulumi.get(self, "logging_policies")

    @property
    @pulumi.getter(name="requestPolicies")
    def request_policies(self) -> 'outputs.GetDeploymentSpecificationRequestPoliciesResult':
        """
        Behavior applied to any requests received by the API on this route.
        """
        return pulumi.get(self, "request_policies")

    @property
    @pulumi.getter
    def routes(self) -> Sequence['outputs.GetDeploymentSpecificationRouteResult']:
        """
        A list of routes that this API exposes.
        """
        return pulumi.get(self, "routes")


@pulumi.output_type
class GetDeploymentSpecificationLoggingPoliciesResult(dict):
    def __init__(__self__, *,
                 access_log: 'outputs.GetDeploymentSpecificationLoggingPoliciesAccessLogResult',
                 execution_log: 'outputs.GetDeploymentSpecificationLoggingPoliciesExecutionLogResult'):
        """
        :param 'GetDeploymentSpecificationLoggingPoliciesAccessLogArgs' access_log: Configures the logging policies for the access logs of an API Deployment.
        :param 'GetDeploymentSpecificationLoggingPoliciesExecutionLogArgs' execution_log: Configures the logging policies for the execution logs of an API Deployment.
        """
        pulumi.set(__self__, "access_log", access_log)
        pulumi.set(__self__, "execution_log", execution_log)

    @property
    @pulumi.getter(name="accessLog")
    def access_log(self) -> 'outputs.GetDeploymentSpecificationLoggingPoliciesAccessLogResult':
        """
        Configures the logging policies for the access logs of an API Deployment.
        """
        return pulumi.get(self, "access_log")

    @property
    @pulumi.getter(name="executionLog")
    def execution_log(self) -> 'outputs.GetDeploymentSpecificationLoggingPoliciesExecutionLogResult':
        """
        Configures the logging policies for the execution logs of an API Deployment.
        """
        return pulumi.get(self, "execution_log")


@pulumi.output_type
class GetDeploymentSpecificationLoggingPoliciesAccessLogResult(dict):
    def __init__(__self__, *,
                 is_enabled: bool):
        """
        :param bool is_enabled: Whether this policy is currently enabled.
        """
        pulumi.set(__self__, "is_enabled", is_enabled)

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> bool:
        """
        Whether this policy is currently enabled.
        """
        return pulumi.get(self, "is_enabled")


@pulumi.output_type
class GetDeploymentSpecificationLoggingPoliciesExecutionLogResult(dict):
    def __init__(__self__, *,
                 is_enabled: bool,
                 log_level: str):
        """
        :param bool is_enabled: Whether this policy is currently enabled.
        :param str log_level: Specifies the log level used to control logging output of execution logs. Enabling logging at a given level also enables logging at all higher levels.
        """
        pulumi.set(__self__, "is_enabled", is_enabled)
        pulumi.set(__self__, "log_level", log_level)

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> bool:
        """
        Whether this policy is currently enabled.
        """
        return pulumi.get(self, "is_enabled")

    @property
    @pulumi.getter(name="logLevel")
    def log_level(self) -> str:
        """
        Specifies the log level used to control logging output of execution logs. Enabling logging at a given level also enables logging at all higher levels.
        """
        return pulumi.get(self, "log_level")


@pulumi.output_type
class GetDeploymentSpecificationRequestPoliciesResult(dict):
    def __init__(__self__, *,
                 authentication: 'outputs.GetDeploymentSpecificationRequestPoliciesAuthenticationResult',
                 cors: 'outputs.GetDeploymentSpecificationRequestPoliciesCorsResult',
                 rate_limiting: 'outputs.GetDeploymentSpecificationRequestPoliciesRateLimitingResult'):
        """
        :param 'GetDeploymentSpecificationRequestPoliciesAuthenticationArgs' authentication: Information on how to authenticate incoming requests.
        :param 'GetDeploymentSpecificationRequestPoliciesCorsArgs' cors: Enable CORS (Cross-Origin-Resource-Sharing) request handling.
        :param 'GetDeploymentSpecificationRequestPoliciesRateLimitingArgs' rate_limiting: Limit the number of requests that should be handled for the specified window using a specfic key.
        """
        pulumi.set(__self__, "authentication", authentication)
        pulumi.set(__self__, "cors", cors)
        pulumi.set(__self__, "rate_limiting", rate_limiting)

    @property
    @pulumi.getter
    def authentication(self) -> 'outputs.GetDeploymentSpecificationRequestPoliciesAuthenticationResult':
        """
        Information on how to authenticate incoming requests.
        """
        return pulumi.get(self, "authentication")

    @property
    @pulumi.getter
    def cors(self) -> 'outputs.GetDeploymentSpecificationRequestPoliciesCorsResult':
        """
        Enable CORS (Cross-Origin-Resource-Sharing) request handling.
        """
        return pulumi.get(self, "cors")

    @property
    @pulumi.getter(name="rateLimiting")
    def rate_limiting(self) -> 'outputs.GetDeploymentSpecificationRequestPoliciesRateLimitingResult':
        """
        Limit the number of requests that should be handled for the specified window using a specfic key.
        """
        return pulumi.get(self, "rate_limiting")


@pulumi.output_type
class GetDeploymentSpecificationRequestPoliciesAuthenticationResult(dict):
    def __init__(__self__, *,
                 audiences: Sequence[str],
                 function_id: str,
                 is_anonymous_access_allowed: bool,
                 issuers: Sequence[str],
                 max_clock_skew_in_seconds: float,
                 public_keys: 'outputs.GetDeploymentSpecificationRequestPoliciesAuthenticationPublicKeysResult',
                 token_auth_scheme: str,
                 token_header: str,
                 token_query_param: str,
                 type: str,
                 verify_claims: Sequence['outputs.GetDeploymentSpecificationRequestPoliciesAuthenticationVerifyClaimResult']):
        """
        :param Sequence[str] audiences: The list of intended recipients for the token.
        :param str function_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Oracle Functions function resource.
        :param bool is_anonymous_access_allowed: Whether an unauthenticated user may access the API. Must be "true" to enable ANONYMOUS route authorization.
        :param Sequence[str] issuers: A list of parties that could have issued the token.
        :param float max_clock_skew_in_seconds: The maximum expected time difference between the system clocks of the token issuer and the API Gateway.
        :param 'GetDeploymentSpecificationRequestPoliciesAuthenticationPublicKeysArgs' public_keys: A set of Public Keys that will be used to verify the JWT signature.
        :param str token_auth_scheme: The authentication scheme that is to be used when authenticating the token. This must to be provided if "tokenHeader" is specified.
        :param str token_header: The name of the header containing the authentication token.
        :param str token_query_param: The name of the query parameter containing the authentication token.
        :param str type: Type of the Response Cache Store Policy.
        :param Sequence['GetDeploymentSpecificationRequestPoliciesAuthenticationVerifyClaimArgs'] verify_claims: A list of claims which should be validated to consider the token valid.
        """
        pulumi.set(__self__, "audiences", audiences)
        pulumi.set(__self__, "function_id", function_id)
        pulumi.set(__self__, "is_anonymous_access_allowed", is_anonymous_access_allowed)
        pulumi.set(__self__, "issuers", issuers)
        pulumi.set(__self__, "max_clock_skew_in_seconds", max_clock_skew_in_seconds)
        pulumi.set(__self__, "public_keys", public_keys)
        pulumi.set(__self__, "token_auth_scheme", token_auth_scheme)
        pulumi.set(__self__, "token_header", token_header)
        pulumi.set(__self__, "token_query_param", token_query_param)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "verify_claims", verify_claims)

    @property
    @pulumi.getter
    def audiences(self) -> Sequence[str]:
        """
        The list of intended recipients for the token.
        """
        return pulumi.get(self, "audiences")

    @property
    @pulumi.getter(name="functionId")
    def function_id(self) -> str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Oracle Functions function resource.
        """
        return pulumi.get(self, "function_id")

    @property
    @pulumi.getter(name="isAnonymousAccessAllowed")
    def is_anonymous_access_allowed(self) -> bool:
        """
        Whether an unauthenticated user may access the API. Must be "true" to enable ANONYMOUS route authorization.
        """
        return pulumi.get(self, "is_anonymous_access_allowed")

    @property
    @pulumi.getter
    def issuers(self) -> Sequence[str]:
        """
        A list of parties that could have issued the token.
        """
        return pulumi.get(self, "issuers")

    @property
    @pulumi.getter(name="maxClockSkewInSeconds")
    def max_clock_skew_in_seconds(self) -> float:
        """
        The maximum expected time difference between the system clocks of the token issuer and the API Gateway.
        """
        return pulumi.get(self, "max_clock_skew_in_seconds")

    @property
    @pulumi.getter(name="publicKeys")
    def public_keys(self) -> 'outputs.GetDeploymentSpecificationRequestPoliciesAuthenticationPublicKeysResult':
        """
        A set of Public Keys that will be used to verify the JWT signature.
        """
        return pulumi.get(self, "public_keys")

    @property
    @pulumi.getter(name="tokenAuthScheme")
    def token_auth_scheme(self) -> str:
        """
        The authentication scheme that is to be used when authenticating the token. This must to be provided if "tokenHeader" is specified.
        """
        return pulumi.get(self, "token_auth_scheme")

    @property
    @pulumi.getter(name="tokenHeader")
    def token_header(self) -> str:
        """
        The name of the header containing the authentication token.
        """
        return pulumi.get(self, "token_header")

    @property
    @pulumi.getter(name="tokenQueryParam")
    def token_query_param(self) -> str:
        """
        The name of the query parameter containing the authentication token.
        """
        return pulumi.get(self, "token_query_param")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Type of the Response Cache Store Policy.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="verifyClaims")
    def verify_claims(self) -> Sequence['outputs.GetDeploymentSpecificationRequestPoliciesAuthenticationVerifyClaimResult']:
        """
        A list of claims which should be validated to consider the token valid.
        """
        return pulumi.get(self, "verify_claims")


@pulumi.output_type
class GetDeploymentSpecificationRequestPoliciesAuthenticationPublicKeysResult(dict):
    def __init__(__self__, *,
                 is_ssl_verify_disabled: bool,
                 keys: Sequence['outputs.GetDeploymentSpecificationRequestPoliciesAuthenticationPublicKeysKeyResult'],
                 max_cache_duration_in_hours: int,
                 type: str,
                 uri: str):
        """
        :param bool is_ssl_verify_disabled: Defines whether or not to uphold SSL verification.
        :param Sequence['GetDeploymentSpecificationRequestPoliciesAuthenticationPublicKeysKeyArgs'] keys: The set of static public keys.
        :param int max_cache_duration_in_hours: The duration for which the JWKS should be cached before it is fetched again.
        :param str type: Type of the Response Cache Store Policy.
        :param str uri: The uri from which to retrieve the key. It must be accessible without authentication.
        """
        pulumi.set(__self__, "is_ssl_verify_disabled", is_ssl_verify_disabled)
        pulumi.set(__self__, "keys", keys)
        pulumi.set(__self__, "max_cache_duration_in_hours", max_cache_duration_in_hours)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "uri", uri)

    @property
    @pulumi.getter(name="isSslVerifyDisabled")
    def is_ssl_verify_disabled(self) -> bool:
        """
        Defines whether or not to uphold SSL verification.
        """
        return pulumi.get(self, "is_ssl_verify_disabled")

    @property
    @pulumi.getter
    def keys(self) -> Sequence['outputs.GetDeploymentSpecificationRequestPoliciesAuthenticationPublicKeysKeyResult']:
        """
        The set of static public keys.
        """
        return pulumi.get(self, "keys")

    @property
    @pulumi.getter(name="maxCacheDurationInHours")
    def max_cache_duration_in_hours(self) -> int:
        """
        The duration for which the JWKS should be cached before it is fetched again.
        """
        return pulumi.get(self, "max_cache_duration_in_hours")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Type of the Response Cache Store Policy.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def uri(self) -> str:
        """
        The uri from which to retrieve the key. It must be accessible without authentication.
        """
        return pulumi.get(self, "uri")


@pulumi.output_type
class GetDeploymentSpecificationRequestPoliciesAuthenticationPublicKeysKeyResult(dict):
    def __init__(__self__, *,
                 alg: str,
                 e: str,
                 format: str,
                 key: str,
                 key_ops: Sequence[str],
                 kid: str,
                 kty: str,
                 n: str,
                 use: str):
        """
        :param str alg: The algorithm intended for use with this key.
        :param str e: The base64 url encoded exponent of the RSA public key represented by this key.
        :param str format: The format of the public key.
        :param str key: Name of the claim.
        :param Sequence[str] key_ops: The operations for which this key is to be used.
        :param str kid: A unique key ID. This key will be used to verify the signature of a JWT with matching "kid".
        :param str kty: The key type.
        :param str n: The base64 url encoded modulus of the RSA public key represented by this key.
        :param str use: The intended use of the public key.
        """
        pulumi.set(__self__, "alg", alg)
        pulumi.set(__self__, "e", e)
        pulumi.set(__self__, "format", format)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "key_ops", key_ops)
        pulumi.set(__self__, "kid", kid)
        pulumi.set(__self__, "kty", kty)
        pulumi.set(__self__, "n", n)
        pulumi.set(__self__, "use", use)

    @property
    @pulumi.getter
    def alg(self) -> str:
        """
        The algorithm intended for use with this key.
        """
        return pulumi.get(self, "alg")

    @property
    @pulumi.getter
    def e(self) -> str:
        """
        The base64 url encoded exponent of the RSA public key represented by this key.
        """
        return pulumi.get(self, "e")

    @property
    @pulumi.getter
    def format(self) -> str:
        """
        The format of the public key.
        """
        return pulumi.get(self, "format")

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        Name of the claim.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter(name="keyOps")
    def key_ops(self) -> Sequence[str]:
        """
        The operations for which this key is to be used.
        """
        return pulumi.get(self, "key_ops")

    @property
    @pulumi.getter
    def kid(self) -> str:
        """
        A unique key ID. This key will be used to verify the signature of a JWT with matching "kid".
        """
        return pulumi.get(self, "kid")

    @property
    @pulumi.getter
    def kty(self) -> str:
        """
        The key type.
        """
        return pulumi.get(self, "kty")

    @property
    @pulumi.getter
    def n(self) -> str:
        """
        The base64 url encoded modulus of the RSA public key represented by this key.
        """
        return pulumi.get(self, "n")

    @property
    @pulumi.getter
    def use(self) -> str:
        """
        The intended use of the public key.
        """
        return pulumi.get(self, "use")


@pulumi.output_type
class GetDeploymentSpecificationRequestPoliciesAuthenticationVerifyClaimResult(dict):
    def __init__(__self__, *,
                 is_required: bool,
                 key: str,
                 values: Sequence[str]):
        """
        :param bool is_required: Whether the claim is required to be present in the JWT or not. If set to "false", the claim values will be matched only if the claim is present in the JWT.
        :param str key: Name of the claim.
        :param Sequence[str] values: A list of new values.  Each value can be a constant or may include one or more expressions enclosed within ${} delimiters.
        """
        pulumi.set(__self__, "is_required", is_required)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter(name="isRequired")
    def is_required(self) -> bool:
        """
        Whether the claim is required to be present in the JWT or not. If set to "false", the claim values will be matched only if the claim is present in the JWT.
        """
        return pulumi.get(self, "is_required")

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        Name of the claim.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        """
        A list of new values.  Each value can be a constant or may include one or more expressions enclosed within ${} delimiters.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class GetDeploymentSpecificationRequestPoliciesCorsResult(dict):
    def __init__(__self__, *,
                 allowed_headers: Sequence[str],
                 allowed_methods: Sequence[str],
                 allowed_origins: Sequence[str],
                 exposed_headers: Sequence[str],
                 is_allow_credentials_enabled: bool,
                 max_age_in_seconds: int):
        """
        :param Sequence[str] allowed_headers: The list of headers that will be allowed from the client via the Access-Control-Allow-Headers header. '*' will allow all headers.
        :param Sequence[str] allowed_methods: The list of allowed HTTP methods that will be returned for the preflight OPTIONS request in the Access-Control-Allow-Methods header. '*' will allow all methods.
        :param Sequence[str] allowed_origins: The list of allowed origins that the CORS handler will use to respond to CORS requests. The gateway will send the Access-Control-Allow-Origin header with the best origin match for the circumstances. '*' will match any origins, and 'null' will match queries from 'file:' origins. All other origins must be qualified with the scheme, full hostname, and port if necessary.
        :param Sequence[str] exposed_headers: The list of headers that the client will be allowed to see from the response as indicated by the Access-Control-Expose-Headers header. '*' will expose all headers.
        :param bool is_allow_credentials_enabled: Whether to send the Access-Control-Allow-Credentials header to allow CORS requests with cookies.
        :param int max_age_in_seconds: The time in seconds for the client to cache preflight responses. This is sent as the Access-Control-Max-Age if greater than 0.
        """
        pulumi.set(__self__, "allowed_headers", allowed_headers)
        pulumi.set(__self__, "allowed_methods", allowed_methods)
        pulumi.set(__self__, "allowed_origins", allowed_origins)
        pulumi.set(__self__, "exposed_headers", exposed_headers)
        pulumi.set(__self__, "is_allow_credentials_enabled", is_allow_credentials_enabled)
        pulumi.set(__self__, "max_age_in_seconds", max_age_in_seconds)

    @property
    @pulumi.getter(name="allowedHeaders")
    def allowed_headers(self) -> Sequence[str]:
        """
        The list of headers that will be allowed from the client via the Access-Control-Allow-Headers header. '*' will allow all headers.
        """
        return pulumi.get(self, "allowed_headers")

    @property
    @pulumi.getter(name="allowedMethods")
    def allowed_methods(self) -> Sequence[str]:
        """
        The list of allowed HTTP methods that will be returned for the preflight OPTIONS request in the Access-Control-Allow-Methods header. '*' will allow all methods.
        """
        return pulumi.get(self, "allowed_methods")

    @property
    @pulumi.getter(name="allowedOrigins")
    def allowed_origins(self) -> Sequence[str]:
        """
        The list of allowed origins that the CORS handler will use to respond to CORS requests. The gateway will send the Access-Control-Allow-Origin header with the best origin match for the circumstances. '*' will match any origins, and 'null' will match queries from 'file:' origins. All other origins must be qualified with the scheme, full hostname, and port if necessary.
        """
        return pulumi.get(self, "allowed_origins")

    @property
    @pulumi.getter(name="exposedHeaders")
    def exposed_headers(self) -> Sequence[str]:
        """
        The list of headers that the client will be allowed to see from the response as indicated by the Access-Control-Expose-Headers header. '*' will expose all headers.
        """
        return pulumi.get(self, "exposed_headers")

    @property
    @pulumi.getter(name="isAllowCredentialsEnabled")
    def is_allow_credentials_enabled(self) -> bool:
        """
        Whether to send the Access-Control-Allow-Credentials header to allow CORS requests with cookies.
        """
        return pulumi.get(self, "is_allow_credentials_enabled")

    @property
    @pulumi.getter(name="maxAgeInSeconds")
    def max_age_in_seconds(self) -> int:
        """
        The time in seconds for the client to cache preflight responses. This is sent as the Access-Control-Max-Age if greater than 0.
        """
        return pulumi.get(self, "max_age_in_seconds")


@pulumi.output_type
class GetDeploymentSpecificationRequestPoliciesRateLimitingResult(dict):
    def __init__(__self__, *,
                 rate_in_requests_per_second: int,
                 rate_key: str):
        """
        :param int rate_in_requests_per_second: The maximum number of requests per second to allow.
        :param str rate_key: The key used to group requests together.
        """
        pulumi.set(__self__, "rate_in_requests_per_second", rate_in_requests_per_second)
        pulumi.set(__self__, "rate_key", rate_key)

    @property
    @pulumi.getter(name="rateInRequestsPerSecond")
    def rate_in_requests_per_second(self) -> int:
        """
        The maximum number of requests per second to allow.
        """
        return pulumi.get(self, "rate_in_requests_per_second")

    @property
    @pulumi.getter(name="rateKey")
    def rate_key(self) -> str:
        """
        The key used to group requests together.
        """
        return pulumi.get(self, "rate_key")


@pulumi.output_type
class GetDeploymentSpecificationRouteResult(dict):
    def __init__(__self__, *,
                 backend: 'outputs.GetDeploymentSpecificationRouteBackendResult',
                 logging_policies: 'outputs.GetDeploymentSpecificationRouteLoggingPoliciesResult',
                 methods: Sequence[str],
                 path: str,
                 request_policies: 'outputs.GetDeploymentSpecificationRouteRequestPoliciesResult',
                 response_policies: 'outputs.GetDeploymentSpecificationRouteResponsePoliciesResult'):
        """
        :param 'GetDeploymentSpecificationRouteBackendArgs' backend: The backend to forward requests to.
        :param 'GetDeploymentSpecificationRouteLoggingPoliciesArgs' logging_policies: Policies controlling the pushing of logs to Oracle Cloud Infrastructure Public Logging.
        :param Sequence[str] methods: A list of allowed methods on this route.
        :param str path: A URL path pattern that must be matched on this route. The path pattern may contain a subset of RFC 6570 identifiers to allow wildcard and parameterized matching.
        :param 'GetDeploymentSpecificationRouteRequestPoliciesArgs' request_policies: Behavior applied to any requests received by the API on this route.
        :param 'GetDeploymentSpecificationRouteResponsePoliciesArgs' response_policies: Behavior applied to any responses sent by the API for requests on this route.
        """
        pulumi.set(__self__, "backend", backend)
        pulumi.set(__self__, "logging_policies", logging_policies)
        pulumi.set(__self__, "methods", methods)
        pulumi.set(__self__, "path", path)
        pulumi.set(__self__, "request_policies", request_policies)
        pulumi.set(__self__, "response_policies", response_policies)

    @property
    @pulumi.getter
    def backend(self) -> 'outputs.GetDeploymentSpecificationRouteBackendResult':
        """
        The backend to forward requests to.
        """
        return pulumi.get(self, "backend")

    @property
    @pulumi.getter(name="loggingPolicies")
    def logging_policies(self) -> 'outputs.GetDeploymentSpecificationRouteLoggingPoliciesResult':
        """
        Policies controlling the pushing of logs to Oracle Cloud Infrastructure Public Logging.
        """
        return pulumi.get(self, "logging_policies")

    @property
    @pulumi.getter
    def methods(self) -> Sequence[str]:
        """
        A list of allowed methods on this route.
        """
        return pulumi.get(self, "methods")

    @property
    @pulumi.getter
    def path(self) -> str:
        """
        A URL path pattern that must be matched on this route. The path pattern may contain a subset of RFC 6570 identifiers to allow wildcard and parameterized matching.
        """
        return pulumi.get(self, "path")

    @property
    @pulumi.getter(name="requestPolicies")
    def request_policies(self) -> 'outputs.GetDeploymentSpecificationRouteRequestPoliciesResult':
        """
        Behavior applied to any requests received by the API on this route.
        """
        return pulumi.get(self, "request_policies")

    @property
    @pulumi.getter(name="responsePolicies")
    def response_policies(self) -> 'outputs.GetDeploymentSpecificationRouteResponsePoliciesResult':
        """
        Behavior applied to any responses sent by the API for requests on this route.
        """
        return pulumi.get(self, "response_policies")


@pulumi.output_type
class GetDeploymentSpecificationRouteBackendResult(dict):
    def __init__(__self__, *,
                 body: str,
                 connect_timeout_in_seconds: float,
                 function_id: str,
                 headers: Sequence['outputs.GetDeploymentSpecificationRouteBackendHeaderResult'],
                 is_ssl_verify_disabled: bool,
                 read_timeout_in_seconds: float,
                 send_timeout_in_seconds: float,
                 status: int,
                 type: str,
                 url: str):
        """
        :param str body: The body of the stock response from the mock backend.
        :param float connect_timeout_in_seconds: Defines a timeout for establishing a connection with a proxied server.
        :param str function_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Oracle Functions function resource.
        :param bool is_ssl_verify_disabled: Defines whether or not to uphold SSL verification.
        :param float read_timeout_in_seconds: Defines a timeout for reading a response from the proxied server.
        :param float send_timeout_in_seconds: Defines a timeout for transmitting a request to the proxied server.
        :param int status: The status code of the stock response from the mock backend.
        :param str type: Type of the Response Cache Store Policy.
        """
        pulumi.set(__self__, "body", body)
        pulumi.set(__self__, "connect_timeout_in_seconds", connect_timeout_in_seconds)
        pulumi.set(__self__, "function_id", function_id)
        pulumi.set(__self__, "headers", headers)
        pulumi.set(__self__, "is_ssl_verify_disabled", is_ssl_verify_disabled)
        pulumi.set(__self__, "read_timeout_in_seconds", read_timeout_in_seconds)
        pulumi.set(__self__, "send_timeout_in_seconds", send_timeout_in_seconds)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def body(self) -> str:
        """
        The body of the stock response from the mock backend.
        """
        return pulumi.get(self, "body")

    @property
    @pulumi.getter(name="connectTimeoutInSeconds")
    def connect_timeout_in_seconds(self) -> float:
        """
        Defines a timeout for establishing a connection with a proxied server.
        """
        return pulumi.get(self, "connect_timeout_in_seconds")

    @property
    @pulumi.getter(name="functionId")
    def function_id(self) -> str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Oracle Functions function resource.
        """
        return pulumi.get(self, "function_id")

    @property
    @pulumi.getter
    def headers(self) -> Sequence['outputs.GetDeploymentSpecificationRouteBackendHeaderResult']:
        return pulumi.get(self, "headers")

    @property
    @pulumi.getter(name="isSslVerifyDisabled")
    def is_ssl_verify_disabled(self) -> bool:
        """
        Defines whether or not to uphold SSL verification.
        """
        return pulumi.get(self, "is_ssl_verify_disabled")

    @property
    @pulumi.getter(name="readTimeoutInSeconds")
    def read_timeout_in_seconds(self) -> float:
        """
        Defines a timeout for reading a response from the proxied server.
        """
        return pulumi.get(self, "read_timeout_in_seconds")

    @property
    @pulumi.getter(name="sendTimeoutInSeconds")
    def send_timeout_in_seconds(self) -> float:
        """
        Defines a timeout for transmitting a request to the proxied server.
        """
        return pulumi.get(self, "send_timeout_in_seconds")

    @property
    @pulumi.getter
    def status(self) -> int:
        """
        The status code of the stock response from the mock backend.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Type of the Response Cache Store Policy.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def url(self) -> str:
        return pulumi.get(self, "url")


@pulumi.output_type
class GetDeploymentSpecificationRouteBackendHeaderResult(dict):
    def __init__(__self__, *,
                 name: str,
                 value: str):
        """
        :param str name: The case-insensitive name of the header.  This name must be unique across transformation policies.
        :param str value: Value of the header.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The case-insensitive name of the header.  This name must be unique across transformation policies.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Value of the header.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDeploymentSpecificationRouteLoggingPoliciesResult(dict):
    def __init__(__self__, *,
                 access_log: 'outputs.GetDeploymentSpecificationRouteLoggingPoliciesAccessLogResult',
                 execution_log: 'outputs.GetDeploymentSpecificationRouteLoggingPoliciesExecutionLogResult'):
        """
        :param 'GetDeploymentSpecificationRouteLoggingPoliciesAccessLogArgs' access_log: Configures the logging policies for the access logs of an API Deployment.
        :param 'GetDeploymentSpecificationRouteLoggingPoliciesExecutionLogArgs' execution_log: Configures the logging policies for the execution logs of an API Deployment.
        """
        pulumi.set(__self__, "access_log", access_log)
        pulumi.set(__self__, "execution_log", execution_log)

    @property
    @pulumi.getter(name="accessLog")
    def access_log(self) -> 'outputs.GetDeploymentSpecificationRouteLoggingPoliciesAccessLogResult':
        """
        Configures the logging policies for the access logs of an API Deployment.
        """
        return pulumi.get(self, "access_log")

    @property
    @pulumi.getter(name="executionLog")
    def execution_log(self) -> 'outputs.GetDeploymentSpecificationRouteLoggingPoliciesExecutionLogResult':
        """
        Configures the logging policies for the execution logs of an API Deployment.
        """
        return pulumi.get(self, "execution_log")


@pulumi.output_type
class GetDeploymentSpecificationRouteLoggingPoliciesAccessLogResult(dict):
    def __init__(__self__, *,
                 is_enabled: bool):
        """
        :param bool is_enabled: Whether this policy is currently enabled.
        """
        pulumi.set(__self__, "is_enabled", is_enabled)

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> bool:
        """
        Whether this policy is currently enabled.
        """
        return pulumi.get(self, "is_enabled")


@pulumi.output_type
class GetDeploymentSpecificationRouteLoggingPoliciesExecutionLogResult(dict):
    def __init__(__self__, *,
                 is_enabled: bool,
                 log_level: str):
        """
        :param bool is_enabled: Whether this policy is currently enabled.
        :param str log_level: Specifies the log level used to control logging output of execution logs. Enabling logging at a given level also enables logging at all higher levels.
        """
        pulumi.set(__self__, "is_enabled", is_enabled)
        pulumi.set(__self__, "log_level", log_level)

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> bool:
        """
        Whether this policy is currently enabled.
        """
        return pulumi.get(self, "is_enabled")

    @property
    @pulumi.getter(name="logLevel")
    def log_level(self) -> str:
        """
        Specifies the log level used to control logging output of execution logs. Enabling logging at a given level also enables logging at all higher levels.
        """
        return pulumi.get(self, "log_level")


@pulumi.output_type
class GetDeploymentSpecificationRouteRequestPoliciesResult(dict):
    def __init__(__self__, *,
                 authorization: 'outputs.GetDeploymentSpecificationRouteRequestPoliciesAuthorizationResult',
                 body_validation: 'outputs.GetDeploymentSpecificationRouteRequestPoliciesBodyValidationResult',
                 cors: 'outputs.GetDeploymentSpecificationRouteRequestPoliciesCorsResult',
                 header_transformations: 'outputs.GetDeploymentSpecificationRouteRequestPoliciesHeaderTransformationsResult',
                 header_validations: 'outputs.GetDeploymentSpecificationRouteRequestPoliciesHeaderValidationsResult',
                 query_parameter_transformations: 'outputs.GetDeploymentSpecificationRouteRequestPoliciesQueryParameterTransformationsResult',
                 query_parameter_validations: 'outputs.GetDeploymentSpecificationRouteRequestPoliciesQueryParameterValidationsResult',
                 response_cache_lookup: 'outputs.GetDeploymentSpecificationRouteRequestPoliciesResponseCacheLookupResult'):
        """
        :param 'GetDeploymentSpecificationRouteRequestPoliciesAuthorizationArgs' authorization: If authentication has been performed, validate whether the request scope (if any) applies to this route. If no RouteAuthorizationPolicy is defined for a route, a policy with a type of AUTHENTICATION_ONLY is applied.
        :param 'GetDeploymentSpecificationRouteRequestPoliciesBodyValidationArgs' body_validation: Validate the payload body of the incoming API requests on a specific route.
        :param 'GetDeploymentSpecificationRouteRequestPoliciesCorsArgs' cors: Enable CORS (Cross-Origin-Resource-Sharing) request handling.
        :param 'GetDeploymentSpecificationRouteRequestPoliciesHeaderTransformationsArgs' header_transformations: A set of transformations to apply to HTTP headers that pass through the gateway.
        :param 'GetDeploymentSpecificationRouteRequestPoliciesHeaderValidationsArgs' header_validations: Validate the HTTP headers on the incoming API requests on a specific route.
        :param 'GetDeploymentSpecificationRouteRequestPoliciesQueryParameterTransformationsArgs' query_parameter_transformations: A set of transformations to apply to query parameters that pass through the gateway.
        :param 'GetDeploymentSpecificationRouteRequestPoliciesQueryParameterValidationsArgs' query_parameter_validations: Validate the URL query parameters on the incoming API requests on a specific route.
        :param 'GetDeploymentSpecificationRouteRequestPoliciesResponseCacheLookupArgs' response_cache_lookup: Base policy for Response Cache lookup.
        """
        pulumi.set(__self__, "authorization", authorization)
        pulumi.set(__self__, "body_validation", body_validation)
        pulumi.set(__self__, "cors", cors)
        pulumi.set(__self__, "header_transformations", header_transformations)
        pulumi.set(__self__, "header_validations", header_validations)
        pulumi.set(__self__, "query_parameter_transformations", query_parameter_transformations)
        pulumi.set(__self__, "query_parameter_validations", query_parameter_validations)
        pulumi.set(__self__, "response_cache_lookup", response_cache_lookup)

    @property
    @pulumi.getter
    def authorization(self) -> 'outputs.GetDeploymentSpecificationRouteRequestPoliciesAuthorizationResult':
        """
        If authentication has been performed, validate whether the request scope (if any) applies to this route. If no RouteAuthorizationPolicy is defined for a route, a policy with a type of AUTHENTICATION_ONLY is applied.
        """
        return pulumi.get(self, "authorization")

    @property
    @pulumi.getter(name="bodyValidation")
    def body_validation(self) -> 'outputs.GetDeploymentSpecificationRouteRequestPoliciesBodyValidationResult':
        """
        Validate the payload body of the incoming API requests on a specific route.
        """
        return pulumi.get(self, "body_validation")

    @property
    @pulumi.getter
    def cors(self) -> 'outputs.GetDeploymentSpecificationRouteRequestPoliciesCorsResult':
        """
        Enable CORS (Cross-Origin-Resource-Sharing) request handling.
        """
        return pulumi.get(self, "cors")

    @property
    @pulumi.getter(name="headerTransformations")
    def header_transformations(self) -> 'outputs.GetDeploymentSpecificationRouteRequestPoliciesHeaderTransformationsResult':
        """
        A set of transformations to apply to HTTP headers that pass through the gateway.
        """
        return pulumi.get(self, "header_transformations")

    @property
    @pulumi.getter(name="headerValidations")
    def header_validations(self) -> 'outputs.GetDeploymentSpecificationRouteRequestPoliciesHeaderValidationsResult':
        """
        Validate the HTTP headers on the incoming API requests on a specific route.
        """
        return pulumi.get(self, "header_validations")

    @property
    @pulumi.getter(name="queryParameterTransformations")
    def query_parameter_transformations(self) -> 'outputs.GetDeploymentSpecificationRouteRequestPoliciesQueryParameterTransformationsResult':
        """
        A set of transformations to apply to query parameters that pass through the gateway.
        """
        return pulumi.get(self, "query_parameter_transformations")

    @property
    @pulumi.getter(name="queryParameterValidations")
    def query_parameter_validations(self) -> 'outputs.GetDeploymentSpecificationRouteRequestPoliciesQueryParameterValidationsResult':
        """
        Validate the URL query parameters on the incoming API requests on a specific route.
        """
        return pulumi.get(self, "query_parameter_validations")

    @property
    @pulumi.getter(name="responseCacheLookup")
    def response_cache_lookup(self) -> 'outputs.GetDeploymentSpecificationRouteRequestPoliciesResponseCacheLookupResult':
        """
        Base policy for Response Cache lookup.
        """
        return pulumi.get(self, "response_cache_lookup")


@pulumi.output_type
class GetDeploymentSpecificationRouteRequestPoliciesAuthorizationResult(dict):
    def __init__(__self__, *,
                 allowed_scopes: Sequence[str],
                 type: str):
        """
        :param Sequence[str] allowed_scopes: A user whose scope includes any of these access ranges is allowed on this route. Access ranges are case-sensitive.
        :param str type: Type of the Response Cache Store Policy.
        """
        pulumi.set(__self__, "allowed_scopes", allowed_scopes)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="allowedScopes")
    def allowed_scopes(self) -> Sequence[str]:
        """
        A user whose scope includes any of these access ranges is allowed on this route. Access ranges are case-sensitive.
        """
        return pulumi.get(self, "allowed_scopes")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Type of the Response Cache Store Policy.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetDeploymentSpecificationRouteRequestPoliciesBodyValidationResult(dict):
    def __init__(__self__, *,
                 contents: Sequence['outputs.GetDeploymentSpecificationRouteRequestPoliciesBodyValidationContentResult'],
                 required: bool,
                 validation_mode: str):
        """
        :param Sequence['GetDeploymentSpecificationRouteRequestPoliciesBodyValidationContentArgs'] contents: The content of the request body.
        :param bool required: Determines if the parameter is required in the request.
        :param str validation_mode: Validation behavior mode.
        """
        pulumi.set(__self__, "contents", contents)
        pulumi.set(__self__, "required", required)
        pulumi.set(__self__, "validation_mode", validation_mode)

    @property
    @pulumi.getter
    def contents(self) -> Sequence['outputs.GetDeploymentSpecificationRouteRequestPoliciesBodyValidationContentResult']:
        """
        The content of the request body.
        """
        return pulumi.get(self, "contents")

    @property
    @pulumi.getter
    def required(self) -> bool:
        """
        Determines if the parameter is required in the request.
        """
        return pulumi.get(self, "required")

    @property
    @pulumi.getter(name="validationMode")
    def validation_mode(self) -> str:
        """
        Validation behavior mode.
        """
        return pulumi.get(self, "validation_mode")


@pulumi.output_type
class GetDeploymentSpecificationRouteRequestPoliciesBodyValidationContentResult(dict):
    def __init__(__self__, *,
                 media_type: str,
                 validation_type: str):
        """
        :param str media_type: The media type is a [media type range](https://tools.ietf.org/html/rfc7231#appendix-D) subset restricted to the following schema
        :param str validation_type: Validation type defines the content validation method.
        """
        pulumi.set(__self__, "media_type", media_type)
        pulumi.set(__self__, "validation_type", validation_type)

    @property
    @pulumi.getter(name="mediaType")
    def media_type(self) -> str:
        """
        The media type is a [media type range](https://tools.ietf.org/html/rfc7231#appendix-D) subset restricted to the following schema
        """
        return pulumi.get(self, "media_type")

    @property
    @pulumi.getter(name="validationType")
    def validation_type(self) -> str:
        """
        Validation type defines the content validation method.
        """
        return pulumi.get(self, "validation_type")


@pulumi.output_type
class GetDeploymentSpecificationRouteRequestPoliciesCorsResult(dict):
    def __init__(__self__, *,
                 allowed_headers: Sequence[str],
                 allowed_methods: Sequence[str],
                 allowed_origins: Sequence[str],
                 exposed_headers: Sequence[str],
                 is_allow_credentials_enabled: bool,
                 max_age_in_seconds: int):
        """
        :param Sequence[str] allowed_headers: The list of headers that will be allowed from the client via the Access-Control-Allow-Headers header. '*' will allow all headers.
        :param Sequence[str] allowed_methods: The list of allowed HTTP methods that will be returned for the preflight OPTIONS request in the Access-Control-Allow-Methods header. '*' will allow all methods.
        :param Sequence[str] allowed_origins: The list of allowed origins that the CORS handler will use to respond to CORS requests. The gateway will send the Access-Control-Allow-Origin header with the best origin match for the circumstances. '*' will match any origins, and 'null' will match queries from 'file:' origins. All other origins must be qualified with the scheme, full hostname, and port if necessary.
        :param Sequence[str] exposed_headers: The list of headers that the client will be allowed to see from the response as indicated by the Access-Control-Expose-Headers header. '*' will expose all headers.
        :param bool is_allow_credentials_enabled: Whether to send the Access-Control-Allow-Credentials header to allow CORS requests with cookies.
        :param int max_age_in_seconds: The time in seconds for the client to cache preflight responses. This is sent as the Access-Control-Max-Age if greater than 0.
        """
        pulumi.set(__self__, "allowed_headers", allowed_headers)
        pulumi.set(__self__, "allowed_methods", allowed_methods)
        pulumi.set(__self__, "allowed_origins", allowed_origins)
        pulumi.set(__self__, "exposed_headers", exposed_headers)
        pulumi.set(__self__, "is_allow_credentials_enabled", is_allow_credentials_enabled)
        pulumi.set(__self__, "max_age_in_seconds", max_age_in_seconds)

    @property
    @pulumi.getter(name="allowedHeaders")
    def allowed_headers(self) -> Sequence[str]:
        """
        The list of headers that will be allowed from the client via the Access-Control-Allow-Headers header. '*' will allow all headers.
        """
        return pulumi.get(self, "allowed_headers")

    @property
    @pulumi.getter(name="allowedMethods")
    def allowed_methods(self) -> Sequence[str]:
        """
        The list of allowed HTTP methods that will be returned for the preflight OPTIONS request in the Access-Control-Allow-Methods header. '*' will allow all methods.
        """
        return pulumi.get(self, "allowed_methods")

    @property
    @pulumi.getter(name="allowedOrigins")
    def allowed_origins(self) -> Sequence[str]:
        """
        The list of allowed origins that the CORS handler will use to respond to CORS requests. The gateway will send the Access-Control-Allow-Origin header with the best origin match for the circumstances. '*' will match any origins, and 'null' will match queries from 'file:' origins. All other origins must be qualified with the scheme, full hostname, and port if necessary.
        """
        return pulumi.get(self, "allowed_origins")

    @property
    @pulumi.getter(name="exposedHeaders")
    def exposed_headers(self) -> Sequence[str]:
        """
        The list of headers that the client will be allowed to see from the response as indicated by the Access-Control-Expose-Headers header. '*' will expose all headers.
        """
        return pulumi.get(self, "exposed_headers")

    @property
    @pulumi.getter(name="isAllowCredentialsEnabled")
    def is_allow_credentials_enabled(self) -> bool:
        """
        Whether to send the Access-Control-Allow-Credentials header to allow CORS requests with cookies.
        """
        return pulumi.get(self, "is_allow_credentials_enabled")

    @property
    @pulumi.getter(name="maxAgeInSeconds")
    def max_age_in_seconds(self) -> int:
        """
        The time in seconds for the client to cache preflight responses. This is sent as the Access-Control-Max-Age if greater than 0.
        """
        return pulumi.get(self, "max_age_in_seconds")


@pulumi.output_type
class GetDeploymentSpecificationRouteRequestPoliciesHeaderTransformationsResult(dict):
    def __init__(__self__, *,
                 filter_headers: 'outputs.GetDeploymentSpecificationRouteRequestPoliciesHeaderTransformationsFilterHeadersResult',
                 rename_headers: 'outputs.GetDeploymentSpecificationRouteRequestPoliciesHeaderTransformationsRenameHeadersResult',
                 set_headers: 'outputs.GetDeploymentSpecificationRouteRequestPoliciesHeaderTransformationsSetHeadersResult'):
        """
        :param 'GetDeploymentSpecificationRouteRequestPoliciesHeaderTransformationsFilterHeadersArgs' filter_headers: Filter HTTP headers as they pass through the gateway.  The gateway applies filters after other transformations, so any headers set or renamed must also be listed here when using an ALLOW type policy.
        :param 'GetDeploymentSpecificationRouteRequestPoliciesHeaderTransformationsRenameHeadersArgs' rename_headers: Rename HTTP headers as they pass through the gateway.
        :param 'GetDeploymentSpecificationRouteRequestPoliciesHeaderTransformationsSetHeadersArgs' set_headers: Set HTTP headers as they pass through the gateway.
        """
        pulumi.set(__self__, "filter_headers", filter_headers)
        pulumi.set(__self__, "rename_headers", rename_headers)
        pulumi.set(__self__, "set_headers", set_headers)

    @property
    @pulumi.getter(name="filterHeaders")
    def filter_headers(self) -> 'outputs.GetDeploymentSpecificationRouteRequestPoliciesHeaderTransformationsFilterHeadersResult':
        """
        Filter HTTP headers as they pass through the gateway.  The gateway applies filters after other transformations, so any headers set or renamed must also be listed here when using an ALLOW type policy.
        """
        return pulumi.get(self, "filter_headers")

    @property
    @pulumi.getter(name="renameHeaders")
    def rename_headers(self) -> 'outputs.GetDeploymentSpecificationRouteRequestPoliciesHeaderTransformationsRenameHeadersResult':
        """
        Rename HTTP headers as they pass through the gateway.
        """
        return pulumi.get(self, "rename_headers")

    @property
    @pulumi.getter(name="setHeaders")
    def set_headers(self) -> 'outputs.GetDeploymentSpecificationRouteRequestPoliciesHeaderTransformationsSetHeadersResult':
        """
        Set HTTP headers as they pass through the gateway.
        """
        return pulumi.get(self, "set_headers")


@pulumi.output_type
class GetDeploymentSpecificationRouteRequestPoliciesHeaderTransformationsFilterHeadersResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetDeploymentSpecificationRouteRequestPoliciesHeaderTransformationsFilterHeadersItemResult'],
                 type: str):
        """
        :param Sequence['GetDeploymentSpecificationRouteRequestPoliciesHeaderTransformationsFilterHeadersItemArgs'] items: The list of headers.
        :param str type: Type of the Response Cache Store Policy.
        """
        pulumi.set(__self__, "items", items)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetDeploymentSpecificationRouteRequestPoliciesHeaderTransformationsFilterHeadersItemResult']:
        """
        The list of headers.
        """
        return pulumi.get(self, "items")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Type of the Response Cache Store Policy.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetDeploymentSpecificationRouteRequestPoliciesHeaderTransformationsFilterHeadersItemResult(dict):
    def __init__(__self__, *,
                 name: str):
        """
        :param str name: The case-insensitive name of the header.  This name must be unique across transformation policies.
        """
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The case-insensitive name of the header.  This name must be unique across transformation policies.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetDeploymentSpecificationRouteRequestPoliciesHeaderTransformationsRenameHeadersResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetDeploymentSpecificationRouteRequestPoliciesHeaderTransformationsRenameHeadersItemResult']):
        """
        :param Sequence['GetDeploymentSpecificationRouteRequestPoliciesHeaderTransformationsRenameHeadersItemArgs'] items: The list of headers.
        """
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetDeploymentSpecificationRouteRequestPoliciesHeaderTransformationsRenameHeadersItemResult']:
        """
        The list of headers.
        """
        return pulumi.get(self, "items")


@pulumi.output_type
class GetDeploymentSpecificationRouteRequestPoliciesHeaderTransformationsRenameHeadersItemResult(dict):
    def __init__(__self__, *,
                 from_: str,
                 to: str):
        """
        :param str from_: The original case-insensitive name of the header.  This name must be unique across transformation policies.
        :param str to: The new name of the header.  This name must be unique across transformation policies.
        """
        pulumi.set(__self__, "from_", from_)
        pulumi.set(__self__, "to", to)

    @property
    @pulumi.getter(name="from")
    def from_(self) -> str:
        """
        The original case-insensitive name of the header.  This name must be unique across transformation policies.
        """
        return pulumi.get(self, "from_")

    @property
    @pulumi.getter
    def to(self) -> str:
        """
        The new name of the header.  This name must be unique across transformation policies.
        """
        return pulumi.get(self, "to")


@pulumi.output_type
class GetDeploymentSpecificationRouteRequestPoliciesHeaderTransformationsSetHeadersResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetDeploymentSpecificationRouteRequestPoliciesHeaderTransformationsSetHeadersItemResult']):
        """
        :param Sequence['GetDeploymentSpecificationRouteRequestPoliciesHeaderTransformationsSetHeadersItemArgs'] items: The list of headers.
        """
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetDeploymentSpecificationRouteRequestPoliciesHeaderTransformationsSetHeadersItemResult']:
        """
        The list of headers.
        """
        return pulumi.get(self, "items")


@pulumi.output_type
class GetDeploymentSpecificationRouteRequestPoliciesHeaderTransformationsSetHeadersItemResult(dict):
    def __init__(__self__, *,
                 if_exists: str,
                 name: str,
                 values: Sequence[str]):
        """
        :param str if_exists: If a header with the same name already exists in the request, OVERWRITE will overwrite the value, APPEND will append to the existing value, or SKIP will keep the existing value.
        :param str name: The case-insensitive name of the header.  This name must be unique across transformation policies.
        :param Sequence[str] values: A list of new values.  Each value can be a constant or may include one or more expressions enclosed within ${} delimiters.
        """
        pulumi.set(__self__, "if_exists", if_exists)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter(name="ifExists")
    def if_exists(self) -> str:
        """
        If a header with the same name already exists in the request, OVERWRITE will overwrite the value, APPEND will append to the existing value, or SKIP will keep the existing value.
        """
        return pulumi.get(self, "if_exists")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The case-insensitive name of the header.  This name must be unique across transformation policies.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        """
        A list of new values.  Each value can be a constant or may include one or more expressions enclosed within ${} delimiters.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class GetDeploymentSpecificationRouteRequestPoliciesHeaderValidationsResult(dict):
    def __init__(__self__, *,
                 headers: Sequence['outputs.GetDeploymentSpecificationRouteRequestPoliciesHeaderValidationsHeaderResult'],
                 validation_mode: str):
        """
        :param str validation_mode: Validation behavior mode.
        """
        pulumi.set(__self__, "headers", headers)
        pulumi.set(__self__, "validation_mode", validation_mode)

    @property
    @pulumi.getter
    def headers(self) -> Sequence['outputs.GetDeploymentSpecificationRouteRequestPoliciesHeaderValidationsHeaderResult']:
        return pulumi.get(self, "headers")

    @property
    @pulumi.getter(name="validationMode")
    def validation_mode(self) -> str:
        """
        Validation behavior mode.
        """
        return pulumi.get(self, "validation_mode")


@pulumi.output_type
class GetDeploymentSpecificationRouteRequestPoliciesHeaderValidationsHeaderResult(dict):
    def __init__(__self__, *,
                 name: str,
                 required: bool):
        """
        :param str name: The case-insensitive name of the header.  This name must be unique across transformation policies.
        :param bool required: Determines if the parameter is required in the request.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "required", required)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The case-insensitive name of the header.  This name must be unique across transformation policies.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def required(self) -> bool:
        """
        Determines if the parameter is required in the request.
        """
        return pulumi.get(self, "required")


@pulumi.output_type
class GetDeploymentSpecificationRouteRequestPoliciesQueryParameterTransformationsResult(dict):
    def __init__(__self__, *,
                 filter_query_parameters: 'outputs.GetDeploymentSpecificationRouteRequestPoliciesQueryParameterTransformationsFilterQueryParametersResult',
                 rename_query_parameters: 'outputs.GetDeploymentSpecificationRouteRequestPoliciesQueryParameterTransformationsRenameQueryParametersResult',
                 set_query_parameters: 'outputs.GetDeploymentSpecificationRouteRequestPoliciesQueryParameterTransformationsSetQueryParametersResult'):
        """
        :param 'GetDeploymentSpecificationRouteRequestPoliciesQueryParameterTransformationsFilterQueryParametersArgs' filter_query_parameters: Filter parameters from the query string as they pass through the gateway.  The gateway applies filters after other transformations, so any parameters set or renamed must also be listed here when using an ALLOW type policy.
        :param 'GetDeploymentSpecificationRouteRequestPoliciesQueryParameterTransformationsRenameQueryParametersArgs' rename_query_parameters: Rename parameters on the query string as they pass through the gateway.
        :param 'GetDeploymentSpecificationRouteRequestPoliciesQueryParameterTransformationsSetQueryParametersArgs' set_query_parameters: Set parameters on the query string as they pass through the gateway.
        """
        pulumi.set(__self__, "filter_query_parameters", filter_query_parameters)
        pulumi.set(__self__, "rename_query_parameters", rename_query_parameters)
        pulumi.set(__self__, "set_query_parameters", set_query_parameters)

    @property
    @pulumi.getter(name="filterQueryParameters")
    def filter_query_parameters(self) -> 'outputs.GetDeploymentSpecificationRouteRequestPoliciesQueryParameterTransformationsFilterQueryParametersResult':
        """
        Filter parameters from the query string as they pass through the gateway.  The gateway applies filters after other transformations, so any parameters set or renamed must also be listed here when using an ALLOW type policy.
        """
        return pulumi.get(self, "filter_query_parameters")

    @property
    @pulumi.getter(name="renameQueryParameters")
    def rename_query_parameters(self) -> 'outputs.GetDeploymentSpecificationRouteRequestPoliciesQueryParameterTransformationsRenameQueryParametersResult':
        """
        Rename parameters on the query string as they pass through the gateway.
        """
        return pulumi.get(self, "rename_query_parameters")

    @property
    @pulumi.getter(name="setQueryParameters")
    def set_query_parameters(self) -> 'outputs.GetDeploymentSpecificationRouteRequestPoliciesQueryParameterTransformationsSetQueryParametersResult':
        """
        Set parameters on the query string as they pass through the gateway.
        """
        return pulumi.get(self, "set_query_parameters")


@pulumi.output_type
class GetDeploymentSpecificationRouteRequestPoliciesQueryParameterTransformationsFilterQueryParametersResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetDeploymentSpecificationRouteRequestPoliciesQueryParameterTransformationsFilterQueryParametersItemResult'],
                 type: str):
        """
        :param Sequence['GetDeploymentSpecificationRouteRequestPoliciesQueryParameterTransformationsFilterQueryParametersItemArgs'] items: The list of headers.
        :param str type: Type of the Response Cache Store Policy.
        """
        pulumi.set(__self__, "items", items)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetDeploymentSpecificationRouteRequestPoliciesQueryParameterTransformationsFilterQueryParametersItemResult']:
        """
        The list of headers.
        """
        return pulumi.get(self, "items")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Type of the Response Cache Store Policy.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetDeploymentSpecificationRouteRequestPoliciesQueryParameterTransformationsFilterQueryParametersItemResult(dict):
    def __init__(__self__, *,
                 name: str):
        """
        :param str name: The case-insensitive name of the header.  This name must be unique across transformation policies.
        """
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The case-insensitive name of the header.  This name must be unique across transformation policies.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetDeploymentSpecificationRouteRequestPoliciesQueryParameterTransformationsRenameQueryParametersResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetDeploymentSpecificationRouteRequestPoliciesQueryParameterTransformationsRenameQueryParametersItemResult']):
        """
        :param Sequence['GetDeploymentSpecificationRouteRequestPoliciesQueryParameterTransformationsRenameQueryParametersItemArgs'] items: The list of headers.
        """
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetDeploymentSpecificationRouteRequestPoliciesQueryParameterTransformationsRenameQueryParametersItemResult']:
        """
        The list of headers.
        """
        return pulumi.get(self, "items")


@pulumi.output_type
class GetDeploymentSpecificationRouteRequestPoliciesQueryParameterTransformationsRenameQueryParametersItemResult(dict):
    def __init__(__self__, *,
                 from_: str,
                 to: str):
        """
        :param str from_: The original case-insensitive name of the header.  This name must be unique across transformation policies.
        :param str to: The new name of the header.  This name must be unique across transformation policies.
        """
        pulumi.set(__self__, "from_", from_)
        pulumi.set(__self__, "to", to)

    @property
    @pulumi.getter(name="from")
    def from_(self) -> str:
        """
        The original case-insensitive name of the header.  This name must be unique across transformation policies.
        """
        return pulumi.get(self, "from_")

    @property
    @pulumi.getter
    def to(self) -> str:
        """
        The new name of the header.  This name must be unique across transformation policies.
        """
        return pulumi.get(self, "to")


@pulumi.output_type
class GetDeploymentSpecificationRouteRequestPoliciesQueryParameterTransformationsSetQueryParametersResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetDeploymentSpecificationRouteRequestPoliciesQueryParameterTransformationsSetQueryParametersItemResult']):
        """
        :param Sequence['GetDeploymentSpecificationRouteRequestPoliciesQueryParameterTransformationsSetQueryParametersItemArgs'] items: The list of headers.
        """
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetDeploymentSpecificationRouteRequestPoliciesQueryParameterTransformationsSetQueryParametersItemResult']:
        """
        The list of headers.
        """
        return pulumi.get(self, "items")


@pulumi.output_type
class GetDeploymentSpecificationRouteRequestPoliciesQueryParameterTransformationsSetQueryParametersItemResult(dict):
    def __init__(__self__, *,
                 if_exists: str,
                 name: str,
                 values: Sequence[str]):
        """
        :param str if_exists: If a header with the same name already exists in the request, OVERWRITE will overwrite the value, APPEND will append to the existing value, or SKIP will keep the existing value.
        :param str name: The case-insensitive name of the header.  This name must be unique across transformation policies.
        :param Sequence[str] values: A list of new values.  Each value can be a constant or may include one or more expressions enclosed within ${} delimiters.
        """
        pulumi.set(__self__, "if_exists", if_exists)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter(name="ifExists")
    def if_exists(self) -> str:
        """
        If a header with the same name already exists in the request, OVERWRITE will overwrite the value, APPEND will append to the existing value, or SKIP will keep the existing value.
        """
        return pulumi.get(self, "if_exists")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The case-insensitive name of the header.  This name must be unique across transformation policies.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        """
        A list of new values.  Each value can be a constant or may include one or more expressions enclosed within ${} delimiters.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class GetDeploymentSpecificationRouteRequestPoliciesQueryParameterValidationsResult(dict):
    def __init__(__self__, *,
                 parameters: Sequence['outputs.GetDeploymentSpecificationRouteRequestPoliciesQueryParameterValidationsParameterResult'],
                 validation_mode: str):
        """
        :param str validation_mode: Validation behavior mode.
        """
        pulumi.set(__self__, "parameters", parameters)
        pulumi.set(__self__, "validation_mode", validation_mode)

    @property
    @pulumi.getter
    def parameters(self) -> Sequence['outputs.GetDeploymentSpecificationRouteRequestPoliciesQueryParameterValidationsParameterResult']:
        return pulumi.get(self, "parameters")

    @property
    @pulumi.getter(name="validationMode")
    def validation_mode(self) -> str:
        """
        Validation behavior mode.
        """
        return pulumi.get(self, "validation_mode")


@pulumi.output_type
class GetDeploymentSpecificationRouteRequestPoliciesQueryParameterValidationsParameterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 required: bool):
        """
        :param str name: The case-insensitive name of the header.  This name must be unique across transformation policies.
        :param bool required: Determines if the parameter is required in the request.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "required", required)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The case-insensitive name of the header.  This name must be unique across transformation policies.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def required(self) -> bool:
        """
        Determines if the parameter is required in the request.
        """
        return pulumi.get(self, "required")


@pulumi.output_type
class GetDeploymentSpecificationRouteRequestPoliciesResponseCacheLookupResult(dict):
    def __init__(__self__, *,
                 cache_key_additions: Sequence[str],
                 is_enabled: bool,
                 is_private_caching_enabled: bool,
                 type: str):
        """
        :param Sequence[str] cache_key_additions: A list of context expressions whose values will be added to the base cache key. Values should contain an expression enclosed within ${} delimiters. Only the request context is available.
        :param bool is_enabled: Whether this policy is currently enabled.
        :param bool is_private_caching_enabled: Set true to allow caching responses where the request has an Authorization header. Ensure you have configured your  cache key additions to get the level of isolation across authenticated requests that you require.
        :param str type: Type of the Response Cache Store Policy.
        """
        pulumi.set(__self__, "cache_key_additions", cache_key_additions)
        pulumi.set(__self__, "is_enabled", is_enabled)
        pulumi.set(__self__, "is_private_caching_enabled", is_private_caching_enabled)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="cacheKeyAdditions")
    def cache_key_additions(self) -> Sequence[str]:
        """
        A list of context expressions whose values will be added to the base cache key. Values should contain an expression enclosed within ${} delimiters. Only the request context is available.
        """
        return pulumi.get(self, "cache_key_additions")

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> bool:
        """
        Whether this policy is currently enabled.
        """
        return pulumi.get(self, "is_enabled")

    @property
    @pulumi.getter(name="isPrivateCachingEnabled")
    def is_private_caching_enabled(self) -> bool:
        """
        Set true to allow caching responses where the request has an Authorization header. Ensure you have configured your  cache key additions to get the level of isolation across authenticated requests that you require.
        """
        return pulumi.get(self, "is_private_caching_enabled")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Type of the Response Cache Store Policy.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetDeploymentSpecificationRouteResponsePoliciesResult(dict):
    def __init__(__self__, *,
                 header_transformations: 'outputs.GetDeploymentSpecificationRouteResponsePoliciesHeaderTransformationsResult',
                 response_cache_store: 'outputs.GetDeploymentSpecificationRouteResponsePoliciesResponseCacheStoreResult'):
        """
        :param 'GetDeploymentSpecificationRouteResponsePoliciesHeaderTransformationsArgs' header_transformations: A set of transformations to apply to HTTP headers that pass through the gateway.
        :param 'GetDeploymentSpecificationRouteResponsePoliciesResponseCacheStoreArgs' response_cache_store: Base policy for how a response from a backend is cached in the Response Cache.
        """
        pulumi.set(__self__, "header_transformations", header_transformations)
        pulumi.set(__self__, "response_cache_store", response_cache_store)

    @property
    @pulumi.getter(name="headerTransformations")
    def header_transformations(self) -> 'outputs.GetDeploymentSpecificationRouteResponsePoliciesHeaderTransformationsResult':
        """
        A set of transformations to apply to HTTP headers that pass through the gateway.
        """
        return pulumi.get(self, "header_transformations")

    @property
    @pulumi.getter(name="responseCacheStore")
    def response_cache_store(self) -> 'outputs.GetDeploymentSpecificationRouteResponsePoliciesResponseCacheStoreResult':
        """
        Base policy for how a response from a backend is cached in the Response Cache.
        """
        return pulumi.get(self, "response_cache_store")


@pulumi.output_type
class GetDeploymentSpecificationRouteResponsePoliciesHeaderTransformationsResult(dict):
    def __init__(__self__, *,
                 filter_headers: 'outputs.GetDeploymentSpecificationRouteResponsePoliciesHeaderTransformationsFilterHeadersResult',
                 rename_headers: 'outputs.GetDeploymentSpecificationRouteResponsePoliciesHeaderTransformationsRenameHeadersResult',
                 set_headers: 'outputs.GetDeploymentSpecificationRouteResponsePoliciesHeaderTransformationsSetHeadersResult'):
        """
        :param 'GetDeploymentSpecificationRouteResponsePoliciesHeaderTransformationsFilterHeadersArgs' filter_headers: Filter HTTP headers as they pass through the gateway.  The gateway applies filters after other transformations, so any headers set or renamed must also be listed here when using an ALLOW type policy.
        :param 'GetDeploymentSpecificationRouteResponsePoliciesHeaderTransformationsRenameHeadersArgs' rename_headers: Rename HTTP headers as they pass through the gateway.
        :param 'GetDeploymentSpecificationRouteResponsePoliciesHeaderTransformationsSetHeadersArgs' set_headers: Set HTTP headers as they pass through the gateway.
        """
        pulumi.set(__self__, "filter_headers", filter_headers)
        pulumi.set(__self__, "rename_headers", rename_headers)
        pulumi.set(__self__, "set_headers", set_headers)

    @property
    @pulumi.getter(name="filterHeaders")
    def filter_headers(self) -> 'outputs.GetDeploymentSpecificationRouteResponsePoliciesHeaderTransformationsFilterHeadersResult':
        """
        Filter HTTP headers as they pass through the gateway.  The gateway applies filters after other transformations, so any headers set or renamed must also be listed here when using an ALLOW type policy.
        """
        return pulumi.get(self, "filter_headers")

    @property
    @pulumi.getter(name="renameHeaders")
    def rename_headers(self) -> 'outputs.GetDeploymentSpecificationRouteResponsePoliciesHeaderTransformationsRenameHeadersResult':
        """
        Rename HTTP headers as they pass through the gateway.
        """
        return pulumi.get(self, "rename_headers")

    @property
    @pulumi.getter(name="setHeaders")
    def set_headers(self) -> 'outputs.GetDeploymentSpecificationRouteResponsePoliciesHeaderTransformationsSetHeadersResult':
        """
        Set HTTP headers as they pass through the gateway.
        """
        return pulumi.get(self, "set_headers")


@pulumi.output_type
class GetDeploymentSpecificationRouteResponsePoliciesHeaderTransformationsFilterHeadersResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetDeploymentSpecificationRouteResponsePoliciesHeaderTransformationsFilterHeadersItemResult'],
                 type: str):
        """
        :param Sequence['GetDeploymentSpecificationRouteResponsePoliciesHeaderTransformationsFilterHeadersItemArgs'] items: The list of headers.
        :param str type: Type of the Response Cache Store Policy.
        """
        pulumi.set(__self__, "items", items)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetDeploymentSpecificationRouteResponsePoliciesHeaderTransformationsFilterHeadersItemResult']:
        """
        The list of headers.
        """
        return pulumi.get(self, "items")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Type of the Response Cache Store Policy.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetDeploymentSpecificationRouteResponsePoliciesHeaderTransformationsFilterHeadersItemResult(dict):
    def __init__(__self__, *,
                 name: str):
        """
        :param str name: The case-insensitive name of the header.  This name must be unique across transformation policies.
        """
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The case-insensitive name of the header.  This name must be unique across transformation policies.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetDeploymentSpecificationRouteResponsePoliciesHeaderTransformationsRenameHeadersResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetDeploymentSpecificationRouteResponsePoliciesHeaderTransformationsRenameHeadersItemResult']):
        """
        :param Sequence['GetDeploymentSpecificationRouteResponsePoliciesHeaderTransformationsRenameHeadersItemArgs'] items: The list of headers.
        """
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetDeploymentSpecificationRouteResponsePoliciesHeaderTransformationsRenameHeadersItemResult']:
        """
        The list of headers.
        """
        return pulumi.get(self, "items")


@pulumi.output_type
class GetDeploymentSpecificationRouteResponsePoliciesHeaderTransformationsRenameHeadersItemResult(dict):
    def __init__(__self__, *,
                 from_: str,
                 to: str):
        """
        :param str from_: The original case-insensitive name of the header.  This name must be unique across transformation policies.
        :param str to: The new name of the header.  This name must be unique across transformation policies.
        """
        pulumi.set(__self__, "from_", from_)
        pulumi.set(__self__, "to", to)

    @property
    @pulumi.getter(name="from")
    def from_(self) -> str:
        """
        The original case-insensitive name of the header.  This name must be unique across transformation policies.
        """
        return pulumi.get(self, "from_")

    @property
    @pulumi.getter
    def to(self) -> str:
        """
        The new name of the header.  This name must be unique across transformation policies.
        """
        return pulumi.get(self, "to")


@pulumi.output_type
class GetDeploymentSpecificationRouteResponsePoliciesHeaderTransformationsSetHeadersResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetDeploymentSpecificationRouteResponsePoliciesHeaderTransformationsSetHeadersItemResult']):
        """
        :param Sequence['GetDeploymentSpecificationRouteResponsePoliciesHeaderTransformationsSetHeadersItemArgs'] items: The list of headers.
        """
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetDeploymentSpecificationRouteResponsePoliciesHeaderTransformationsSetHeadersItemResult']:
        """
        The list of headers.
        """
        return pulumi.get(self, "items")


@pulumi.output_type
class GetDeploymentSpecificationRouteResponsePoliciesHeaderTransformationsSetHeadersItemResult(dict):
    def __init__(__self__, *,
                 if_exists: str,
                 name: str,
                 values: Sequence[str]):
        """
        :param str if_exists: If a header with the same name already exists in the request, OVERWRITE will overwrite the value, APPEND will append to the existing value, or SKIP will keep the existing value.
        :param str name: The case-insensitive name of the header.  This name must be unique across transformation policies.
        :param Sequence[str] values: A list of new values.  Each value can be a constant or may include one or more expressions enclosed within ${} delimiters.
        """
        pulumi.set(__self__, "if_exists", if_exists)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter(name="ifExists")
    def if_exists(self) -> str:
        """
        If a header with the same name already exists in the request, OVERWRITE will overwrite the value, APPEND will append to the existing value, or SKIP will keep the existing value.
        """
        return pulumi.get(self, "if_exists")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The case-insensitive name of the header.  This name must be unique across transformation policies.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        """
        A list of new values.  Each value can be a constant or may include one or more expressions enclosed within ${} delimiters.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class GetDeploymentSpecificationRouteResponsePoliciesResponseCacheStoreResult(dict):
    def __init__(__self__, *,
                 time_to_live_in_seconds: int,
                 type: str):
        """
        :param int time_to_live_in_seconds: Sets the number of seconds for a response from a backend being stored in the Response Cache before it expires.
        :param str type: Type of the Response Cache Store Policy.
        """
        pulumi.set(__self__, "time_to_live_in_seconds", time_to_live_in_seconds)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="timeToLiveInSeconds")
    def time_to_live_in_seconds(self) -> int:
        """
        Sets the number of seconds for a response from a backend being stored in the Response Cache before it expires.
        """
        return pulumi.get(self, "time_to_live_in_seconds")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Type of the Response Cache Store Policy.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetDeploymentsDeploymentCollectionResult(dict):
    def __init__(__self__, *,
                 compartment_id: str,
                 defined_tags: Mapping[str, Any],
                 display_name: str,
                 endpoint: str,
                 freeform_tags: Mapping[str, Any],
                 gateway_id: str,
                 id: str,
                 lifecycle_details: str,
                 path_prefix: str,
                 specification: 'outputs.GetDeploymentsDeploymentCollectionSpecificationResult',
                 state: str,
                 time_created: str,
                 time_updated: str):
        """
        :param str compartment_id: The ocid of the compartment in which to list resources.
        :param Mapping[str, Any] defined_tags: Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Operations.CostCenter": "42"}`
        :param str display_name: A user-friendly name. Does not have to be unique, and it's changeable.  Example: `My new resource`
        :param str endpoint: The endpoint to access this deployment on the gateway.
        :param Mapping[str, Any] freeform_tags: Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Department": "Finance"}`
        :param str gateway_id: Filter deployments by the gateway ocid.
        :param str id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the resource.
        :param str lifecycle_details: A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in a Failed state.
        :param str path_prefix: A path on which to deploy all routes contained in the API deployment specification. For more information, see [Deploying an API on an API Gateway by Creating an API Deployment](https://docs.cloud.oracle.com/iaas/Content/APIGateway/Tasks/apigatewaycreatingdeployment.htm).
        :param 'GetDeploymentsDeploymentCollectionSpecificationArgs' specification: The logical configuration of the API exposed by a deployment.
        :param str state: A filter to return only resources that match the given lifecycle state.  Example: `SUCCEEDED`
        :param str time_created: The time this resource was created. An RFC3339 formatted datetime string.
        :param str time_updated: The time this resource was last updated. An RFC3339 formatted datetime string.
        """
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "defined_tags", defined_tags)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "endpoint", endpoint)
        pulumi.set(__self__, "freeform_tags", freeform_tags)
        pulumi.set(__self__, "gateway_id", gateway_id)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        pulumi.set(__self__, "path_prefix", path_prefix)
        pulumi.set(__self__, "specification", specification)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "time_created", time_created)
        pulumi.set(__self__, "time_updated", time_updated)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> str:
        """
        The ocid of the compartment in which to list resources.
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Mapping[str, Any]:
        """
        Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Operations.CostCenter": "42"}`
        """
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        A user-friendly name. Does not have to be unique, and it's changeable.  Example: `My new resource`
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def endpoint(self) -> str:
        """
        The endpoint to access this deployment on the gateway.
        """
        return pulumi.get(self, "endpoint")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Mapping[str, Any]:
        """
        Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Department": "Finance"}`
        """
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter(name="gatewayId")
    def gateway_id(self) -> str:
        """
        Filter deployments by the gateway ocid.
        """
        return pulumi.get(self, "gateway_id")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> str:
        """
        A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in a Failed state.
        """
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter(name="pathPrefix")
    def path_prefix(self) -> str:
        """
        A path on which to deploy all routes contained in the API deployment specification. For more information, see [Deploying an API on an API Gateway by Creating an API Deployment](https://docs.cloud.oracle.com/iaas/Content/APIGateway/Tasks/apigatewaycreatingdeployment.htm).
        """
        return pulumi.get(self, "path_prefix")

    @property
    @pulumi.getter
    def specification(self) -> 'outputs.GetDeploymentsDeploymentCollectionSpecificationResult':
        """
        The logical configuration of the API exposed by a deployment.
        """
        return pulumi.get(self, "specification")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        A filter to return only resources that match the given lifecycle state.  Example: `SUCCEEDED`
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> str:
        """
        The time this resource was created. An RFC3339 formatted datetime string.
        """
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> str:
        """
        The time this resource was last updated. An RFC3339 formatted datetime string.
        """
        return pulumi.get(self, "time_updated")


@pulumi.output_type
class GetDeploymentsDeploymentCollectionSpecificationResult(dict):
    def __init__(__self__, *,
                 logging_policies: 'outputs.GetDeploymentsDeploymentCollectionSpecificationLoggingPoliciesResult',
                 request_policies: 'outputs.GetDeploymentsDeploymentCollectionSpecificationRequestPoliciesResult',
                 routes: Sequence['outputs.GetDeploymentsDeploymentCollectionSpecificationRouteResult']):
        """
        :param 'GetDeploymentsDeploymentCollectionSpecificationLoggingPoliciesArgs' logging_policies: Policies controlling the pushing of logs to Oracle Cloud Infrastructure Public Logging.
        :param 'GetDeploymentsDeploymentCollectionSpecificationRequestPoliciesArgs' request_policies: Behavior applied to any requests received by the API on this route.
        :param Sequence['GetDeploymentsDeploymentCollectionSpecificationRouteArgs'] routes: A list of routes that this API exposes.
        """
        pulumi.set(__self__, "logging_policies", logging_policies)
        pulumi.set(__self__, "request_policies", request_policies)
        pulumi.set(__self__, "routes", routes)

    @property
    @pulumi.getter(name="loggingPolicies")
    def logging_policies(self) -> 'outputs.GetDeploymentsDeploymentCollectionSpecificationLoggingPoliciesResult':
        """
        Policies controlling the pushing of logs to Oracle Cloud Infrastructure Public Logging.
        """
        return pulumi.get(self, "logging_policies")

    @property
    @pulumi.getter(name="requestPolicies")
    def request_policies(self) -> 'outputs.GetDeploymentsDeploymentCollectionSpecificationRequestPoliciesResult':
        """
        Behavior applied to any requests received by the API on this route.
        """
        return pulumi.get(self, "request_policies")

    @property
    @pulumi.getter
    def routes(self) -> Sequence['outputs.GetDeploymentsDeploymentCollectionSpecificationRouteResult']:
        """
        A list of routes that this API exposes.
        """
        return pulumi.get(self, "routes")


@pulumi.output_type
class GetDeploymentsDeploymentCollectionSpecificationLoggingPoliciesResult(dict):
    def __init__(__self__, *,
                 access_log: 'outputs.GetDeploymentsDeploymentCollectionSpecificationLoggingPoliciesAccessLogResult',
                 execution_log: 'outputs.GetDeploymentsDeploymentCollectionSpecificationLoggingPoliciesExecutionLogResult'):
        """
        :param 'GetDeploymentsDeploymentCollectionSpecificationLoggingPoliciesAccessLogArgs' access_log: Configures the logging policies for the access logs of an API Deployment.
        :param 'GetDeploymentsDeploymentCollectionSpecificationLoggingPoliciesExecutionLogArgs' execution_log: Configures the logging policies for the execution logs of an API Deployment.
        """
        pulumi.set(__self__, "access_log", access_log)
        pulumi.set(__self__, "execution_log", execution_log)

    @property
    @pulumi.getter(name="accessLog")
    def access_log(self) -> 'outputs.GetDeploymentsDeploymentCollectionSpecificationLoggingPoliciesAccessLogResult':
        """
        Configures the logging policies for the access logs of an API Deployment.
        """
        return pulumi.get(self, "access_log")

    @property
    @pulumi.getter(name="executionLog")
    def execution_log(self) -> 'outputs.GetDeploymentsDeploymentCollectionSpecificationLoggingPoliciesExecutionLogResult':
        """
        Configures the logging policies for the execution logs of an API Deployment.
        """
        return pulumi.get(self, "execution_log")


@pulumi.output_type
class GetDeploymentsDeploymentCollectionSpecificationLoggingPoliciesAccessLogResult(dict):
    def __init__(__self__, *,
                 is_enabled: bool):
        """
        :param bool is_enabled: Whether this policy is currently enabled.
        """
        pulumi.set(__self__, "is_enabled", is_enabled)

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> bool:
        """
        Whether this policy is currently enabled.
        """
        return pulumi.get(self, "is_enabled")


@pulumi.output_type
class GetDeploymentsDeploymentCollectionSpecificationLoggingPoliciesExecutionLogResult(dict):
    def __init__(__self__, *,
                 is_enabled: bool,
                 log_level: str):
        """
        :param bool is_enabled: Whether this policy is currently enabled.
        :param str log_level: Specifies the log level used to control logging output of execution logs. Enabling logging at a given level also enables logging at all higher levels.
        """
        pulumi.set(__self__, "is_enabled", is_enabled)
        pulumi.set(__self__, "log_level", log_level)

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> bool:
        """
        Whether this policy is currently enabled.
        """
        return pulumi.get(self, "is_enabled")

    @property
    @pulumi.getter(name="logLevel")
    def log_level(self) -> str:
        """
        Specifies the log level used to control logging output of execution logs. Enabling logging at a given level also enables logging at all higher levels.
        """
        return pulumi.get(self, "log_level")


@pulumi.output_type
class GetDeploymentsDeploymentCollectionSpecificationRequestPoliciesResult(dict):
    def __init__(__self__, *,
                 authentication: 'outputs.GetDeploymentsDeploymentCollectionSpecificationRequestPoliciesAuthenticationResult',
                 cors: 'outputs.GetDeploymentsDeploymentCollectionSpecificationRequestPoliciesCorsResult',
                 rate_limiting: 'outputs.GetDeploymentsDeploymentCollectionSpecificationRequestPoliciesRateLimitingResult'):
        """
        :param 'GetDeploymentsDeploymentCollectionSpecificationRequestPoliciesAuthenticationArgs' authentication: Information on how to authenticate incoming requests.
        :param 'GetDeploymentsDeploymentCollectionSpecificationRequestPoliciesCorsArgs' cors: Enable CORS (Cross-Origin-Resource-Sharing) request handling.
        :param 'GetDeploymentsDeploymentCollectionSpecificationRequestPoliciesRateLimitingArgs' rate_limiting: Limit the number of requests that should be handled for the specified window using a specfic key.
        """
        pulumi.set(__self__, "authentication", authentication)
        pulumi.set(__self__, "cors", cors)
        pulumi.set(__self__, "rate_limiting", rate_limiting)

    @property
    @pulumi.getter
    def authentication(self) -> 'outputs.GetDeploymentsDeploymentCollectionSpecificationRequestPoliciesAuthenticationResult':
        """
        Information on how to authenticate incoming requests.
        """
        return pulumi.get(self, "authentication")

    @property
    @pulumi.getter
    def cors(self) -> 'outputs.GetDeploymentsDeploymentCollectionSpecificationRequestPoliciesCorsResult':
        """
        Enable CORS (Cross-Origin-Resource-Sharing) request handling.
        """
        return pulumi.get(self, "cors")

    @property
    @pulumi.getter(name="rateLimiting")
    def rate_limiting(self) -> 'outputs.GetDeploymentsDeploymentCollectionSpecificationRequestPoliciesRateLimitingResult':
        """
        Limit the number of requests that should be handled for the specified window using a specfic key.
        """
        return pulumi.get(self, "rate_limiting")


@pulumi.output_type
class GetDeploymentsDeploymentCollectionSpecificationRequestPoliciesAuthenticationResult(dict):
    def __init__(__self__, *,
                 audiences: Sequence[str],
                 function_id: str,
                 is_anonymous_access_allowed: bool,
                 issuers: Sequence[str],
                 max_clock_skew_in_seconds: float,
                 public_keys: 'outputs.GetDeploymentsDeploymentCollectionSpecificationRequestPoliciesAuthenticationPublicKeysResult',
                 token_auth_scheme: str,
                 token_header: str,
                 token_query_param: str,
                 type: str,
                 verify_claims: Sequence['outputs.GetDeploymentsDeploymentCollectionSpecificationRequestPoliciesAuthenticationVerifyClaimResult']):
        """
        :param Sequence[str] audiences: The list of intended recipients for the token.
        :param str function_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Oracle Functions function resource.
        :param bool is_anonymous_access_allowed: Whether an unauthenticated user may access the API. Must be "true" to enable ANONYMOUS route authorization.
        :param Sequence[str] issuers: A list of parties that could have issued the token.
        :param float max_clock_skew_in_seconds: The maximum expected time difference between the system clocks of the token issuer and the API Gateway.
        :param 'GetDeploymentsDeploymentCollectionSpecificationRequestPoliciesAuthenticationPublicKeysArgs' public_keys: A set of Public Keys that will be used to verify the JWT signature.
        :param str token_auth_scheme: The authentication scheme that is to be used when authenticating the token. This must to be provided if "tokenHeader" is specified.
        :param str token_header: The name of the header containing the authentication token.
        :param str token_query_param: The name of the query parameter containing the authentication token.
        :param str type: Type of the Response Cache Store Policy.
        :param Sequence['GetDeploymentsDeploymentCollectionSpecificationRequestPoliciesAuthenticationVerifyClaimArgs'] verify_claims: A list of claims which should be validated to consider the token valid.
        """
        pulumi.set(__self__, "audiences", audiences)
        pulumi.set(__self__, "function_id", function_id)
        pulumi.set(__self__, "is_anonymous_access_allowed", is_anonymous_access_allowed)
        pulumi.set(__self__, "issuers", issuers)
        pulumi.set(__self__, "max_clock_skew_in_seconds", max_clock_skew_in_seconds)
        pulumi.set(__self__, "public_keys", public_keys)
        pulumi.set(__self__, "token_auth_scheme", token_auth_scheme)
        pulumi.set(__self__, "token_header", token_header)
        pulumi.set(__self__, "token_query_param", token_query_param)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "verify_claims", verify_claims)

    @property
    @pulumi.getter
    def audiences(self) -> Sequence[str]:
        """
        The list of intended recipients for the token.
        """
        return pulumi.get(self, "audiences")

    @property
    @pulumi.getter(name="functionId")
    def function_id(self) -> str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Oracle Functions function resource.
        """
        return pulumi.get(self, "function_id")

    @property
    @pulumi.getter(name="isAnonymousAccessAllowed")
    def is_anonymous_access_allowed(self) -> bool:
        """
        Whether an unauthenticated user may access the API. Must be "true" to enable ANONYMOUS route authorization.
        """
        return pulumi.get(self, "is_anonymous_access_allowed")

    @property
    @pulumi.getter
    def issuers(self) -> Sequence[str]:
        """
        A list of parties that could have issued the token.
        """
        return pulumi.get(self, "issuers")

    @property
    @pulumi.getter(name="maxClockSkewInSeconds")
    def max_clock_skew_in_seconds(self) -> float:
        """
        The maximum expected time difference between the system clocks of the token issuer and the API Gateway.
        """
        return pulumi.get(self, "max_clock_skew_in_seconds")

    @property
    @pulumi.getter(name="publicKeys")
    def public_keys(self) -> 'outputs.GetDeploymentsDeploymentCollectionSpecificationRequestPoliciesAuthenticationPublicKeysResult':
        """
        A set of Public Keys that will be used to verify the JWT signature.
        """
        return pulumi.get(self, "public_keys")

    @property
    @pulumi.getter(name="tokenAuthScheme")
    def token_auth_scheme(self) -> str:
        """
        The authentication scheme that is to be used when authenticating the token. This must to be provided if "tokenHeader" is specified.
        """
        return pulumi.get(self, "token_auth_scheme")

    @property
    @pulumi.getter(name="tokenHeader")
    def token_header(self) -> str:
        """
        The name of the header containing the authentication token.
        """
        return pulumi.get(self, "token_header")

    @property
    @pulumi.getter(name="tokenQueryParam")
    def token_query_param(self) -> str:
        """
        The name of the query parameter containing the authentication token.
        """
        return pulumi.get(self, "token_query_param")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Type of the Response Cache Store Policy.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="verifyClaims")
    def verify_claims(self) -> Sequence['outputs.GetDeploymentsDeploymentCollectionSpecificationRequestPoliciesAuthenticationVerifyClaimResult']:
        """
        A list of claims which should be validated to consider the token valid.
        """
        return pulumi.get(self, "verify_claims")


@pulumi.output_type
class GetDeploymentsDeploymentCollectionSpecificationRequestPoliciesAuthenticationPublicKeysResult(dict):
    def __init__(__self__, *,
                 is_ssl_verify_disabled: bool,
                 keys: Sequence['outputs.GetDeploymentsDeploymentCollectionSpecificationRequestPoliciesAuthenticationPublicKeysKeyResult'],
                 max_cache_duration_in_hours: int,
                 type: str,
                 uri: str):
        """
        :param bool is_ssl_verify_disabled: Defines whether or not to uphold SSL verification.
        :param Sequence['GetDeploymentsDeploymentCollectionSpecificationRequestPoliciesAuthenticationPublicKeysKeyArgs'] keys: The set of static public keys.
        :param int max_cache_duration_in_hours: The duration for which the JWKS should be cached before it is fetched again.
        :param str type: Type of the Response Cache Store Policy.
        :param str uri: The uri from which to retrieve the key. It must be accessible without authentication.
        """
        pulumi.set(__self__, "is_ssl_verify_disabled", is_ssl_verify_disabled)
        pulumi.set(__self__, "keys", keys)
        pulumi.set(__self__, "max_cache_duration_in_hours", max_cache_duration_in_hours)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "uri", uri)

    @property
    @pulumi.getter(name="isSslVerifyDisabled")
    def is_ssl_verify_disabled(self) -> bool:
        """
        Defines whether or not to uphold SSL verification.
        """
        return pulumi.get(self, "is_ssl_verify_disabled")

    @property
    @pulumi.getter
    def keys(self) -> Sequence['outputs.GetDeploymentsDeploymentCollectionSpecificationRequestPoliciesAuthenticationPublicKeysKeyResult']:
        """
        The set of static public keys.
        """
        return pulumi.get(self, "keys")

    @property
    @pulumi.getter(name="maxCacheDurationInHours")
    def max_cache_duration_in_hours(self) -> int:
        """
        The duration for which the JWKS should be cached before it is fetched again.
        """
        return pulumi.get(self, "max_cache_duration_in_hours")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Type of the Response Cache Store Policy.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def uri(self) -> str:
        """
        The uri from which to retrieve the key. It must be accessible without authentication.
        """
        return pulumi.get(self, "uri")


@pulumi.output_type
class GetDeploymentsDeploymentCollectionSpecificationRequestPoliciesAuthenticationPublicKeysKeyResult(dict):
    def __init__(__self__, *,
                 alg: str,
                 e: str,
                 format: str,
                 key: str,
                 key_ops: Sequence[str],
                 kid: str,
                 kty: str,
                 n: str,
                 use: str):
        """
        :param str alg: The algorithm intended for use with this key.
        :param str e: The base64 url encoded exponent of the RSA public key represented by this key.
        :param str format: The format of the public key.
        :param str key: Name of the claim.
        :param Sequence[str] key_ops: The operations for which this key is to be used.
        :param str kid: A unique key ID. This key will be used to verify the signature of a JWT with matching "kid".
        :param str kty: The key type.
        :param str n: The base64 url encoded modulus of the RSA public key represented by this key.
        :param str use: The intended use of the public key.
        """
        pulumi.set(__self__, "alg", alg)
        pulumi.set(__self__, "e", e)
        pulumi.set(__self__, "format", format)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "key_ops", key_ops)
        pulumi.set(__self__, "kid", kid)
        pulumi.set(__self__, "kty", kty)
        pulumi.set(__self__, "n", n)
        pulumi.set(__self__, "use", use)

    @property
    @pulumi.getter
    def alg(self) -> str:
        """
        The algorithm intended for use with this key.
        """
        return pulumi.get(self, "alg")

    @property
    @pulumi.getter
    def e(self) -> str:
        """
        The base64 url encoded exponent of the RSA public key represented by this key.
        """
        return pulumi.get(self, "e")

    @property
    @pulumi.getter
    def format(self) -> str:
        """
        The format of the public key.
        """
        return pulumi.get(self, "format")

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        Name of the claim.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter(name="keyOps")
    def key_ops(self) -> Sequence[str]:
        """
        The operations for which this key is to be used.
        """
        return pulumi.get(self, "key_ops")

    @property
    @pulumi.getter
    def kid(self) -> str:
        """
        A unique key ID. This key will be used to verify the signature of a JWT with matching "kid".
        """
        return pulumi.get(self, "kid")

    @property
    @pulumi.getter
    def kty(self) -> str:
        """
        The key type.
        """
        return pulumi.get(self, "kty")

    @property
    @pulumi.getter
    def n(self) -> str:
        """
        The base64 url encoded modulus of the RSA public key represented by this key.
        """
        return pulumi.get(self, "n")

    @property
    @pulumi.getter
    def use(self) -> str:
        """
        The intended use of the public key.
        """
        return pulumi.get(self, "use")


@pulumi.output_type
class GetDeploymentsDeploymentCollectionSpecificationRequestPoliciesAuthenticationVerifyClaimResult(dict):
    def __init__(__self__, *,
                 is_required: bool,
                 key: str,
                 values: Sequence[str]):
        """
        :param bool is_required: Whether the claim is required to be present in the JWT or not. If set to "false", the claim values will be matched only if the claim is present in the JWT.
        :param str key: Name of the claim.
        :param Sequence[str] values: A list of new values.  Each value can be a constant or may include one or more expressions enclosed within ${} delimiters.
        """
        pulumi.set(__self__, "is_required", is_required)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter(name="isRequired")
    def is_required(self) -> bool:
        """
        Whether the claim is required to be present in the JWT or not. If set to "false", the claim values will be matched only if the claim is present in the JWT.
        """
        return pulumi.get(self, "is_required")

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        Name of the claim.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        """
        A list of new values.  Each value can be a constant or may include one or more expressions enclosed within ${} delimiters.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class GetDeploymentsDeploymentCollectionSpecificationRequestPoliciesCorsResult(dict):
    def __init__(__self__, *,
                 allowed_headers: Sequence[str],
                 allowed_methods: Sequence[str],
                 allowed_origins: Sequence[str],
                 exposed_headers: Sequence[str],
                 is_allow_credentials_enabled: bool,
                 max_age_in_seconds: int):
        """
        :param Sequence[str] allowed_headers: The list of headers that will be allowed from the client via the Access-Control-Allow-Headers header. '*' will allow all headers.
        :param Sequence[str] allowed_methods: The list of allowed HTTP methods that will be returned for the preflight OPTIONS request in the Access-Control-Allow-Methods header. '*' will allow all methods.
        :param Sequence[str] allowed_origins: The list of allowed origins that the CORS handler will use to respond to CORS requests. The gateway will send the Access-Control-Allow-Origin header with the best origin match for the circumstances. '*' will match any origins, and 'null' will match queries from 'file:' origins. All other origins must be qualified with the scheme, full hostname, and port if necessary.
        :param Sequence[str] exposed_headers: The list of headers that the client will be allowed to see from the response as indicated by the Access-Control-Expose-Headers header. '*' will expose all headers.
        :param bool is_allow_credentials_enabled: Whether to send the Access-Control-Allow-Credentials header to allow CORS requests with cookies.
        :param int max_age_in_seconds: The time in seconds for the client to cache preflight responses. This is sent as the Access-Control-Max-Age if greater than 0.
        """
        pulumi.set(__self__, "allowed_headers", allowed_headers)
        pulumi.set(__self__, "allowed_methods", allowed_methods)
        pulumi.set(__self__, "allowed_origins", allowed_origins)
        pulumi.set(__self__, "exposed_headers", exposed_headers)
        pulumi.set(__self__, "is_allow_credentials_enabled", is_allow_credentials_enabled)
        pulumi.set(__self__, "max_age_in_seconds", max_age_in_seconds)

    @property
    @pulumi.getter(name="allowedHeaders")
    def allowed_headers(self) -> Sequence[str]:
        """
        The list of headers that will be allowed from the client via the Access-Control-Allow-Headers header. '*' will allow all headers.
        """
        return pulumi.get(self, "allowed_headers")

    @property
    @pulumi.getter(name="allowedMethods")
    def allowed_methods(self) -> Sequence[str]:
        """
        The list of allowed HTTP methods that will be returned for the preflight OPTIONS request in the Access-Control-Allow-Methods header. '*' will allow all methods.
        """
        return pulumi.get(self, "allowed_methods")

    @property
    @pulumi.getter(name="allowedOrigins")
    def allowed_origins(self) -> Sequence[str]:
        """
        The list of allowed origins that the CORS handler will use to respond to CORS requests. The gateway will send the Access-Control-Allow-Origin header with the best origin match for the circumstances. '*' will match any origins, and 'null' will match queries from 'file:' origins. All other origins must be qualified with the scheme, full hostname, and port if necessary.
        """
        return pulumi.get(self, "allowed_origins")

    @property
    @pulumi.getter(name="exposedHeaders")
    def exposed_headers(self) -> Sequence[str]:
        """
        The list of headers that the client will be allowed to see from the response as indicated by the Access-Control-Expose-Headers header. '*' will expose all headers.
        """
        return pulumi.get(self, "exposed_headers")

    @property
    @pulumi.getter(name="isAllowCredentialsEnabled")
    def is_allow_credentials_enabled(self) -> bool:
        """
        Whether to send the Access-Control-Allow-Credentials header to allow CORS requests with cookies.
        """
        return pulumi.get(self, "is_allow_credentials_enabled")

    @property
    @pulumi.getter(name="maxAgeInSeconds")
    def max_age_in_seconds(self) -> int:
        """
        The time in seconds for the client to cache preflight responses. This is sent as the Access-Control-Max-Age if greater than 0.
        """
        return pulumi.get(self, "max_age_in_seconds")


@pulumi.output_type
class GetDeploymentsDeploymentCollectionSpecificationRequestPoliciesRateLimitingResult(dict):
    def __init__(__self__, *,
                 rate_in_requests_per_second: int,
                 rate_key: str):
        """
        :param int rate_in_requests_per_second: The maximum number of requests per second to allow.
        :param str rate_key: The key used to group requests together.
        """
        pulumi.set(__self__, "rate_in_requests_per_second", rate_in_requests_per_second)
        pulumi.set(__self__, "rate_key", rate_key)

    @property
    @pulumi.getter(name="rateInRequestsPerSecond")
    def rate_in_requests_per_second(self) -> int:
        """
        The maximum number of requests per second to allow.
        """
        return pulumi.get(self, "rate_in_requests_per_second")

    @property
    @pulumi.getter(name="rateKey")
    def rate_key(self) -> str:
        """
        The key used to group requests together.
        """
        return pulumi.get(self, "rate_key")


@pulumi.output_type
class GetDeploymentsDeploymentCollectionSpecificationRouteResult(dict):
    def __init__(__self__, *,
                 backend: 'outputs.GetDeploymentsDeploymentCollectionSpecificationRouteBackendResult',
                 logging_policies: 'outputs.GetDeploymentsDeploymentCollectionSpecificationRouteLoggingPoliciesResult',
                 methods: Sequence[str],
                 path: str,
                 request_policies: 'outputs.GetDeploymentsDeploymentCollectionSpecificationRouteRequestPoliciesResult',
                 response_policies: 'outputs.GetDeploymentsDeploymentCollectionSpecificationRouteResponsePoliciesResult'):
        """
        :param 'GetDeploymentsDeploymentCollectionSpecificationRouteBackendArgs' backend: The backend to forward requests to.
        :param 'GetDeploymentsDeploymentCollectionSpecificationRouteLoggingPoliciesArgs' logging_policies: Policies controlling the pushing of logs to Oracle Cloud Infrastructure Public Logging.
        :param Sequence[str] methods: A list of allowed methods on this route.
        :param str path: A URL path pattern that must be matched on this route. The path pattern may contain a subset of RFC 6570 identifiers to allow wildcard and parameterized matching.
        :param 'GetDeploymentsDeploymentCollectionSpecificationRouteRequestPoliciesArgs' request_policies: Behavior applied to any requests received by the API on this route.
        :param 'GetDeploymentsDeploymentCollectionSpecificationRouteResponsePoliciesArgs' response_policies: Behavior applied to any responses sent by the API for requests on this route.
        """
        pulumi.set(__self__, "backend", backend)
        pulumi.set(__self__, "logging_policies", logging_policies)
        pulumi.set(__self__, "methods", methods)
        pulumi.set(__self__, "path", path)
        pulumi.set(__self__, "request_policies", request_policies)
        pulumi.set(__self__, "response_policies", response_policies)

    @property
    @pulumi.getter
    def backend(self) -> 'outputs.GetDeploymentsDeploymentCollectionSpecificationRouteBackendResult':
        """
        The backend to forward requests to.
        """
        return pulumi.get(self, "backend")

    @property
    @pulumi.getter(name="loggingPolicies")
    def logging_policies(self) -> 'outputs.GetDeploymentsDeploymentCollectionSpecificationRouteLoggingPoliciesResult':
        """
        Policies controlling the pushing of logs to Oracle Cloud Infrastructure Public Logging.
        """
        return pulumi.get(self, "logging_policies")

    @property
    @pulumi.getter
    def methods(self) -> Sequence[str]:
        """
        A list of allowed methods on this route.
        """
        return pulumi.get(self, "methods")

    @property
    @pulumi.getter
    def path(self) -> str:
        """
        A URL path pattern that must be matched on this route. The path pattern may contain a subset of RFC 6570 identifiers to allow wildcard and parameterized matching.
        """
        return pulumi.get(self, "path")

    @property
    @pulumi.getter(name="requestPolicies")
    def request_policies(self) -> 'outputs.GetDeploymentsDeploymentCollectionSpecificationRouteRequestPoliciesResult':
        """
        Behavior applied to any requests received by the API on this route.
        """
        return pulumi.get(self, "request_policies")

    @property
    @pulumi.getter(name="responsePolicies")
    def response_policies(self) -> 'outputs.GetDeploymentsDeploymentCollectionSpecificationRouteResponsePoliciesResult':
        """
        Behavior applied to any responses sent by the API for requests on this route.
        """
        return pulumi.get(self, "response_policies")


@pulumi.output_type
class GetDeploymentsDeploymentCollectionSpecificationRouteBackendResult(dict):
    def __init__(__self__, *,
                 body: str,
                 connect_timeout_in_seconds: float,
                 function_id: str,
                 headers: Sequence['outputs.GetDeploymentsDeploymentCollectionSpecificationRouteBackendHeaderResult'],
                 is_ssl_verify_disabled: bool,
                 read_timeout_in_seconds: float,
                 send_timeout_in_seconds: float,
                 status: int,
                 type: str,
                 url: str):
        """
        :param str body: The body of the stock response from the mock backend.
        :param float connect_timeout_in_seconds: Defines a timeout for establishing a connection with a proxied server.
        :param str function_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Oracle Functions function resource.
        :param bool is_ssl_verify_disabled: Defines whether or not to uphold SSL verification.
        :param float read_timeout_in_seconds: Defines a timeout for reading a response from the proxied server.
        :param float send_timeout_in_seconds: Defines a timeout for transmitting a request to the proxied server.
        :param int status: The status code of the stock response from the mock backend.
        :param str type: Type of the Response Cache Store Policy.
        """
        pulumi.set(__self__, "body", body)
        pulumi.set(__self__, "connect_timeout_in_seconds", connect_timeout_in_seconds)
        pulumi.set(__self__, "function_id", function_id)
        pulumi.set(__self__, "headers", headers)
        pulumi.set(__self__, "is_ssl_verify_disabled", is_ssl_verify_disabled)
        pulumi.set(__self__, "read_timeout_in_seconds", read_timeout_in_seconds)
        pulumi.set(__self__, "send_timeout_in_seconds", send_timeout_in_seconds)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def body(self) -> str:
        """
        The body of the stock response from the mock backend.
        """
        return pulumi.get(self, "body")

    @property
    @pulumi.getter(name="connectTimeoutInSeconds")
    def connect_timeout_in_seconds(self) -> float:
        """
        Defines a timeout for establishing a connection with a proxied server.
        """
        return pulumi.get(self, "connect_timeout_in_seconds")

    @property
    @pulumi.getter(name="functionId")
    def function_id(self) -> str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Oracle Functions function resource.
        """
        return pulumi.get(self, "function_id")

    @property
    @pulumi.getter
    def headers(self) -> Sequence['outputs.GetDeploymentsDeploymentCollectionSpecificationRouteBackendHeaderResult']:
        return pulumi.get(self, "headers")

    @property
    @pulumi.getter(name="isSslVerifyDisabled")
    def is_ssl_verify_disabled(self) -> bool:
        """
        Defines whether or not to uphold SSL verification.
        """
        return pulumi.get(self, "is_ssl_verify_disabled")

    @property
    @pulumi.getter(name="readTimeoutInSeconds")
    def read_timeout_in_seconds(self) -> float:
        """
        Defines a timeout for reading a response from the proxied server.
        """
        return pulumi.get(self, "read_timeout_in_seconds")

    @property
    @pulumi.getter(name="sendTimeoutInSeconds")
    def send_timeout_in_seconds(self) -> float:
        """
        Defines a timeout for transmitting a request to the proxied server.
        """
        return pulumi.get(self, "send_timeout_in_seconds")

    @property
    @pulumi.getter
    def status(self) -> int:
        """
        The status code of the stock response from the mock backend.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Type of the Response Cache Store Policy.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def url(self) -> str:
        return pulumi.get(self, "url")


@pulumi.output_type
class GetDeploymentsDeploymentCollectionSpecificationRouteBackendHeaderResult(dict):
    def __init__(__self__, *,
                 name: str,
                 value: str):
        """
        :param str name: The case-insensitive name of the header.  This name must be unique across transformation policies.
        :param str value: Value of the header.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The case-insensitive name of the header.  This name must be unique across transformation policies.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Value of the header.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDeploymentsDeploymentCollectionSpecificationRouteLoggingPoliciesResult(dict):
    def __init__(__self__, *,
                 access_log: 'outputs.GetDeploymentsDeploymentCollectionSpecificationRouteLoggingPoliciesAccessLogResult',
                 execution_log: 'outputs.GetDeploymentsDeploymentCollectionSpecificationRouteLoggingPoliciesExecutionLogResult'):
        """
        :param 'GetDeploymentsDeploymentCollectionSpecificationRouteLoggingPoliciesAccessLogArgs' access_log: Configures the logging policies for the access logs of an API Deployment.
        :param 'GetDeploymentsDeploymentCollectionSpecificationRouteLoggingPoliciesExecutionLogArgs' execution_log: Configures the logging policies for the execution logs of an API Deployment.
        """
        pulumi.set(__self__, "access_log", access_log)
        pulumi.set(__self__, "execution_log", execution_log)

    @property
    @pulumi.getter(name="accessLog")
    def access_log(self) -> 'outputs.GetDeploymentsDeploymentCollectionSpecificationRouteLoggingPoliciesAccessLogResult':
        """
        Configures the logging policies for the access logs of an API Deployment.
        """
        return pulumi.get(self, "access_log")

    @property
    @pulumi.getter(name="executionLog")
    def execution_log(self) -> 'outputs.GetDeploymentsDeploymentCollectionSpecificationRouteLoggingPoliciesExecutionLogResult':
        """
        Configures the logging policies for the execution logs of an API Deployment.
        """
        return pulumi.get(self, "execution_log")


@pulumi.output_type
class GetDeploymentsDeploymentCollectionSpecificationRouteLoggingPoliciesAccessLogResult(dict):
    def __init__(__self__, *,
                 is_enabled: bool):
        """
        :param bool is_enabled: Whether this policy is currently enabled.
        """
        pulumi.set(__self__, "is_enabled", is_enabled)

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> bool:
        """
        Whether this policy is currently enabled.
        """
        return pulumi.get(self, "is_enabled")


@pulumi.output_type
class GetDeploymentsDeploymentCollectionSpecificationRouteLoggingPoliciesExecutionLogResult(dict):
    def __init__(__self__, *,
                 is_enabled: bool,
                 log_level: str):
        """
        :param bool is_enabled: Whether this policy is currently enabled.
        :param str log_level: Specifies the log level used to control logging output of execution logs. Enabling logging at a given level also enables logging at all higher levels.
        """
        pulumi.set(__self__, "is_enabled", is_enabled)
        pulumi.set(__self__, "log_level", log_level)

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> bool:
        """
        Whether this policy is currently enabled.
        """
        return pulumi.get(self, "is_enabled")

    @property
    @pulumi.getter(name="logLevel")
    def log_level(self) -> str:
        """
        Specifies the log level used to control logging output of execution logs. Enabling logging at a given level also enables logging at all higher levels.
        """
        return pulumi.get(self, "log_level")


@pulumi.output_type
class GetDeploymentsDeploymentCollectionSpecificationRouteRequestPoliciesResult(dict):
    def __init__(__self__, *,
                 authorization: 'outputs.GetDeploymentsDeploymentCollectionSpecificationRouteRequestPoliciesAuthorizationResult',
                 body_validation: 'outputs.GetDeploymentsDeploymentCollectionSpecificationRouteRequestPoliciesBodyValidationResult',
                 cors: 'outputs.GetDeploymentsDeploymentCollectionSpecificationRouteRequestPoliciesCorsResult',
                 header_transformations: 'outputs.GetDeploymentsDeploymentCollectionSpecificationRouteRequestPoliciesHeaderTransformationsResult',
                 header_validations: 'outputs.GetDeploymentsDeploymentCollectionSpecificationRouteRequestPoliciesHeaderValidationsResult',
                 query_parameter_transformations: 'outputs.GetDeploymentsDeploymentCollectionSpecificationRouteRequestPoliciesQueryParameterTransformationsResult',
                 query_parameter_validations: 'outputs.GetDeploymentsDeploymentCollectionSpecificationRouteRequestPoliciesQueryParameterValidationsResult',
                 response_cache_lookup: 'outputs.GetDeploymentsDeploymentCollectionSpecificationRouteRequestPoliciesResponseCacheLookupResult'):
        """
        :param 'GetDeploymentsDeploymentCollectionSpecificationRouteRequestPoliciesAuthorizationArgs' authorization: If authentication has been performed, validate whether the request scope (if any) applies to this route. If no RouteAuthorizationPolicy is defined for a route, a policy with a type of AUTHENTICATION_ONLY is applied.
        :param 'GetDeploymentsDeploymentCollectionSpecificationRouteRequestPoliciesBodyValidationArgs' body_validation: Validate the payload body of the incoming API requests on a specific route.
        :param 'GetDeploymentsDeploymentCollectionSpecificationRouteRequestPoliciesCorsArgs' cors: Enable CORS (Cross-Origin-Resource-Sharing) request handling.
        :param 'GetDeploymentsDeploymentCollectionSpecificationRouteRequestPoliciesHeaderTransformationsArgs' header_transformations: A set of transformations to apply to HTTP headers that pass through the gateway.
        :param 'GetDeploymentsDeploymentCollectionSpecificationRouteRequestPoliciesHeaderValidationsArgs' header_validations: Validate the HTTP headers on the incoming API requests on a specific route.
        :param 'GetDeploymentsDeploymentCollectionSpecificationRouteRequestPoliciesQueryParameterTransformationsArgs' query_parameter_transformations: A set of transformations to apply to query parameters that pass through the gateway.
        :param 'GetDeploymentsDeploymentCollectionSpecificationRouteRequestPoliciesQueryParameterValidationsArgs' query_parameter_validations: Validate the URL query parameters on the incoming API requests on a specific route.
        :param 'GetDeploymentsDeploymentCollectionSpecificationRouteRequestPoliciesResponseCacheLookupArgs' response_cache_lookup: Base policy for Response Cache lookup.
        """
        pulumi.set(__self__, "authorization", authorization)
        pulumi.set(__self__, "body_validation", body_validation)
        pulumi.set(__self__, "cors", cors)
        pulumi.set(__self__, "header_transformations", header_transformations)
        pulumi.set(__self__, "header_validations", header_validations)
        pulumi.set(__self__, "query_parameter_transformations", query_parameter_transformations)
        pulumi.set(__self__, "query_parameter_validations", query_parameter_validations)
        pulumi.set(__self__, "response_cache_lookup", response_cache_lookup)

    @property
    @pulumi.getter
    def authorization(self) -> 'outputs.GetDeploymentsDeploymentCollectionSpecificationRouteRequestPoliciesAuthorizationResult':
        """
        If authentication has been performed, validate whether the request scope (if any) applies to this route. If no RouteAuthorizationPolicy is defined for a route, a policy with a type of AUTHENTICATION_ONLY is applied.
        """
        return pulumi.get(self, "authorization")

    @property
    @pulumi.getter(name="bodyValidation")
    def body_validation(self) -> 'outputs.GetDeploymentsDeploymentCollectionSpecificationRouteRequestPoliciesBodyValidationResult':
        """
        Validate the payload body of the incoming API requests on a specific route.
        """
        return pulumi.get(self, "body_validation")

    @property
    @pulumi.getter
    def cors(self) -> 'outputs.GetDeploymentsDeploymentCollectionSpecificationRouteRequestPoliciesCorsResult':
        """
        Enable CORS (Cross-Origin-Resource-Sharing) request handling.
        """
        return pulumi.get(self, "cors")

    @property
    @pulumi.getter(name="headerTransformations")
    def header_transformations(self) -> 'outputs.GetDeploymentsDeploymentCollectionSpecificationRouteRequestPoliciesHeaderTransformationsResult':
        """
        A set of transformations to apply to HTTP headers that pass through the gateway.
        """
        return pulumi.get(self, "header_transformations")

    @property
    @pulumi.getter(name="headerValidations")
    def header_validations(self) -> 'outputs.GetDeploymentsDeploymentCollectionSpecificationRouteRequestPoliciesHeaderValidationsResult':
        """
        Validate the HTTP headers on the incoming API requests on a specific route.
        """
        return pulumi.get(self, "header_validations")

    @property
    @pulumi.getter(name="queryParameterTransformations")
    def query_parameter_transformations(self) -> 'outputs.GetDeploymentsDeploymentCollectionSpecificationRouteRequestPoliciesQueryParameterTransformationsResult':
        """
        A set of transformations to apply to query parameters that pass through the gateway.
        """
        return pulumi.get(self, "query_parameter_transformations")

    @property
    @pulumi.getter(name="queryParameterValidations")
    def query_parameter_validations(self) -> 'outputs.GetDeploymentsDeploymentCollectionSpecificationRouteRequestPoliciesQueryParameterValidationsResult':
        """
        Validate the URL query parameters on the incoming API requests on a specific route.
        """
        return pulumi.get(self, "query_parameter_validations")

    @property
    @pulumi.getter(name="responseCacheLookup")
    def response_cache_lookup(self) -> 'outputs.GetDeploymentsDeploymentCollectionSpecificationRouteRequestPoliciesResponseCacheLookupResult':
        """
        Base policy for Response Cache lookup.
        """
        return pulumi.get(self, "response_cache_lookup")


@pulumi.output_type
class GetDeploymentsDeploymentCollectionSpecificationRouteRequestPoliciesAuthorizationResult(dict):
    def __init__(__self__, *,
                 allowed_scopes: Sequence[str],
                 type: str):
        """
        :param Sequence[str] allowed_scopes: A user whose scope includes any of these access ranges is allowed on this route. Access ranges are case-sensitive.
        :param str type: Type of the Response Cache Store Policy.
        """
        pulumi.set(__self__, "allowed_scopes", allowed_scopes)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="allowedScopes")
    def allowed_scopes(self) -> Sequence[str]:
        """
        A user whose scope includes any of these access ranges is allowed on this route. Access ranges are case-sensitive.
        """
        return pulumi.get(self, "allowed_scopes")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Type of the Response Cache Store Policy.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetDeploymentsDeploymentCollectionSpecificationRouteRequestPoliciesBodyValidationResult(dict):
    def __init__(__self__, *,
                 contents: Sequence['outputs.GetDeploymentsDeploymentCollectionSpecificationRouteRequestPoliciesBodyValidationContentResult'],
                 required: bool,
                 validation_mode: str):
        """
        :param Sequence['GetDeploymentsDeploymentCollectionSpecificationRouteRequestPoliciesBodyValidationContentArgs'] contents: The content of the request body.
        :param bool required: Determines if the parameter is required in the request.
        :param str validation_mode: Validation behavior mode.
        """
        pulumi.set(__self__, "contents", contents)
        pulumi.set(__self__, "required", required)
        pulumi.set(__self__, "validation_mode", validation_mode)

    @property
    @pulumi.getter
    def contents(self) -> Sequence['outputs.GetDeploymentsDeploymentCollectionSpecificationRouteRequestPoliciesBodyValidationContentResult']:
        """
        The content of the request body.
        """
        return pulumi.get(self, "contents")

    @property
    @pulumi.getter
    def required(self) -> bool:
        """
        Determines if the parameter is required in the request.
        """
        return pulumi.get(self, "required")

    @property
    @pulumi.getter(name="validationMode")
    def validation_mode(self) -> str:
        """
        Validation behavior mode.
        """
        return pulumi.get(self, "validation_mode")


@pulumi.output_type
class GetDeploymentsDeploymentCollectionSpecificationRouteRequestPoliciesBodyValidationContentResult(dict):
    def __init__(__self__, *,
                 media_type: str,
                 validation_type: str):
        """
        :param str media_type: The key is a [media type range](https://tools.ietf.org/html/rfc7231#appendix-D) subset restricted to the following schema
        :param str validation_type: Validation type defines the content validation method.
        """
        pulumi.set(__self__, "media_type", media_type)
        pulumi.set(__self__, "validation_type", validation_type)

    @property
    @pulumi.getter(name="mediaType")
    def media_type(self) -> str:
        """
        The key is a [media type range](https://tools.ietf.org/html/rfc7231#appendix-D) subset restricted to the following schema
        """
        return pulumi.get(self, "media_type")

    @property
    @pulumi.getter(name="validationType")
    def validation_type(self) -> str:
        """
        Validation type defines the content validation method.
        """
        return pulumi.get(self, "validation_type")


@pulumi.output_type
class GetDeploymentsDeploymentCollectionSpecificationRouteRequestPoliciesCorsResult(dict):
    def __init__(__self__, *,
                 allowed_headers: Sequence[str],
                 allowed_methods: Sequence[str],
                 allowed_origins: Sequence[str],
                 exposed_headers: Sequence[str],
                 is_allow_credentials_enabled: bool,
                 max_age_in_seconds: int):
        """
        :param Sequence[str] allowed_headers: The list of headers that will be allowed from the client via the Access-Control-Allow-Headers header. '*' will allow all headers.
        :param Sequence[str] allowed_methods: The list of allowed HTTP methods that will be returned for the preflight OPTIONS request in the Access-Control-Allow-Methods header. '*' will allow all methods.
        :param Sequence[str] allowed_origins: The list of allowed origins that the CORS handler will use to respond to CORS requests. The gateway will send the Access-Control-Allow-Origin header with the best origin match for the circumstances. '*' will match any origins, and 'null' will match queries from 'file:' origins. All other origins must be qualified with the scheme, full hostname, and port if necessary.
        :param Sequence[str] exposed_headers: The list of headers that the client will be allowed to see from the response as indicated by the Access-Control-Expose-Headers header. '*' will expose all headers.
        :param bool is_allow_credentials_enabled: Whether to send the Access-Control-Allow-Credentials header to allow CORS requests with cookies.
        :param int max_age_in_seconds: The time in seconds for the client to cache preflight responses. This is sent as the Access-Control-Max-Age if greater than 0.
        """
        pulumi.set(__self__, "allowed_headers", allowed_headers)
        pulumi.set(__self__, "allowed_methods", allowed_methods)
        pulumi.set(__self__, "allowed_origins", allowed_origins)
        pulumi.set(__self__, "exposed_headers", exposed_headers)
        pulumi.set(__self__, "is_allow_credentials_enabled", is_allow_credentials_enabled)
        pulumi.set(__self__, "max_age_in_seconds", max_age_in_seconds)

    @property
    @pulumi.getter(name="allowedHeaders")
    def allowed_headers(self) -> Sequence[str]:
        """
        The list of headers that will be allowed from the client via the Access-Control-Allow-Headers header. '*' will allow all headers.
        """
        return pulumi.get(self, "allowed_headers")

    @property
    @pulumi.getter(name="allowedMethods")
    def allowed_methods(self) -> Sequence[str]:
        """
        The list of allowed HTTP methods that will be returned for the preflight OPTIONS request in the Access-Control-Allow-Methods header. '*' will allow all methods.
        """
        return pulumi.get(self, "allowed_methods")

    @property
    @pulumi.getter(name="allowedOrigins")
    def allowed_origins(self) -> Sequence[str]:
        """
        The list of allowed origins that the CORS handler will use to respond to CORS requests. The gateway will send the Access-Control-Allow-Origin header with the best origin match for the circumstances. '*' will match any origins, and 'null' will match queries from 'file:' origins. All other origins must be qualified with the scheme, full hostname, and port if necessary.
        """
        return pulumi.get(self, "allowed_origins")

    @property
    @pulumi.getter(name="exposedHeaders")
    def exposed_headers(self) -> Sequence[str]:
        """
        The list of headers that the client will be allowed to see from the response as indicated by the Access-Control-Expose-Headers header. '*' will expose all headers.
        """
        return pulumi.get(self, "exposed_headers")

    @property
    @pulumi.getter(name="isAllowCredentialsEnabled")
    def is_allow_credentials_enabled(self) -> bool:
        """
        Whether to send the Access-Control-Allow-Credentials header to allow CORS requests with cookies.
        """
        return pulumi.get(self, "is_allow_credentials_enabled")

    @property
    @pulumi.getter(name="maxAgeInSeconds")
    def max_age_in_seconds(self) -> int:
        """
        The time in seconds for the client to cache preflight responses. This is sent as the Access-Control-Max-Age if greater than 0.
        """
        return pulumi.get(self, "max_age_in_seconds")


@pulumi.output_type
class GetDeploymentsDeploymentCollectionSpecificationRouteRequestPoliciesHeaderTransformationsResult(dict):
    def __init__(__self__, *,
                 filter_headers: 'outputs.GetDeploymentsDeploymentCollectionSpecificationRouteRequestPoliciesHeaderTransformationsFilterHeadersResult',
                 rename_headers: 'outputs.GetDeploymentsDeploymentCollectionSpecificationRouteRequestPoliciesHeaderTransformationsRenameHeadersResult',
                 set_headers: 'outputs.GetDeploymentsDeploymentCollectionSpecificationRouteRequestPoliciesHeaderTransformationsSetHeadersResult'):
        """
        :param 'GetDeploymentsDeploymentCollectionSpecificationRouteRequestPoliciesHeaderTransformationsFilterHeadersArgs' filter_headers: Filter HTTP headers as they pass through the gateway.  The gateway applies filters after other transformations, so any headers set or renamed must also be listed here when using an ALLOW type policy.
        :param 'GetDeploymentsDeploymentCollectionSpecificationRouteRequestPoliciesHeaderTransformationsRenameHeadersArgs' rename_headers: Rename HTTP headers as they pass through the gateway.
        :param 'GetDeploymentsDeploymentCollectionSpecificationRouteRequestPoliciesHeaderTransformationsSetHeadersArgs' set_headers: Set HTTP headers as they pass through the gateway.
        """
        pulumi.set(__self__, "filter_headers", filter_headers)
        pulumi.set(__self__, "rename_headers", rename_headers)
        pulumi.set(__self__, "set_headers", set_headers)

    @property
    @pulumi.getter(name="filterHeaders")
    def filter_headers(self) -> 'outputs.GetDeploymentsDeploymentCollectionSpecificationRouteRequestPoliciesHeaderTransformationsFilterHeadersResult':
        """
        Filter HTTP headers as they pass through the gateway.  The gateway applies filters after other transformations, so any headers set or renamed must also be listed here when using an ALLOW type policy.
        """
        return pulumi.get(self, "filter_headers")

    @property
    @pulumi.getter(name="renameHeaders")
    def rename_headers(self) -> 'outputs.GetDeploymentsDeploymentCollectionSpecificationRouteRequestPoliciesHeaderTransformationsRenameHeadersResult':
        """
        Rename HTTP headers as they pass through the gateway.
        """
        return pulumi.get(self, "rename_headers")

    @property
    @pulumi.getter(name="setHeaders")
    def set_headers(self) -> 'outputs.GetDeploymentsDeploymentCollectionSpecificationRouteRequestPoliciesHeaderTransformationsSetHeadersResult':
        """
        Set HTTP headers as they pass through the gateway.
        """
        return pulumi.get(self, "set_headers")


@pulumi.output_type
class GetDeploymentsDeploymentCollectionSpecificationRouteRequestPoliciesHeaderTransformationsFilterHeadersResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetDeploymentsDeploymentCollectionSpecificationRouteRequestPoliciesHeaderTransformationsFilterHeadersItemResult'],
                 type: str):
        """
        :param Sequence['GetDeploymentsDeploymentCollectionSpecificationRouteRequestPoliciesHeaderTransformationsFilterHeadersItemArgs'] items: The list of headers.
        :param str type: Type of the Response Cache Store Policy.
        """
        pulumi.set(__self__, "items", items)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetDeploymentsDeploymentCollectionSpecificationRouteRequestPoliciesHeaderTransformationsFilterHeadersItemResult']:
        """
        The list of headers.
        """
        return pulumi.get(self, "items")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Type of the Response Cache Store Policy.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetDeploymentsDeploymentCollectionSpecificationRouteRequestPoliciesHeaderTransformationsFilterHeadersItemResult(dict):
    def __init__(__self__, *,
                 name: str):
        """
        :param str name: The case-insensitive name of the header.  This name must be unique across transformation policies.
        """
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The case-insensitive name of the header.  This name must be unique across transformation policies.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetDeploymentsDeploymentCollectionSpecificationRouteRequestPoliciesHeaderTransformationsRenameHeadersResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetDeploymentsDeploymentCollectionSpecificationRouteRequestPoliciesHeaderTransformationsRenameHeadersItemResult']):
        """
        :param Sequence['GetDeploymentsDeploymentCollectionSpecificationRouteRequestPoliciesHeaderTransformationsRenameHeadersItemArgs'] items: The list of headers.
        """
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetDeploymentsDeploymentCollectionSpecificationRouteRequestPoliciesHeaderTransformationsRenameHeadersItemResult']:
        """
        The list of headers.
        """
        return pulumi.get(self, "items")


@pulumi.output_type
class GetDeploymentsDeploymentCollectionSpecificationRouteRequestPoliciesHeaderTransformationsRenameHeadersItemResult(dict):
    def __init__(__self__, *,
                 from_: str,
                 to: str):
        """
        :param str from_: The original case-insensitive name of the header.  This name must be unique across transformation policies.
        :param str to: The new name of the header.  This name must be unique across transformation policies.
        """
        pulumi.set(__self__, "from_", from_)
        pulumi.set(__self__, "to", to)

    @property
    @pulumi.getter(name="from")
    def from_(self) -> str:
        """
        The original case-insensitive name of the header.  This name must be unique across transformation policies.
        """
        return pulumi.get(self, "from_")

    @property
    @pulumi.getter
    def to(self) -> str:
        """
        The new name of the header.  This name must be unique across transformation policies.
        """
        return pulumi.get(self, "to")


@pulumi.output_type
class GetDeploymentsDeploymentCollectionSpecificationRouteRequestPoliciesHeaderTransformationsSetHeadersResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetDeploymentsDeploymentCollectionSpecificationRouteRequestPoliciesHeaderTransformationsSetHeadersItemResult']):
        """
        :param Sequence['GetDeploymentsDeploymentCollectionSpecificationRouteRequestPoliciesHeaderTransformationsSetHeadersItemArgs'] items: The list of headers.
        """
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetDeploymentsDeploymentCollectionSpecificationRouteRequestPoliciesHeaderTransformationsSetHeadersItemResult']:
        """
        The list of headers.
        """
        return pulumi.get(self, "items")


@pulumi.output_type
class GetDeploymentsDeploymentCollectionSpecificationRouteRequestPoliciesHeaderTransformationsSetHeadersItemResult(dict):
    def __init__(__self__, *,
                 if_exists: str,
                 name: str,
                 values: Sequence[str]):
        """
        :param str if_exists: If a header with the same name already exists in the request, OVERWRITE will overwrite the value, APPEND will append to the existing value, or SKIP will keep the existing value.
        :param str name: The case-insensitive name of the header.  This name must be unique across transformation policies.
        :param Sequence[str] values: A list of new values.  Each value can be a constant or may include one or more expressions enclosed within ${} delimiters.
        """
        pulumi.set(__self__, "if_exists", if_exists)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter(name="ifExists")
    def if_exists(self) -> str:
        """
        If a header with the same name already exists in the request, OVERWRITE will overwrite the value, APPEND will append to the existing value, or SKIP will keep the existing value.
        """
        return pulumi.get(self, "if_exists")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The case-insensitive name of the header.  This name must be unique across transformation policies.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        """
        A list of new values.  Each value can be a constant or may include one or more expressions enclosed within ${} delimiters.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class GetDeploymentsDeploymentCollectionSpecificationRouteRequestPoliciesHeaderValidationsResult(dict):
    def __init__(__self__, *,
                 headers: Sequence['outputs.GetDeploymentsDeploymentCollectionSpecificationRouteRequestPoliciesHeaderValidationsHeaderResult'],
                 validation_mode: str):
        """
        :param str validation_mode: Validation behavior mode.
        """
        pulumi.set(__self__, "headers", headers)
        pulumi.set(__self__, "validation_mode", validation_mode)

    @property
    @pulumi.getter
    def headers(self) -> Sequence['outputs.GetDeploymentsDeploymentCollectionSpecificationRouteRequestPoliciesHeaderValidationsHeaderResult']:
        return pulumi.get(self, "headers")

    @property
    @pulumi.getter(name="validationMode")
    def validation_mode(self) -> str:
        """
        Validation behavior mode.
        """
        return pulumi.get(self, "validation_mode")


@pulumi.output_type
class GetDeploymentsDeploymentCollectionSpecificationRouteRequestPoliciesHeaderValidationsHeaderResult(dict):
    def __init__(__self__, *,
                 name: str,
                 required: bool):
        """
        :param str name: The case-insensitive name of the header.  This name must be unique across transformation policies.
        :param bool required: Determines if the parameter is required in the request.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "required", required)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The case-insensitive name of the header.  This name must be unique across transformation policies.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def required(self) -> bool:
        """
        Determines if the parameter is required in the request.
        """
        return pulumi.get(self, "required")


@pulumi.output_type
class GetDeploymentsDeploymentCollectionSpecificationRouteRequestPoliciesQueryParameterTransformationsResult(dict):
    def __init__(__self__, *,
                 filter_query_parameters: 'outputs.GetDeploymentsDeploymentCollectionSpecificationRouteRequestPoliciesQueryParameterTransformationsFilterQueryParametersResult',
                 rename_query_parameters: 'outputs.GetDeploymentsDeploymentCollectionSpecificationRouteRequestPoliciesQueryParameterTransformationsRenameQueryParametersResult',
                 set_query_parameters: 'outputs.GetDeploymentsDeploymentCollectionSpecificationRouteRequestPoliciesQueryParameterTransformationsSetQueryParametersResult'):
        """
        :param 'GetDeploymentsDeploymentCollectionSpecificationRouteRequestPoliciesQueryParameterTransformationsFilterQueryParametersArgs' filter_query_parameters: Filter parameters from the query string as they pass through the gateway.  The gateway applies filters after other transformations, so any parameters set or renamed must also be listed here when using an ALLOW type policy.
        :param 'GetDeploymentsDeploymentCollectionSpecificationRouteRequestPoliciesQueryParameterTransformationsRenameQueryParametersArgs' rename_query_parameters: Rename parameters on the query string as they pass through the gateway.
        :param 'GetDeploymentsDeploymentCollectionSpecificationRouteRequestPoliciesQueryParameterTransformationsSetQueryParametersArgs' set_query_parameters: Set parameters on the query string as they pass through the gateway.
        """
        pulumi.set(__self__, "filter_query_parameters", filter_query_parameters)
        pulumi.set(__self__, "rename_query_parameters", rename_query_parameters)
        pulumi.set(__self__, "set_query_parameters", set_query_parameters)

    @property
    @pulumi.getter(name="filterQueryParameters")
    def filter_query_parameters(self) -> 'outputs.GetDeploymentsDeploymentCollectionSpecificationRouteRequestPoliciesQueryParameterTransformationsFilterQueryParametersResult':
        """
        Filter parameters from the query string as they pass through the gateway.  The gateway applies filters after other transformations, so any parameters set or renamed must also be listed here when using an ALLOW type policy.
        """
        return pulumi.get(self, "filter_query_parameters")

    @property
    @pulumi.getter(name="renameQueryParameters")
    def rename_query_parameters(self) -> 'outputs.GetDeploymentsDeploymentCollectionSpecificationRouteRequestPoliciesQueryParameterTransformationsRenameQueryParametersResult':
        """
        Rename parameters on the query string as they pass through the gateway.
        """
        return pulumi.get(self, "rename_query_parameters")

    @property
    @pulumi.getter(name="setQueryParameters")
    def set_query_parameters(self) -> 'outputs.GetDeploymentsDeploymentCollectionSpecificationRouteRequestPoliciesQueryParameterTransformationsSetQueryParametersResult':
        """
        Set parameters on the query string as they pass through the gateway.
        """
        return pulumi.get(self, "set_query_parameters")


@pulumi.output_type
class GetDeploymentsDeploymentCollectionSpecificationRouteRequestPoliciesQueryParameterTransformationsFilterQueryParametersResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetDeploymentsDeploymentCollectionSpecificationRouteRequestPoliciesQueryParameterTransformationsFilterQueryParametersItemResult'],
                 type: str):
        """
        :param Sequence['GetDeploymentsDeploymentCollectionSpecificationRouteRequestPoliciesQueryParameterTransformationsFilterQueryParametersItemArgs'] items: The list of headers.
        :param str type: Type of the Response Cache Store Policy.
        """
        pulumi.set(__self__, "items", items)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetDeploymentsDeploymentCollectionSpecificationRouteRequestPoliciesQueryParameterTransformationsFilterQueryParametersItemResult']:
        """
        The list of headers.
        """
        return pulumi.get(self, "items")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Type of the Response Cache Store Policy.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetDeploymentsDeploymentCollectionSpecificationRouteRequestPoliciesQueryParameterTransformationsFilterQueryParametersItemResult(dict):
    def __init__(__self__, *,
                 name: str):
        """
        :param str name: The case-insensitive name of the header.  This name must be unique across transformation policies.
        """
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The case-insensitive name of the header.  This name must be unique across transformation policies.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetDeploymentsDeploymentCollectionSpecificationRouteRequestPoliciesQueryParameterTransformationsRenameQueryParametersResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetDeploymentsDeploymentCollectionSpecificationRouteRequestPoliciesQueryParameterTransformationsRenameQueryParametersItemResult']):
        """
        :param Sequence['GetDeploymentsDeploymentCollectionSpecificationRouteRequestPoliciesQueryParameterTransformationsRenameQueryParametersItemArgs'] items: The list of headers.
        """
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetDeploymentsDeploymentCollectionSpecificationRouteRequestPoliciesQueryParameterTransformationsRenameQueryParametersItemResult']:
        """
        The list of headers.
        """
        return pulumi.get(self, "items")


@pulumi.output_type
class GetDeploymentsDeploymentCollectionSpecificationRouteRequestPoliciesQueryParameterTransformationsRenameQueryParametersItemResult(dict):
    def __init__(__self__, *,
                 from_: str,
                 to: str):
        """
        :param str from_: The original case-insensitive name of the header.  This name must be unique across transformation policies.
        :param str to: The new name of the header.  This name must be unique across transformation policies.
        """
        pulumi.set(__self__, "from_", from_)
        pulumi.set(__self__, "to", to)

    @property
    @pulumi.getter(name="from")
    def from_(self) -> str:
        """
        The original case-insensitive name of the header.  This name must be unique across transformation policies.
        """
        return pulumi.get(self, "from_")

    @property
    @pulumi.getter
    def to(self) -> str:
        """
        The new name of the header.  This name must be unique across transformation policies.
        """
        return pulumi.get(self, "to")


@pulumi.output_type
class GetDeploymentsDeploymentCollectionSpecificationRouteRequestPoliciesQueryParameterTransformationsSetQueryParametersResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetDeploymentsDeploymentCollectionSpecificationRouteRequestPoliciesQueryParameterTransformationsSetQueryParametersItemResult']):
        """
        :param Sequence['GetDeploymentsDeploymentCollectionSpecificationRouteRequestPoliciesQueryParameterTransformationsSetQueryParametersItemArgs'] items: The list of headers.
        """
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetDeploymentsDeploymentCollectionSpecificationRouteRequestPoliciesQueryParameterTransformationsSetQueryParametersItemResult']:
        """
        The list of headers.
        """
        return pulumi.get(self, "items")


@pulumi.output_type
class GetDeploymentsDeploymentCollectionSpecificationRouteRequestPoliciesQueryParameterTransformationsSetQueryParametersItemResult(dict):
    def __init__(__self__, *,
                 if_exists: str,
                 name: str,
                 values: Sequence[str]):
        """
        :param str if_exists: If a header with the same name already exists in the request, OVERWRITE will overwrite the value, APPEND will append to the existing value, or SKIP will keep the existing value.
        :param str name: The case-insensitive name of the header.  This name must be unique across transformation policies.
        :param Sequence[str] values: A list of new values.  Each value can be a constant or may include one or more expressions enclosed within ${} delimiters.
        """
        pulumi.set(__self__, "if_exists", if_exists)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter(name="ifExists")
    def if_exists(self) -> str:
        """
        If a header with the same name already exists in the request, OVERWRITE will overwrite the value, APPEND will append to the existing value, or SKIP will keep the existing value.
        """
        return pulumi.get(self, "if_exists")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The case-insensitive name of the header.  This name must be unique across transformation policies.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        """
        A list of new values.  Each value can be a constant or may include one or more expressions enclosed within ${} delimiters.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class GetDeploymentsDeploymentCollectionSpecificationRouteRequestPoliciesQueryParameterValidationsResult(dict):
    def __init__(__self__, *,
                 parameters: Sequence['outputs.GetDeploymentsDeploymentCollectionSpecificationRouteRequestPoliciesQueryParameterValidationsParameterResult'],
                 validation_mode: str):
        """
        :param str validation_mode: Validation behavior mode.
        """
        pulumi.set(__self__, "parameters", parameters)
        pulumi.set(__self__, "validation_mode", validation_mode)

    @property
    @pulumi.getter
    def parameters(self) -> Sequence['outputs.GetDeploymentsDeploymentCollectionSpecificationRouteRequestPoliciesQueryParameterValidationsParameterResult']:
        return pulumi.get(self, "parameters")

    @property
    @pulumi.getter(name="validationMode")
    def validation_mode(self) -> str:
        """
        Validation behavior mode.
        """
        return pulumi.get(self, "validation_mode")


@pulumi.output_type
class GetDeploymentsDeploymentCollectionSpecificationRouteRequestPoliciesQueryParameterValidationsParameterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 required: bool):
        """
        :param str name: The case-insensitive name of the header.  This name must be unique across transformation policies.
        :param bool required: Determines if the parameter is required in the request.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "required", required)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The case-insensitive name of the header.  This name must be unique across transformation policies.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def required(self) -> bool:
        """
        Determines if the parameter is required in the request.
        """
        return pulumi.get(self, "required")


@pulumi.output_type
class GetDeploymentsDeploymentCollectionSpecificationRouteRequestPoliciesResponseCacheLookupResult(dict):
    def __init__(__self__, *,
                 cache_key_additions: Sequence[str],
                 is_enabled: bool,
                 is_private_caching_enabled: bool,
                 type: str):
        """
        :param Sequence[str] cache_key_additions: A list of context expressions whose values will be added to the base cache key. Values should contain an expression enclosed within ${} delimiters. Only the request context is available.
        :param bool is_enabled: Whether this policy is currently enabled.
        :param bool is_private_caching_enabled: Set true to allow caching responses where the request has an Authorization header. Ensure you have configured your  cache key additions to get the level of isolation across authenticated requests that you require.
        :param str type: Type of the Response Cache Store Policy.
        """
        pulumi.set(__self__, "cache_key_additions", cache_key_additions)
        pulumi.set(__self__, "is_enabled", is_enabled)
        pulumi.set(__self__, "is_private_caching_enabled", is_private_caching_enabled)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="cacheKeyAdditions")
    def cache_key_additions(self) -> Sequence[str]:
        """
        A list of context expressions whose values will be added to the base cache key. Values should contain an expression enclosed within ${} delimiters. Only the request context is available.
        """
        return pulumi.get(self, "cache_key_additions")

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> bool:
        """
        Whether this policy is currently enabled.
        """
        return pulumi.get(self, "is_enabled")

    @property
    @pulumi.getter(name="isPrivateCachingEnabled")
    def is_private_caching_enabled(self) -> bool:
        """
        Set true to allow caching responses where the request has an Authorization header. Ensure you have configured your  cache key additions to get the level of isolation across authenticated requests that you require.
        """
        return pulumi.get(self, "is_private_caching_enabled")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Type of the Response Cache Store Policy.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetDeploymentsDeploymentCollectionSpecificationRouteResponsePoliciesResult(dict):
    def __init__(__self__, *,
                 header_transformations: 'outputs.GetDeploymentsDeploymentCollectionSpecificationRouteResponsePoliciesHeaderTransformationsResult',
                 response_cache_store: 'outputs.GetDeploymentsDeploymentCollectionSpecificationRouteResponsePoliciesResponseCacheStoreResult'):
        """
        :param 'GetDeploymentsDeploymentCollectionSpecificationRouteResponsePoliciesHeaderTransformationsArgs' header_transformations: A set of transformations to apply to HTTP headers that pass through the gateway.
        :param 'GetDeploymentsDeploymentCollectionSpecificationRouteResponsePoliciesResponseCacheStoreArgs' response_cache_store: Base policy for how a response from a backend is cached in the Response Cache.
        """
        pulumi.set(__self__, "header_transformations", header_transformations)
        pulumi.set(__self__, "response_cache_store", response_cache_store)

    @property
    @pulumi.getter(name="headerTransformations")
    def header_transformations(self) -> 'outputs.GetDeploymentsDeploymentCollectionSpecificationRouteResponsePoliciesHeaderTransformationsResult':
        """
        A set of transformations to apply to HTTP headers that pass through the gateway.
        """
        return pulumi.get(self, "header_transformations")

    @property
    @pulumi.getter(name="responseCacheStore")
    def response_cache_store(self) -> 'outputs.GetDeploymentsDeploymentCollectionSpecificationRouteResponsePoliciesResponseCacheStoreResult':
        """
        Base policy for how a response from a backend is cached in the Response Cache.
        """
        return pulumi.get(self, "response_cache_store")


@pulumi.output_type
class GetDeploymentsDeploymentCollectionSpecificationRouteResponsePoliciesHeaderTransformationsResult(dict):
    def __init__(__self__, *,
                 filter_headers: 'outputs.GetDeploymentsDeploymentCollectionSpecificationRouteResponsePoliciesHeaderTransformationsFilterHeadersResult',
                 rename_headers: 'outputs.GetDeploymentsDeploymentCollectionSpecificationRouteResponsePoliciesHeaderTransformationsRenameHeadersResult',
                 set_headers: 'outputs.GetDeploymentsDeploymentCollectionSpecificationRouteResponsePoliciesHeaderTransformationsSetHeadersResult'):
        """
        :param 'GetDeploymentsDeploymentCollectionSpecificationRouteResponsePoliciesHeaderTransformationsFilterHeadersArgs' filter_headers: Filter HTTP headers as they pass through the gateway.  The gateway applies filters after other transformations, so any headers set or renamed must also be listed here when using an ALLOW type policy.
        :param 'GetDeploymentsDeploymentCollectionSpecificationRouteResponsePoliciesHeaderTransformationsRenameHeadersArgs' rename_headers: Rename HTTP headers as they pass through the gateway.
        :param 'GetDeploymentsDeploymentCollectionSpecificationRouteResponsePoliciesHeaderTransformationsSetHeadersArgs' set_headers: Set HTTP headers as they pass through the gateway.
        """
        pulumi.set(__self__, "filter_headers", filter_headers)
        pulumi.set(__self__, "rename_headers", rename_headers)
        pulumi.set(__self__, "set_headers", set_headers)

    @property
    @pulumi.getter(name="filterHeaders")
    def filter_headers(self) -> 'outputs.GetDeploymentsDeploymentCollectionSpecificationRouteResponsePoliciesHeaderTransformationsFilterHeadersResult':
        """
        Filter HTTP headers as they pass through the gateway.  The gateway applies filters after other transformations, so any headers set or renamed must also be listed here when using an ALLOW type policy.
        """
        return pulumi.get(self, "filter_headers")

    @property
    @pulumi.getter(name="renameHeaders")
    def rename_headers(self) -> 'outputs.GetDeploymentsDeploymentCollectionSpecificationRouteResponsePoliciesHeaderTransformationsRenameHeadersResult':
        """
        Rename HTTP headers as they pass through the gateway.
        """
        return pulumi.get(self, "rename_headers")

    @property
    @pulumi.getter(name="setHeaders")
    def set_headers(self) -> 'outputs.GetDeploymentsDeploymentCollectionSpecificationRouteResponsePoliciesHeaderTransformationsSetHeadersResult':
        """
        Set HTTP headers as they pass through the gateway.
        """
        return pulumi.get(self, "set_headers")


@pulumi.output_type
class GetDeploymentsDeploymentCollectionSpecificationRouteResponsePoliciesHeaderTransformationsFilterHeadersResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetDeploymentsDeploymentCollectionSpecificationRouteResponsePoliciesHeaderTransformationsFilterHeadersItemResult'],
                 type: str):
        """
        :param Sequence['GetDeploymentsDeploymentCollectionSpecificationRouteResponsePoliciesHeaderTransformationsFilterHeadersItemArgs'] items: The list of headers.
        :param str type: Type of the Response Cache Store Policy.
        """
        pulumi.set(__self__, "items", items)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetDeploymentsDeploymentCollectionSpecificationRouteResponsePoliciesHeaderTransformationsFilterHeadersItemResult']:
        """
        The list of headers.
        """
        return pulumi.get(self, "items")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Type of the Response Cache Store Policy.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetDeploymentsDeploymentCollectionSpecificationRouteResponsePoliciesHeaderTransformationsFilterHeadersItemResult(dict):
    def __init__(__self__, *,
                 name: str):
        """
        :param str name: The case-insensitive name of the header.  This name must be unique across transformation policies.
        """
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The case-insensitive name of the header.  This name must be unique across transformation policies.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetDeploymentsDeploymentCollectionSpecificationRouteResponsePoliciesHeaderTransformationsRenameHeadersResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetDeploymentsDeploymentCollectionSpecificationRouteResponsePoliciesHeaderTransformationsRenameHeadersItemResult']):
        """
        :param Sequence['GetDeploymentsDeploymentCollectionSpecificationRouteResponsePoliciesHeaderTransformationsRenameHeadersItemArgs'] items: The list of headers.
        """
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetDeploymentsDeploymentCollectionSpecificationRouteResponsePoliciesHeaderTransformationsRenameHeadersItemResult']:
        """
        The list of headers.
        """
        return pulumi.get(self, "items")


@pulumi.output_type
class GetDeploymentsDeploymentCollectionSpecificationRouteResponsePoliciesHeaderTransformationsRenameHeadersItemResult(dict):
    def __init__(__self__, *,
                 from_: str,
                 to: str):
        """
        :param str from_: The original case-insensitive name of the header.  This name must be unique across transformation policies.
        :param str to: The new name of the header.  This name must be unique across transformation policies.
        """
        pulumi.set(__self__, "from_", from_)
        pulumi.set(__self__, "to", to)

    @property
    @pulumi.getter(name="from")
    def from_(self) -> str:
        """
        The original case-insensitive name of the header.  This name must be unique across transformation policies.
        """
        return pulumi.get(self, "from_")

    @property
    @pulumi.getter
    def to(self) -> str:
        """
        The new name of the header.  This name must be unique across transformation policies.
        """
        return pulumi.get(self, "to")


@pulumi.output_type
class GetDeploymentsDeploymentCollectionSpecificationRouteResponsePoliciesHeaderTransformationsSetHeadersResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetDeploymentsDeploymentCollectionSpecificationRouteResponsePoliciesHeaderTransformationsSetHeadersItemResult']):
        """
        :param Sequence['GetDeploymentsDeploymentCollectionSpecificationRouteResponsePoliciesHeaderTransformationsSetHeadersItemArgs'] items: The list of headers.
        """
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetDeploymentsDeploymentCollectionSpecificationRouteResponsePoliciesHeaderTransformationsSetHeadersItemResult']:
        """
        The list of headers.
        """
        return pulumi.get(self, "items")


@pulumi.output_type
class GetDeploymentsDeploymentCollectionSpecificationRouteResponsePoliciesHeaderTransformationsSetHeadersItemResult(dict):
    def __init__(__self__, *,
                 if_exists: str,
                 name: str,
                 values: Sequence[str]):
        """
        :param str if_exists: If a header with the same name already exists in the request, OVERWRITE will overwrite the value, APPEND will append to the existing value, or SKIP will keep the existing value.
        :param str name: The case-insensitive name of the header.  This name must be unique across transformation policies.
        :param Sequence[str] values: A list of new values.  Each value can be a constant or may include one or more expressions enclosed within ${} delimiters.
        """
        pulumi.set(__self__, "if_exists", if_exists)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter(name="ifExists")
    def if_exists(self) -> str:
        """
        If a header with the same name already exists in the request, OVERWRITE will overwrite the value, APPEND will append to the existing value, or SKIP will keep the existing value.
        """
        return pulumi.get(self, "if_exists")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The case-insensitive name of the header.  This name must be unique across transformation policies.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        """
        A list of new values.  Each value can be a constant or may include one or more expressions enclosed within ${} delimiters.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class GetDeploymentsDeploymentCollectionSpecificationRouteResponsePoliciesResponseCacheStoreResult(dict):
    def __init__(__self__, *,
                 time_to_live_in_seconds: int,
                 type: str):
        """
        :param int time_to_live_in_seconds: Sets the number of seconds for a response from a backend being stored in the Response Cache before it expires.
        :param str type: Type of the Response Cache Store Policy.
        """
        pulumi.set(__self__, "time_to_live_in_seconds", time_to_live_in_seconds)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="timeToLiveInSeconds")
    def time_to_live_in_seconds(self) -> int:
        """
        Sets the number of seconds for a response from a backend being stored in the Response Cache before it expires.
        """
        return pulumi.get(self, "time_to_live_in_seconds")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Type of the Response Cache Store Policy.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetDeploymentsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        """
        :param str name: The case-insensitive name of the header.  This name must be unique across transformation policies.
        :param Sequence[str] values: A list of new values.  Each value can be a constant or may include one or more expressions enclosed within ${} delimiters.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The case-insensitive name of the header.  This name must be unique across transformation policies.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        """
        A list of new values.  Each value can be a constant or may include one or more expressions enclosed within ${} delimiters.
        """
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetGatewayIpAddressResult(dict):
    def __init__(__self__, *,
                 ip_address: str):
        """
        :param str ip_address: An IP address.
        """
        pulumi.set(__self__, "ip_address", ip_address)

    @property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> str:
        """
        An IP address.
        """
        return pulumi.get(self, "ip_address")


@pulumi.output_type
class GetGatewayResponseCacheDetailsResult(dict):
    def __init__(__self__, *,
                 authentication_secret_id: str,
                 authentication_secret_version_number: str,
                 connect_timeout_in_ms: int,
                 is_ssl_enabled: bool,
                 is_ssl_verify_disabled: bool,
                 read_timeout_in_ms: int,
                 send_timeout_in_ms: int,
                 servers: Sequence['outputs.GetGatewayResponseCacheDetailsServerResult'],
                 type: str):
        """
        :param str authentication_secret_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Oracle Vault Service secret resource.
        :param str authentication_secret_version_number: The version number of the authentication secret to use.
        :param int connect_timeout_in_ms: Defines the timeout for establishing a connection with the Response Cache.
        :param bool is_ssl_enabled: Defines if the connection should be over SSL.
        :param bool is_ssl_verify_disabled: Defines whether or not to uphold SSL verification.
        :param int read_timeout_in_ms: Defines the timeout for reading data from the Response Cache.
        :param int send_timeout_in_ms: Defines the timeout for transmitting data to the Response Cache.
        :param Sequence['GetGatewayResponseCacheDetailsServerArgs'] servers: The set of cache store members to connect to. At present only a single server is supported.
        :param str type: Type of the Response Cache.
        """
        pulumi.set(__self__, "authentication_secret_id", authentication_secret_id)
        pulumi.set(__self__, "authentication_secret_version_number", authentication_secret_version_number)
        pulumi.set(__self__, "connect_timeout_in_ms", connect_timeout_in_ms)
        pulumi.set(__self__, "is_ssl_enabled", is_ssl_enabled)
        pulumi.set(__self__, "is_ssl_verify_disabled", is_ssl_verify_disabled)
        pulumi.set(__self__, "read_timeout_in_ms", read_timeout_in_ms)
        pulumi.set(__self__, "send_timeout_in_ms", send_timeout_in_ms)
        pulumi.set(__self__, "servers", servers)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="authenticationSecretId")
    def authentication_secret_id(self) -> str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Oracle Vault Service secret resource.
        """
        return pulumi.get(self, "authentication_secret_id")

    @property
    @pulumi.getter(name="authenticationSecretVersionNumber")
    def authentication_secret_version_number(self) -> str:
        """
        The version number of the authentication secret to use.
        """
        return pulumi.get(self, "authentication_secret_version_number")

    @property
    @pulumi.getter(name="connectTimeoutInMs")
    def connect_timeout_in_ms(self) -> int:
        """
        Defines the timeout for establishing a connection with the Response Cache.
        """
        return pulumi.get(self, "connect_timeout_in_ms")

    @property
    @pulumi.getter(name="isSslEnabled")
    def is_ssl_enabled(self) -> bool:
        """
        Defines if the connection should be over SSL.
        """
        return pulumi.get(self, "is_ssl_enabled")

    @property
    @pulumi.getter(name="isSslVerifyDisabled")
    def is_ssl_verify_disabled(self) -> bool:
        """
        Defines whether or not to uphold SSL verification.
        """
        return pulumi.get(self, "is_ssl_verify_disabled")

    @property
    @pulumi.getter(name="readTimeoutInMs")
    def read_timeout_in_ms(self) -> int:
        """
        Defines the timeout for reading data from the Response Cache.
        """
        return pulumi.get(self, "read_timeout_in_ms")

    @property
    @pulumi.getter(name="sendTimeoutInMs")
    def send_timeout_in_ms(self) -> int:
        """
        Defines the timeout for transmitting data to the Response Cache.
        """
        return pulumi.get(self, "send_timeout_in_ms")

    @property
    @pulumi.getter
    def servers(self) -> Sequence['outputs.GetGatewayResponseCacheDetailsServerResult']:
        """
        The set of cache store members to connect to. At present only a single server is supported.
        """
        return pulumi.get(self, "servers")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Type of the Response Cache.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetGatewayResponseCacheDetailsServerResult(dict):
    def __init__(__self__, *,
                 host: str,
                 port: int):
        """
        :param str host: Hostname or IP address (IPv4 only) where the cache store is running.
        :param int port: The port the cache store is exposed on.
        """
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter
    def host(self) -> str:
        """
        Hostname or IP address (IPv4 only) where the cache store is running.
        """
        return pulumi.get(self, "host")

    @property
    @pulumi.getter
    def port(self) -> int:
        """
        The port the cache store is exposed on.
        """
        return pulumi.get(self, "port")


@pulumi.output_type
class GetGatewaysFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetGatewaysGatewayCollectionResult(dict):
    def __init__(__self__, *,
                 certificate_id: str,
                 compartment_id: str,
                 defined_tags: Mapping[str, Any],
                 display_name: str,
                 endpoint_type: str,
                 freeform_tags: Mapping[str, Any],
                 hostname: str,
                 id: str,
                 ip_addresses: Sequence['outputs.GetGatewaysGatewayCollectionIpAddressResult'],
                 lifecycle_details: str,
                 response_cache_details: 'outputs.GetGatewaysGatewayCollectionResponseCacheDetailsResult',
                 state: str,
                 subnet_id: str,
                 time_created: str,
                 time_updated: str):
        """
        :param str certificate_id: Filter gateways by the certificate ocid.
        :param str compartment_id: The ocid of the compartment in which to list resources.
        :param Mapping[str, Any] defined_tags: Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Operations.CostCenter": "42"}`
        :param str display_name: A user-friendly name. Does not have to be unique, and it's changeable.  Example: `My new resource`
        :param str endpoint_type: Gateway endpoint type. `PUBLIC` will have a public ip address assigned to it, while `PRIVATE` will only be accessible on a private IP address on the subnet.  Example: `PUBLIC` or `PRIVATE`
        :param Mapping[str, Any] freeform_tags: Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Department": "Finance"}`
        :param str hostname: The hostname for APIs deployed on the gateway.
        :param str id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the resource.
        :param Sequence['GetGatewaysGatewayCollectionIpAddressArgs'] ip_addresses: An array of IP addresses associated with the gateway.
        :param str lifecycle_details: A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in a Failed state.
        :param 'GetGatewaysGatewayCollectionResponseCacheDetailsArgs' response_cache_details: Base Gateway response cache.
        :param str state: A filter to return only resources that match the given lifecycle state.  Example: `SUCCEEDED`
        :param str subnet_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the subnet in which related resources are created.
        :param str time_created: The time this resource was created. An RFC3339 formatted datetime string.
        :param str time_updated: The time this resource was last updated. An RFC3339 formatted datetime string.
        """
        pulumi.set(__self__, "certificate_id", certificate_id)
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "defined_tags", defined_tags)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "endpoint_type", endpoint_type)
        pulumi.set(__self__, "freeform_tags", freeform_tags)
        pulumi.set(__self__, "hostname", hostname)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "ip_addresses", ip_addresses)
        pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        pulumi.set(__self__, "response_cache_details", response_cache_details)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "subnet_id", subnet_id)
        pulumi.set(__self__, "time_created", time_created)
        pulumi.set(__self__, "time_updated", time_updated)

    @property
    @pulumi.getter(name="certificateId")
    def certificate_id(self) -> str:
        """
        Filter gateways by the certificate ocid.
        """
        return pulumi.get(self, "certificate_id")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> str:
        """
        The ocid of the compartment in which to list resources.
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Mapping[str, Any]:
        """
        Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Operations.CostCenter": "42"}`
        """
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        A user-friendly name. Does not have to be unique, and it's changeable.  Example: `My new resource`
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="endpointType")
    def endpoint_type(self) -> str:
        """
        Gateway endpoint type. `PUBLIC` will have a public ip address assigned to it, while `PRIVATE` will only be accessible on a private IP address on the subnet.  Example: `PUBLIC` or `PRIVATE`
        """
        return pulumi.get(self, "endpoint_type")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Mapping[str, Any]:
        """
        Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Department": "Finance"}`
        """
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def hostname(self) -> str:
        """
        The hostname for APIs deployed on the gateway.
        """
        return pulumi.get(self, "hostname")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="ipAddresses")
    def ip_addresses(self) -> Sequence['outputs.GetGatewaysGatewayCollectionIpAddressResult']:
        """
        An array of IP addresses associated with the gateway.
        """
        return pulumi.get(self, "ip_addresses")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> str:
        """
        A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in a Failed state.
        """
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter(name="responseCacheDetails")
    def response_cache_details(self) -> 'outputs.GetGatewaysGatewayCollectionResponseCacheDetailsResult':
        """
        Base Gateway response cache.
        """
        return pulumi.get(self, "response_cache_details")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        A filter to return only resources that match the given lifecycle state.  Example: `SUCCEEDED`
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the subnet in which related resources are created.
        """
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> str:
        """
        The time this resource was created. An RFC3339 formatted datetime string.
        """
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> str:
        """
        The time this resource was last updated. An RFC3339 formatted datetime string.
        """
        return pulumi.get(self, "time_updated")


@pulumi.output_type
class GetGatewaysGatewayCollectionIpAddressResult(dict):
    def __init__(__self__, *,
                 ip_address: str):
        """
        :param str ip_address: An IP address.
        """
        pulumi.set(__self__, "ip_address", ip_address)

    @property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> str:
        """
        An IP address.
        """
        return pulumi.get(self, "ip_address")


@pulumi.output_type
class GetGatewaysGatewayCollectionResponseCacheDetailsResult(dict):
    def __init__(__self__, *,
                 authentication_secret_id: str,
                 authentication_secret_version_number: str,
                 connect_timeout_in_ms: int,
                 is_ssl_enabled: bool,
                 is_ssl_verify_disabled: bool,
                 read_timeout_in_ms: int,
                 send_timeout_in_ms: int,
                 servers: Sequence['outputs.GetGatewaysGatewayCollectionResponseCacheDetailsServerResult'],
                 type: str):
        """
        :param str authentication_secret_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Oracle Vault Service secret resource.
        :param str authentication_secret_version_number: The version number of the authentication secret to use.
        :param int connect_timeout_in_ms: Defines the timeout for establishing a connection with the Response Cache.
        :param bool is_ssl_enabled: Defines if the connection should be over SSL.
        :param bool is_ssl_verify_disabled: Defines whether or not to uphold SSL verification.
        :param int read_timeout_in_ms: Defines the timeout for reading data from the Response Cache.
        :param int send_timeout_in_ms: Defines the timeout for transmitting data to the Response Cache.
        :param Sequence['GetGatewaysGatewayCollectionResponseCacheDetailsServerArgs'] servers: The set of cache store members to connect to. At present only a single server is supported.
        :param str type: Type of the Response Cache.
        """
        pulumi.set(__self__, "authentication_secret_id", authentication_secret_id)
        pulumi.set(__self__, "authentication_secret_version_number", authentication_secret_version_number)
        pulumi.set(__self__, "connect_timeout_in_ms", connect_timeout_in_ms)
        pulumi.set(__self__, "is_ssl_enabled", is_ssl_enabled)
        pulumi.set(__self__, "is_ssl_verify_disabled", is_ssl_verify_disabled)
        pulumi.set(__self__, "read_timeout_in_ms", read_timeout_in_ms)
        pulumi.set(__self__, "send_timeout_in_ms", send_timeout_in_ms)
        pulumi.set(__self__, "servers", servers)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="authenticationSecretId")
    def authentication_secret_id(self) -> str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Oracle Vault Service secret resource.
        """
        return pulumi.get(self, "authentication_secret_id")

    @property
    @pulumi.getter(name="authenticationSecretVersionNumber")
    def authentication_secret_version_number(self) -> str:
        """
        The version number of the authentication secret to use.
        """
        return pulumi.get(self, "authentication_secret_version_number")

    @property
    @pulumi.getter(name="connectTimeoutInMs")
    def connect_timeout_in_ms(self) -> int:
        """
        Defines the timeout for establishing a connection with the Response Cache.
        """
        return pulumi.get(self, "connect_timeout_in_ms")

    @property
    @pulumi.getter(name="isSslEnabled")
    def is_ssl_enabled(self) -> bool:
        """
        Defines if the connection should be over SSL.
        """
        return pulumi.get(self, "is_ssl_enabled")

    @property
    @pulumi.getter(name="isSslVerifyDisabled")
    def is_ssl_verify_disabled(self) -> bool:
        """
        Defines whether or not to uphold SSL verification.
        """
        return pulumi.get(self, "is_ssl_verify_disabled")

    @property
    @pulumi.getter(name="readTimeoutInMs")
    def read_timeout_in_ms(self) -> int:
        """
        Defines the timeout for reading data from the Response Cache.
        """
        return pulumi.get(self, "read_timeout_in_ms")

    @property
    @pulumi.getter(name="sendTimeoutInMs")
    def send_timeout_in_ms(self) -> int:
        """
        Defines the timeout for transmitting data to the Response Cache.
        """
        return pulumi.get(self, "send_timeout_in_ms")

    @property
    @pulumi.getter
    def servers(self) -> Sequence['outputs.GetGatewaysGatewayCollectionResponseCacheDetailsServerResult']:
        """
        The set of cache store members to connect to. At present only a single server is supported.
        """
        return pulumi.get(self, "servers")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Type of the Response Cache.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetGatewaysGatewayCollectionResponseCacheDetailsServerResult(dict):
    def __init__(__self__, *,
                 host: str,
                 port: int):
        """
        :param str host: Hostname or IP address (IPv4 only) where the cache store is running.
        :param int port: The port the cache store is exposed on.
        """
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter
    def host(self) -> str:
        """
        Hostname or IP address (IPv4 only) where the cache store is running.
        """
        return pulumi.get(self, "host")

    @property
    @pulumi.getter
    def port(self) -> int:
        """
        The port the cache store is exposed on.
        """
        return pulumi.get(self, "port")


