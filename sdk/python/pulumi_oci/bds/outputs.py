# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'AutoScalingConfigurationPolicy',
    'AutoScalingConfigurationPolicyRule',
    'AutoScalingConfigurationPolicyRuleMetric',
    'AutoScalingConfigurationPolicyRuleMetricThreshold',
    'BdsInstanceCloudSqlDetails',
    'BdsInstanceCloudSqlDetailsKerberosDetail',
    'BdsInstanceClusterDetails',
    'BdsInstanceMasterNode',
    'BdsInstanceNetworkConfig',
    'BdsInstanceNode',
    'BdsInstanceNodeAttachedBlockVolume',
    'BdsInstanceUtilNode',
    'BdsInstanceWorkerNode',
    'GetAutoScalingConfigurationPolicyResult',
    'GetAutoScalingConfigurationPolicyRuleResult',
    'GetAutoScalingConfigurationPolicyRuleMetricResult',
    'GetAutoScalingConfigurationPolicyRuleMetricThresholdResult',
    'GetBdsInstanceCloudSqlDetailsResult',
    'GetBdsInstanceCloudSqlDetailsKerberosDetailResult',
    'GetBdsInstanceClusterDetailsResult',
    'GetBdsInstanceMasterNodeResult',
    'GetBdsInstanceNetworkConfigResult',
    'GetBdsInstanceNodeResult',
    'GetBdsInstanceNodeAttachedBlockVolumeResult',
    'GetBdsInstanceUtilNodeResult',
    'GetBdsInstanceWorkerNodeResult',
    'GetBdsInstancesBdsInstanceResult',
    'GetBdsInstancesBdsInstanceCloudSqlDetailsResult',
    'GetBdsInstancesBdsInstanceCloudSqlDetailsKerberosDetailResult',
    'GetBdsInstancesBdsInstanceClusterDetailsResult',
    'GetBdsInstancesBdsInstanceMasterNodeResult',
    'GetBdsInstancesBdsInstanceNetworkConfigResult',
    'GetBdsInstancesBdsInstanceNodeResult',
    'GetBdsInstancesBdsInstanceNodeAttachedBlockVolumeResult',
    'GetBdsInstancesBdsInstanceUtilNodeResult',
    'GetBdsInstancesBdsInstanceWorkerNodeResult',
    'GetBdsInstancesFilterResult',
]

@pulumi.output_type
class AutoScalingConfigurationPolicy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "policyType":
            suggest = "policy_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AutoScalingConfigurationPolicy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AutoScalingConfigurationPolicy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AutoScalingConfigurationPolicy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 policy_type: str,
                 rules: Sequence['outputs.AutoScalingConfigurationPolicyRule']):
        """
        :param str policy_type: (Updatable) Types of autoscale policies. Options are SCHEDULE-BASED or THRESHOLD-BASED. (Only THRESHOLD-BASED is supported in this release.)
        :param Sequence['AutoScalingConfigurationPolicyRuleArgs'] rules: (Updatable) The list of rules for autoscaling. If an action has multiple rules, the last rule in the array will be applied.
        """
        pulumi.set(__self__, "policy_type", policy_type)
        pulumi.set(__self__, "rules", rules)

    @property
    @pulumi.getter(name="policyType")
    def policy_type(self) -> str:
        """
        (Updatable) Types of autoscale policies. Options are SCHEDULE-BASED or THRESHOLD-BASED. (Only THRESHOLD-BASED is supported in this release.)
        """
        return pulumi.get(self, "policy_type")

    @property
    @pulumi.getter
    def rules(self) -> Sequence['outputs.AutoScalingConfigurationPolicyRule']:
        """
        (Updatable) The list of rules for autoscaling. If an action has multiple rules, the last rule in the array will be applied.
        """
        return pulumi.get(self, "rules")


@pulumi.output_type
class AutoScalingConfigurationPolicyRule(dict):
    def __init__(__self__, *,
                 action: str,
                 metric: 'outputs.AutoScalingConfigurationPolicyRuleMetric'):
        """
        :param str action: (Updatable) The valid value are CHANGE_SHAPE_SCALE_UP or CHANGE_SHAPE_SCALE_DOWN.
        :param 'AutoScalingConfigurationPolicyRuleMetricArgs' metric: (Updatable) Metric and threshold details for triggering an autoscale action.
        """
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "metric", metric)

    @property
    @pulumi.getter
    def action(self) -> str:
        """
        (Updatable) The valid value are CHANGE_SHAPE_SCALE_UP or CHANGE_SHAPE_SCALE_DOWN.
        """
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def metric(self) -> 'outputs.AutoScalingConfigurationPolicyRuleMetric':
        """
        (Updatable) Metric and threshold details for triggering an autoscale action.
        """
        return pulumi.get(self, "metric")


@pulumi.output_type
class AutoScalingConfigurationPolicyRuleMetric(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "metricType":
            suggest = "metric_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AutoScalingConfigurationPolicyRuleMetric. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AutoScalingConfigurationPolicyRuleMetric.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AutoScalingConfigurationPolicyRuleMetric.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 metric_type: str,
                 threshold: 'outputs.AutoScalingConfigurationPolicyRuleMetricThreshold'):
        """
        :param str metric_type: (Updatable) Allowed value is CPU_UTILIZATION.
        :param 'AutoScalingConfigurationPolicyRuleMetricThresholdArgs' threshold: (Updatable) An autoscale action is triggered when a performance metric meets or exceeds a threshold.
        """
        pulumi.set(__self__, "metric_type", metric_type)
        pulumi.set(__self__, "threshold", threshold)

    @property
    @pulumi.getter(name="metricType")
    def metric_type(self) -> str:
        """
        (Updatable) Allowed value is CPU_UTILIZATION.
        """
        return pulumi.get(self, "metric_type")

    @property
    @pulumi.getter
    def threshold(self) -> 'outputs.AutoScalingConfigurationPolicyRuleMetricThreshold':
        """
        (Updatable) An autoscale action is triggered when a performance metric meets or exceeds a threshold.
        """
        return pulumi.get(self, "threshold")


@pulumi.output_type
class AutoScalingConfigurationPolicyRuleMetricThreshold(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "durationInMinutes":
            suggest = "duration_in_minutes"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AutoScalingConfigurationPolicyRuleMetricThreshold. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AutoScalingConfigurationPolicyRuleMetricThreshold.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AutoScalingConfigurationPolicyRuleMetricThreshold.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 duration_in_minutes: int,
                 operator: str,
                 value: int):
        """
        :param int duration_in_minutes: (Updatable) This value is the minimum period of time the metric value meets or exceeds the threshold value before the action is triggered. The value is in minutes.
        :param str operator: (Updatable) The comparison operator to use. Options are greater than (GT) or less than (LT).
        :param int value: (Updatable) Integer non-negative value. 0 < value < 100
        """
        pulumi.set(__self__, "duration_in_minutes", duration_in_minutes)
        pulumi.set(__self__, "operator", operator)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="durationInMinutes")
    def duration_in_minutes(self) -> int:
        """
        (Updatable) This value is the minimum period of time the metric value meets or exceeds the threshold value before the action is triggered. The value is in minutes.
        """
        return pulumi.get(self, "duration_in_minutes")

    @property
    @pulumi.getter
    def operator(self) -> str:
        """
        (Updatable) The comparison operator to use. Options are greater than (GT) or less than (LT).
        """
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def value(self) -> int:
        """
        (Updatable) Integer non-negative value. 0 < value < 100
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class BdsInstanceCloudSqlDetails(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "blockVolumeSizeInGbs":
            suggest = "block_volume_size_in_gbs"
        elif key == "ipAddress":
            suggest = "ip_address"
        elif key == "isKerberosMappedToDatabaseUsers":
            suggest = "is_kerberos_mapped_to_database_users"
        elif key == "kerberosDetails":
            suggest = "kerberos_details"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BdsInstanceCloudSqlDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BdsInstanceCloudSqlDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BdsInstanceCloudSqlDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 block_volume_size_in_gbs: str,
                 shape: str,
                 ip_address: Optional[str] = None,
                 is_kerberos_mapped_to_database_users: Optional[bool] = None,
                 kerberos_details: Optional[Sequence['outputs.BdsInstanceCloudSqlDetailsKerberosDetail']] = None):
        """
        :param str block_volume_size_in_gbs: The size of block volume in GB to be attached to a given node. All the details needed for attaching the block volume are managed by service itself.
        :param str shape: (Updatable) Shape of the node.
        :param str ip_address: IP address of the node.
        :param bool is_kerberos_mapped_to_database_users: Boolean flag specifying whether or not Kerberos principals are mapped to database users.
        :param Sequence['BdsInstanceCloudSqlDetailsKerberosDetailArgs'] kerberos_details: Details about the Kerberos principals.
        """
        pulumi.set(__self__, "block_volume_size_in_gbs", block_volume_size_in_gbs)
        pulumi.set(__self__, "shape", shape)
        if ip_address is not None:
            pulumi.set(__self__, "ip_address", ip_address)
        if is_kerberos_mapped_to_database_users is not None:
            pulumi.set(__self__, "is_kerberos_mapped_to_database_users", is_kerberos_mapped_to_database_users)
        if kerberos_details is not None:
            pulumi.set(__self__, "kerberos_details", kerberos_details)

    @property
    @pulumi.getter(name="blockVolumeSizeInGbs")
    def block_volume_size_in_gbs(self) -> str:
        """
        The size of block volume in GB to be attached to a given node. All the details needed for attaching the block volume are managed by service itself.
        """
        return pulumi.get(self, "block_volume_size_in_gbs")

    @property
    @pulumi.getter
    def shape(self) -> str:
        """
        (Updatable) Shape of the node.
        """
        return pulumi.get(self, "shape")

    @property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> Optional[str]:
        """
        IP address of the node.
        """
        return pulumi.get(self, "ip_address")

    @property
    @pulumi.getter(name="isKerberosMappedToDatabaseUsers")
    def is_kerberos_mapped_to_database_users(self) -> Optional[bool]:
        """
        Boolean flag specifying whether or not Kerberos principals are mapped to database users.
        """
        return pulumi.get(self, "is_kerberos_mapped_to_database_users")

    @property
    @pulumi.getter(name="kerberosDetails")
    def kerberos_details(self) -> Optional[Sequence['outputs.BdsInstanceCloudSqlDetailsKerberosDetail']]:
        """
        Details about the Kerberos principals.
        """
        return pulumi.get(self, "kerberos_details")


@pulumi.output_type
class BdsInstanceCloudSqlDetailsKerberosDetail(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "keytabFile":
            suggest = "keytab_file"
        elif key == "principalName":
            suggest = "principal_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BdsInstanceCloudSqlDetailsKerberosDetail. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BdsInstanceCloudSqlDetailsKerberosDetail.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BdsInstanceCloudSqlDetailsKerberosDetail.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 keytab_file: Optional[str] = None,
                 principal_name: Optional[str] = None):
        """
        :param str keytab_file: Location of the keytab file
        :param str principal_name: Name of the Kerberos principal.
        """
        if keytab_file is not None:
            pulumi.set(__self__, "keytab_file", keytab_file)
        if principal_name is not None:
            pulumi.set(__self__, "principal_name", principal_name)

    @property
    @pulumi.getter(name="keytabFile")
    def keytab_file(self) -> Optional[str]:
        """
        Location of the keytab file
        """
        return pulumi.get(self, "keytab_file")

    @property
    @pulumi.getter(name="principalName")
    def principal_name(self) -> Optional[str]:
        """
        Name of the Kerberos principal.
        """
        return pulumi.get(self, "principal_name")


@pulumi.output_type
class BdsInstanceClusterDetails(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ambariUrl":
            suggest = "ambari_url"
        elif key == "bdCellVersion":
            suggest = "bd_cell_version"
        elif key == "bdaVersion":
            suggest = "bda_version"
        elif key == "bdmVersion":
            suggest = "bdm_version"
        elif key == "bdsVersion":
            suggest = "bds_version"
        elif key == "bigDataManagerUrl":
            suggest = "big_data_manager_url"
        elif key == "clouderaManagerUrl":
            suggest = "cloudera_manager_url"
        elif key == "csqlCellVersion":
            suggest = "csql_cell_version"
        elif key == "dbVersion":
            suggest = "db_version"
        elif key == "hueServerUrl":
            suggest = "hue_server_url"
        elif key == "osVersion":
            suggest = "os_version"
        elif key == "timeCreated":
            suggest = "time_created"
        elif key == "timeRefreshed":
            suggest = "time_refreshed"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BdsInstanceClusterDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BdsInstanceClusterDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BdsInstanceClusterDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ambari_url: Optional[str] = None,
                 bd_cell_version: Optional[str] = None,
                 bda_version: Optional[str] = None,
                 bdm_version: Optional[str] = None,
                 bds_version: Optional[str] = None,
                 big_data_manager_url: Optional[str] = None,
                 cloudera_manager_url: Optional[str] = None,
                 csql_cell_version: Optional[str] = None,
                 db_version: Optional[str] = None,
                 hue_server_url: Optional[str] = None,
                 os_version: Optional[str] = None,
                 time_created: Optional[str] = None,
                 time_refreshed: Optional[str] = None):
        """
        :param str ambari_url: The URL of Ambari
        :param str bd_cell_version: Cloud SQL cell version.
        :param str bda_version: BDA version installed in the cluster
        :param str bdm_version: Big Data Manager version installed in the cluster.
        :param str bds_version: Big Data Service version installed in the cluster.
        :param str big_data_manager_url: The URL of Big Data Manager.
        :param str cloudera_manager_url: The URL of Cloudera Manager
        :param str csql_cell_version: Big Data SQL version.
        :param str db_version: Cloud SQL query server database version.
        :param str hue_server_url: The URL of the Hue server.
        :param str os_version: Oracle Linux version installed in the cluster.
        :param str time_created: The time the cluster was created, shown as an RFC 3339 formatted datetime string.
        :param str time_refreshed: The time the cluster was automatically or manually refreshed, shown as an RFC 3339 formatted datetime string.
        """
        if ambari_url is not None:
            pulumi.set(__self__, "ambari_url", ambari_url)
        if bd_cell_version is not None:
            pulumi.set(__self__, "bd_cell_version", bd_cell_version)
        if bda_version is not None:
            pulumi.set(__self__, "bda_version", bda_version)
        if bdm_version is not None:
            pulumi.set(__self__, "bdm_version", bdm_version)
        if bds_version is not None:
            pulumi.set(__self__, "bds_version", bds_version)
        if big_data_manager_url is not None:
            pulumi.set(__self__, "big_data_manager_url", big_data_manager_url)
        if cloudera_manager_url is not None:
            pulumi.set(__self__, "cloudera_manager_url", cloudera_manager_url)
        if csql_cell_version is not None:
            pulumi.set(__self__, "csql_cell_version", csql_cell_version)
        if db_version is not None:
            pulumi.set(__self__, "db_version", db_version)
        if hue_server_url is not None:
            pulumi.set(__self__, "hue_server_url", hue_server_url)
        if os_version is not None:
            pulumi.set(__self__, "os_version", os_version)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_refreshed is not None:
            pulumi.set(__self__, "time_refreshed", time_refreshed)

    @property
    @pulumi.getter(name="ambariUrl")
    def ambari_url(self) -> Optional[str]:
        """
        The URL of Ambari
        """
        return pulumi.get(self, "ambari_url")

    @property
    @pulumi.getter(name="bdCellVersion")
    def bd_cell_version(self) -> Optional[str]:
        """
        Cloud SQL cell version.
        """
        return pulumi.get(self, "bd_cell_version")

    @property
    @pulumi.getter(name="bdaVersion")
    def bda_version(self) -> Optional[str]:
        """
        BDA version installed in the cluster
        """
        return pulumi.get(self, "bda_version")

    @property
    @pulumi.getter(name="bdmVersion")
    def bdm_version(self) -> Optional[str]:
        """
        Big Data Manager version installed in the cluster.
        """
        return pulumi.get(self, "bdm_version")

    @property
    @pulumi.getter(name="bdsVersion")
    def bds_version(self) -> Optional[str]:
        """
        Big Data Service version installed in the cluster.
        """
        return pulumi.get(self, "bds_version")

    @property
    @pulumi.getter(name="bigDataManagerUrl")
    def big_data_manager_url(self) -> Optional[str]:
        """
        The URL of Big Data Manager.
        """
        return pulumi.get(self, "big_data_manager_url")

    @property
    @pulumi.getter(name="clouderaManagerUrl")
    def cloudera_manager_url(self) -> Optional[str]:
        """
        The URL of Cloudera Manager
        """
        return pulumi.get(self, "cloudera_manager_url")

    @property
    @pulumi.getter(name="csqlCellVersion")
    def csql_cell_version(self) -> Optional[str]:
        """
        Big Data SQL version.
        """
        return pulumi.get(self, "csql_cell_version")

    @property
    @pulumi.getter(name="dbVersion")
    def db_version(self) -> Optional[str]:
        """
        Cloud SQL query server database version.
        """
        return pulumi.get(self, "db_version")

    @property
    @pulumi.getter(name="hueServerUrl")
    def hue_server_url(self) -> Optional[str]:
        """
        The URL of the Hue server.
        """
        return pulumi.get(self, "hue_server_url")

    @property
    @pulumi.getter(name="osVersion")
    def os_version(self) -> Optional[str]:
        """
        Oracle Linux version installed in the cluster.
        """
        return pulumi.get(self, "os_version")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        """
        The time the cluster was created, shown as an RFC 3339 formatted datetime string.
        """
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeRefreshed")
    def time_refreshed(self) -> Optional[str]:
        """
        The time the cluster was automatically or manually refreshed, shown as an RFC 3339 formatted datetime string.
        """
        return pulumi.get(self, "time_refreshed")


@pulumi.output_type
class BdsInstanceMasterNode(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "blockVolumeSizeInGbs":
            suggest = "block_volume_size_in_gbs"
        elif key == "numberOfNodes":
            suggest = "number_of_nodes"
        elif key == "subnetId":
            suggest = "subnet_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BdsInstanceMasterNode. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BdsInstanceMasterNode.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BdsInstanceMasterNode.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 block_volume_size_in_gbs: str,
                 number_of_nodes: int,
                 shape: str,
                 subnet_id: str):
        """
        :param str block_volume_size_in_gbs: The size of block volume in GB to be attached to a given node. All the details needed for attaching the block volume are managed by service itself.
        :param int number_of_nodes: The number of nodes that form the cluster.
        :param str shape: (Updatable) Shape of the node.
        :param str subnet_id: The OCID of the subnet in which the node will be created.
        """
        pulumi.set(__self__, "block_volume_size_in_gbs", block_volume_size_in_gbs)
        pulumi.set(__self__, "number_of_nodes", number_of_nodes)
        pulumi.set(__self__, "shape", shape)
        pulumi.set(__self__, "subnet_id", subnet_id)

    @property
    @pulumi.getter(name="blockVolumeSizeInGbs")
    def block_volume_size_in_gbs(self) -> str:
        """
        The size of block volume in GB to be attached to a given node. All the details needed for attaching the block volume are managed by service itself.
        """
        return pulumi.get(self, "block_volume_size_in_gbs")

    @property
    @pulumi.getter(name="numberOfNodes")
    def number_of_nodes(self) -> int:
        """
        The number of nodes that form the cluster.
        """
        return pulumi.get(self, "number_of_nodes")

    @property
    @pulumi.getter
    def shape(self) -> str:
        """
        (Updatable) Shape of the node.
        """
        return pulumi.get(self, "shape")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> str:
        """
        The OCID of the subnet in which the node will be created.
        """
        return pulumi.get(self, "subnet_id")


@pulumi.output_type
class BdsInstanceNetworkConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cidrBlock":
            suggest = "cidr_block"
        elif key == "isNatGatewayRequired":
            suggest = "is_nat_gateway_required"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BdsInstanceNetworkConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BdsInstanceNetworkConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BdsInstanceNetworkConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cidr_block: Optional[str] = None,
                 is_nat_gateway_required: Optional[bool] = None):
        """
        :param str cidr_block: The CIDR IP address block of the VCN.
        :param bool is_nat_gateway_required: A boolean flag whether to configure a NAT gateway.
        """
        if cidr_block is not None:
            pulumi.set(__self__, "cidr_block", cidr_block)
        if is_nat_gateway_required is not None:
            pulumi.set(__self__, "is_nat_gateway_required", is_nat_gateway_required)

    @property
    @pulumi.getter(name="cidrBlock")
    def cidr_block(self) -> Optional[str]:
        """
        The CIDR IP address block of the VCN.
        """
        return pulumi.get(self, "cidr_block")

    @property
    @pulumi.getter(name="isNatGatewayRequired")
    def is_nat_gateway_required(self) -> Optional[bool]:
        """
        A boolean flag whether to configure a NAT gateway.
        """
        return pulumi.get(self, "is_nat_gateway_required")


@pulumi.output_type
class BdsInstanceNode(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "attachedBlockVolumes":
            suggest = "attached_block_volumes"
        elif key == "availabilityDomain":
            suggest = "availability_domain"
        elif key == "displayName":
            suggest = "display_name"
        elif key == "faultDomain":
            suggest = "fault_domain"
        elif key == "imageId":
            suggest = "image_id"
        elif key == "instanceId":
            suggest = "instance_id"
        elif key == "ipAddress":
            suggest = "ip_address"
        elif key == "nodeType":
            suggest = "node_type"
        elif key == "sshFingerprint":
            suggest = "ssh_fingerprint"
        elif key == "subnetId":
            suggest = "subnet_id"
        elif key == "timeCreated":
            suggest = "time_created"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BdsInstanceNode. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BdsInstanceNode.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BdsInstanceNode.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 attached_block_volumes: Optional[Sequence['outputs.BdsInstanceNodeAttachedBlockVolume']] = None,
                 availability_domain: Optional[str] = None,
                 display_name: Optional[str] = None,
                 fault_domain: Optional[str] = None,
                 hostname: Optional[str] = None,
                 image_id: Optional[str] = None,
                 instance_id: Optional[str] = None,
                 ip_address: Optional[str] = None,
                 node_type: Optional[str] = None,
                 shape: Optional[str] = None,
                 ssh_fingerprint: Optional[str] = None,
                 state: Optional[str] = None,
                 subnet_id: Optional[str] = None,
                 time_created: Optional[str] = None):
        """
        :param Sequence['BdsInstanceNodeAttachedBlockVolumeArgs'] attached_block_volumes: The list of block volumes attached to a given node.
        :param str availability_domain: The name of the availability domain in which the node is running.
        :param str display_name: (Updatable) Name of the Big Data Service cluster.
        :param str fault_domain: The name of the fault domain in which the node is running.
        :param str hostname: The fully-qualified hostname (FQDN) of the node.
        :param str image_id: The OCID of the image from which the node was created.
        :param str instance_id: The OCID of the underlying Oracle Cloud Infrastructure Compute instance.
        :param str ip_address: IP address of the node.
        :param str node_type: The Big Data Service cluster node type.
        :param str shape: (Updatable) Shape of the node.
        :param str ssh_fingerprint: The fingerprint of the SSH key used for node access.
        :param str state: The state of the cluster.
        :param str subnet_id: The OCID of the subnet in which the node will be created.
        :param str time_created: The time the cluster was created, shown as an RFC 3339 formatted datetime string.
        """
        if attached_block_volumes is not None:
            pulumi.set(__self__, "attached_block_volumes", attached_block_volumes)
        if availability_domain is not None:
            pulumi.set(__self__, "availability_domain", availability_domain)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if fault_domain is not None:
            pulumi.set(__self__, "fault_domain", fault_domain)
        if hostname is not None:
            pulumi.set(__self__, "hostname", hostname)
        if image_id is not None:
            pulumi.set(__self__, "image_id", image_id)
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)
        if ip_address is not None:
            pulumi.set(__self__, "ip_address", ip_address)
        if node_type is not None:
            pulumi.set(__self__, "node_type", node_type)
        if shape is not None:
            pulumi.set(__self__, "shape", shape)
        if ssh_fingerprint is not None:
            pulumi.set(__self__, "ssh_fingerprint", ssh_fingerprint)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)

    @property
    @pulumi.getter(name="attachedBlockVolumes")
    def attached_block_volumes(self) -> Optional[Sequence['outputs.BdsInstanceNodeAttachedBlockVolume']]:
        """
        The list of block volumes attached to a given node.
        """
        return pulumi.get(self, "attached_block_volumes")

    @property
    @pulumi.getter(name="availabilityDomain")
    def availability_domain(self) -> Optional[str]:
        """
        The name of the availability domain in which the node is running.
        """
        return pulumi.get(self, "availability_domain")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        """
        (Updatable) Name of the Big Data Service cluster.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="faultDomain")
    def fault_domain(self) -> Optional[str]:
        """
        The name of the fault domain in which the node is running.
        """
        return pulumi.get(self, "fault_domain")

    @property
    @pulumi.getter
    def hostname(self) -> Optional[str]:
        """
        The fully-qualified hostname (FQDN) of the node.
        """
        return pulumi.get(self, "hostname")

    @property
    @pulumi.getter(name="imageId")
    def image_id(self) -> Optional[str]:
        """
        The OCID of the image from which the node was created.
        """
        return pulumi.get(self, "image_id")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[str]:
        """
        The OCID of the underlying Oracle Cloud Infrastructure Compute instance.
        """
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> Optional[str]:
        """
        IP address of the node.
        """
        return pulumi.get(self, "ip_address")

    @property
    @pulumi.getter(name="nodeType")
    def node_type(self) -> Optional[str]:
        """
        The Big Data Service cluster node type.
        """
        return pulumi.get(self, "node_type")

    @property
    @pulumi.getter
    def shape(self) -> Optional[str]:
        """
        (Updatable) Shape of the node.
        """
        return pulumi.get(self, "shape")

    @property
    @pulumi.getter(name="sshFingerprint")
    def ssh_fingerprint(self) -> Optional[str]:
        """
        The fingerprint of the SSH key used for node access.
        """
        return pulumi.get(self, "ssh_fingerprint")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        """
        The state of the cluster.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[str]:
        """
        The OCID of the subnet in which the node will be created.
        """
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        """
        The time the cluster was created, shown as an RFC 3339 formatted datetime string.
        """
        return pulumi.get(self, "time_created")


@pulumi.output_type
class BdsInstanceNodeAttachedBlockVolume(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "volumeAttachmentId":
            suggest = "volume_attachment_id"
        elif key == "volumeSizeInGbs":
            suggest = "volume_size_in_gbs"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BdsInstanceNodeAttachedBlockVolume. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BdsInstanceNodeAttachedBlockVolume.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BdsInstanceNodeAttachedBlockVolume.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 volume_attachment_id: Optional[str] = None,
                 volume_size_in_gbs: Optional[str] = None):
        """
        :param str volume_attachment_id: The OCID of the volume attachment.
        :param str volume_size_in_gbs: The size of the volume in GBs.
        """
        if volume_attachment_id is not None:
            pulumi.set(__self__, "volume_attachment_id", volume_attachment_id)
        if volume_size_in_gbs is not None:
            pulumi.set(__self__, "volume_size_in_gbs", volume_size_in_gbs)

    @property
    @pulumi.getter(name="volumeAttachmentId")
    def volume_attachment_id(self) -> Optional[str]:
        """
        The OCID of the volume attachment.
        """
        return pulumi.get(self, "volume_attachment_id")

    @property
    @pulumi.getter(name="volumeSizeInGbs")
    def volume_size_in_gbs(self) -> Optional[str]:
        """
        The size of the volume in GBs.
        """
        return pulumi.get(self, "volume_size_in_gbs")


@pulumi.output_type
class BdsInstanceUtilNode(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "blockVolumeSizeInGbs":
            suggest = "block_volume_size_in_gbs"
        elif key == "numberOfNodes":
            suggest = "number_of_nodes"
        elif key == "subnetId":
            suggest = "subnet_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BdsInstanceUtilNode. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BdsInstanceUtilNode.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BdsInstanceUtilNode.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 block_volume_size_in_gbs: str,
                 number_of_nodes: int,
                 shape: str,
                 subnet_id: str):
        """
        :param str block_volume_size_in_gbs: The size of block volume in GB to be attached to a given node. All the details needed for attaching the block volume are managed by service itself.
        :param int number_of_nodes: The number of nodes that form the cluster.
        :param str shape: (Updatable) Shape of the node.
        :param str subnet_id: The OCID of the subnet in which the node will be created.
        """
        pulumi.set(__self__, "block_volume_size_in_gbs", block_volume_size_in_gbs)
        pulumi.set(__self__, "number_of_nodes", number_of_nodes)
        pulumi.set(__self__, "shape", shape)
        pulumi.set(__self__, "subnet_id", subnet_id)

    @property
    @pulumi.getter(name="blockVolumeSizeInGbs")
    def block_volume_size_in_gbs(self) -> str:
        """
        The size of block volume in GB to be attached to a given node. All the details needed for attaching the block volume are managed by service itself.
        """
        return pulumi.get(self, "block_volume_size_in_gbs")

    @property
    @pulumi.getter(name="numberOfNodes")
    def number_of_nodes(self) -> int:
        """
        The number of nodes that form the cluster.
        """
        return pulumi.get(self, "number_of_nodes")

    @property
    @pulumi.getter
    def shape(self) -> str:
        """
        (Updatable) Shape of the node.
        """
        return pulumi.get(self, "shape")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> str:
        """
        The OCID of the subnet in which the node will be created.
        """
        return pulumi.get(self, "subnet_id")


@pulumi.output_type
class BdsInstanceWorkerNode(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "blockVolumeSizeInGbs":
            suggest = "block_volume_size_in_gbs"
        elif key == "numberOfNodes":
            suggest = "number_of_nodes"
        elif key == "subnetId":
            suggest = "subnet_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BdsInstanceWorkerNode. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BdsInstanceWorkerNode.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BdsInstanceWorkerNode.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 block_volume_size_in_gbs: str,
                 number_of_nodes: int,
                 shape: str,
                 subnet_id: str):
        """
        :param str block_volume_size_in_gbs: The size of block volume in GB to be attached to a given node. All the details needed for attaching the block volume are managed by service itself.
        :param int number_of_nodes: The number of nodes that form the cluster.
        :param str shape: (Updatable) Shape of the node.
        :param str subnet_id: The OCID of the subnet in which the node will be created.
        """
        pulumi.set(__self__, "block_volume_size_in_gbs", block_volume_size_in_gbs)
        pulumi.set(__self__, "number_of_nodes", number_of_nodes)
        pulumi.set(__self__, "shape", shape)
        pulumi.set(__self__, "subnet_id", subnet_id)

    @property
    @pulumi.getter(name="blockVolumeSizeInGbs")
    def block_volume_size_in_gbs(self) -> str:
        """
        The size of block volume in GB to be attached to a given node. All the details needed for attaching the block volume are managed by service itself.
        """
        return pulumi.get(self, "block_volume_size_in_gbs")

    @property
    @pulumi.getter(name="numberOfNodes")
    def number_of_nodes(self) -> int:
        """
        The number of nodes that form the cluster.
        """
        return pulumi.get(self, "number_of_nodes")

    @property
    @pulumi.getter
    def shape(self) -> str:
        """
        (Updatable) Shape of the node.
        """
        return pulumi.get(self, "shape")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> str:
        """
        The OCID of the subnet in which the node will be created.
        """
        return pulumi.get(self, "subnet_id")


@pulumi.output_type
class GetAutoScalingConfigurationPolicyResult(dict):
    def __init__(__self__, *,
                 policy_type: str,
                 rules: Sequence['outputs.GetAutoScalingConfigurationPolicyRuleResult']):
        """
        :param str policy_type: Types of autoscale policies. Options are SCHEDULE-BASED or THRESHOLD-BASED. (Only THRESHOLD-BASED is supported in this release.)
        :param Sequence['GetAutoScalingConfigurationPolicyRuleArgs'] rules: The list of rules for autoscaling. If an action has multiple rules, the last rule in the array will be applied.
        """
        pulumi.set(__self__, "policy_type", policy_type)
        pulumi.set(__self__, "rules", rules)

    @property
    @pulumi.getter(name="policyType")
    def policy_type(self) -> str:
        """
        Types of autoscale policies. Options are SCHEDULE-BASED or THRESHOLD-BASED. (Only THRESHOLD-BASED is supported in this release.)
        """
        return pulumi.get(self, "policy_type")

    @property
    @pulumi.getter
    def rules(self) -> Sequence['outputs.GetAutoScalingConfigurationPolicyRuleResult']:
        """
        The list of rules for autoscaling. If an action has multiple rules, the last rule in the array will be applied.
        """
        return pulumi.get(self, "rules")


@pulumi.output_type
class GetAutoScalingConfigurationPolicyRuleResult(dict):
    def __init__(__self__, *,
                 action: str,
                 metric: 'outputs.GetAutoScalingConfigurationPolicyRuleMetricResult'):
        """
        :param str action: The valid value are CHANGE_SHAPE_SCALE_UP or CHANGE_SHAPE_SCALE_DOWN.
        :param 'GetAutoScalingConfigurationPolicyRuleMetricArgs' metric: Metric and threshold details for triggering an autoscale action.
        """
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "metric", metric)

    @property
    @pulumi.getter
    def action(self) -> str:
        """
        The valid value are CHANGE_SHAPE_SCALE_UP or CHANGE_SHAPE_SCALE_DOWN.
        """
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def metric(self) -> 'outputs.GetAutoScalingConfigurationPolicyRuleMetricResult':
        """
        Metric and threshold details for triggering an autoscale action.
        """
        return pulumi.get(self, "metric")


@pulumi.output_type
class GetAutoScalingConfigurationPolicyRuleMetricResult(dict):
    def __init__(__self__, *,
                 metric_type: str,
                 threshold: 'outputs.GetAutoScalingConfigurationPolicyRuleMetricThresholdResult'):
        """
        :param str metric_type: Allowed value is CPU_UTILIZATION.
        :param 'GetAutoScalingConfigurationPolicyRuleMetricThresholdArgs' threshold: An autoscale action is triggered when a performance metric meets or exceeds a threshold.
        """
        pulumi.set(__self__, "metric_type", metric_type)
        pulumi.set(__self__, "threshold", threshold)

    @property
    @pulumi.getter(name="metricType")
    def metric_type(self) -> str:
        """
        Allowed value is CPU_UTILIZATION.
        """
        return pulumi.get(self, "metric_type")

    @property
    @pulumi.getter
    def threshold(self) -> 'outputs.GetAutoScalingConfigurationPolicyRuleMetricThresholdResult':
        """
        An autoscale action is triggered when a performance metric meets or exceeds a threshold.
        """
        return pulumi.get(self, "threshold")


@pulumi.output_type
class GetAutoScalingConfigurationPolicyRuleMetricThresholdResult(dict):
    def __init__(__self__, *,
                 duration_in_minutes: int,
                 operator: str,
                 value: int):
        """
        :param int duration_in_minutes: This value is the minimum period of time the metric value meets or exceeds the threshold value before the action is triggered. The value is in minutes.
        :param str operator: The comparison operator to use. Options are greater than (GT) or less than (LT).
        :param int value: Integer non-negative value. 0 < value < 100
        """
        pulumi.set(__self__, "duration_in_minutes", duration_in_minutes)
        pulumi.set(__self__, "operator", operator)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="durationInMinutes")
    def duration_in_minutes(self) -> int:
        """
        This value is the minimum period of time the metric value meets or exceeds the threshold value before the action is triggered. The value is in minutes.
        """
        return pulumi.get(self, "duration_in_minutes")

    @property
    @pulumi.getter
    def operator(self) -> str:
        """
        The comparison operator to use. Options are greater than (GT) or less than (LT).
        """
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def value(self) -> int:
        """
        Integer non-negative value. 0 < value < 100
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetBdsInstanceCloudSqlDetailsResult(dict):
    def __init__(__self__, *,
                 block_volume_size_in_gbs: str,
                 ip_address: str,
                 is_kerberos_mapped_to_database_users: bool,
                 kerberos_details: Sequence['outputs.GetBdsInstanceCloudSqlDetailsKerberosDetailResult'],
                 shape: str):
        """
        :param str block_volume_size_in_gbs: The size of block volume in GB that needs to be attached to a given node. All the necessary details needed for attachment are managed by service itself.
        :param str ip_address: IP address of the node.
        :param bool is_kerberos_mapped_to_database_users: Boolean flag specifying whether or not Kerberos principals are mapped to database users.
        :param Sequence['GetBdsInstanceCloudSqlDetailsKerberosDetailArgs'] kerberos_details: Details about the Kerberos principals.
        :param str shape: Shape of the node.
        """
        pulumi.set(__self__, "block_volume_size_in_gbs", block_volume_size_in_gbs)
        pulumi.set(__self__, "ip_address", ip_address)
        pulumi.set(__self__, "is_kerberos_mapped_to_database_users", is_kerberos_mapped_to_database_users)
        pulumi.set(__self__, "kerberos_details", kerberos_details)
        pulumi.set(__self__, "shape", shape)

    @property
    @pulumi.getter(name="blockVolumeSizeInGbs")
    def block_volume_size_in_gbs(self) -> str:
        """
        The size of block volume in GB that needs to be attached to a given node. All the necessary details needed for attachment are managed by service itself.
        """
        return pulumi.get(self, "block_volume_size_in_gbs")

    @property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> str:
        """
        IP address of the node.
        """
        return pulumi.get(self, "ip_address")

    @property
    @pulumi.getter(name="isKerberosMappedToDatabaseUsers")
    def is_kerberos_mapped_to_database_users(self) -> bool:
        """
        Boolean flag specifying whether or not Kerberos principals are mapped to database users.
        """
        return pulumi.get(self, "is_kerberos_mapped_to_database_users")

    @property
    @pulumi.getter(name="kerberosDetails")
    def kerberos_details(self) -> Sequence['outputs.GetBdsInstanceCloudSqlDetailsKerberosDetailResult']:
        """
        Details about the Kerberos principals.
        """
        return pulumi.get(self, "kerberos_details")

    @property
    @pulumi.getter
    def shape(self) -> str:
        """
        Shape of the node.
        """
        return pulumi.get(self, "shape")


@pulumi.output_type
class GetBdsInstanceCloudSqlDetailsKerberosDetailResult(dict):
    def __init__(__self__, *,
                 keytab_file: str,
                 principal_name: str):
        """
        :param str keytab_file: Location of the keytab file
        :param str principal_name: Name of the Kerberos principal.
        """
        pulumi.set(__self__, "keytab_file", keytab_file)
        pulumi.set(__self__, "principal_name", principal_name)

    @property
    @pulumi.getter(name="keytabFile")
    def keytab_file(self) -> str:
        """
        Location of the keytab file
        """
        return pulumi.get(self, "keytab_file")

    @property
    @pulumi.getter(name="principalName")
    def principal_name(self) -> str:
        """
        Name of the Kerberos principal.
        """
        return pulumi.get(self, "principal_name")


@pulumi.output_type
class GetBdsInstanceClusterDetailsResult(dict):
    def __init__(__self__, *,
                 ambari_url: str,
                 bd_cell_version: str,
                 bda_version: str,
                 bdm_version: str,
                 bds_version: str,
                 big_data_manager_url: str,
                 cloudera_manager_url: str,
                 csql_cell_version: str,
                 db_version: str,
                 hue_server_url: str,
                 os_version: str,
                 time_created: str,
                 time_refreshed: str):
        """
        :param str ambari_url: The URL of Ambari
        :param str bd_cell_version: Cloud SQL cell version.
        :param str bda_version: BDA version installed in the cluster
        :param str bdm_version: Big Data Manager version installed in the cluster.
        :param str bds_version: Big Data Service version installed in the cluster.
        :param str big_data_manager_url: The URL of Big Data Manager.
        :param str cloudera_manager_url: The URL of Cloudera Manager
        :param str csql_cell_version: Big Data SQL version.
        :param str db_version: Cloud SQL query server database version.
        :param str hue_server_url: The URL of the Hue server.
        :param str os_version: Oracle Linux version installed in the cluster.
        :param str time_created: The time the cluster was created, shown as an RFC 3339 formatted datetime string.
        :param str time_refreshed: The time the cluster was automatically or manually refreshed, shown as an RFC 3339 formatted datetime string.
        """
        pulumi.set(__self__, "ambari_url", ambari_url)
        pulumi.set(__self__, "bd_cell_version", bd_cell_version)
        pulumi.set(__self__, "bda_version", bda_version)
        pulumi.set(__self__, "bdm_version", bdm_version)
        pulumi.set(__self__, "bds_version", bds_version)
        pulumi.set(__self__, "big_data_manager_url", big_data_manager_url)
        pulumi.set(__self__, "cloudera_manager_url", cloudera_manager_url)
        pulumi.set(__self__, "csql_cell_version", csql_cell_version)
        pulumi.set(__self__, "db_version", db_version)
        pulumi.set(__self__, "hue_server_url", hue_server_url)
        pulumi.set(__self__, "os_version", os_version)
        pulumi.set(__self__, "time_created", time_created)
        pulumi.set(__self__, "time_refreshed", time_refreshed)

    @property
    @pulumi.getter(name="ambariUrl")
    def ambari_url(self) -> str:
        """
        The URL of Ambari
        """
        return pulumi.get(self, "ambari_url")

    @property
    @pulumi.getter(name="bdCellVersion")
    def bd_cell_version(self) -> str:
        """
        Cloud SQL cell version.
        """
        return pulumi.get(self, "bd_cell_version")

    @property
    @pulumi.getter(name="bdaVersion")
    def bda_version(self) -> str:
        """
        BDA version installed in the cluster
        """
        return pulumi.get(self, "bda_version")

    @property
    @pulumi.getter(name="bdmVersion")
    def bdm_version(self) -> str:
        """
        Big Data Manager version installed in the cluster.
        """
        return pulumi.get(self, "bdm_version")

    @property
    @pulumi.getter(name="bdsVersion")
    def bds_version(self) -> str:
        """
        Big Data Service version installed in the cluster.
        """
        return pulumi.get(self, "bds_version")

    @property
    @pulumi.getter(name="bigDataManagerUrl")
    def big_data_manager_url(self) -> str:
        """
        The URL of Big Data Manager.
        """
        return pulumi.get(self, "big_data_manager_url")

    @property
    @pulumi.getter(name="clouderaManagerUrl")
    def cloudera_manager_url(self) -> str:
        """
        The URL of Cloudera Manager
        """
        return pulumi.get(self, "cloudera_manager_url")

    @property
    @pulumi.getter(name="csqlCellVersion")
    def csql_cell_version(self) -> str:
        """
        Big Data SQL version.
        """
        return pulumi.get(self, "csql_cell_version")

    @property
    @pulumi.getter(name="dbVersion")
    def db_version(self) -> str:
        """
        Cloud SQL query server database version.
        """
        return pulumi.get(self, "db_version")

    @property
    @pulumi.getter(name="hueServerUrl")
    def hue_server_url(self) -> str:
        """
        The URL of the Hue server.
        """
        return pulumi.get(self, "hue_server_url")

    @property
    @pulumi.getter(name="osVersion")
    def os_version(self) -> str:
        """
        Oracle Linux version installed in the cluster.
        """
        return pulumi.get(self, "os_version")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> str:
        """
        The time the cluster was created, shown as an RFC 3339 formatted datetime string.
        """
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeRefreshed")
    def time_refreshed(self) -> str:
        """
        The time the cluster was automatically or manually refreshed, shown as an RFC 3339 formatted datetime string.
        """
        return pulumi.get(self, "time_refreshed")


@pulumi.output_type
class GetBdsInstanceMasterNodeResult(dict):
    def __init__(__self__, *,
                 block_volume_size_in_gbs: str,
                 number_of_nodes: int,
                 shape: str,
                 subnet_id: str):
        """
        :param str block_volume_size_in_gbs: The size of block volume in GB that needs to be attached to a given node. All the necessary details needed for attachment are managed by service itself.
        :param int number_of_nodes: The number of nodes that form the cluster.
        :param str shape: Shape of the node.
        :param str subnet_id: The OCID of the subnet in which the node is to be created.
        """
        pulumi.set(__self__, "block_volume_size_in_gbs", block_volume_size_in_gbs)
        pulumi.set(__self__, "number_of_nodes", number_of_nodes)
        pulumi.set(__self__, "shape", shape)
        pulumi.set(__self__, "subnet_id", subnet_id)

    @property
    @pulumi.getter(name="blockVolumeSizeInGbs")
    def block_volume_size_in_gbs(self) -> str:
        """
        The size of block volume in GB that needs to be attached to a given node. All the necessary details needed for attachment are managed by service itself.
        """
        return pulumi.get(self, "block_volume_size_in_gbs")

    @property
    @pulumi.getter(name="numberOfNodes")
    def number_of_nodes(self) -> int:
        """
        The number of nodes that form the cluster.
        """
        return pulumi.get(self, "number_of_nodes")

    @property
    @pulumi.getter
    def shape(self) -> str:
        """
        Shape of the node.
        """
        return pulumi.get(self, "shape")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> str:
        """
        The OCID of the subnet in which the node is to be created.
        """
        return pulumi.get(self, "subnet_id")


@pulumi.output_type
class GetBdsInstanceNetworkConfigResult(dict):
    def __init__(__self__, *,
                 cidr_block: str,
                 is_nat_gateway_required: bool):
        """
        :param str cidr_block: The CIDR IP address block of the VCN.
        :param bool is_nat_gateway_required: A boolean flag whether to configure a NAT gateway.
        """
        pulumi.set(__self__, "cidr_block", cidr_block)
        pulumi.set(__self__, "is_nat_gateway_required", is_nat_gateway_required)

    @property
    @pulumi.getter(name="cidrBlock")
    def cidr_block(self) -> str:
        """
        The CIDR IP address block of the VCN.
        """
        return pulumi.get(self, "cidr_block")

    @property
    @pulumi.getter(name="isNatGatewayRequired")
    def is_nat_gateway_required(self) -> bool:
        """
        A boolean flag whether to configure a NAT gateway.
        """
        return pulumi.get(self, "is_nat_gateway_required")


@pulumi.output_type
class GetBdsInstanceNodeResult(dict):
    def __init__(__self__, *,
                 attached_block_volumes: Sequence['outputs.GetBdsInstanceNodeAttachedBlockVolumeResult'],
                 availability_domain: str,
                 display_name: str,
                 fault_domain: str,
                 hostname: str,
                 image_id: str,
                 instance_id: str,
                 ip_address: str,
                 node_type: str,
                 shape: str,
                 ssh_fingerprint: str,
                 state: str,
                 subnet_id: str,
                 time_created: str):
        """
        :param Sequence['GetBdsInstanceNodeAttachedBlockVolumeArgs'] attached_block_volumes: The list of block volumes attached to a given node.
        :param str availability_domain: The name of the availability domain in which the node is running.
        :param str display_name: The name of the node.
        :param str fault_domain: The name of the fault domain in which the node is running.
        :param str hostname: The fully-qualified hostname (FQDN) of the node.
        :param str image_id: The OCID of the image from which the node was created.
        :param str instance_id: The OCID of the underlying Oracle Cloud Infrastructure Compute instance.
        :param str ip_address: IP address of the node.
        :param str node_type: Cluster node type.
        :param str shape: Shape of the node.
        :param str ssh_fingerprint: The fingerprint of the SSH key used for node access.
        :param str state: The state of the cluster.
        :param str subnet_id: The OCID of the subnet in which the node is to be created.
        :param str time_created: The time the cluster was created, shown as an RFC 3339 formatted datetime string.
        """
        pulumi.set(__self__, "attached_block_volumes", attached_block_volumes)
        pulumi.set(__self__, "availability_domain", availability_domain)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "fault_domain", fault_domain)
        pulumi.set(__self__, "hostname", hostname)
        pulumi.set(__self__, "image_id", image_id)
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "ip_address", ip_address)
        pulumi.set(__self__, "node_type", node_type)
        pulumi.set(__self__, "shape", shape)
        pulumi.set(__self__, "ssh_fingerprint", ssh_fingerprint)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "subnet_id", subnet_id)
        pulumi.set(__self__, "time_created", time_created)

    @property
    @pulumi.getter(name="attachedBlockVolumes")
    def attached_block_volumes(self) -> Sequence['outputs.GetBdsInstanceNodeAttachedBlockVolumeResult']:
        """
        The list of block volumes attached to a given node.
        """
        return pulumi.get(self, "attached_block_volumes")

    @property
    @pulumi.getter(name="availabilityDomain")
    def availability_domain(self) -> str:
        """
        The name of the availability domain in which the node is running.
        """
        return pulumi.get(self, "availability_domain")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        The name of the node.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="faultDomain")
    def fault_domain(self) -> str:
        """
        The name of the fault domain in which the node is running.
        """
        return pulumi.get(self, "fault_domain")

    @property
    @pulumi.getter
    def hostname(self) -> str:
        """
        The fully-qualified hostname (FQDN) of the node.
        """
        return pulumi.get(self, "hostname")

    @property
    @pulumi.getter(name="imageId")
    def image_id(self) -> str:
        """
        The OCID of the image from which the node was created.
        """
        return pulumi.get(self, "image_id")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> str:
        """
        The OCID of the underlying Oracle Cloud Infrastructure Compute instance.
        """
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> str:
        """
        IP address of the node.
        """
        return pulumi.get(self, "ip_address")

    @property
    @pulumi.getter(name="nodeType")
    def node_type(self) -> str:
        """
        Cluster node type.
        """
        return pulumi.get(self, "node_type")

    @property
    @pulumi.getter
    def shape(self) -> str:
        """
        Shape of the node.
        """
        return pulumi.get(self, "shape")

    @property
    @pulumi.getter(name="sshFingerprint")
    def ssh_fingerprint(self) -> str:
        """
        The fingerprint of the SSH key used for node access.
        """
        return pulumi.get(self, "ssh_fingerprint")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        The state of the cluster.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> str:
        """
        The OCID of the subnet in which the node is to be created.
        """
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> str:
        """
        The time the cluster was created, shown as an RFC 3339 formatted datetime string.
        """
        return pulumi.get(self, "time_created")


@pulumi.output_type
class GetBdsInstanceNodeAttachedBlockVolumeResult(dict):
    def __init__(__self__, *,
                 volume_attachment_id: str,
                 volume_size_in_gbs: str):
        """
        :param str volume_attachment_id: The OCID of the volume attachment.
        :param str volume_size_in_gbs: The size of the volume in GBs.
        """
        pulumi.set(__self__, "volume_attachment_id", volume_attachment_id)
        pulumi.set(__self__, "volume_size_in_gbs", volume_size_in_gbs)

    @property
    @pulumi.getter(name="volumeAttachmentId")
    def volume_attachment_id(self) -> str:
        """
        The OCID of the volume attachment.
        """
        return pulumi.get(self, "volume_attachment_id")

    @property
    @pulumi.getter(name="volumeSizeInGbs")
    def volume_size_in_gbs(self) -> str:
        """
        The size of the volume in GBs.
        """
        return pulumi.get(self, "volume_size_in_gbs")


@pulumi.output_type
class GetBdsInstanceUtilNodeResult(dict):
    def __init__(__self__, *,
                 block_volume_size_in_gbs: str,
                 number_of_nodes: int,
                 shape: str,
                 subnet_id: str):
        """
        :param str block_volume_size_in_gbs: The size of block volume in GB that needs to be attached to a given node. All the necessary details needed for attachment are managed by service itself.
        :param int number_of_nodes: The number of nodes that form the cluster.
        :param str shape: Shape of the node.
        :param str subnet_id: The OCID of the subnet in which the node is to be created.
        """
        pulumi.set(__self__, "block_volume_size_in_gbs", block_volume_size_in_gbs)
        pulumi.set(__self__, "number_of_nodes", number_of_nodes)
        pulumi.set(__self__, "shape", shape)
        pulumi.set(__self__, "subnet_id", subnet_id)

    @property
    @pulumi.getter(name="blockVolumeSizeInGbs")
    def block_volume_size_in_gbs(self) -> str:
        """
        The size of block volume in GB that needs to be attached to a given node. All the necessary details needed for attachment are managed by service itself.
        """
        return pulumi.get(self, "block_volume_size_in_gbs")

    @property
    @pulumi.getter(name="numberOfNodes")
    def number_of_nodes(self) -> int:
        """
        The number of nodes that form the cluster.
        """
        return pulumi.get(self, "number_of_nodes")

    @property
    @pulumi.getter
    def shape(self) -> str:
        """
        Shape of the node.
        """
        return pulumi.get(self, "shape")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> str:
        """
        The OCID of the subnet in which the node is to be created.
        """
        return pulumi.get(self, "subnet_id")


@pulumi.output_type
class GetBdsInstanceWorkerNodeResult(dict):
    def __init__(__self__, *,
                 block_volume_size_in_gbs: str,
                 number_of_nodes: int,
                 shape: str,
                 subnet_id: str):
        """
        :param str block_volume_size_in_gbs: The size of block volume in GB that needs to be attached to a given node. All the necessary details needed for attachment are managed by service itself.
        :param int number_of_nodes: The number of nodes that form the cluster.
        :param str shape: Shape of the node.
        :param str subnet_id: The OCID of the subnet in which the node is to be created.
        """
        pulumi.set(__self__, "block_volume_size_in_gbs", block_volume_size_in_gbs)
        pulumi.set(__self__, "number_of_nodes", number_of_nodes)
        pulumi.set(__self__, "shape", shape)
        pulumi.set(__self__, "subnet_id", subnet_id)

    @property
    @pulumi.getter(name="blockVolumeSizeInGbs")
    def block_volume_size_in_gbs(self) -> str:
        """
        The size of block volume in GB that needs to be attached to a given node. All the necessary details needed for attachment are managed by service itself.
        """
        return pulumi.get(self, "block_volume_size_in_gbs")

    @property
    @pulumi.getter(name="numberOfNodes")
    def number_of_nodes(self) -> int:
        """
        The number of nodes that form the cluster.
        """
        return pulumi.get(self, "number_of_nodes")

    @property
    @pulumi.getter
    def shape(self) -> str:
        """
        Shape of the node.
        """
        return pulumi.get(self, "shape")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> str:
        """
        The OCID of the subnet in which the node is to be created.
        """
        return pulumi.get(self, "subnet_id")


@pulumi.output_type
class GetBdsInstancesBdsInstanceResult(dict):
    def __init__(__self__, *,
                 cloud_sql_details: 'outputs.GetBdsInstancesBdsInstanceCloudSqlDetailsResult',
                 cluster_admin_password: str,
                 cluster_details: 'outputs.GetBdsInstancesBdsInstanceClusterDetailsResult',
                 cluster_public_key: str,
                 cluster_version: str,
                 compartment_id: str,
                 created_by: str,
                 defined_tags: Mapping[str, Any],
                 display_name: str,
                 freeform_tags: Mapping[str, Any],
                 id: str,
                 is_cloud_sql_configured: bool,
                 is_high_availability: bool,
                 is_secure: bool,
                 master_node: 'outputs.GetBdsInstancesBdsInstanceMasterNodeResult',
                 network_config: 'outputs.GetBdsInstancesBdsInstanceNetworkConfigResult',
                 nodes: Sequence['outputs.GetBdsInstancesBdsInstanceNodeResult'],
                 number_of_nodes: int,
                 state: str,
                 time_created: str,
                 time_updated: str,
                 util_node: 'outputs.GetBdsInstancesBdsInstanceUtilNodeResult',
                 worker_node: 'outputs.GetBdsInstancesBdsInstanceWorkerNodeResult'):
        """
        :param 'GetBdsInstancesBdsInstanceCloudSqlDetailsArgs' cloud_sql_details: The information about added Cloud SQL capability
        :param 'GetBdsInstancesBdsInstanceClusterDetailsArgs' cluster_details: Specific info about a Hadoop cluster
        :param str cluster_version: Version of the Hadoop distribution.
        :param str compartment_id: The OCID of the compartment.
        :param str created_by: The user who created the cluster.
        :param Mapping[str, Any] defined_tags: Defined tags for this resource. Each key is predefined and scoped to a namespace. For example, `{"foo-namespace": {"bar-key": "value"}}`
        :param str display_name: A filter to return only resources that match the entire display name given.
        :param Mapping[str, Any] freeform_tags: Simple key-value pair that is applied without any predefined name, type, or scope. Exists for cross-compatibility only. For example, `{"bar-key": "value"}`
        :param str id: The OCID of the Big Data Service resource.
        :param bool is_cloud_sql_configured: Boolean flag specifying whether or not Cloud SQL should be configured.
        :param bool is_high_availability: Boolean flag specifying whether or not the cluster is highly available (HA)
        :param bool is_secure: Boolean flag specifying whether or not the cluster should be set up as secure.
        :param 'GetBdsInstancesBdsInstanceNetworkConfigArgs' network_config: Additional configuration of the user's network.
        :param Sequence['GetBdsInstancesBdsInstanceNodeArgs'] nodes: The list of nodes in the cluster.
        :param int number_of_nodes: The number of nodes that form the cluster.
        :param str state: The state of the cluster.
        :param str time_created: The time the cluster was created, shown as an RFC 3339 formatted datetime string.
        :param str time_updated: The time the cluster was updated, shown as an RFC 3339 formatted datetime string.
        """
        pulumi.set(__self__, "cloud_sql_details", cloud_sql_details)
        pulumi.set(__self__, "cluster_admin_password", cluster_admin_password)
        pulumi.set(__self__, "cluster_details", cluster_details)
        pulumi.set(__self__, "cluster_public_key", cluster_public_key)
        pulumi.set(__self__, "cluster_version", cluster_version)
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "created_by", created_by)
        pulumi.set(__self__, "defined_tags", defined_tags)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "freeform_tags", freeform_tags)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "is_cloud_sql_configured", is_cloud_sql_configured)
        pulumi.set(__self__, "is_high_availability", is_high_availability)
        pulumi.set(__self__, "is_secure", is_secure)
        pulumi.set(__self__, "master_node", master_node)
        pulumi.set(__self__, "network_config", network_config)
        pulumi.set(__self__, "nodes", nodes)
        pulumi.set(__self__, "number_of_nodes", number_of_nodes)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "time_created", time_created)
        pulumi.set(__self__, "time_updated", time_updated)
        pulumi.set(__self__, "util_node", util_node)
        pulumi.set(__self__, "worker_node", worker_node)

    @property
    @pulumi.getter(name="cloudSqlDetails")
    def cloud_sql_details(self) -> 'outputs.GetBdsInstancesBdsInstanceCloudSqlDetailsResult':
        """
        The information about added Cloud SQL capability
        """
        return pulumi.get(self, "cloud_sql_details")

    @property
    @pulumi.getter(name="clusterAdminPassword")
    def cluster_admin_password(self) -> str:
        return pulumi.get(self, "cluster_admin_password")

    @property
    @pulumi.getter(name="clusterDetails")
    def cluster_details(self) -> 'outputs.GetBdsInstancesBdsInstanceClusterDetailsResult':
        """
        Specific info about a Hadoop cluster
        """
        return pulumi.get(self, "cluster_details")

    @property
    @pulumi.getter(name="clusterPublicKey")
    def cluster_public_key(self) -> str:
        return pulumi.get(self, "cluster_public_key")

    @property
    @pulumi.getter(name="clusterVersion")
    def cluster_version(self) -> str:
        """
        Version of the Hadoop distribution.
        """
        return pulumi.get(self, "cluster_version")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> str:
        """
        The OCID of the compartment.
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> str:
        """
        The user who created the cluster.
        """
        return pulumi.get(self, "created_by")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Mapping[str, Any]:
        """
        Defined tags for this resource. Each key is predefined and scoped to a namespace. For example, `{"foo-namespace": {"bar-key": "value"}}`
        """
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        A filter to return only resources that match the entire display name given.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Mapping[str, Any]:
        """
        Simple key-value pair that is applied without any predefined name, type, or scope. Exists for cross-compatibility only. For example, `{"bar-key": "value"}`
        """
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The OCID of the Big Data Service resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isCloudSqlConfigured")
    def is_cloud_sql_configured(self) -> bool:
        """
        Boolean flag specifying whether or not Cloud SQL should be configured.
        """
        return pulumi.get(self, "is_cloud_sql_configured")

    @property
    @pulumi.getter(name="isHighAvailability")
    def is_high_availability(self) -> bool:
        """
        Boolean flag specifying whether or not the cluster is highly available (HA)
        """
        return pulumi.get(self, "is_high_availability")

    @property
    @pulumi.getter(name="isSecure")
    def is_secure(self) -> bool:
        """
        Boolean flag specifying whether or not the cluster should be set up as secure.
        """
        return pulumi.get(self, "is_secure")

    @property
    @pulumi.getter(name="masterNode")
    def master_node(self) -> 'outputs.GetBdsInstancesBdsInstanceMasterNodeResult':
        return pulumi.get(self, "master_node")

    @property
    @pulumi.getter(name="networkConfig")
    def network_config(self) -> 'outputs.GetBdsInstancesBdsInstanceNetworkConfigResult':
        """
        Additional configuration of the user's network.
        """
        return pulumi.get(self, "network_config")

    @property
    @pulumi.getter
    def nodes(self) -> Sequence['outputs.GetBdsInstancesBdsInstanceNodeResult']:
        """
        The list of nodes in the cluster.
        """
        return pulumi.get(self, "nodes")

    @property
    @pulumi.getter(name="numberOfNodes")
    def number_of_nodes(self) -> int:
        """
        The number of nodes that form the cluster.
        """
        return pulumi.get(self, "number_of_nodes")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        The state of the cluster.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> str:
        """
        The time the cluster was created, shown as an RFC 3339 formatted datetime string.
        """
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> str:
        """
        The time the cluster was updated, shown as an RFC 3339 formatted datetime string.
        """
        return pulumi.get(self, "time_updated")

    @property
    @pulumi.getter(name="utilNode")
    def util_node(self) -> 'outputs.GetBdsInstancesBdsInstanceUtilNodeResult':
        return pulumi.get(self, "util_node")

    @property
    @pulumi.getter(name="workerNode")
    def worker_node(self) -> 'outputs.GetBdsInstancesBdsInstanceWorkerNodeResult':
        return pulumi.get(self, "worker_node")


@pulumi.output_type
class GetBdsInstancesBdsInstanceCloudSqlDetailsResult(dict):
    def __init__(__self__, *,
                 block_volume_size_in_gbs: str,
                 ip_address: str,
                 is_kerberos_mapped_to_database_users: bool,
                 kerberos_details: Sequence['outputs.GetBdsInstancesBdsInstanceCloudSqlDetailsKerberosDetailResult'],
                 shape: str):
        """
        :param str block_volume_size_in_gbs: The size of block volume in GB that needs to be attached to a given node. All the necessary details needed for attachment are managed by service itself.
        :param str ip_address: IP address of the node.
        :param bool is_kerberos_mapped_to_database_users: Boolean flag specifying whether or not Kerberos principals are mapped to database users.
        :param Sequence['GetBdsInstancesBdsInstanceCloudSqlDetailsKerberosDetailArgs'] kerberos_details: Details about the Kerberos principals.
        :param str shape: Shape of the node.
        """
        pulumi.set(__self__, "block_volume_size_in_gbs", block_volume_size_in_gbs)
        pulumi.set(__self__, "ip_address", ip_address)
        pulumi.set(__self__, "is_kerberos_mapped_to_database_users", is_kerberos_mapped_to_database_users)
        pulumi.set(__self__, "kerberos_details", kerberos_details)
        pulumi.set(__self__, "shape", shape)

    @property
    @pulumi.getter(name="blockVolumeSizeInGbs")
    def block_volume_size_in_gbs(self) -> str:
        """
        The size of block volume in GB that needs to be attached to a given node. All the necessary details needed for attachment are managed by service itself.
        """
        return pulumi.get(self, "block_volume_size_in_gbs")

    @property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> str:
        """
        IP address of the node.
        """
        return pulumi.get(self, "ip_address")

    @property
    @pulumi.getter(name="isKerberosMappedToDatabaseUsers")
    def is_kerberos_mapped_to_database_users(self) -> bool:
        """
        Boolean flag specifying whether or not Kerberos principals are mapped to database users.
        """
        return pulumi.get(self, "is_kerberos_mapped_to_database_users")

    @property
    @pulumi.getter(name="kerberosDetails")
    def kerberos_details(self) -> Sequence['outputs.GetBdsInstancesBdsInstanceCloudSqlDetailsKerberosDetailResult']:
        """
        Details about the Kerberos principals.
        """
        return pulumi.get(self, "kerberos_details")

    @property
    @pulumi.getter
    def shape(self) -> str:
        """
        Shape of the node.
        """
        return pulumi.get(self, "shape")


@pulumi.output_type
class GetBdsInstancesBdsInstanceCloudSqlDetailsKerberosDetailResult(dict):
    def __init__(__self__, *,
                 keytab_file: str,
                 principal_name: str):
        """
        :param str keytab_file: Location of the keytab file
        :param str principal_name: Name of the Kerberos principal.
        """
        pulumi.set(__self__, "keytab_file", keytab_file)
        pulumi.set(__self__, "principal_name", principal_name)

    @property
    @pulumi.getter(name="keytabFile")
    def keytab_file(self) -> str:
        """
        Location of the keytab file
        """
        return pulumi.get(self, "keytab_file")

    @property
    @pulumi.getter(name="principalName")
    def principal_name(self) -> str:
        """
        Name of the Kerberos principal.
        """
        return pulumi.get(self, "principal_name")


@pulumi.output_type
class GetBdsInstancesBdsInstanceClusterDetailsResult(dict):
    def __init__(__self__, *,
                 ambari_url: str,
                 bd_cell_version: str,
                 bda_version: str,
                 bdm_version: str,
                 bds_version: str,
                 big_data_manager_url: str,
                 cloudera_manager_url: str,
                 csql_cell_version: str,
                 db_version: str,
                 hue_server_url: str,
                 os_version: str,
                 time_created: str,
                 time_refreshed: str):
        """
        :param str ambari_url: The URL of Ambari
        :param str bd_cell_version: Cloud SQL cell version.
        :param str bda_version: BDA version installed in the cluster
        :param str bdm_version: Big Data Manager version installed in the cluster.
        :param str bds_version: Big Data Service version installed in the cluster.
        :param str big_data_manager_url: The URL of Big Data Manager.
        :param str cloudera_manager_url: The URL of Cloudera Manager
        :param str csql_cell_version: Big Data SQL version.
        :param str db_version: Cloud SQL query server database version.
        :param str hue_server_url: The URL of the Hue server.
        :param str os_version: Oracle Linux version installed in the cluster.
        :param str time_created: The time the cluster was created, shown as an RFC 3339 formatted datetime string.
        :param str time_refreshed: The time the cluster was automatically or manually refreshed, shown as an RFC 3339 formatted datetime string.
        """
        pulumi.set(__self__, "ambari_url", ambari_url)
        pulumi.set(__self__, "bd_cell_version", bd_cell_version)
        pulumi.set(__self__, "bda_version", bda_version)
        pulumi.set(__self__, "bdm_version", bdm_version)
        pulumi.set(__self__, "bds_version", bds_version)
        pulumi.set(__self__, "big_data_manager_url", big_data_manager_url)
        pulumi.set(__self__, "cloudera_manager_url", cloudera_manager_url)
        pulumi.set(__self__, "csql_cell_version", csql_cell_version)
        pulumi.set(__self__, "db_version", db_version)
        pulumi.set(__self__, "hue_server_url", hue_server_url)
        pulumi.set(__self__, "os_version", os_version)
        pulumi.set(__self__, "time_created", time_created)
        pulumi.set(__self__, "time_refreshed", time_refreshed)

    @property
    @pulumi.getter(name="ambariUrl")
    def ambari_url(self) -> str:
        """
        The URL of Ambari
        """
        return pulumi.get(self, "ambari_url")

    @property
    @pulumi.getter(name="bdCellVersion")
    def bd_cell_version(self) -> str:
        """
        Cloud SQL cell version.
        """
        return pulumi.get(self, "bd_cell_version")

    @property
    @pulumi.getter(name="bdaVersion")
    def bda_version(self) -> str:
        """
        BDA version installed in the cluster
        """
        return pulumi.get(self, "bda_version")

    @property
    @pulumi.getter(name="bdmVersion")
    def bdm_version(self) -> str:
        """
        Big Data Manager version installed in the cluster.
        """
        return pulumi.get(self, "bdm_version")

    @property
    @pulumi.getter(name="bdsVersion")
    def bds_version(self) -> str:
        """
        Big Data Service version installed in the cluster.
        """
        return pulumi.get(self, "bds_version")

    @property
    @pulumi.getter(name="bigDataManagerUrl")
    def big_data_manager_url(self) -> str:
        """
        The URL of Big Data Manager.
        """
        return pulumi.get(self, "big_data_manager_url")

    @property
    @pulumi.getter(name="clouderaManagerUrl")
    def cloudera_manager_url(self) -> str:
        """
        The URL of Cloudera Manager
        """
        return pulumi.get(self, "cloudera_manager_url")

    @property
    @pulumi.getter(name="csqlCellVersion")
    def csql_cell_version(self) -> str:
        """
        Big Data SQL version.
        """
        return pulumi.get(self, "csql_cell_version")

    @property
    @pulumi.getter(name="dbVersion")
    def db_version(self) -> str:
        """
        Cloud SQL query server database version.
        """
        return pulumi.get(self, "db_version")

    @property
    @pulumi.getter(name="hueServerUrl")
    def hue_server_url(self) -> str:
        """
        The URL of the Hue server.
        """
        return pulumi.get(self, "hue_server_url")

    @property
    @pulumi.getter(name="osVersion")
    def os_version(self) -> str:
        """
        Oracle Linux version installed in the cluster.
        """
        return pulumi.get(self, "os_version")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> str:
        """
        The time the cluster was created, shown as an RFC 3339 formatted datetime string.
        """
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeRefreshed")
    def time_refreshed(self) -> str:
        """
        The time the cluster was automatically or manually refreshed, shown as an RFC 3339 formatted datetime string.
        """
        return pulumi.get(self, "time_refreshed")


@pulumi.output_type
class GetBdsInstancesBdsInstanceMasterNodeResult(dict):
    def __init__(__self__, *,
                 block_volume_size_in_gbs: str,
                 number_of_nodes: int,
                 shape: str,
                 subnet_id: str):
        """
        :param str block_volume_size_in_gbs: The size of block volume in GB that needs to be attached to a given node. All the necessary details needed for attachment are managed by service itself.
        :param int number_of_nodes: The number of nodes that form the cluster.
        :param str shape: Shape of the node.
        :param str subnet_id: The OCID of the subnet in which the node is to be created.
        """
        pulumi.set(__self__, "block_volume_size_in_gbs", block_volume_size_in_gbs)
        pulumi.set(__self__, "number_of_nodes", number_of_nodes)
        pulumi.set(__self__, "shape", shape)
        pulumi.set(__self__, "subnet_id", subnet_id)

    @property
    @pulumi.getter(name="blockVolumeSizeInGbs")
    def block_volume_size_in_gbs(self) -> str:
        """
        The size of block volume in GB that needs to be attached to a given node. All the necessary details needed for attachment are managed by service itself.
        """
        return pulumi.get(self, "block_volume_size_in_gbs")

    @property
    @pulumi.getter(name="numberOfNodes")
    def number_of_nodes(self) -> int:
        """
        The number of nodes that form the cluster.
        """
        return pulumi.get(self, "number_of_nodes")

    @property
    @pulumi.getter
    def shape(self) -> str:
        """
        Shape of the node.
        """
        return pulumi.get(self, "shape")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> str:
        """
        The OCID of the subnet in which the node is to be created.
        """
        return pulumi.get(self, "subnet_id")


@pulumi.output_type
class GetBdsInstancesBdsInstanceNetworkConfigResult(dict):
    def __init__(__self__, *,
                 cidr_block: str,
                 is_nat_gateway_required: bool):
        """
        :param str cidr_block: The CIDR IP address block of the VCN.
        :param bool is_nat_gateway_required: A boolean flag whether to configure a NAT gateway.
        """
        pulumi.set(__self__, "cidr_block", cidr_block)
        pulumi.set(__self__, "is_nat_gateway_required", is_nat_gateway_required)

    @property
    @pulumi.getter(name="cidrBlock")
    def cidr_block(self) -> str:
        """
        The CIDR IP address block of the VCN.
        """
        return pulumi.get(self, "cidr_block")

    @property
    @pulumi.getter(name="isNatGatewayRequired")
    def is_nat_gateway_required(self) -> bool:
        """
        A boolean flag whether to configure a NAT gateway.
        """
        return pulumi.get(self, "is_nat_gateway_required")


@pulumi.output_type
class GetBdsInstancesBdsInstanceNodeResult(dict):
    def __init__(__self__, *,
                 attached_block_volumes: Sequence['outputs.GetBdsInstancesBdsInstanceNodeAttachedBlockVolumeResult'],
                 availability_domain: str,
                 display_name: str,
                 fault_domain: str,
                 hostname: str,
                 image_id: str,
                 instance_id: str,
                 ip_address: str,
                 node_type: str,
                 shape: str,
                 ssh_fingerprint: str,
                 state: str,
                 subnet_id: str,
                 time_created: str):
        """
        :param Sequence['GetBdsInstancesBdsInstanceNodeAttachedBlockVolumeArgs'] attached_block_volumes: The list of block volumes attached to a given node.
        :param str availability_domain: The name of the availability domain in which the node is running.
        :param str display_name: A filter to return only resources that match the entire display name given.
        :param str fault_domain: The name of the fault domain in which the node is running.
        :param str hostname: The fully-qualified hostname (FQDN) of the node.
        :param str image_id: The OCID of the image from which the node was created.
        :param str instance_id: The OCID of the underlying Oracle Cloud Infrastructure Compute instance.
        :param str ip_address: IP address of the node.
        :param str node_type: Cluster node type.
        :param str shape: Shape of the node.
        :param str ssh_fingerprint: The fingerprint of the SSH key used for node access.
        :param str state: The state of the cluster.
        :param str subnet_id: The OCID of the subnet in which the node is to be created.
        :param str time_created: The time the cluster was created, shown as an RFC 3339 formatted datetime string.
        """
        pulumi.set(__self__, "attached_block_volumes", attached_block_volumes)
        pulumi.set(__self__, "availability_domain", availability_domain)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "fault_domain", fault_domain)
        pulumi.set(__self__, "hostname", hostname)
        pulumi.set(__self__, "image_id", image_id)
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "ip_address", ip_address)
        pulumi.set(__self__, "node_type", node_type)
        pulumi.set(__self__, "shape", shape)
        pulumi.set(__self__, "ssh_fingerprint", ssh_fingerprint)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "subnet_id", subnet_id)
        pulumi.set(__self__, "time_created", time_created)

    @property
    @pulumi.getter(name="attachedBlockVolumes")
    def attached_block_volumes(self) -> Sequence['outputs.GetBdsInstancesBdsInstanceNodeAttachedBlockVolumeResult']:
        """
        The list of block volumes attached to a given node.
        """
        return pulumi.get(self, "attached_block_volumes")

    @property
    @pulumi.getter(name="availabilityDomain")
    def availability_domain(self) -> str:
        """
        The name of the availability domain in which the node is running.
        """
        return pulumi.get(self, "availability_domain")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        A filter to return only resources that match the entire display name given.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="faultDomain")
    def fault_domain(self) -> str:
        """
        The name of the fault domain in which the node is running.
        """
        return pulumi.get(self, "fault_domain")

    @property
    @pulumi.getter
    def hostname(self) -> str:
        """
        The fully-qualified hostname (FQDN) of the node.
        """
        return pulumi.get(self, "hostname")

    @property
    @pulumi.getter(name="imageId")
    def image_id(self) -> str:
        """
        The OCID of the image from which the node was created.
        """
        return pulumi.get(self, "image_id")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> str:
        """
        The OCID of the underlying Oracle Cloud Infrastructure Compute instance.
        """
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> str:
        """
        IP address of the node.
        """
        return pulumi.get(self, "ip_address")

    @property
    @pulumi.getter(name="nodeType")
    def node_type(self) -> str:
        """
        Cluster node type.
        """
        return pulumi.get(self, "node_type")

    @property
    @pulumi.getter
    def shape(self) -> str:
        """
        Shape of the node.
        """
        return pulumi.get(self, "shape")

    @property
    @pulumi.getter(name="sshFingerprint")
    def ssh_fingerprint(self) -> str:
        """
        The fingerprint of the SSH key used for node access.
        """
        return pulumi.get(self, "ssh_fingerprint")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        The state of the cluster.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> str:
        """
        The OCID of the subnet in which the node is to be created.
        """
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> str:
        """
        The time the cluster was created, shown as an RFC 3339 formatted datetime string.
        """
        return pulumi.get(self, "time_created")


@pulumi.output_type
class GetBdsInstancesBdsInstanceNodeAttachedBlockVolumeResult(dict):
    def __init__(__self__, *,
                 volume_attachment_id: str,
                 volume_size_in_gbs: str):
        """
        :param str volume_attachment_id: The OCID of the volume attachment.
        :param str volume_size_in_gbs: The size of the volume in GBs.
        """
        pulumi.set(__self__, "volume_attachment_id", volume_attachment_id)
        pulumi.set(__self__, "volume_size_in_gbs", volume_size_in_gbs)

    @property
    @pulumi.getter(name="volumeAttachmentId")
    def volume_attachment_id(self) -> str:
        """
        The OCID of the volume attachment.
        """
        return pulumi.get(self, "volume_attachment_id")

    @property
    @pulumi.getter(name="volumeSizeInGbs")
    def volume_size_in_gbs(self) -> str:
        """
        The size of the volume in GBs.
        """
        return pulumi.get(self, "volume_size_in_gbs")


@pulumi.output_type
class GetBdsInstancesBdsInstanceUtilNodeResult(dict):
    def __init__(__self__, *,
                 block_volume_size_in_gbs: str,
                 number_of_nodes: int,
                 shape: str,
                 subnet_id: str):
        """
        :param str block_volume_size_in_gbs: The size of block volume in GB that needs to be attached to a given node. All the necessary details needed for attachment are managed by service itself.
        :param int number_of_nodes: The number of nodes that form the cluster.
        :param str shape: Shape of the node.
        :param str subnet_id: The OCID of the subnet in which the node is to be created.
        """
        pulumi.set(__self__, "block_volume_size_in_gbs", block_volume_size_in_gbs)
        pulumi.set(__self__, "number_of_nodes", number_of_nodes)
        pulumi.set(__self__, "shape", shape)
        pulumi.set(__self__, "subnet_id", subnet_id)

    @property
    @pulumi.getter(name="blockVolumeSizeInGbs")
    def block_volume_size_in_gbs(self) -> str:
        """
        The size of block volume in GB that needs to be attached to a given node. All the necessary details needed for attachment are managed by service itself.
        """
        return pulumi.get(self, "block_volume_size_in_gbs")

    @property
    @pulumi.getter(name="numberOfNodes")
    def number_of_nodes(self) -> int:
        """
        The number of nodes that form the cluster.
        """
        return pulumi.get(self, "number_of_nodes")

    @property
    @pulumi.getter
    def shape(self) -> str:
        """
        Shape of the node.
        """
        return pulumi.get(self, "shape")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> str:
        """
        The OCID of the subnet in which the node is to be created.
        """
        return pulumi.get(self, "subnet_id")


@pulumi.output_type
class GetBdsInstancesBdsInstanceWorkerNodeResult(dict):
    def __init__(__self__, *,
                 block_volume_size_in_gbs: str,
                 number_of_nodes: int,
                 shape: str,
                 subnet_id: str):
        """
        :param str block_volume_size_in_gbs: The size of block volume in GB that needs to be attached to a given node. All the necessary details needed for attachment are managed by service itself.
        :param int number_of_nodes: The number of nodes that form the cluster.
        :param str shape: Shape of the node.
        :param str subnet_id: The OCID of the subnet in which the node is to be created.
        """
        pulumi.set(__self__, "block_volume_size_in_gbs", block_volume_size_in_gbs)
        pulumi.set(__self__, "number_of_nodes", number_of_nodes)
        pulumi.set(__self__, "shape", shape)
        pulumi.set(__self__, "subnet_id", subnet_id)

    @property
    @pulumi.getter(name="blockVolumeSizeInGbs")
    def block_volume_size_in_gbs(self) -> str:
        """
        The size of block volume in GB that needs to be attached to a given node. All the necessary details needed for attachment are managed by service itself.
        """
        return pulumi.get(self, "block_volume_size_in_gbs")

    @property
    @pulumi.getter(name="numberOfNodes")
    def number_of_nodes(self) -> int:
        """
        The number of nodes that form the cluster.
        """
        return pulumi.get(self, "number_of_nodes")

    @property
    @pulumi.getter
    def shape(self) -> str:
        """
        Shape of the node.
        """
        return pulumi.get(self, "shape")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> str:
        """
        The OCID of the subnet in which the node is to be created.
        """
        return pulumi.get(self, "subnet_id")


@pulumi.output_type
class GetBdsInstancesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


