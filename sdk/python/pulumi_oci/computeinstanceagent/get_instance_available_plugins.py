# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetInstanceAvailablePluginsResult',
    'AwaitableGetInstanceAvailablePluginsResult',
    'get_instance_available_plugins',
]

@pulumi.output_type
class GetInstanceAvailablePluginsResult:
    """
    A collection of values returned by getInstanceAvailablePlugins.
    """
    def __init__(__self__, available_plugins=None, compartment_id=None, filters=None, id=None, name=None, os_name=None, os_version=None):
        if available_plugins and not isinstance(available_plugins, list):
            raise TypeError("Expected argument 'available_plugins' to be a list")
        pulumi.set(__self__, "available_plugins", available_plugins)
        if compartment_id and not isinstance(compartment_id, str):
            raise TypeError("Expected argument 'compartment_id' to be a str")
        pulumi.set(__self__, "compartment_id", compartment_id)
        if filters and not isinstance(filters, list):
            raise TypeError("Expected argument 'filters' to be a list")
        pulumi.set(__self__, "filters", filters)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if os_name and not isinstance(os_name, str):
            raise TypeError("Expected argument 'os_name' to be a str")
        pulumi.set(__self__, "os_name", os_name)
        if os_version and not isinstance(os_version, str):
            raise TypeError("Expected argument 'os_version' to be a str")
        pulumi.set(__self__, "os_version", os_version)

    @property
    @pulumi.getter(name="availablePlugins")
    def available_plugins(self) -> Sequence['outputs.GetInstanceAvailablePluginsAvailablePluginResult']:
        """
        The list of available_plugins.
        """
        return pulumi.get(self, "available_plugins")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> str:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter
    def filters(self) -> Optional[Sequence['outputs.GetInstanceAvailablePluginsFilterResult']]:
        return pulumi.get(self, "filters")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        The plugin name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="osName")
    def os_name(self) -> str:
        return pulumi.get(self, "os_name")

    @property
    @pulumi.getter(name="osVersion")
    def os_version(self) -> str:
        return pulumi.get(self, "os_version")


class AwaitableGetInstanceAvailablePluginsResult(GetInstanceAvailablePluginsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetInstanceAvailablePluginsResult(
            available_plugins=self.available_plugins,
            compartment_id=self.compartment_id,
            filters=self.filters,
            id=self.id,
            name=self.name,
            os_name=self.os_name,
            os_version=self.os_version)


def get_instance_available_plugins(compartment_id: Optional[str] = None,
                                   filters: Optional[Sequence[pulumi.InputType['GetInstanceAvailablePluginsFilterArgs']]] = None,
                                   name: Optional[str] = None,
                                   os_name: Optional[str] = None,
                                   os_version: Optional[str] = None,
                                   opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetInstanceAvailablePluginsResult:
    """
    This data source provides the list of Instance Available Plugins in Oracle Cloud Infrastructure Compute Instance Agent service.

    The API to get the list of plugins that are available.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_oci as oci

    test_instance_available_plugins = oci.computeinstanceagent.get_instance_available_plugins(os_name=var["instance_available_plugin_os_name"],
        os_version=var["instance_available_plugin_os_version"],
        name=var["instance_available_plugin_name"])
    ```


    :param str name: The plugin name
    :param str os_name: The OS for which the plugin is supported. Examples of OperatingSystemQueryParam:OperatingSystemVersionQueryParam are as follows: 'CentOS' '6.10' , 'CentOS Linux' '7', 'CentOS Linux' '8', 'Oracle Linux Server' '6.10', 'Oracle Linux Server' '8.0', 'Red Hat Enterprise Linux Server' '7.8', 'Windows' '10', 'Windows' '2008ServerR2', 'Windows' '2012ServerR2', 'Windows' '7', 'Windows' '8.1'
    :param str os_version: The OS version for which the plugin is supported.
    """
    __args__ = dict()
    __args__['compartmentId'] = compartment_id
    __args__['filters'] = filters
    __args__['name'] = name
    __args__['osName'] = os_name
    __args__['osVersion'] = os_version
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
    __ret__ = pulumi.runtime.invoke('oci:computeinstanceagent/getInstanceAvailablePlugins:getInstanceAvailablePlugins', __args__, opts=opts, typ=GetInstanceAvailablePluginsResult).value

    return AwaitableGetInstanceAvailablePluginsResult(
        available_plugins=__ret__.available_plugins,
        compartment_id=__ret__.compartment_id,
        filters=__ret__.filters,
        id=__ret__.id,
        name=__ret__.name,
        os_name=__ret__.os_name,
        os_version=__ret__.os_version)
