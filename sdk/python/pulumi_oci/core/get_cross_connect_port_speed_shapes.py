# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetCrossConnectPortSpeedShapesResult',
    'AwaitableGetCrossConnectPortSpeedShapesResult',
    'get_cross_connect_port_speed_shapes',
]

@pulumi.output_type
class GetCrossConnectPortSpeedShapesResult:
    """
    A collection of values returned by getCrossConnectPortSpeedShapes.
    """
    def __init__(__self__, compartment_id=None, cross_connect_port_speed_shapes=None, filters=None, id=None):
        if compartment_id and not isinstance(compartment_id, str):
            raise TypeError("Expected argument 'compartment_id' to be a str")
        pulumi.set(__self__, "compartment_id", compartment_id)
        if cross_connect_port_speed_shapes and not isinstance(cross_connect_port_speed_shapes, list):
            raise TypeError("Expected argument 'cross_connect_port_speed_shapes' to be a list")
        pulumi.set(__self__, "cross_connect_port_speed_shapes", cross_connect_port_speed_shapes)
        if filters and not isinstance(filters, list):
            raise TypeError("Expected argument 'filters' to be a list")
        pulumi.set(__self__, "filters", filters)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> str:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="crossConnectPortSpeedShapes")
    def cross_connect_port_speed_shapes(self) -> Sequence['outputs.GetCrossConnectPortSpeedShapesCrossConnectPortSpeedShapeResult']:
        """
        The list of cross_connect_port_speed_shapes.
        """
        return pulumi.get(self, "cross_connect_port_speed_shapes")

    @property
    @pulumi.getter
    def filters(self) -> Optional[Sequence['outputs.GetCrossConnectPortSpeedShapesFilterResult']]:
        return pulumi.get(self, "filters")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")


class AwaitableGetCrossConnectPortSpeedShapesResult(GetCrossConnectPortSpeedShapesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetCrossConnectPortSpeedShapesResult(
            compartment_id=self.compartment_id,
            cross_connect_port_speed_shapes=self.cross_connect_port_speed_shapes,
            filters=self.filters,
            id=self.id)


def get_cross_connect_port_speed_shapes(compartment_id: Optional[str] = None,
                                        filters: Optional[Sequence[pulumi.InputType['GetCrossConnectPortSpeedShapesFilterArgs']]] = None,
                                        opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetCrossConnectPortSpeedShapesResult:
    """
    This data source provides the list of Cross Connect Port Speed Shapes in Oracle Cloud Infrastructure Core service.

    Lists the available port speeds for cross-connects. You need this information
    so you can specify your desired port speed (that is, shape) when you create a
    cross-connect.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_oci as oci

    test_cross_connect_port_speed_shapes = oci.core.get_cross_connect_port_speed_shapes(compartment_id=var["compartment_id"])
    ```


    :param str compartment_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
    """
    __args__ = dict()
    __args__['compartmentId'] = compartment_id
    __args__['filters'] = filters
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
    __ret__ = pulumi.runtime.invoke('oci:core/getCrossConnectPortSpeedShapes:getCrossConnectPortSpeedShapes', __args__, opts=opts, typ=GetCrossConnectPortSpeedShapesResult).value

    return AwaitableGetCrossConnectPortSpeedShapesResult(
        compartment_id=__ret__.compartment_id,
        cross_connect_port_speed_shapes=__ret__.cross_connect_port_speed_shapes,
        filters=__ret__.filters,
        id=__ret__.id)
