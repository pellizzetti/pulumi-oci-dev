# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'ManagedDatabaseGroupManagedDatabase',
    'ManagedDatabasesChangeDatabaseParameterCredentials',
    'ManagedDatabasesChangeDatabaseParameterParameter',
    'ManagedDatabasesResetDatabaseParameterCredentials',
    'GetManagedDatabaseGroupManagedDatabaseResult',
    'GetManagedDatabaseGroupsFilterResult',
    'GetManagedDatabaseGroupsManagedDatabaseGroupCollectionResult',
    'GetManagedDatabaseGroupsManagedDatabaseGroupCollectionItemResult',
    'GetManagedDatabaseGroupsManagedDatabaseGroupCollectionItemManagedDatabaseResult',
    'GetManagedDatabaseManagedDatabaseGroupResult',
    'GetManagedDatabasesDatabaseParameterItemResult',
    'GetManagedDatabasesDatabaseParameterItemAllowedValueResult',
    'GetManagedDatabasesDatabaseParametersDatabaseParametersCollectionResult',
    'GetManagedDatabasesDatabaseParametersDatabaseParametersCollectionItemResult',
    'GetManagedDatabasesDatabaseParametersDatabaseParametersCollectionItemAllowedValueResult',
    'GetManagedDatabasesDatabaseParametersFilterResult',
    'GetManagedDatabasesFilterResult',
    'GetManagedDatabasesManagedDatabaseCollectionResult',
    'GetManagedDatabasesManagedDatabaseCollectionItemResult',
    'GetManagedDatabasesManagedDatabaseCollectionItemManagedDatabaseGroupResult',
]

@pulumi.output_type
class ManagedDatabaseGroupManagedDatabase(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "compartmentId":
            suggest = "compartment_id"
        elif key == "databaseSubType":
            suggest = "database_sub_type"
        elif key == "databaseType":
            suggest = "database_type"
        elif key == "timeAdded":
            suggest = "time_added"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ManagedDatabaseGroupManagedDatabase. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ManagedDatabaseGroupManagedDatabase.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ManagedDatabaseGroupManagedDatabase.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 compartment_id: Optional[str] = None,
                 database_sub_type: Optional[str] = None,
                 database_type: Optional[str] = None,
                 id: Optional[str] = None,
                 name: Optional[str] = None,
                 time_added: Optional[str] = None):
        """
        :param str compartment_id: (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment in which the Managed Database Group resides.
        :param str database_sub_type: The subtype of the Oracle Database. Indicates whether the database is a Container Database, Pluggable Database, or a Non-container Database.
        :param str database_type: The type of Oracle Database installation.
        :param str id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the managed database that needs to be added to the Managed Database Group.
        :param str name: The name of the Managed Database Group. Valid characters are uppercase or lowercase letters, numbers, and "_". The name of the Managed Database Group cannot be modified. It must be unique in the compartment and must begin with an alphabetic character.
        :param str time_added: The date and time the Managed Database was added to the group.
        """
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if database_sub_type is not None:
            pulumi.set(__self__, "database_sub_type", database_sub_type)
        if database_type is not None:
            pulumi.set(__self__, "database_type", database_type)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if time_added is not None:
            pulumi.set(__self__, "time_added", time_added)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        """
        (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment in which the Managed Database Group resides.
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="databaseSubType")
    def database_sub_type(self) -> Optional[str]:
        """
        The subtype of the Oracle Database. Indicates whether the database is a Container Database, Pluggable Database, or a Non-container Database.
        """
        return pulumi.get(self, "database_sub_type")

    @property
    @pulumi.getter(name="databaseType")
    def database_type(self) -> Optional[str]:
        """
        The type of Oracle Database installation.
        """
        return pulumi.get(self, "database_type")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the managed database that needs to be added to the Managed Database Group.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        The name of the Managed Database Group. Valid characters are uppercase or lowercase letters, numbers, and "_". The name of the Managed Database Group cannot be modified. It must be unique in the compartment and must begin with an alphabetic character.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="timeAdded")
    def time_added(self) -> Optional[str]:
        """
        The date and time the Managed Database was added to the group.
        """
        return pulumi.get(self, "time_added")


@pulumi.output_type
class ManagedDatabasesChangeDatabaseParameterCredentials(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "userName":
            suggest = "user_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ManagedDatabasesChangeDatabaseParameterCredentials. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ManagedDatabasesChangeDatabaseParameterCredentials.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ManagedDatabasesChangeDatabaseParameterCredentials.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 password: Optional[str] = None,
                 role: Optional[str] = None,
                 user_name: Optional[str] = None):
        """
        :param str password: The password for the database user name.
        :param str role: The role of the database user. Indicates whether the database user is a normal user or sysdba.
        :param str user_name: The database user name used to perform management activity.
        """
        if password is not None:
            pulumi.set(__self__, "password", password)
        if role is not None:
            pulumi.set(__self__, "role", role)
        if user_name is not None:
            pulumi.set(__self__, "user_name", user_name)

    @property
    @pulumi.getter
    def password(self) -> Optional[str]:
        """
        The password for the database user name.
        """
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def role(self) -> Optional[str]:
        """
        The role of the database user. Indicates whether the database user is a normal user or sysdba.
        """
        return pulumi.get(self, "role")

    @property
    @pulumi.getter(name="userName")
    def user_name(self) -> Optional[str]:
        """
        The database user name used to perform management activity.
        """
        return pulumi.get(self, "user_name")


@pulumi.output_type
class ManagedDatabasesChangeDatabaseParameterParameter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "updateComment":
            suggest = "update_comment"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ManagedDatabasesChangeDatabaseParameterParameter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ManagedDatabasesChangeDatabaseParameterParameter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ManagedDatabasesChangeDatabaseParameterParameter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: str,
                 value: str,
                 update_comment: Optional[str] = None):
        """
        :param str name: The parameter name.
        :param str value: The parameter value.
        :param str update_comment: A comment string to associate with the change in parameter value. It cannot contain control characters or a line break.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)
        if update_comment is not None:
            pulumi.set(__self__, "update_comment", update_comment)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The parameter name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The parameter value.
        """
        return pulumi.get(self, "value")

    @property
    @pulumi.getter(name="updateComment")
    def update_comment(self) -> Optional[str]:
        """
        A comment string to associate with the change in parameter value. It cannot contain control characters or a line break.
        """
        return pulumi.get(self, "update_comment")


@pulumi.output_type
class ManagedDatabasesResetDatabaseParameterCredentials(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "userName":
            suggest = "user_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ManagedDatabasesResetDatabaseParameterCredentials. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ManagedDatabasesResetDatabaseParameterCredentials.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ManagedDatabasesResetDatabaseParameterCredentials.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 password: Optional[str] = None,
                 role: Optional[str] = None,
                 user_name: Optional[str] = None):
        """
        :param str password: The password for the database user name.
        :param str role: The role of the database user. Indicates whether the database user is a normal user or sysdba.
        :param str user_name: The database user name used to perform management activity.
        """
        if password is not None:
            pulumi.set(__self__, "password", password)
        if role is not None:
            pulumi.set(__self__, "role", role)
        if user_name is not None:
            pulumi.set(__self__, "user_name", user_name)

    @property
    @pulumi.getter
    def password(self) -> Optional[str]:
        """
        The password for the database user name.
        """
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def role(self) -> Optional[str]:
        """
        The role of the database user. Indicates whether the database user is a normal user or sysdba.
        """
        return pulumi.get(self, "role")

    @property
    @pulumi.getter(name="userName")
    def user_name(self) -> Optional[str]:
        """
        The database user name used to perform management activity.
        """
        return pulumi.get(self, "user_name")


@pulumi.output_type
class GetManagedDatabaseGroupManagedDatabaseResult(dict):
    def __init__(__self__, *,
                 compartment_id: str,
                 database_sub_type: str,
                 database_type: str,
                 id: str,
                 name: str,
                 time_added: str):
        """
        :param str compartment_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment in which the Managed Database resides.
        :param str database_sub_type: The subtype of the Oracle Database. Indicates whether the database is a Container Database, Pluggable Database, or a Non-container Database.
        :param str database_type: The type of Oracle Database installation.
        :param str id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Managed Database.
        :param str name: The name of the Managed Database Group.
        :param str time_added: The date and time the Managed Database was added to the group.
        """
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "database_sub_type", database_sub_type)
        pulumi.set(__self__, "database_type", database_type)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "time_added", time_added)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment in which the Managed Database resides.
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="databaseSubType")
    def database_sub_type(self) -> str:
        """
        The subtype of the Oracle Database. Indicates whether the database is a Container Database, Pluggable Database, or a Non-container Database.
        """
        return pulumi.get(self, "database_sub_type")

    @property
    @pulumi.getter(name="databaseType")
    def database_type(self) -> str:
        """
        The type of Oracle Database installation.
        """
        return pulumi.get(self, "database_type")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Managed Database.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the Managed Database Group.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="timeAdded")
    def time_added(self) -> str:
        """
        The date and time the Managed Database was added to the group.
        """
        return pulumi.get(self, "time_added")


@pulumi.output_type
class GetManagedDatabaseGroupsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        """
        :param str name: A filter to return only resources that match the entire name. Only one of the parameters, id or name should be provided
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        A filter to return only resources that match the entire name. Only one of the parameters, id or name should be provided
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetManagedDatabaseGroupsManagedDatabaseGroupCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetManagedDatabaseGroupsManagedDatabaseGroupCollectionItemResult']):
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetManagedDatabaseGroupsManagedDatabaseGroupCollectionItemResult']:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetManagedDatabaseGroupsManagedDatabaseGroupCollectionItemResult(dict):
    def __init__(__self__, *,
                 compartment_id: str,
                 description: str,
                 id: str,
                 managed_databases: Sequence['outputs.GetManagedDatabaseGroupsManagedDatabaseGroupCollectionItemManagedDatabaseResult'],
                 name: str,
                 state: str,
                 time_created: str,
                 time_updated: str):
        """
        :param str compartment_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
        :param str description: The information specified by the user about the Managed Database Group.
        :param str id: The identifier of the resource. Only one of the parameters, id or name should be provided.
        :param Sequence['GetManagedDatabaseGroupsManagedDatabaseGroupCollectionItemManagedDatabaseArgs'] managed_databases: A list of Managed Databases in the Managed Database Group.
        :param str name: A filter to return only resources that match the entire name. Only one of the parameters, id or name should be provided
        :param str state: The lifecycle state of a resource.
        :param str time_created: The date and time the Managed Database Group was created.
        :param str time_updated: The date and time the Managed Database Group was last updated.
        """
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "managed_databases", managed_databases)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "time_created", time_created)
        pulumi.set(__self__, "time_updated", time_updated)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The information specified by the user about the Managed Database Group.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The identifier of the resource. Only one of the parameters, id or name should be provided.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="managedDatabases")
    def managed_databases(self) -> Sequence['outputs.GetManagedDatabaseGroupsManagedDatabaseGroupCollectionItemManagedDatabaseResult']:
        """
        A list of Managed Databases in the Managed Database Group.
        """
        return pulumi.get(self, "managed_databases")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        A filter to return only resources that match the entire name. Only one of the parameters, id or name should be provided
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        The lifecycle state of a resource.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> str:
        """
        The date and time the Managed Database Group was created.
        """
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> str:
        """
        The date and time the Managed Database Group was last updated.
        """
        return pulumi.get(self, "time_updated")


@pulumi.output_type
class GetManagedDatabaseGroupsManagedDatabaseGroupCollectionItemManagedDatabaseResult(dict):
    def __init__(__self__, *,
                 compartment_id: str,
                 database_sub_type: str,
                 database_type: str,
                 id: str,
                 name: str,
                 time_added: str):
        """
        :param str compartment_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
        :param str database_sub_type: The subtype of the Oracle Database. Indicates whether the database is a Container Database, Pluggable Database, or a Non-container Database.
        :param str database_type: The type of Oracle Database installation.
        :param str id: The identifier of the resource. Only one of the parameters, id or name should be provided.
        :param str name: A filter to return only resources that match the entire name. Only one of the parameters, id or name should be provided
        :param str time_added: The date and time the Managed Database was added to the group.
        """
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "database_sub_type", database_sub_type)
        pulumi.set(__self__, "database_type", database_type)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "time_added", time_added)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="databaseSubType")
    def database_sub_type(self) -> str:
        """
        The subtype of the Oracle Database. Indicates whether the database is a Container Database, Pluggable Database, or a Non-container Database.
        """
        return pulumi.get(self, "database_sub_type")

    @property
    @pulumi.getter(name="databaseType")
    def database_type(self) -> str:
        """
        The type of Oracle Database installation.
        """
        return pulumi.get(self, "database_type")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The identifier of the resource. Only one of the parameters, id or name should be provided.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        A filter to return only resources that match the entire name. Only one of the parameters, id or name should be provided
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="timeAdded")
    def time_added(self) -> str:
        """
        The date and time the Managed Database was added to the group.
        """
        return pulumi.get(self, "time_added")


@pulumi.output_type
class GetManagedDatabaseManagedDatabaseGroupResult(dict):
    def __init__(__self__, *,
                 compartment_id: str,
                 id: str,
                 name: str):
        """
        :param str compartment_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment in which the Managed Database Group resides.
        :param str id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Managed Database Group.
        :param str name: The name of the Managed Database.
        """
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment in which the Managed Database Group resides.
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Managed Database Group.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the Managed Database.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetManagedDatabasesDatabaseParameterItemResult(dict):
    def __init__(__self__, *,
                 allowed_values: Sequence['outputs.GetManagedDatabasesDatabaseParameterItemAllowedValueResult'],
                 category: str,
                 constraint: str,
                 container_id: float,
                 description: str,
                 display_value: str,
                 is_adjusted: bool,
                 is_basic: bool,
                 is_default: bool,
                 is_deprecated: bool,
                 is_instance_modifiable: bool,
                 is_modified: str,
                 is_pdb_modifiable: bool,
                 is_session_modifiable: bool,
                 is_specified: bool,
                 is_system_modifiable: str,
                 name: str,
                 number: float,
                 ordinal: float,
                 sid: str,
                 type: str,
                 update_comment: str,
                 value: str):
        """
        :param Sequence['GetManagedDatabasesDatabaseParameterItemAllowedValueArgs'] allowed_values: A list of allowed values for this parameter.
        :param str category: The parameter category.
        :param str constraint: Applicable in case of Oracle Real Application Clusters (Oracle RAC) databases. A `UNIQUE` parameter is one which is unique to each Oracle Real Application Clusters (Oracle RAC) instance. For example, the parameter `INSTANCE_NUMBER` must have different values in each instance. An `IDENTICAL` parameter must have the same value for every instance. For example, the parameter `DB_BLOCK_SIZE` must have the same value in all instances.
        :param float container_id: The ID of the database container to which the data pertains. Possible values include:
               * `0`: This value is used for data that pertain to the entire CDB. This value is also used for data in non-CDBs.
               * `1`: This value is used for data that pertain to only the root container.
               * `n`: Where n is the applicable container ID for the data.
        :param str description: The description of the parameter.
        :param str display_value: The parameter value in a user-friendly format. For example, if the `value` property shows the value 262144 for a big integer parameter, then the `displayValue` property will show the value 256K.
        :param bool is_adjusted: Indicates whether Oracle adjusted the input value to a more suitable value.
        :param bool is_basic: Indicates whether the parameter is a basic parameter (`TRUE`) or not (`FALSE`).
        :param bool is_default: Indicates whether the parameter is set to the default value (`TRUE`) or the parameter value was specified in the parameter file (`FALSE`).
        :param bool is_deprecated: Indicates whether the parameter has been deprecated (`TRUE`) or not (`FALSE`).
        :param bool is_instance_modifiable: For parameters that can be changed with `ALTER SYSTEM`, indicates whether the value of the parameter can be different for every instance (`TRUE`) or whether the parameter must have the same value for all Real Application Clusters instances (`FALSE`). For other parameters, this is always `FALSE`.
        :param str is_modified: Indicates how the parameter was modified. If an `ALTER SYSTEM` was performed, the value will be `MODIFIED`.
        :param bool is_pdb_modifiable: Indicates whether the parameter can be modified on a per-PDB basis (`TRUE`) or not (`FALSE`). In a non-CDB, the value of this property is `null`.
        :param bool is_session_modifiable: Indicates whether the parameter can be changed with `ALTER SESSION` (`TRUE`) or not (`FALSE`)
        :param bool is_specified: Indicates whether the parameter was specified in the server parameter file (`TRUE`) or not (`FALSE`). Applicable only when the parameter source is `SPFILE`.
        :param str is_system_modifiable: Indicates whether the parameter can be changed with `ALTER SYSTEM` and when the change takes effect:
               * IMMEDIATE: Parameter can be changed with `ALTER SYSTEM` regardless of the type of parameter file used to start the instance. The change takes effect immediately.
               * DEFERRED: Parameter can be changed with `ALTER SYSTEM` regardless of the type of parameter file used to start the instance. The change takes effect in subsequent sessions.
               * FALSE: Parameter cannot be changed with `ALTER SYSTEM` unless a server parameter file was used to start the instance. The change takes effect in subsequent instances.
        :param str name: A filter to return all parameters that have the text given in their names.
        :param float number: The parameter number.
        :param float ordinal: The position (ordinal number) of the parameter value. Useful only for parameters whose values are lists of strings.
        :param str sid: The database instance SID for which the parameter is defined.
        :param str type: The parameter type.
        :param str update_comment: The comments associated with the most recent update.
        :param str value: The parameter value.
        """
        pulumi.set(__self__, "allowed_values", allowed_values)
        pulumi.set(__self__, "category", category)
        pulumi.set(__self__, "constraint", constraint)
        pulumi.set(__self__, "container_id", container_id)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "display_value", display_value)
        pulumi.set(__self__, "is_adjusted", is_adjusted)
        pulumi.set(__self__, "is_basic", is_basic)
        pulumi.set(__self__, "is_default", is_default)
        pulumi.set(__self__, "is_deprecated", is_deprecated)
        pulumi.set(__self__, "is_instance_modifiable", is_instance_modifiable)
        pulumi.set(__self__, "is_modified", is_modified)
        pulumi.set(__self__, "is_pdb_modifiable", is_pdb_modifiable)
        pulumi.set(__self__, "is_session_modifiable", is_session_modifiable)
        pulumi.set(__self__, "is_specified", is_specified)
        pulumi.set(__self__, "is_system_modifiable", is_system_modifiable)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "number", number)
        pulumi.set(__self__, "ordinal", ordinal)
        pulumi.set(__self__, "sid", sid)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "update_comment", update_comment)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="allowedValues")
    def allowed_values(self) -> Sequence['outputs.GetManagedDatabasesDatabaseParameterItemAllowedValueResult']:
        """
        A list of allowed values for this parameter.
        """
        return pulumi.get(self, "allowed_values")

    @property
    @pulumi.getter
    def category(self) -> str:
        """
        The parameter category.
        """
        return pulumi.get(self, "category")

    @property
    @pulumi.getter
    def constraint(self) -> str:
        """
        Applicable in case of Oracle Real Application Clusters (Oracle RAC) databases. A `UNIQUE` parameter is one which is unique to each Oracle Real Application Clusters (Oracle RAC) instance. For example, the parameter `INSTANCE_NUMBER` must have different values in each instance. An `IDENTICAL` parameter must have the same value for every instance. For example, the parameter `DB_BLOCK_SIZE` must have the same value in all instances.
        """
        return pulumi.get(self, "constraint")

    @property
    @pulumi.getter(name="containerId")
    def container_id(self) -> float:
        """
        The ID of the database container to which the data pertains. Possible values include:
        * `0`: This value is used for data that pertain to the entire CDB. This value is also used for data in non-CDBs.
        * `1`: This value is used for data that pertain to only the root container.
        * `n`: Where n is the applicable container ID for the data.
        """
        return pulumi.get(self, "container_id")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The description of the parameter.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayValue")
    def display_value(self) -> str:
        """
        The parameter value in a user-friendly format. For example, if the `value` property shows the value 262144 for a big integer parameter, then the `displayValue` property will show the value 256K.
        """
        return pulumi.get(self, "display_value")

    @property
    @pulumi.getter(name="isAdjusted")
    def is_adjusted(self) -> bool:
        """
        Indicates whether Oracle adjusted the input value to a more suitable value.
        """
        return pulumi.get(self, "is_adjusted")

    @property
    @pulumi.getter(name="isBasic")
    def is_basic(self) -> bool:
        """
        Indicates whether the parameter is a basic parameter (`TRUE`) or not (`FALSE`).
        """
        return pulumi.get(self, "is_basic")

    @property
    @pulumi.getter(name="isDefault")
    def is_default(self) -> bool:
        """
        Indicates whether the parameter is set to the default value (`TRUE`) or the parameter value was specified in the parameter file (`FALSE`).
        """
        return pulumi.get(self, "is_default")

    @property
    @pulumi.getter(name="isDeprecated")
    def is_deprecated(self) -> bool:
        """
        Indicates whether the parameter has been deprecated (`TRUE`) or not (`FALSE`).
        """
        return pulumi.get(self, "is_deprecated")

    @property
    @pulumi.getter(name="isInstanceModifiable")
    def is_instance_modifiable(self) -> bool:
        """
        For parameters that can be changed with `ALTER SYSTEM`, indicates whether the value of the parameter can be different for every instance (`TRUE`) or whether the parameter must have the same value for all Real Application Clusters instances (`FALSE`). For other parameters, this is always `FALSE`.
        """
        return pulumi.get(self, "is_instance_modifiable")

    @property
    @pulumi.getter(name="isModified")
    def is_modified(self) -> str:
        """
        Indicates how the parameter was modified. If an `ALTER SYSTEM` was performed, the value will be `MODIFIED`.
        """
        return pulumi.get(self, "is_modified")

    @property
    @pulumi.getter(name="isPdbModifiable")
    def is_pdb_modifiable(self) -> bool:
        """
        Indicates whether the parameter can be modified on a per-PDB basis (`TRUE`) or not (`FALSE`). In a non-CDB, the value of this property is `null`.
        """
        return pulumi.get(self, "is_pdb_modifiable")

    @property
    @pulumi.getter(name="isSessionModifiable")
    def is_session_modifiable(self) -> bool:
        """
        Indicates whether the parameter can be changed with `ALTER SESSION` (`TRUE`) or not (`FALSE`)
        """
        return pulumi.get(self, "is_session_modifiable")

    @property
    @pulumi.getter(name="isSpecified")
    def is_specified(self) -> bool:
        """
        Indicates whether the parameter was specified in the server parameter file (`TRUE`) or not (`FALSE`). Applicable only when the parameter source is `SPFILE`.
        """
        return pulumi.get(self, "is_specified")

    @property
    @pulumi.getter(name="isSystemModifiable")
    def is_system_modifiable(self) -> str:
        """
        Indicates whether the parameter can be changed with `ALTER SYSTEM` and when the change takes effect:
        * IMMEDIATE: Parameter can be changed with `ALTER SYSTEM` regardless of the type of parameter file used to start the instance. The change takes effect immediately.
        * DEFERRED: Parameter can be changed with `ALTER SYSTEM` regardless of the type of parameter file used to start the instance. The change takes effect in subsequent sessions.
        * FALSE: Parameter cannot be changed with `ALTER SYSTEM` unless a server parameter file was used to start the instance. The change takes effect in subsequent instances.
        """
        return pulumi.get(self, "is_system_modifiable")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        A filter to return all parameters that have the text given in their names.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def number(self) -> float:
        """
        The parameter number.
        """
        return pulumi.get(self, "number")

    @property
    @pulumi.getter
    def ordinal(self) -> float:
        """
        The position (ordinal number) of the parameter value. Useful only for parameters whose values are lists of strings.
        """
        return pulumi.get(self, "ordinal")

    @property
    @pulumi.getter
    def sid(self) -> str:
        """
        The database instance SID for which the parameter is defined.
        """
        return pulumi.get(self, "sid")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The parameter type.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="updateComment")
    def update_comment(self) -> str:
        """
        The comments associated with the most recent update.
        """
        return pulumi.get(self, "update_comment")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The parameter value.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetManagedDatabasesDatabaseParameterItemAllowedValueResult(dict):
    def __init__(__self__, *,
                 is_default: bool,
                 ordinal: float,
                 value: str):
        """
        :param bool is_default: Indicates whether the parameter is set to the default value (`TRUE`) or the parameter value was specified in the parameter file (`FALSE`).
        :param float ordinal: The position (ordinal number) of the parameter value. Useful only for parameters whose values are lists of strings.
        :param str value: The parameter value.
        """
        pulumi.set(__self__, "is_default", is_default)
        pulumi.set(__self__, "ordinal", ordinal)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="isDefault")
    def is_default(self) -> bool:
        """
        Indicates whether the parameter is set to the default value (`TRUE`) or the parameter value was specified in the parameter file (`FALSE`).
        """
        return pulumi.get(self, "is_default")

    @property
    @pulumi.getter
    def ordinal(self) -> float:
        """
        The position (ordinal number) of the parameter value. Useful only for parameters whose values are lists of strings.
        """
        return pulumi.get(self, "ordinal")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The parameter value.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetManagedDatabasesDatabaseParametersDatabaseParametersCollectionResult(dict):
    def __init__(__self__, *,
                 database_name: str,
                 database_sub_type: str,
                 database_type: str,
                 database_version: str,
                 items: Sequence['outputs.GetManagedDatabasesDatabaseParametersDatabaseParametersCollectionItemResult']):
        """
        :param str database_name: The name of the Managed Database.
        :param str database_sub_type: The subtype of the Oracle Database. Indicates whether the database is a Container Database, Pluggable Database, or a Non-container Database.
        :param str database_type: The type of Oracle Database installation.
        :param str database_version: The Oracle Database version.
        :param Sequence['GetManagedDatabasesDatabaseParametersDatabaseParametersCollectionItemArgs'] items: An array of DatabaseParameterSummary objects.
        """
        pulumi.set(__self__, "database_name", database_name)
        pulumi.set(__self__, "database_sub_type", database_sub_type)
        pulumi.set(__self__, "database_type", database_type)
        pulumi.set(__self__, "database_version", database_version)
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> str:
        """
        The name of the Managed Database.
        """
        return pulumi.get(self, "database_name")

    @property
    @pulumi.getter(name="databaseSubType")
    def database_sub_type(self) -> str:
        """
        The subtype of the Oracle Database. Indicates whether the database is a Container Database, Pluggable Database, or a Non-container Database.
        """
        return pulumi.get(self, "database_sub_type")

    @property
    @pulumi.getter(name="databaseType")
    def database_type(self) -> str:
        """
        The type of Oracle Database installation.
        """
        return pulumi.get(self, "database_type")

    @property
    @pulumi.getter(name="databaseVersion")
    def database_version(self) -> str:
        """
        The Oracle Database version.
        """
        return pulumi.get(self, "database_version")

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetManagedDatabasesDatabaseParametersDatabaseParametersCollectionItemResult']:
        """
        An array of DatabaseParameterSummary objects.
        """
        return pulumi.get(self, "items")


@pulumi.output_type
class GetManagedDatabasesDatabaseParametersDatabaseParametersCollectionItemResult(dict):
    def __init__(__self__, *,
                 allowed_values: Sequence['outputs.GetManagedDatabasesDatabaseParametersDatabaseParametersCollectionItemAllowedValueResult'],
                 category: str,
                 constraint: str,
                 container_id: float,
                 description: str,
                 display_value: str,
                 is_adjusted: bool,
                 is_basic: bool,
                 is_default: bool,
                 is_deprecated: bool,
                 is_instance_modifiable: bool,
                 is_modified: str,
                 is_pdb_modifiable: bool,
                 is_session_modifiable: bool,
                 is_specified: bool,
                 is_system_modifiable: str,
                 name: str,
                 number: float,
                 ordinal: float,
                 sid: str,
                 type: str,
                 update_comment: str,
                 value: str):
        """
        :param Sequence['GetManagedDatabasesDatabaseParametersDatabaseParametersCollectionItemAllowedValueArgs'] allowed_values: A list of allowed values for this parameter.
        :param str category: The parameter category.
        :param str constraint: Applicable in case of Oracle Real Application Clusters (Oracle RAC) databases. A `UNIQUE` parameter is one which is unique to each Oracle Real Application Clusters (Oracle RAC) instance. For example, the parameter `INSTANCE_NUMBER` must have different values in each instance. An `IDENTICAL` parameter must have the same value for every instance. For example, the parameter `DB_BLOCK_SIZE` must have the same value in all instances.
        :param float container_id: The ID of the database container to which the data pertains. Possible values include:
               * `0`: This value is used for data that pertain to the entire CDB. This value is also used for data in non-CDBs.
               * `1`: This value is used for data that pertain to only the root container.
               * `n`: Where n is the applicable container ID for the data.
        :param str description: The description of the parameter.
        :param str display_value: The parameter value in a user-friendly format. For example, if the `value` property shows the value 262144 for a big integer parameter, then the `displayValue` property will show the value 256K.
        :param bool is_adjusted: Indicates whether Oracle adjusted the input value to a more suitable value.
        :param bool is_basic: Indicates whether the parameter is a basic parameter (`TRUE`) or not (`FALSE`).
        :param bool is_default: Indicates whether the parameter is set to the default value (`TRUE`) or the parameter value was specified in the parameter file (`FALSE`).
        :param bool is_deprecated: Indicates whether the parameter has been deprecated (`TRUE`) or not (`FALSE`).
        :param bool is_instance_modifiable: For parameters that can be changed with `ALTER SYSTEM`, indicates whether the value of the parameter can be different for every instance (`TRUE`) or whether the parameter must have the same value for all Real Application Clusters instances (`FALSE`). For other parameters, this is always `FALSE`.
        :param str is_modified: Indicates how the parameter was modified. If an `ALTER SYSTEM` was performed, the value will be `MODIFIED`.
        :param bool is_pdb_modifiable: Indicates whether the parameter can be modified on a per-PDB basis (`TRUE`) or not (`FALSE`). In a non-CDB, the value of this property is `null`.
        :param bool is_session_modifiable: Indicates whether the parameter can be changed with `ALTER SESSION` (`TRUE`) or not (`FALSE`)
        :param bool is_specified: Indicates whether the parameter was specified in the server parameter file (`TRUE`) or not (`FALSE`). Applicable only when the parameter source is `SPFILE`.
        :param str is_system_modifiable: Indicates whether the parameter can be changed with `ALTER SYSTEM` and when the change takes effect:
               * IMMEDIATE: Parameter can be changed with `ALTER SYSTEM` regardless of the type of parameter file used to start the instance. The change takes effect immediately.
               * DEFERRED: Parameter can be changed with `ALTER SYSTEM` regardless of the type of parameter file used to start the instance. The change takes effect in subsequent sessions.
               * FALSE: Parameter cannot be changed with `ALTER SYSTEM` unless a server parameter file was used to start the instance. The change takes effect in subsequent instances.
        :param str name: A filter to return all parameters that have the text given in their names.
        :param float number: The parameter number.
        :param float ordinal: The position (ordinal number) of the parameter value. Useful only for parameters whose values are lists of strings.
        :param str sid: The database instance SID for which the parameter is defined.
        :param str type: The parameter type.
        :param str update_comment: The comments associated with the most recent update.
        :param str value: The parameter value.
        """
        pulumi.set(__self__, "allowed_values", allowed_values)
        pulumi.set(__self__, "category", category)
        pulumi.set(__self__, "constraint", constraint)
        pulumi.set(__self__, "container_id", container_id)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "display_value", display_value)
        pulumi.set(__self__, "is_adjusted", is_adjusted)
        pulumi.set(__self__, "is_basic", is_basic)
        pulumi.set(__self__, "is_default", is_default)
        pulumi.set(__self__, "is_deprecated", is_deprecated)
        pulumi.set(__self__, "is_instance_modifiable", is_instance_modifiable)
        pulumi.set(__self__, "is_modified", is_modified)
        pulumi.set(__self__, "is_pdb_modifiable", is_pdb_modifiable)
        pulumi.set(__self__, "is_session_modifiable", is_session_modifiable)
        pulumi.set(__self__, "is_specified", is_specified)
        pulumi.set(__self__, "is_system_modifiable", is_system_modifiable)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "number", number)
        pulumi.set(__self__, "ordinal", ordinal)
        pulumi.set(__self__, "sid", sid)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "update_comment", update_comment)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="allowedValues")
    def allowed_values(self) -> Sequence['outputs.GetManagedDatabasesDatabaseParametersDatabaseParametersCollectionItemAllowedValueResult']:
        """
        A list of allowed values for this parameter.
        """
        return pulumi.get(self, "allowed_values")

    @property
    @pulumi.getter
    def category(self) -> str:
        """
        The parameter category.
        """
        return pulumi.get(self, "category")

    @property
    @pulumi.getter
    def constraint(self) -> str:
        """
        Applicable in case of Oracle Real Application Clusters (Oracle RAC) databases. A `UNIQUE` parameter is one which is unique to each Oracle Real Application Clusters (Oracle RAC) instance. For example, the parameter `INSTANCE_NUMBER` must have different values in each instance. An `IDENTICAL` parameter must have the same value for every instance. For example, the parameter `DB_BLOCK_SIZE` must have the same value in all instances.
        """
        return pulumi.get(self, "constraint")

    @property
    @pulumi.getter(name="containerId")
    def container_id(self) -> float:
        """
        The ID of the database container to which the data pertains. Possible values include:
        * `0`: This value is used for data that pertain to the entire CDB. This value is also used for data in non-CDBs.
        * `1`: This value is used for data that pertain to only the root container.
        * `n`: Where n is the applicable container ID for the data.
        """
        return pulumi.get(self, "container_id")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The description of the parameter.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayValue")
    def display_value(self) -> str:
        """
        The parameter value in a user-friendly format. For example, if the `value` property shows the value 262144 for a big integer parameter, then the `displayValue` property will show the value 256K.
        """
        return pulumi.get(self, "display_value")

    @property
    @pulumi.getter(name="isAdjusted")
    def is_adjusted(self) -> bool:
        """
        Indicates whether Oracle adjusted the input value to a more suitable value.
        """
        return pulumi.get(self, "is_adjusted")

    @property
    @pulumi.getter(name="isBasic")
    def is_basic(self) -> bool:
        """
        Indicates whether the parameter is a basic parameter (`TRUE`) or not (`FALSE`).
        """
        return pulumi.get(self, "is_basic")

    @property
    @pulumi.getter(name="isDefault")
    def is_default(self) -> bool:
        """
        Indicates whether the parameter is set to the default value (`TRUE`) or the parameter value was specified in the parameter file (`FALSE`).
        """
        return pulumi.get(self, "is_default")

    @property
    @pulumi.getter(name="isDeprecated")
    def is_deprecated(self) -> bool:
        """
        Indicates whether the parameter has been deprecated (`TRUE`) or not (`FALSE`).
        """
        return pulumi.get(self, "is_deprecated")

    @property
    @pulumi.getter(name="isInstanceModifiable")
    def is_instance_modifiable(self) -> bool:
        """
        For parameters that can be changed with `ALTER SYSTEM`, indicates whether the value of the parameter can be different for every instance (`TRUE`) or whether the parameter must have the same value for all Real Application Clusters instances (`FALSE`). For other parameters, this is always `FALSE`.
        """
        return pulumi.get(self, "is_instance_modifiable")

    @property
    @pulumi.getter(name="isModified")
    def is_modified(self) -> str:
        """
        Indicates how the parameter was modified. If an `ALTER SYSTEM` was performed, the value will be `MODIFIED`.
        """
        return pulumi.get(self, "is_modified")

    @property
    @pulumi.getter(name="isPdbModifiable")
    def is_pdb_modifiable(self) -> bool:
        """
        Indicates whether the parameter can be modified on a per-PDB basis (`TRUE`) or not (`FALSE`). In a non-CDB, the value of this property is `null`.
        """
        return pulumi.get(self, "is_pdb_modifiable")

    @property
    @pulumi.getter(name="isSessionModifiable")
    def is_session_modifiable(self) -> bool:
        """
        Indicates whether the parameter can be changed with `ALTER SESSION` (`TRUE`) or not (`FALSE`)
        """
        return pulumi.get(self, "is_session_modifiable")

    @property
    @pulumi.getter(name="isSpecified")
    def is_specified(self) -> bool:
        """
        Indicates whether the parameter was specified in the server parameter file (`TRUE`) or not (`FALSE`). Applicable only when the parameter source is `SPFILE`.
        """
        return pulumi.get(self, "is_specified")

    @property
    @pulumi.getter(name="isSystemModifiable")
    def is_system_modifiable(self) -> str:
        """
        Indicates whether the parameter can be changed with `ALTER SYSTEM` and when the change takes effect:
        * IMMEDIATE: Parameter can be changed with `ALTER SYSTEM` regardless of the type of parameter file used to start the instance. The change takes effect immediately.
        * DEFERRED: Parameter can be changed with `ALTER SYSTEM` regardless of the type of parameter file used to start the instance. The change takes effect in subsequent sessions.
        * FALSE: Parameter cannot be changed with `ALTER SYSTEM` unless a server parameter file was used to start the instance. The change takes effect in subsequent instances.
        """
        return pulumi.get(self, "is_system_modifiable")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        A filter to return all parameters that have the text given in their names.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def number(self) -> float:
        """
        The parameter number.
        """
        return pulumi.get(self, "number")

    @property
    @pulumi.getter
    def ordinal(self) -> float:
        """
        The position (ordinal number) of the parameter value. Useful only for parameters whose values are lists of strings.
        """
        return pulumi.get(self, "ordinal")

    @property
    @pulumi.getter
    def sid(self) -> str:
        """
        The database instance SID for which the parameter is defined.
        """
        return pulumi.get(self, "sid")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The parameter type.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="updateComment")
    def update_comment(self) -> str:
        """
        The comments associated with the most recent update.
        """
        return pulumi.get(self, "update_comment")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The parameter value.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetManagedDatabasesDatabaseParametersDatabaseParametersCollectionItemAllowedValueResult(dict):
    def __init__(__self__, *,
                 is_default: bool,
                 ordinal: float,
                 value: str):
        """
        :param bool is_default: Indicates whether the parameter is set to the default value (`TRUE`) or the parameter value was specified in the parameter file (`FALSE`).
        :param float ordinal: The position (ordinal number) of the parameter value. Useful only for parameters whose values are lists of strings.
        :param str value: The parameter value.
        """
        pulumi.set(__self__, "is_default", is_default)
        pulumi.set(__self__, "ordinal", ordinal)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="isDefault")
    def is_default(self) -> bool:
        """
        Indicates whether the parameter is set to the default value (`TRUE`) or the parameter value was specified in the parameter file (`FALSE`).
        """
        return pulumi.get(self, "is_default")

    @property
    @pulumi.getter
    def ordinal(self) -> float:
        """
        The position (ordinal number) of the parameter value. Useful only for parameters whose values are lists of strings.
        """
        return pulumi.get(self, "ordinal")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The parameter value.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetManagedDatabasesDatabaseParametersFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        """
        :param str name: A filter to return all parameters that have the text given in their names.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        A filter to return all parameters that have the text given in their names.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetManagedDatabasesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        """
        :param str name: A filter to return only resources that match the entire name.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        A filter to return only resources that match the entire name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetManagedDatabasesManagedDatabaseCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetManagedDatabasesManagedDatabaseCollectionItemResult']):
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetManagedDatabasesManagedDatabaseCollectionItemResult']:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetManagedDatabasesManagedDatabaseCollectionItemResult(dict):
    def __init__(__self__, *,
                 additional_details: Mapping[str, Any],
                 compartment_id: str,
                 database_status: str,
                 database_sub_type: str,
                 database_type: str,
                 id: str,
                 is_cluster: bool,
                 managed_database_groups: Sequence['outputs.GetManagedDatabasesManagedDatabaseCollectionItemManagedDatabaseGroupResult'],
                 name: str,
                 parent_container_id: str,
                 time_created: str):
        """
        :param Mapping[str, Any] additional_details: The additional details specific to a type of database defined in `{"key": "value"}` format. Example: `{"bar-key": "value"}`
        :param str compartment_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
        :param str database_status: The status of the Oracle Database. Indicates whether the status of the database is UP, DOWN, or UNKNOWN at the current time.
        :param str database_sub_type: The subtype of the Oracle Database. Indicates whether the database is a Container Database, Pluggable Database, or a Non-container Database.
        :param str database_type: The type of Oracle Database installation.
        :param str id: The identifier of the resource.
        :param bool is_cluster: Indicates whether the Oracle Database is part of a cluster.
        :param Sequence['GetManagedDatabasesManagedDatabaseCollectionItemManagedDatabaseGroupArgs'] managed_database_groups: A list of Managed Database Groups that the Managed Database belongs to.
        :param str name: A filter to return only resources that match the entire name.
        :param str parent_container_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the parent Container Database if Managed Database is a Pluggable Database.
        :param str time_created: The date and time the Managed Database was created.
        """
        pulumi.set(__self__, "additional_details", additional_details)
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "database_status", database_status)
        pulumi.set(__self__, "database_sub_type", database_sub_type)
        pulumi.set(__self__, "database_type", database_type)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "is_cluster", is_cluster)
        pulumi.set(__self__, "managed_database_groups", managed_database_groups)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "parent_container_id", parent_container_id)
        pulumi.set(__self__, "time_created", time_created)

    @property
    @pulumi.getter(name="additionalDetails")
    def additional_details(self) -> Mapping[str, Any]:
        """
        The additional details specific to a type of database defined in `{"key": "value"}` format. Example: `{"bar-key": "value"}`
        """
        return pulumi.get(self, "additional_details")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="databaseStatus")
    def database_status(self) -> str:
        """
        The status of the Oracle Database. Indicates whether the status of the database is UP, DOWN, or UNKNOWN at the current time.
        """
        return pulumi.get(self, "database_status")

    @property
    @pulumi.getter(name="databaseSubType")
    def database_sub_type(self) -> str:
        """
        The subtype of the Oracle Database. Indicates whether the database is a Container Database, Pluggable Database, or a Non-container Database.
        """
        return pulumi.get(self, "database_sub_type")

    @property
    @pulumi.getter(name="databaseType")
    def database_type(self) -> str:
        """
        The type of Oracle Database installation.
        """
        return pulumi.get(self, "database_type")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The identifier of the resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isCluster")
    def is_cluster(self) -> bool:
        """
        Indicates whether the Oracle Database is part of a cluster.
        """
        return pulumi.get(self, "is_cluster")

    @property
    @pulumi.getter(name="managedDatabaseGroups")
    def managed_database_groups(self) -> Sequence['outputs.GetManagedDatabasesManagedDatabaseCollectionItemManagedDatabaseGroupResult']:
        """
        A list of Managed Database Groups that the Managed Database belongs to.
        """
        return pulumi.get(self, "managed_database_groups")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        A filter to return only resources that match the entire name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="parentContainerId")
    def parent_container_id(self) -> str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the parent Container Database if Managed Database is a Pluggable Database.
        """
        return pulumi.get(self, "parent_container_id")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> str:
        """
        The date and time the Managed Database was created.
        """
        return pulumi.get(self, "time_created")


@pulumi.output_type
class GetManagedDatabasesManagedDatabaseCollectionItemManagedDatabaseGroupResult(dict):
    def __init__(__self__, *,
                 compartment_id: str,
                 id: str,
                 name: str):
        """
        :param str compartment_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
        :param str id: The identifier of the resource.
        :param str name: A filter to return only resources that match the entire name.
        """
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The identifier of the resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        A filter to return only resources that match the entire name.
        """
        return pulumi.get(self, "name")


