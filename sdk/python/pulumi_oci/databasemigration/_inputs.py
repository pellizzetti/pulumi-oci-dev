# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'ConnectionAdminCredentialsArgs',
    'ConnectionConnectDescriptorArgs',
    'ConnectionPrivateEndpointArgs',
    'ConnectionSshDetailsArgs',
    'ConnectionVaultDetailsArgs',
    'JobProgressArgs',
    'JobProgressPhaseArgs',
    'JobUnsupportedObjectArgs',
    'MigrationDataTransferMediumDetailsArgs',
    'MigrationDataTransferMediumDetailsDatabaseLinkDetailsArgs',
    'MigrationDataTransferMediumDetailsObjectStorageDetailsArgs',
    'MigrationDatapumpSettingsArgs',
    'MigrationDatapumpSettingsDataPumpParametersArgs',
    'MigrationDatapumpSettingsExportDirectoryObjectArgs',
    'MigrationDatapumpSettingsImportDirectoryObjectArgs',
    'MigrationDatapumpSettingsMetadataRemapArgs',
    'MigrationExcludeObjectArgs',
    'MigrationGoldenGateDetailsArgs',
    'MigrationGoldenGateDetailsHubArgs',
    'MigrationGoldenGateDetailsHubRestAdminCredentialsArgs',
    'MigrationGoldenGateDetailsHubSourceContainerDbAdminCredentialsArgs',
    'MigrationGoldenGateDetailsHubSourceDbAdminCredentialsArgs',
    'MigrationGoldenGateDetailsHubTargetDbAdminCredentialsArgs',
    'MigrationGoldenGateDetailsSettingsArgs',
    'MigrationGoldenGateDetailsSettingsExtractArgs',
    'MigrationGoldenGateDetailsSettingsReplicatArgs',
    'MigrationVaultDetailsArgs',
    'GetAgentImagesFilterArgs',
    'GetAgentsFilterArgs',
    'GetConnectionsFilterArgs',
    'GetJobsFilterArgs',
    'GetMigrationsFilterArgs',
]

@pulumi.input_type
class ConnectionAdminCredentialsArgs:
    def __init__(__self__, *,
                 password: pulumi.Input[str],
                 username: pulumi.Input[str]):
        """
        :param pulumi.Input[str] password: (Updatable) Admin password
        :param pulumi.Input[str] username: (Updatable) Admin username
        """
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def password(self) -> pulumi.Input[str]:
        """
        (Updatable) Admin password
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: pulumi.Input[str]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def username(self) -> pulumi.Input[str]:
        """
        (Updatable) Admin username
        """
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: pulumi.Input[str]):
        pulumi.set(self, "username", value)


@pulumi.input_type
class ConnectionConnectDescriptorArgs:
    def __init__(__self__, *,
                 connect_string: Optional[pulumi.Input[str]] = None,
                 database_service_name: Optional[pulumi.Input[str]] = None,
                 host: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] connect_string: (Updatable) Connect String. Required if no host, port nor databaseServiceName were specified. If a Private Endpoint was specified in the Connection, the host entry should be a valid IP address. Supported formats: Easy connect: <host>:<port>/<db_service_name> Long format: (description= (address=(port=<port>)(host=<host>))(connect_data=(service_name=<db_service_name>)))
        :param pulumi.Input[str] database_service_name: (Updatable) Database service name. Required if no connectString was specified.
        :param pulumi.Input[str] host: (Updatable) Name of the host the sshkey is valid for.
        :param pulumi.Input[int] port: (Updatable) Port of the connect descriptor. Required if no connectString was specified.
        """
        if connect_string is not None:
            pulumi.set(__self__, "connect_string", connect_string)
        if database_service_name is not None:
            pulumi.set(__self__, "database_service_name", database_service_name)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if port is not None:
            pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter(name="connectString")
    def connect_string(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Connect String. Required if no host, port nor databaseServiceName were specified. If a Private Endpoint was specified in the Connection, the host entry should be a valid IP address. Supported formats: Easy connect: <host>:<port>/<db_service_name> Long format: (description= (address=(port=<port>)(host=<host>))(connect_data=(service_name=<db_service_name>)))
        """
        return pulumi.get(self, "connect_string")

    @connect_string.setter
    def connect_string(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "connect_string", value)

    @property
    @pulumi.getter(name="databaseServiceName")
    def database_service_name(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Database service name. Required if no connectString was specified.
        """
        return pulumi.get(self, "database_service_name")

    @database_service_name.setter
    def database_service_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "database_service_name", value)

    @property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Name of the host the sshkey is valid for.
        """
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        """
        (Updatable) Port of the connect descriptor. Required if no connectString was specified.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)


@pulumi.input_type
class ConnectionPrivateEndpointArgs:
    def __init__(__self__, *,
                 compartment_id: pulumi.Input[str],
                 subnet_id: pulumi.Input[str],
                 vcn_id: pulumi.Input[str],
                 id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] compartment_id: (Updatable) OCID of the compartment where the secret containing the credentials will be created.
        :param pulumi.Input[str] subnet_id: (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the customer's subnet where the private endpoint VNIC will reside.  Required if the id was not specified.
        :param pulumi.Input[str] vcn_id: (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the VCN where the Private Endpoint will be bound to. Required if the id was not specified.
        :param pulumi.Input[str] id: [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of a previously created Private Endpoint.
        """
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "subnet_id", subnet_id)
        pulumi.set(__self__, "vcn_id", vcn_id)
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> pulumi.Input[str]:
        """
        (Updatable) OCID of the compartment where the secret containing the credentials will be created.
        """
        return pulumi.get(self, "compartment_id")

    @compartment_id.setter
    def compartment_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "compartment_id", value)

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> pulumi.Input[str]:
        """
        (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the customer's subnet where the private endpoint VNIC will reside.  Required if the id was not specified.
        """
        return pulumi.get(self, "subnet_id")

    @subnet_id.setter
    def subnet_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "subnet_id", value)

    @property
    @pulumi.getter(name="vcnId")
    def vcn_id(self) -> pulumi.Input[str]:
        """
        (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the VCN where the Private Endpoint will be bound to. Required if the id was not specified.
        """
        return pulumi.get(self, "vcn_id")

    @vcn_id.setter
    def vcn_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "vcn_id", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of a previously created Private Endpoint.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class ConnectionSshDetailsArgs:
    def __init__(__self__, *,
                 host: pulumi.Input[str],
                 sshkey: pulumi.Input[str],
                 user: pulumi.Input[str],
                 sudo_location: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] host: (Updatable) Name of the host the sshkey is valid for.
        :param pulumi.Input[str] sshkey: (Updatable) Private ssh key string.
        :param pulumi.Input[str] user: (Updatable) SSH user
        :param pulumi.Input[str] sudo_location: (Updatable) Sudo location
        """
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "sshkey", sshkey)
        pulumi.set(__self__, "user", user)
        if sudo_location is not None:
            pulumi.set(__self__, "sudo_location", sudo_location)

    @property
    @pulumi.getter
    def host(self) -> pulumi.Input[str]:
        """
        (Updatable) Name of the host the sshkey is valid for.
        """
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: pulumi.Input[str]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter
    def sshkey(self) -> pulumi.Input[str]:
        """
        (Updatable) Private ssh key string.
        """
        return pulumi.get(self, "sshkey")

    @sshkey.setter
    def sshkey(self, value: pulumi.Input[str]):
        pulumi.set(self, "sshkey", value)

    @property
    @pulumi.getter
    def user(self) -> pulumi.Input[str]:
        """
        (Updatable) SSH user
        """
        return pulumi.get(self, "user")

    @user.setter
    def user(self, value: pulumi.Input[str]):
        pulumi.set(self, "user", value)

    @property
    @pulumi.getter(name="sudoLocation")
    def sudo_location(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Sudo location
        """
        return pulumi.get(self, "sudo_location")

    @sudo_location.setter
    def sudo_location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sudo_location", value)


@pulumi.input_type
class ConnectionVaultDetailsArgs:
    def __init__(__self__, *,
                 compartment_id: pulumi.Input[str],
                 key_id: pulumi.Input[str],
                 vault_id: pulumi.Input[str]):
        """
        :param pulumi.Input[str] compartment_id: (Updatable) OCID of the compartment where the secret containing the credentials will be created.
        :param pulumi.Input[str] key_id: (Updatable) OCID of the vault encryption key
        :param pulumi.Input[str] vault_id: (Updatable) OCID of the vault
        """
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "key_id", key_id)
        pulumi.set(__self__, "vault_id", vault_id)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> pulumi.Input[str]:
        """
        (Updatable) OCID of the compartment where the secret containing the credentials will be created.
        """
        return pulumi.get(self, "compartment_id")

    @compartment_id.setter
    def compartment_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "compartment_id", value)

    @property
    @pulumi.getter(name="keyId")
    def key_id(self) -> pulumi.Input[str]:
        """
        (Updatable) OCID of the vault encryption key
        """
        return pulumi.get(self, "key_id")

    @key_id.setter
    def key_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "key_id", value)

    @property
    @pulumi.getter(name="vaultId")
    def vault_id(self) -> pulumi.Input[str]:
        """
        (Updatable) OCID of the vault
        """
        return pulumi.get(self, "vault_id")

    @vault_id.setter
    def vault_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "vault_id", value)


@pulumi.input_type
class JobProgressArgs:
    def __init__(__self__, *,
                 current_phase: Optional[pulumi.Input[str]] = None,
                 current_status: Optional[pulumi.Input[str]] = None,
                 phases: Optional[pulumi.Input[Sequence[pulumi.Input['JobProgressPhaseArgs']]]] = None):
        """
        :param pulumi.Input[str] current_phase: Current phase of the job.
        :param pulumi.Input[str] current_status: Current status of the job.
        :param pulumi.Input[Sequence[pulumi.Input['JobProgressPhaseArgs']]] phases: List of phase status for the job.
        """
        if current_phase is not None:
            pulumi.set(__self__, "current_phase", current_phase)
        if current_status is not None:
            pulumi.set(__self__, "current_status", current_status)
        if phases is not None:
            pulumi.set(__self__, "phases", phases)

    @property
    @pulumi.getter(name="currentPhase")
    def current_phase(self) -> Optional[pulumi.Input[str]]:
        """
        Current phase of the job.
        """
        return pulumi.get(self, "current_phase")

    @current_phase.setter
    def current_phase(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "current_phase", value)

    @property
    @pulumi.getter(name="currentStatus")
    def current_status(self) -> Optional[pulumi.Input[str]]:
        """
        Current status of the job.
        """
        return pulumi.get(self, "current_status")

    @current_status.setter
    def current_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "current_status", value)

    @property
    @pulumi.getter
    def phases(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['JobProgressPhaseArgs']]]]:
        """
        List of phase status for the job.
        """
        return pulumi.get(self, "phases")

    @phases.setter
    def phases(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['JobProgressPhaseArgs']]]]):
        pulumi.set(self, "phases", value)


@pulumi.input_type
class JobProgressPhaseArgs:
    def __init__(__self__, *,
                 duration_in_ms: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 progress: Optional[pulumi.Input[int]] = None,
                 status: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[int] duration_in_ms: Duration of the phase in milliseconds
        :param pulumi.Input[str] name: Phase name
        :param pulumi.Input[int] progress: Percent progress of job phase.
        :param pulumi.Input[str] status: Phase status
        """
        if duration_in_ms is not None:
            pulumi.set(__self__, "duration_in_ms", duration_in_ms)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if progress is not None:
            pulumi.set(__self__, "progress", progress)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="durationInMs")
    def duration_in_ms(self) -> Optional[pulumi.Input[int]]:
        """
        Duration of the phase in milliseconds
        """
        return pulumi.get(self, "duration_in_ms")

    @duration_in_ms.setter
    def duration_in_ms(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "duration_in_ms", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Phase name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def progress(self) -> Optional[pulumi.Input[int]]:
        """
        Percent progress of job phase.
        """
        return pulumi.get(self, "progress")

    @progress.setter
    def progress(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "progress", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Phase status
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)


@pulumi.input_type
class JobUnsupportedObjectArgs:
    def __init__(__self__, *,
                 object: Optional[pulumi.Input[str]] = None,
                 owner: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] object: Name of the object (regular expression is allowed)
        :param pulumi.Input[str] owner: Owner of the object (regular expression is allowed)
        :param pulumi.Input[str] type: Type of unsupported object
        """
        if object is not None:
            pulumi.set(__self__, "object", object)
        if owner is not None:
            pulumi.set(__self__, "owner", owner)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def object(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the object (regular expression is allowed)
        """
        return pulumi.get(self, "object")

    @object.setter
    def object(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "object", value)

    @property
    @pulumi.getter
    def owner(self) -> Optional[pulumi.Input[str]]:
        """
        Owner of the object (regular expression is allowed)
        """
        return pulumi.get(self, "owner")

    @owner.setter
    def owner(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "owner", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Type of unsupported object
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class MigrationDataTransferMediumDetailsArgs:
    def __init__(__self__, *,
                 database_link_details: Optional[pulumi.Input['MigrationDataTransferMediumDetailsDatabaseLinkDetailsArgs']] = None,
                 object_storage_details: Optional[pulumi.Input['MigrationDataTransferMediumDetailsObjectStorageDetailsArgs']] = None):
        """
        :param pulumi.Input['MigrationDataTransferMediumDetailsDatabaseLinkDetailsArgs'] database_link_details: (Updatable) Optional details for creating a network database link from Oracle Cloud Infrastructure database to on-premise database.
        :param pulumi.Input['MigrationDataTransferMediumDetailsObjectStorageDetailsArgs'] object_storage_details: (Updatable) In lieu of a network database link, Oracle Cloud Infrastructure Object Storage bucket will be used to store Datapump dump files for the migration.
        """
        if database_link_details is not None:
            pulumi.set(__self__, "database_link_details", database_link_details)
        if object_storage_details is not None:
            pulumi.set(__self__, "object_storage_details", object_storage_details)

    @property
    @pulumi.getter(name="databaseLinkDetails")
    def database_link_details(self) -> Optional[pulumi.Input['MigrationDataTransferMediumDetailsDatabaseLinkDetailsArgs']]:
        """
        (Updatable) Optional details for creating a network database link from Oracle Cloud Infrastructure database to on-premise database.
        """
        return pulumi.get(self, "database_link_details")

    @database_link_details.setter
    def database_link_details(self, value: Optional[pulumi.Input['MigrationDataTransferMediumDetailsDatabaseLinkDetailsArgs']]):
        pulumi.set(self, "database_link_details", value)

    @property
    @pulumi.getter(name="objectStorageDetails")
    def object_storage_details(self) -> Optional[pulumi.Input['MigrationDataTransferMediumDetailsObjectStorageDetailsArgs']]:
        """
        (Updatable) In lieu of a network database link, Oracle Cloud Infrastructure Object Storage bucket will be used to store Datapump dump files for the migration.
        """
        return pulumi.get(self, "object_storage_details")

    @object_storage_details.setter
    def object_storage_details(self, value: Optional[pulumi.Input['MigrationDataTransferMediumDetailsObjectStorageDetailsArgs']]):
        pulumi.set(self, "object_storage_details", value)


@pulumi.input_type
class MigrationDataTransferMediumDetailsDatabaseLinkDetailsArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str]):
        """
        :param pulumi.Input[str] name: (Updatable) Name of directory object in database
        """
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        (Updatable) Name of directory object in database
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class MigrationDataTransferMediumDetailsObjectStorageDetailsArgs:
    def __init__(__self__, *,
                 bucket: pulumi.Input[str],
                 namespace: pulumi.Input[str]):
        """
        :param pulumi.Input[str] bucket: (Updatable) Bucket name.
        :param pulumi.Input[str] namespace: (Updatable) Namespace name of the object store bucket.
        """
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter
    def bucket(self) -> pulumi.Input[str]:
        """
        (Updatable) Bucket name.
        """
        return pulumi.get(self, "bucket")

    @bucket.setter
    def bucket(self, value: pulumi.Input[str]):
        pulumi.set(self, "bucket", value)

    @property
    @pulumi.getter
    def namespace(self) -> pulumi.Input[str]:
        """
        (Updatable) Namespace name of the object store bucket.
        """
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: pulumi.Input[str]):
        pulumi.set(self, "namespace", value)


@pulumi.input_type
class MigrationDatapumpSettingsArgs:
    def __init__(__self__, *,
                 data_pump_parameters: Optional[pulumi.Input['MigrationDatapumpSettingsDataPumpParametersArgs']] = None,
                 export_directory_object: Optional[pulumi.Input['MigrationDatapumpSettingsExportDirectoryObjectArgs']] = None,
                 import_directory_object: Optional[pulumi.Input['MigrationDatapumpSettingsImportDirectoryObjectArgs']] = None,
                 job_mode: Optional[pulumi.Input[str]] = None,
                 metadata_remaps: Optional[pulumi.Input[Sequence[pulumi.Input['MigrationDatapumpSettingsMetadataRemapArgs']]]] = None):
        """
        :param pulumi.Input['MigrationDatapumpSettingsDataPumpParametersArgs'] data_pump_parameters: (Updatable) Optional parameters for Datapump Export and Import. Refer to https://docs.oracle.com/en/database/oracle/oracle-database/19/arpls/ODMS_DATAPUMP.html#GUID-62324358-2F26-4A94-B69F-1075D53FA96D__BABDECJE
        :param pulumi.Input['MigrationDatapumpSettingsExportDirectoryObjectArgs'] export_directory_object: (Updatable) Directory object details, used to define either import or export directory objects in Data Pump Settings. Import directory is required for Non-Autonomous target connections. If specified for an autonomous target, it will show an error. Export directory will error if there are database link details specified.
        :param pulumi.Input['MigrationDatapumpSettingsImportDirectoryObjectArgs'] import_directory_object: (Updatable) Directory object details, used to define either import or export directory objects in Data Pump Settings. Import directory is required for Non-Autonomous target connections. If specified for an autonomous target, it will show an error. Export directory will error if there are database link details specified.
        :param pulumi.Input[str] job_mode: (Updatable) DataPump job mode. Refer to docs.oracle.com/en/database/oracle/oracle-database/19/arpls/ODMS_DATAPUMP.html#GUID-92C2CB46-8BC9-414D-B62E-79CD788C1E62__BABBDEHD
        :param pulumi.Input[Sequence[pulumi.Input['MigrationDatapumpSettingsMetadataRemapArgs']]] metadata_remaps: (Updatable) Defines remapping to be applied to objects as they are processed. Refer to https://docs.oracle.com/en/database/oracle/oracle-database/19/arpls/ODMS_DATAPUMP.html#GUID-0FC32790-91E6-4781-87A3-229DE024CB3D.
        """
        if data_pump_parameters is not None:
            pulumi.set(__self__, "data_pump_parameters", data_pump_parameters)
        if export_directory_object is not None:
            pulumi.set(__self__, "export_directory_object", export_directory_object)
        if import_directory_object is not None:
            pulumi.set(__self__, "import_directory_object", import_directory_object)
        if job_mode is not None:
            pulumi.set(__self__, "job_mode", job_mode)
        if metadata_remaps is not None:
            pulumi.set(__self__, "metadata_remaps", metadata_remaps)

    @property
    @pulumi.getter(name="dataPumpParameters")
    def data_pump_parameters(self) -> Optional[pulumi.Input['MigrationDatapumpSettingsDataPumpParametersArgs']]:
        """
        (Updatable) Optional parameters for Datapump Export and Import. Refer to https://docs.oracle.com/en/database/oracle/oracle-database/19/arpls/ODMS_DATAPUMP.html#GUID-62324358-2F26-4A94-B69F-1075D53FA96D__BABDECJE
        """
        return pulumi.get(self, "data_pump_parameters")

    @data_pump_parameters.setter
    def data_pump_parameters(self, value: Optional[pulumi.Input['MigrationDatapumpSettingsDataPumpParametersArgs']]):
        pulumi.set(self, "data_pump_parameters", value)

    @property
    @pulumi.getter(name="exportDirectoryObject")
    def export_directory_object(self) -> Optional[pulumi.Input['MigrationDatapumpSettingsExportDirectoryObjectArgs']]:
        """
        (Updatable) Directory object details, used to define either import or export directory objects in Data Pump Settings. Import directory is required for Non-Autonomous target connections. If specified for an autonomous target, it will show an error. Export directory will error if there are database link details specified.
        """
        return pulumi.get(self, "export_directory_object")

    @export_directory_object.setter
    def export_directory_object(self, value: Optional[pulumi.Input['MigrationDatapumpSettingsExportDirectoryObjectArgs']]):
        pulumi.set(self, "export_directory_object", value)

    @property
    @pulumi.getter(name="importDirectoryObject")
    def import_directory_object(self) -> Optional[pulumi.Input['MigrationDatapumpSettingsImportDirectoryObjectArgs']]:
        """
        (Updatable) Directory object details, used to define either import or export directory objects in Data Pump Settings. Import directory is required for Non-Autonomous target connections. If specified for an autonomous target, it will show an error. Export directory will error if there are database link details specified.
        """
        return pulumi.get(self, "import_directory_object")

    @import_directory_object.setter
    def import_directory_object(self, value: Optional[pulumi.Input['MigrationDatapumpSettingsImportDirectoryObjectArgs']]):
        pulumi.set(self, "import_directory_object", value)

    @property
    @pulumi.getter(name="jobMode")
    def job_mode(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) DataPump job mode. Refer to docs.oracle.com/en/database/oracle/oracle-database/19/arpls/ODMS_DATAPUMP.html#GUID-92C2CB46-8BC9-414D-B62E-79CD788C1E62__BABBDEHD
        """
        return pulumi.get(self, "job_mode")

    @job_mode.setter
    def job_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "job_mode", value)

    @property
    @pulumi.getter(name="metadataRemaps")
    def metadata_remaps(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['MigrationDatapumpSettingsMetadataRemapArgs']]]]:
        """
        (Updatable) Defines remapping to be applied to objects as they are processed. Refer to https://docs.oracle.com/en/database/oracle/oracle-database/19/arpls/ODMS_DATAPUMP.html#GUID-0FC32790-91E6-4781-87A3-229DE024CB3D.
        """
        return pulumi.get(self, "metadata_remaps")

    @metadata_remaps.setter
    def metadata_remaps(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['MigrationDatapumpSettingsMetadataRemapArgs']]]]):
        pulumi.set(self, "metadata_remaps", value)


@pulumi.input_type
class MigrationDatapumpSettingsDataPumpParametersArgs:
    def __init__(__self__, *,
                 estimate: Optional[pulumi.Input[str]] = None,
                 exclude_parameters: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 export_parallelism_degree: Optional[pulumi.Input[int]] = None,
                 import_parallelism_degree: Optional[pulumi.Input[int]] = None,
                 is_cluster: Optional[pulumi.Input[bool]] = None,
                 table_exists_action: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] estimate: (Updatable) Estimate size of dumps that will be generated.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] exclude_parameters: (Updatable) Exclude paratemers for export and import.
        :param pulumi.Input[int] export_parallelism_degree: (Updatable) Maximum number of worker processes that can be used for a Datapump Export job.
        :param pulumi.Input[int] import_parallelism_degree: (Updatable) Maximum number of worker processes that can be used for a Datapump Import job. For an Autonomous Database, ODMS will automatically query its CPU core count and set this property.
        :param pulumi.Input[bool] is_cluster: (Updatable) False to force datapump worker process to run on one instance.
        :param pulumi.Input[str] table_exists_action: (Updatable) IMPORT: Specifies the action to be performed when data is loaded into a preexisting table.
        """
        if estimate is not None:
            pulumi.set(__self__, "estimate", estimate)
        if exclude_parameters is not None:
            pulumi.set(__self__, "exclude_parameters", exclude_parameters)
        if export_parallelism_degree is not None:
            pulumi.set(__self__, "export_parallelism_degree", export_parallelism_degree)
        if import_parallelism_degree is not None:
            pulumi.set(__self__, "import_parallelism_degree", import_parallelism_degree)
        if is_cluster is not None:
            pulumi.set(__self__, "is_cluster", is_cluster)
        if table_exists_action is not None:
            pulumi.set(__self__, "table_exists_action", table_exists_action)

    @property
    @pulumi.getter
    def estimate(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Estimate size of dumps that will be generated.
        """
        return pulumi.get(self, "estimate")

    @estimate.setter
    def estimate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "estimate", value)

    @property
    @pulumi.getter(name="excludeParameters")
    def exclude_parameters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        (Updatable) Exclude paratemers for export and import.
        """
        return pulumi.get(self, "exclude_parameters")

    @exclude_parameters.setter
    def exclude_parameters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "exclude_parameters", value)

    @property
    @pulumi.getter(name="exportParallelismDegree")
    def export_parallelism_degree(self) -> Optional[pulumi.Input[int]]:
        """
        (Updatable) Maximum number of worker processes that can be used for a Datapump Export job.
        """
        return pulumi.get(self, "export_parallelism_degree")

    @export_parallelism_degree.setter
    def export_parallelism_degree(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "export_parallelism_degree", value)

    @property
    @pulumi.getter(name="importParallelismDegree")
    def import_parallelism_degree(self) -> Optional[pulumi.Input[int]]:
        """
        (Updatable) Maximum number of worker processes that can be used for a Datapump Import job. For an Autonomous Database, ODMS will automatically query its CPU core count and set this property.
        """
        return pulumi.get(self, "import_parallelism_degree")

    @import_parallelism_degree.setter
    def import_parallelism_degree(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "import_parallelism_degree", value)

    @property
    @pulumi.getter(name="isCluster")
    def is_cluster(self) -> Optional[pulumi.Input[bool]]:
        """
        (Updatable) False to force datapump worker process to run on one instance.
        """
        return pulumi.get(self, "is_cluster")

    @is_cluster.setter
    def is_cluster(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_cluster", value)

    @property
    @pulumi.getter(name="tableExistsAction")
    def table_exists_action(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) IMPORT: Specifies the action to be performed when data is loaded into a preexisting table.
        """
        return pulumi.get(self, "table_exists_action")

    @table_exists_action.setter
    def table_exists_action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "table_exists_action", value)


@pulumi.input_type
class MigrationDatapumpSettingsExportDirectoryObjectArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 path: pulumi.Input[str]):
        """
        :param pulumi.Input[str] name: (Updatable) Name of directory object in database
        :param pulumi.Input[str] path: (Updatable) Absolute path of directory on database server
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "path", path)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        (Updatable) Name of directory object in database
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def path(self) -> pulumi.Input[str]:
        """
        (Updatable) Absolute path of directory on database server
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: pulumi.Input[str]):
        pulumi.set(self, "path", value)


@pulumi.input_type
class MigrationDatapumpSettingsImportDirectoryObjectArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 path: pulumi.Input[str]):
        """
        :param pulumi.Input[str] name: (Updatable) Name of directory object in database
        :param pulumi.Input[str] path: (Updatable) Absolute path of directory on database server
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "path", path)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        (Updatable) Name of directory object in database
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def path(self) -> pulumi.Input[str]:
        """
        (Updatable) Absolute path of directory on database server
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: pulumi.Input[str]):
        pulumi.set(self, "path", value)


@pulumi.input_type
class MigrationDatapumpSettingsMetadataRemapArgs:
    def __init__(__self__, *,
                 new_value: pulumi.Input[str],
                 old_value: pulumi.Input[str],
                 type: pulumi.Input[str]):
        """
        :param pulumi.Input[str] new_value: (Updatable) Specifies the new value that oldValue should be translated into.
        :param pulumi.Input[str] old_value: (Updatable) Specifies the value which needs to be reset.
        :param pulumi.Input[str] type: (Updatable) Migration type.
        """
        pulumi.set(__self__, "new_value", new_value)
        pulumi.set(__self__, "old_value", old_value)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="newValue")
    def new_value(self) -> pulumi.Input[str]:
        """
        (Updatable) Specifies the new value that oldValue should be translated into.
        """
        return pulumi.get(self, "new_value")

    @new_value.setter
    def new_value(self, value: pulumi.Input[str]):
        pulumi.set(self, "new_value", value)

    @property
    @pulumi.getter(name="oldValue")
    def old_value(self) -> pulumi.Input[str]:
        """
        (Updatable) Specifies the value which needs to be reset.
        """
        return pulumi.get(self, "old_value")

    @old_value.setter
    def old_value(self, value: pulumi.Input[str]):
        pulumi.set(self, "old_value", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        (Updatable) Migration type.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class MigrationExcludeObjectArgs:
    def __init__(__self__, *,
                 object: pulumi.Input[str],
                 owner: pulumi.Input[str]):
        """
        :param pulumi.Input[str] object: (Updatable) Name of the object (regular expression is allowed)
        :param pulumi.Input[str] owner: (Updatable) Owner of the object (regular expression is allowed)
        """
        pulumi.set(__self__, "object", object)
        pulumi.set(__self__, "owner", owner)

    @property
    @pulumi.getter
    def object(self) -> pulumi.Input[str]:
        """
        (Updatable) Name of the object (regular expression is allowed)
        """
        return pulumi.get(self, "object")

    @object.setter
    def object(self, value: pulumi.Input[str]):
        pulumi.set(self, "object", value)

    @property
    @pulumi.getter
    def owner(self) -> pulumi.Input[str]:
        """
        (Updatable) Owner of the object (regular expression is allowed)
        """
        return pulumi.get(self, "owner")

    @owner.setter
    def owner(self, value: pulumi.Input[str]):
        pulumi.set(self, "owner", value)


@pulumi.input_type
class MigrationGoldenGateDetailsArgs:
    def __init__(__self__, *,
                 hub: pulumi.Input['MigrationGoldenGateDetailsHubArgs'],
                 settings: Optional[pulumi.Input['MigrationGoldenGateDetailsSettingsArgs']] = None):
        """
        :param pulumi.Input['MigrationGoldenGateDetailsHubArgs'] hub: (Updatable) Details about Oracle GoldenGate Microservices. Required for online logical migration.
        :param pulumi.Input['MigrationGoldenGateDetailsSettingsArgs'] settings: (Updatable) Optional settings for Oracle GoldenGate processes
        """
        pulumi.set(__self__, "hub", hub)
        if settings is not None:
            pulumi.set(__self__, "settings", settings)

    @property
    @pulumi.getter
    def hub(self) -> pulumi.Input['MigrationGoldenGateDetailsHubArgs']:
        """
        (Updatable) Details about Oracle GoldenGate Microservices. Required for online logical migration.
        """
        return pulumi.get(self, "hub")

    @hub.setter
    def hub(self, value: pulumi.Input['MigrationGoldenGateDetailsHubArgs']):
        pulumi.set(self, "hub", value)

    @property
    @pulumi.getter
    def settings(self) -> Optional[pulumi.Input['MigrationGoldenGateDetailsSettingsArgs']]:
        """
        (Updatable) Optional settings for Oracle GoldenGate processes
        """
        return pulumi.get(self, "settings")

    @settings.setter
    def settings(self, value: Optional[pulumi.Input['MigrationGoldenGateDetailsSettingsArgs']]):
        pulumi.set(self, "settings", value)


@pulumi.input_type
class MigrationGoldenGateDetailsHubArgs:
    def __init__(__self__, *,
                 rest_admin_credentials: pulumi.Input['MigrationGoldenGateDetailsHubRestAdminCredentialsArgs'],
                 source_db_admin_credentials: pulumi.Input['MigrationGoldenGateDetailsHubSourceDbAdminCredentialsArgs'],
                 source_microservices_deployment_name: pulumi.Input[str],
                 target_db_admin_credentials: pulumi.Input['MigrationGoldenGateDetailsHubTargetDbAdminCredentialsArgs'],
                 target_microservices_deployment_name: pulumi.Input[str],
                 url: pulumi.Input[str],
                 compute_id: Optional[pulumi.Input[str]] = None,
                 source_container_db_admin_credentials: Optional[pulumi.Input['MigrationGoldenGateDetailsHubSourceContainerDbAdminCredentialsArgs']] = None):
        """
        :param pulumi.Input['MigrationGoldenGateDetailsHubRestAdminCredentialsArgs'] rest_admin_credentials: (Updatable) Database Admin Credentials details.
        :param pulumi.Input['MigrationGoldenGateDetailsHubSourceDbAdminCredentialsArgs'] source_db_admin_credentials: (Updatable) Database Admin Credentials details.
        :param pulumi.Input[str] source_microservices_deployment_name: (Updatable) Name of Microservices deployment to operate on source DB
        :param pulumi.Input['MigrationGoldenGateDetailsHubTargetDbAdminCredentialsArgs'] target_db_admin_credentials: (Updatable) Database Admin Credentials details.
        :param pulumi.Input[str] target_microservices_deployment_name: (Updatable) Name of Microservices deployment to operate on target DB
        :param pulumi.Input[str] url: (Updatable) Oracle GoldenGate hub's REST endpoint. Refer to https://docs.oracle.com/en/middleware/goldengate/core/19.1/securing/network.html#GUID-A709DA55-111D-455E-8942-C9BDD1E38CAA
        :param pulumi.Input[str] compute_id: (Updatable) OCID of Golden Gate compute instance.
        :param pulumi.Input['MigrationGoldenGateDetailsHubSourceContainerDbAdminCredentialsArgs'] source_container_db_admin_credentials: (Updatable) Database Admin Credentials details.
        """
        pulumi.set(__self__, "rest_admin_credentials", rest_admin_credentials)
        pulumi.set(__self__, "source_db_admin_credentials", source_db_admin_credentials)
        pulumi.set(__self__, "source_microservices_deployment_name", source_microservices_deployment_name)
        pulumi.set(__self__, "target_db_admin_credentials", target_db_admin_credentials)
        pulumi.set(__self__, "target_microservices_deployment_name", target_microservices_deployment_name)
        pulumi.set(__self__, "url", url)
        if compute_id is not None:
            pulumi.set(__self__, "compute_id", compute_id)
        if source_container_db_admin_credentials is not None:
            pulumi.set(__self__, "source_container_db_admin_credentials", source_container_db_admin_credentials)

    @property
    @pulumi.getter(name="restAdminCredentials")
    def rest_admin_credentials(self) -> pulumi.Input['MigrationGoldenGateDetailsHubRestAdminCredentialsArgs']:
        """
        (Updatable) Database Admin Credentials details.
        """
        return pulumi.get(self, "rest_admin_credentials")

    @rest_admin_credentials.setter
    def rest_admin_credentials(self, value: pulumi.Input['MigrationGoldenGateDetailsHubRestAdminCredentialsArgs']):
        pulumi.set(self, "rest_admin_credentials", value)

    @property
    @pulumi.getter(name="sourceDbAdminCredentials")
    def source_db_admin_credentials(self) -> pulumi.Input['MigrationGoldenGateDetailsHubSourceDbAdminCredentialsArgs']:
        """
        (Updatable) Database Admin Credentials details.
        """
        return pulumi.get(self, "source_db_admin_credentials")

    @source_db_admin_credentials.setter
    def source_db_admin_credentials(self, value: pulumi.Input['MigrationGoldenGateDetailsHubSourceDbAdminCredentialsArgs']):
        pulumi.set(self, "source_db_admin_credentials", value)

    @property
    @pulumi.getter(name="sourceMicroservicesDeploymentName")
    def source_microservices_deployment_name(self) -> pulumi.Input[str]:
        """
        (Updatable) Name of Microservices deployment to operate on source DB
        """
        return pulumi.get(self, "source_microservices_deployment_name")

    @source_microservices_deployment_name.setter
    def source_microservices_deployment_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_microservices_deployment_name", value)

    @property
    @pulumi.getter(name="targetDbAdminCredentials")
    def target_db_admin_credentials(self) -> pulumi.Input['MigrationGoldenGateDetailsHubTargetDbAdminCredentialsArgs']:
        """
        (Updatable) Database Admin Credentials details.
        """
        return pulumi.get(self, "target_db_admin_credentials")

    @target_db_admin_credentials.setter
    def target_db_admin_credentials(self, value: pulumi.Input['MigrationGoldenGateDetailsHubTargetDbAdminCredentialsArgs']):
        pulumi.set(self, "target_db_admin_credentials", value)

    @property
    @pulumi.getter(name="targetMicroservicesDeploymentName")
    def target_microservices_deployment_name(self) -> pulumi.Input[str]:
        """
        (Updatable) Name of Microservices deployment to operate on target DB
        """
        return pulumi.get(self, "target_microservices_deployment_name")

    @target_microservices_deployment_name.setter
    def target_microservices_deployment_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "target_microservices_deployment_name", value)

    @property
    @pulumi.getter
    def url(self) -> pulumi.Input[str]:
        """
        (Updatable) Oracle GoldenGate hub's REST endpoint. Refer to https://docs.oracle.com/en/middleware/goldengate/core/19.1/securing/network.html#GUID-A709DA55-111D-455E-8942-C9BDD1E38CAA
        """
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: pulumi.Input[str]):
        pulumi.set(self, "url", value)

    @property
    @pulumi.getter(name="computeId")
    def compute_id(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) OCID of Golden Gate compute instance.
        """
        return pulumi.get(self, "compute_id")

    @compute_id.setter
    def compute_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "compute_id", value)

    @property
    @pulumi.getter(name="sourceContainerDbAdminCredentials")
    def source_container_db_admin_credentials(self) -> Optional[pulumi.Input['MigrationGoldenGateDetailsHubSourceContainerDbAdminCredentialsArgs']]:
        """
        (Updatable) Database Admin Credentials details.
        """
        return pulumi.get(self, "source_container_db_admin_credentials")

    @source_container_db_admin_credentials.setter
    def source_container_db_admin_credentials(self, value: Optional[pulumi.Input['MigrationGoldenGateDetailsHubSourceContainerDbAdminCredentialsArgs']]):
        pulumi.set(self, "source_container_db_admin_credentials", value)


@pulumi.input_type
class MigrationGoldenGateDetailsHubRestAdminCredentialsArgs:
    def __init__(__self__, *,
                 password: pulumi.Input[str],
                 username: pulumi.Input[str]):
        """
        :param pulumi.Input[str] password: (Updatable) Admin password
        :param pulumi.Input[str] username: (Updatable) Admin username
        """
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def password(self) -> pulumi.Input[str]:
        """
        (Updatable) Admin password
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: pulumi.Input[str]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def username(self) -> pulumi.Input[str]:
        """
        (Updatable) Admin username
        """
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: pulumi.Input[str]):
        pulumi.set(self, "username", value)


@pulumi.input_type
class MigrationGoldenGateDetailsHubSourceContainerDbAdminCredentialsArgs:
    def __init__(__self__, *,
                 password: pulumi.Input[str],
                 username: pulumi.Input[str]):
        """
        :param pulumi.Input[str] password: (Updatable) Admin password
        :param pulumi.Input[str] username: (Updatable) Admin username
        """
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def password(self) -> pulumi.Input[str]:
        """
        (Updatable) Admin password
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: pulumi.Input[str]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def username(self) -> pulumi.Input[str]:
        """
        (Updatable) Admin username
        """
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: pulumi.Input[str]):
        pulumi.set(self, "username", value)


@pulumi.input_type
class MigrationGoldenGateDetailsHubSourceDbAdminCredentialsArgs:
    def __init__(__self__, *,
                 password: pulumi.Input[str],
                 username: pulumi.Input[str]):
        """
        :param pulumi.Input[str] password: (Updatable) Admin password
        :param pulumi.Input[str] username: (Updatable) Admin username
        """
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def password(self) -> pulumi.Input[str]:
        """
        (Updatable) Admin password
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: pulumi.Input[str]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def username(self) -> pulumi.Input[str]:
        """
        (Updatable) Admin username
        """
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: pulumi.Input[str]):
        pulumi.set(self, "username", value)


@pulumi.input_type
class MigrationGoldenGateDetailsHubTargetDbAdminCredentialsArgs:
    def __init__(__self__, *,
                 password: pulumi.Input[str],
                 username: pulumi.Input[str]):
        """
        :param pulumi.Input[str] password: (Updatable) Admin password
        :param pulumi.Input[str] username: (Updatable) Admin username
        """
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def password(self) -> pulumi.Input[str]:
        """
        (Updatable) Admin password
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: pulumi.Input[str]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def username(self) -> pulumi.Input[str]:
        """
        (Updatable) Admin username
        """
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: pulumi.Input[str]):
        pulumi.set(self, "username", value)


@pulumi.input_type
class MigrationGoldenGateDetailsSettingsArgs:
    def __init__(__self__, *,
                 acceptable_lag: Optional[pulumi.Input[int]] = None,
                 extract: Optional[pulumi.Input['MigrationGoldenGateDetailsSettingsExtractArgs']] = None,
                 replicat: Optional[pulumi.Input['MigrationGoldenGateDetailsSettingsReplicatArgs']] = None):
        """
        :param pulumi.Input[int] acceptable_lag: (Updatable) ODMS will monitor GoldenGate end-to-end latency until the lag time is lower than the specified value in seconds.
        :param pulumi.Input['MigrationGoldenGateDetailsSettingsExtractArgs'] extract: (Updatable) Parameters for Extract processes.
        :param pulumi.Input['MigrationGoldenGateDetailsSettingsReplicatArgs'] replicat: (Updatable) Parameters for Replicat processes.
        """
        if acceptable_lag is not None:
            pulumi.set(__self__, "acceptable_lag", acceptable_lag)
        if extract is not None:
            pulumi.set(__self__, "extract", extract)
        if replicat is not None:
            pulumi.set(__self__, "replicat", replicat)

    @property
    @pulumi.getter(name="acceptableLag")
    def acceptable_lag(self) -> Optional[pulumi.Input[int]]:
        """
        (Updatable) ODMS will monitor GoldenGate end-to-end latency until the lag time is lower than the specified value in seconds.
        """
        return pulumi.get(self, "acceptable_lag")

    @acceptable_lag.setter
    def acceptable_lag(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "acceptable_lag", value)

    @property
    @pulumi.getter
    def extract(self) -> Optional[pulumi.Input['MigrationGoldenGateDetailsSettingsExtractArgs']]:
        """
        (Updatable) Parameters for Extract processes.
        """
        return pulumi.get(self, "extract")

    @extract.setter
    def extract(self, value: Optional[pulumi.Input['MigrationGoldenGateDetailsSettingsExtractArgs']]):
        pulumi.set(self, "extract", value)

    @property
    @pulumi.getter
    def replicat(self) -> Optional[pulumi.Input['MigrationGoldenGateDetailsSettingsReplicatArgs']]:
        """
        (Updatable) Parameters for Replicat processes.
        """
        return pulumi.get(self, "replicat")

    @replicat.setter
    def replicat(self, value: Optional[pulumi.Input['MigrationGoldenGateDetailsSettingsReplicatArgs']]):
        pulumi.set(self, "replicat", value)


@pulumi.input_type
class MigrationGoldenGateDetailsSettingsExtractArgs:
    def __init__(__self__, *,
                 long_trans_duration: Optional[pulumi.Input[int]] = None,
                 performance_profile: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[int] long_trans_duration: (Updatable) Length of time (in seconds) that a transaction can be open before Extract generates a warning message that the transaction is long-running. If not specified, Extract will not generate a warning on long-running transactions.
        :param pulumi.Input[str] performance_profile: (Updatable) Extract performance.
        """
        if long_trans_duration is not None:
            pulumi.set(__self__, "long_trans_duration", long_trans_duration)
        if performance_profile is not None:
            pulumi.set(__self__, "performance_profile", performance_profile)

    @property
    @pulumi.getter(name="longTransDuration")
    def long_trans_duration(self) -> Optional[pulumi.Input[int]]:
        """
        (Updatable) Length of time (in seconds) that a transaction can be open before Extract generates a warning message that the transaction is long-running. If not specified, Extract will not generate a warning on long-running transactions.
        """
        return pulumi.get(self, "long_trans_duration")

    @long_trans_duration.setter
    def long_trans_duration(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "long_trans_duration", value)

    @property
    @pulumi.getter(name="performanceProfile")
    def performance_profile(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Extract performance.
        """
        return pulumi.get(self, "performance_profile")

    @performance_profile.setter
    def performance_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "performance_profile", value)


@pulumi.input_type
class MigrationGoldenGateDetailsSettingsReplicatArgs:
    def __init__(__self__, *,
                 map_parallelism: Optional[pulumi.Input[int]] = None,
                 max_apply_parallelism: Optional[pulumi.Input[int]] = None,
                 min_apply_parallelism: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] map_parallelism: (Updatable) Number of threads used to read trail files (valid for Parallel Replicat)
        :param pulumi.Input[int] max_apply_parallelism: (Updatable) Defines the range in which the Replicat automatically adjusts its apply parallelism (valid for Parallel Replicat)
        :param pulumi.Input[int] min_apply_parallelism: (Updatable) Defines the range in which the Replicat automatically adjusts its apply parallelism (valid for Parallel Replicat)
        """
        if map_parallelism is not None:
            pulumi.set(__self__, "map_parallelism", map_parallelism)
        if max_apply_parallelism is not None:
            pulumi.set(__self__, "max_apply_parallelism", max_apply_parallelism)
        if min_apply_parallelism is not None:
            pulumi.set(__self__, "min_apply_parallelism", min_apply_parallelism)

    @property
    @pulumi.getter(name="mapParallelism")
    def map_parallelism(self) -> Optional[pulumi.Input[int]]:
        """
        (Updatable) Number of threads used to read trail files (valid for Parallel Replicat)
        """
        return pulumi.get(self, "map_parallelism")

    @map_parallelism.setter
    def map_parallelism(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "map_parallelism", value)

    @property
    @pulumi.getter(name="maxApplyParallelism")
    def max_apply_parallelism(self) -> Optional[pulumi.Input[int]]:
        """
        (Updatable) Defines the range in which the Replicat automatically adjusts its apply parallelism (valid for Parallel Replicat)
        """
        return pulumi.get(self, "max_apply_parallelism")

    @max_apply_parallelism.setter
    def max_apply_parallelism(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_apply_parallelism", value)

    @property
    @pulumi.getter(name="minApplyParallelism")
    def min_apply_parallelism(self) -> Optional[pulumi.Input[int]]:
        """
        (Updatable) Defines the range in which the Replicat automatically adjusts its apply parallelism (valid for Parallel Replicat)
        """
        return pulumi.get(self, "min_apply_parallelism")

    @min_apply_parallelism.setter
    def min_apply_parallelism(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "min_apply_parallelism", value)


@pulumi.input_type
class MigrationVaultDetailsArgs:
    def __init__(__self__, *,
                 compartment_id: pulumi.Input[str],
                 key_id: pulumi.Input[str],
                 vault_id: pulumi.Input[str]):
        """
        :param pulumi.Input[str] compartment_id: (Updatable) OCID of the compartment where the secret containing the credentials will be created.
        :param pulumi.Input[str] key_id: (Updatable) OCID of the vault encryption key
        :param pulumi.Input[str] vault_id: (Updatable) OCID of the vault
        """
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "key_id", key_id)
        pulumi.set(__self__, "vault_id", vault_id)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> pulumi.Input[str]:
        """
        (Updatable) OCID of the compartment where the secret containing the credentials will be created.
        """
        return pulumi.get(self, "compartment_id")

    @compartment_id.setter
    def compartment_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "compartment_id", value)

    @property
    @pulumi.getter(name="keyId")
    def key_id(self) -> pulumi.Input[str]:
        """
        (Updatable) OCID of the vault encryption key
        """
        return pulumi.get(self, "key_id")

    @key_id.setter
    def key_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "key_id", value)

    @property
    @pulumi.getter(name="vaultId")
    def vault_id(self) -> pulumi.Input[str]:
        """
        (Updatable) OCID of the vault
        """
        return pulumi.get(self, "vault_id")

    @vault_id.setter
    def vault_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "vault_id", value)


@pulumi.input_type
class GetAgentImagesFilterArgs:
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Sequence[str]):
        pulumi.set(self, "values", value)

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")

    @regex.setter
    def regex(self, value: Optional[bool]):
        pulumi.set(self, "regex", value)


@pulumi.input_type
class GetAgentsFilterArgs:
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Sequence[str]):
        pulumi.set(self, "values", value)

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")

    @regex.setter
    def regex(self, value: Optional[bool]):
        pulumi.set(self, "regex", value)


@pulumi.input_type
class GetConnectionsFilterArgs:
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Sequence[str]):
        pulumi.set(self, "values", value)

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")

    @regex.setter
    def regex(self, value: Optional[bool]):
        pulumi.set(self, "regex", value)


@pulumi.input_type
class GetJobsFilterArgs:
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        """
        :param str name: Phase name
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Phase name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Sequence[str]):
        pulumi.set(self, "values", value)

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")

    @regex.setter
    def regex(self, value: Optional[bool]):
        pulumi.set(self, "regex", value)


@pulumi.input_type
class GetMigrationsFilterArgs:
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        """
        :param str name: Name of directory object in database
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of directory object in database
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Sequence[str]):
        pulumi.set(self, "values", value)

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")

    @regex.setter
    def regex(self, value: Optional[bool]):
        pulumi.set(self, "regex", value)


