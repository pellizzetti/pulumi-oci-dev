# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetJobsResult',
    'AwaitableGetJobsResult',
    'get_jobs',
]

@pulumi.output_type
class GetJobsResult:
    """
    A collection of values returned by getJobs.
    """
    def __init__(__self__, display_name=None, filters=None, id=None, job_collections=None, migration_id=None, state=None):
        if display_name and not isinstance(display_name, str):
            raise TypeError("Expected argument 'display_name' to be a str")
        pulumi.set(__self__, "display_name", display_name)
        if filters and not isinstance(filters, list):
            raise TypeError("Expected argument 'filters' to be a list")
        pulumi.set(__self__, "filters", filters)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if job_collections and not isinstance(job_collections, list):
            raise TypeError("Expected argument 'job_collections' to be a list")
        pulumi.set(__self__, "job_collections", job_collections)
        if migration_id and not isinstance(migration_id, str):
            raise TypeError("Expected argument 'migration_id' to be a str")
        pulumi.set(__self__, "migration_id", migration_id)
        if state and not isinstance(state, str):
            raise TypeError("Expected argument 'state' to be a str")
        pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        """
        Name of the job.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def filters(self) -> Optional[Sequence['outputs.GetJobsFilterResult']]:
        return pulumi.get(self, "filters")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="jobCollections")
    def job_collections(self) -> Sequence['outputs.GetJobsJobCollectionResult']:
        """
        The list of job_collection.
        """
        return pulumi.get(self, "job_collections")

    @property
    @pulumi.getter(name="migrationId")
    def migration_id(self) -> str:
        """
        The OCID of the Migration that this job belongs to.
        """
        return pulumi.get(self, "migration_id")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        """
        The current state of the migration job.
        """
        return pulumi.get(self, "state")


class AwaitableGetJobsResult(GetJobsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetJobsResult(
            display_name=self.display_name,
            filters=self.filters,
            id=self.id,
            job_collections=self.job_collections,
            migration_id=self.migration_id,
            state=self.state)


def get_jobs(display_name: Optional[str] = None,
             filters: Optional[Sequence[pulumi.InputType['GetJobsFilterArgs']]] = None,
             migration_id: Optional[str] = None,
             state: Optional[str] = None,
             opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetJobsResult:
    """
    This data source provides the list of Jobs in Oracle Cloud Infrastructure Database Migration service.

    List all the names of the Migration jobs associated to the specified
    migration site.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_oci as oci

    test_jobs = oci.databasemigration.get_jobs(migration_id=oci_database_migration_migration["test_migration"]["id"],
        display_name=var["job_display_name"],
        state=var["job_state"])
    ```


    :param str display_name: A filter to return only resources that match the entire display name given.
    :param str migration_id: The ID of the migration in which to list resources.
    :param str state: The lifecycle state of the Migration Job.
    """
    __args__ = dict()
    __args__['displayName'] = display_name
    __args__['filters'] = filters
    __args__['migrationId'] = migration_id
    __args__['state'] = state
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
    __ret__ = pulumi.runtime.invoke('oci:databasemigration/getJobs:getJobs', __args__, opts=opts, typ=GetJobsResult).value

    return AwaitableGetJobsResult(
        display_name=__ret__.display_name,
        filters=__ret__.filters,
        id=__ret__.id,
        job_collections=__ret__.job_collections,
        migration_id=__ret__.migration_id,
        state=__ret__.state)
