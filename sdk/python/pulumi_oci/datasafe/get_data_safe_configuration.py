# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'GetDataSafeConfigurationResult',
    'AwaitableGetDataSafeConfigurationResult',
    'get_data_safe_configuration',
]

@pulumi.output_type
class GetDataSafeConfigurationResult:
    """
    A collection of values returned by getDataSafeConfiguration.
    """
    def __init__(__self__, compartment_id=None, id=None, is_enabled=None, state=None, time_enabled=None, url=None):
        if compartment_id and not isinstance(compartment_id, str):
            raise TypeError("Expected argument 'compartment_id' to be a str")
        pulumi.set(__self__, "compartment_id", compartment_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if is_enabled and not isinstance(is_enabled, bool):
            raise TypeError("Expected argument 'is_enabled' to be a bool")
        pulumi.set(__self__, "is_enabled", is_enabled)
        if state and not isinstance(state, str):
            raise TypeError("Expected argument 'state' to be a str")
        pulumi.set(__self__, "state", state)
        if time_enabled and not isinstance(time_enabled, str):
            raise TypeError("Expected argument 'time_enabled' to be a str")
        pulumi.set(__self__, "time_enabled", time_enabled)
        if url and not isinstance(url, str):
            raise TypeError("Expected argument 'url' to be a str")
        pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> str:
        """
        The OCID of the tenancy used to enable Data Safe.
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> bool:
        """
        Indicates if Data Safe is enabled.
        """
        return pulumi.get(self, "is_enabled")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        The current state of Data Safe.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="timeEnabled")
    def time_enabled(self) -> str:
        """
        The date and time Data Safe was enabled, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
        """
        return pulumi.get(self, "time_enabled")

    @property
    @pulumi.getter
    def url(self) -> str:
        """
        The URL of the Data Safe service.
        """
        return pulumi.get(self, "url")


class AwaitableGetDataSafeConfigurationResult(GetDataSafeConfigurationResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetDataSafeConfigurationResult(
            compartment_id=self.compartment_id,
            id=self.id,
            is_enabled=self.is_enabled,
            state=self.state,
            time_enabled=self.time_enabled,
            url=self.url)


def get_data_safe_configuration(compartment_id: Optional[str] = None,
                                opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetDataSafeConfigurationResult:
    """
    This data source provides details about a specific Data Safe Configuration resource in Oracle Cloud Infrastructure Data Safe service.

    Gets the details of the Data Safe configuration.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_oci as oci

    test_data_safe_configuration = oci.datasafe.get_data_safe_configuration(compartment_id=var["compartment_id"])
    ```


    :param str compartment_id: A filter to return only resources that match the specified compartment OCID.
    """
    __args__ = dict()
    __args__['compartmentId'] = compartment_id
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
    __ret__ = pulumi.runtime.invoke('oci:datasafe/getDataSafeConfiguration:getDataSafeConfiguration', __args__, opts=opts, typ=GetDataSafeConfigurationResult).value

    return AwaitableGetDataSafeConfigurationResult(
        compartment_id=__ret__.compartment_id,
        id=__ret__.id,
        is_enabled=__ret__.is_enabled,
        state=__ret__.state,
        time_enabled=__ret__.time_enabled,
        url=__ret__.url)
