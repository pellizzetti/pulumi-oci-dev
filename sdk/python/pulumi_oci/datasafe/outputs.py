# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'TargetDatabaseConnectionOption',
    'TargetDatabaseCredentials',
    'TargetDatabaseDatabaseDetails',
    'TargetDatabaseTlsConfig',
    'GetDataSafePrivateEndpointsDataSafePrivateEndpointResult',
    'GetDataSafePrivateEndpointsFilterResult',
    'GetOnPremConnectorsFilterResult',
    'GetOnPremConnectorsOnPremConnectorResult',
    'GetTargetDatabaseConnectionOptionResult',
    'GetTargetDatabaseCredentialsResult',
    'GetTargetDatabaseDatabaseDetailsResult',
    'GetTargetDatabaseTlsConfigResult',
    'GetTargetDatabasesFilterResult',
    'GetTargetDatabasesTargetDatabaseResult',
    'GetTargetDatabasesTargetDatabaseConnectionOptionResult',
    'GetTargetDatabasesTargetDatabaseCredentialsResult',
    'GetTargetDatabasesTargetDatabaseDatabaseDetailsResult',
    'GetTargetDatabasesTargetDatabaseTlsConfigResult',
]

@pulumi.output_type
class TargetDatabaseConnectionOption(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "connectionType":
            suggest = "connection_type"
        elif key == "datasafePrivateEndpointId":
            suggest = "datasafe_private_endpoint_id"
        elif key == "onPremConnectorId":
            suggest = "on_prem_connector_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TargetDatabaseConnectionOption. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TargetDatabaseConnectionOption.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TargetDatabaseConnectionOption.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 connection_type: str,
                 datasafe_private_endpoint_id: Optional[str] = None,
                 on_prem_connector_id: Optional[str] = None):
        """
        :param str connection_type: (Updatable) The connection type used to connect to the database. Allowed values:
               * PRIVATE_ENDPOINT - Represents connection through private endpoint in Data Safe.
               * ONPREM_CONNECTOR - Represents connection through on-premises connector in Data Safe.
        :param str datasafe_private_endpoint_id: (Updatable) The OCID of the Data Safe private endpoint.
        :param str on_prem_connector_id: (Updatable) The OCID of the on-premises connector.
        """
        pulumi.set(__self__, "connection_type", connection_type)
        if datasafe_private_endpoint_id is not None:
            pulumi.set(__self__, "datasafe_private_endpoint_id", datasafe_private_endpoint_id)
        if on_prem_connector_id is not None:
            pulumi.set(__self__, "on_prem_connector_id", on_prem_connector_id)

    @property
    @pulumi.getter(name="connectionType")
    def connection_type(self) -> str:
        """
        (Updatable) The connection type used to connect to the database. Allowed values:
        * PRIVATE_ENDPOINT - Represents connection through private endpoint in Data Safe.
        * ONPREM_CONNECTOR - Represents connection through on-premises connector in Data Safe.
        """
        return pulumi.get(self, "connection_type")

    @property
    @pulumi.getter(name="datasafePrivateEndpointId")
    def datasafe_private_endpoint_id(self) -> Optional[str]:
        """
        (Updatable) The OCID of the Data Safe private endpoint.
        """
        return pulumi.get(self, "datasafe_private_endpoint_id")

    @property
    @pulumi.getter(name="onPremConnectorId")
    def on_prem_connector_id(self) -> Optional[str]:
        """
        (Updatable) The OCID of the on-premises connector.
        """
        return pulumi.get(self, "on_prem_connector_id")


@pulumi.output_type
class TargetDatabaseCredentials(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "userName":
            suggest = "user_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TargetDatabaseCredentials. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TargetDatabaseCredentials.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TargetDatabaseCredentials.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 password: str,
                 user_name: str):
        """
        :param str password: (Updatable) The password of the database user.
        :param str user_name: (Updatable) The database user name.
        """
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "user_name", user_name)

    @property
    @pulumi.getter
    def password(self) -> str:
        """
        (Updatable) The password of the database user.
        """
        return pulumi.get(self, "password")

    @property
    @pulumi.getter(name="userName")
    def user_name(self) -> str:
        """
        (Updatable) The database user name.
        """
        return pulumi.get(self, "user_name")


@pulumi.output_type
class TargetDatabaseDatabaseDetails(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "databaseType":
            suggest = "database_type"
        elif key == "infrastructureType":
            suggest = "infrastructure_type"
        elif key == "autonomousDatabaseId":
            suggest = "autonomous_database_id"
        elif key == "dbSystemId":
            suggest = "db_system_id"
        elif key == "instanceId":
            suggest = "instance_id"
        elif key == "ipAddresses":
            suggest = "ip_addresses"
        elif key == "listenerPort":
            suggest = "listener_port"
        elif key == "serviceName":
            suggest = "service_name"
        elif key == "vmClusterId":
            suggest = "vm_cluster_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TargetDatabaseDatabaseDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TargetDatabaseDatabaseDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TargetDatabaseDatabaseDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 database_type: str,
                 infrastructure_type: str,
                 autonomous_database_id: Optional[str] = None,
                 db_system_id: Optional[str] = None,
                 instance_id: Optional[str] = None,
                 ip_addresses: Optional[Sequence[str]] = None,
                 listener_port: Optional[int] = None,
                 service_name: Optional[str] = None,
                 vm_cluster_id: Optional[str] = None):
        """
        :param str database_type: (Updatable) The database type.
        :param str infrastructure_type: (Updatable) The infrastructure type the database is running on.
        :param str autonomous_database_id: (Updatable) The OCID of the autonomous database registered as a target database in Data Safe.
        :param str db_system_id: (Updatable) The OCID of the cloud database system registered as a target database in Data Safe.
        :param str instance_id: (Updatable) The OCID of the compute instance on which the database is running.
        :param Sequence[str] ip_addresses: (Updatable) A List of either the IP Addresses or FQDN names of the database hosts.
        :param int listener_port: (Updatable) The port number of the database listener.
        :param str service_name: (Updatable) The service name of the database registered as target database.
        :param str vm_cluster_id: (Updatable) The OCID of the VM cluster in which the database is running.
        """
        pulumi.set(__self__, "database_type", database_type)
        pulumi.set(__self__, "infrastructure_type", infrastructure_type)
        if autonomous_database_id is not None:
            pulumi.set(__self__, "autonomous_database_id", autonomous_database_id)
        if db_system_id is not None:
            pulumi.set(__self__, "db_system_id", db_system_id)
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)
        if ip_addresses is not None:
            pulumi.set(__self__, "ip_addresses", ip_addresses)
        if listener_port is not None:
            pulumi.set(__self__, "listener_port", listener_port)
        if service_name is not None:
            pulumi.set(__self__, "service_name", service_name)
        if vm_cluster_id is not None:
            pulumi.set(__self__, "vm_cluster_id", vm_cluster_id)

    @property
    @pulumi.getter(name="databaseType")
    def database_type(self) -> str:
        """
        (Updatable) The database type.
        """
        return pulumi.get(self, "database_type")

    @property
    @pulumi.getter(name="infrastructureType")
    def infrastructure_type(self) -> str:
        """
        (Updatable) The infrastructure type the database is running on.
        """
        return pulumi.get(self, "infrastructure_type")

    @property
    @pulumi.getter(name="autonomousDatabaseId")
    def autonomous_database_id(self) -> Optional[str]:
        """
        (Updatable) The OCID of the autonomous database registered as a target database in Data Safe.
        """
        return pulumi.get(self, "autonomous_database_id")

    @property
    @pulumi.getter(name="dbSystemId")
    def db_system_id(self) -> Optional[str]:
        """
        (Updatable) The OCID of the cloud database system registered as a target database in Data Safe.
        """
        return pulumi.get(self, "db_system_id")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[str]:
        """
        (Updatable) The OCID of the compute instance on which the database is running.
        """
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter(name="ipAddresses")
    def ip_addresses(self) -> Optional[Sequence[str]]:
        """
        (Updatable) A List of either the IP Addresses or FQDN names of the database hosts.
        """
        return pulumi.get(self, "ip_addresses")

    @property
    @pulumi.getter(name="listenerPort")
    def listener_port(self) -> Optional[int]:
        """
        (Updatable) The port number of the database listener.
        """
        return pulumi.get(self, "listener_port")

    @property
    @pulumi.getter(name="serviceName")
    def service_name(self) -> Optional[str]:
        """
        (Updatable) The service name of the database registered as target database.
        """
        return pulumi.get(self, "service_name")

    @property
    @pulumi.getter(name="vmClusterId")
    def vm_cluster_id(self) -> Optional[str]:
        """
        (Updatable) The OCID of the VM cluster in which the database is running.
        """
        return pulumi.get(self, "vm_cluster_id")


@pulumi.output_type
class TargetDatabaseTlsConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "certificateStoreType":
            suggest = "certificate_store_type"
        elif key == "keyStoreContent":
            suggest = "key_store_content"
        elif key == "storePassword":
            suggest = "store_password"
        elif key == "trustStoreContent":
            suggest = "trust_store_content"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TargetDatabaseTlsConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TargetDatabaseTlsConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TargetDatabaseTlsConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 status: str,
                 certificate_store_type: Optional[str] = None,
                 key_store_content: Optional[str] = None,
                 store_password: Optional[str] = None,
                 trust_store_content: Optional[str] = None):
        """
        :param str status: (Updatable) Status to represent whether the database connection is TLS enabled or not.
        :param str certificate_store_type: (Updatable) The format of the certificate store.
        :param str key_store_content: (Updatable) Base64 encoded string of key store file content.
        :param str store_password: (Updatable) The password to read the trust store and key store files, if they are password protected.
        :param str trust_store_content: (Updatable) Base64 encoded string of trust store file content.
        """
        pulumi.set(__self__, "status", status)
        if certificate_store_type is not None:
            pulumi.set(__self__, "certificate_store_type", certificate_store_type)
        if key_store_content is not None:
            pulumi.set(__self__, "key_store_content", key_store_content)
        if store_password is not None:
            pulumi.set(__self__, "store_password", store_password)
        if trust_store_content is not None:
            pulumi.set(__self__, "trust_store_content", trust_store_content)

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        (Updatable) Status to represent whether the database connection is TLS enabled or not.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="certificateStoreType")
    def certificate_store_type(self) -> Optional[str]:
        """
        (Updatable) The format of the certificate store.
        """
        return pulumi.get(self, "certificate_store_type")

    @property
    @pulumi.getter(name="keyStoreContent")
    def key_store_content(self) -> Optional[str]:
        """
        (Updatable) Base64 encoded string of key store file content.
        """
        return pulumi.get(self, "key_store_content")

    @property
    @pulumi.getter(name="storePassword")
    def store_password(self) -> Optional[str]:
        """
        (Updatable) The password to read the trust store and key store files, if they are password protected.
        """
        return pulumi.get(self, "store_password")

    @property
    @pulumi.getter(name="trustStoreContent")
    def trust_store_content(self) -> Optional[str]:
        """
        (Updatable) Base64 encoded string of trust store file content.
        """
        return pulumi.get(self, "trust_store_content")


@pulumi.output_type
class GetDataSafePrivateEndpointsDataSafePrivateEndpointResult(dict):
    def __init__(__self__, *,
                 compartment_id: str,
                 defined_tags: Mapping[str, Any],
                 description: str,
                 display_name: str,
                 endpoint_fqdn: str,
                 freeform_tags: Mapping[str, Any],
                 id: str,
                 nsg_ids: Sequence[str],
                 private_endpoint_id: str,
                 private_endpoint_ip: str,
                 state: str,
                 subnet_id: str,
                 system_tags: Mapping[str, Any],
                 time_created: str,
                 vcn_id: str):
        """
        :param str compartment_id: A filter to return only resources that match the specified compartment OCID.
        :param Mapping[str, Any] defined_tags: Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm)  Example: `{"Operations.CostCenter": "42"}`
        :param str description: The description of the private endpoint.
        :param str display_name: A filter to return only resources that match the specified display name.
        :param str endpoint_fqdn: The three-label fully qualified domain name (FQDN) of the private endpoint. The customer VCN's DNS records are updated with this FQDN.
        :param Mapping[str, Any] freeform_tags: Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm)  Example: `{"Department": "Finance"}`
        :param str id: The OCID of the Data Safe private endpoint.
        :param Sequence[str] nsg_ids: The OCIDs of the network security groups that the private endpoint belongs to.
        :param str private_endpoint_id: The OCID of the underlying private endpoint.
        :param str private_endpoint_ip: The private IP address of the private endpoint.
        :param str state: A filter to return only resources that match the specified lifecycle state.
        :param str subnet_id: The OCID of the subnet.
        :param Mapping[str, Any] system_tags: System tags for this resource. Each key is predefined and scoped to a namespace. For more information, see Resource Tags. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        :param str time_created: The date and time the private endpoint was created, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
        :param str vcn_id: A filter to return only resources that match the specified VCN OCID.
        """
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "defined_tags", defined_tags)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "endpoint_fqdn", endpoint_fqdn)
        pulumi.set(__self__, "freeform_tags", freeform_tags)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "nsg_ids", nsg_ids)
        pulumi.set(__self__, "private_endpoint_id", private_endpoint_id)
        pulumi.set(__self__, "private_endpoint_ip", private_endpoint_ip)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "subnet_id", subnet_id)
        pulumi.set(__self__, "system_tags", system_tags)
        pulumi.set(__self__, "time_created", time_created)
        pulumi.set(__self__, "vcn_id", vcn_id)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> str:
        """
        A filter to return only resources that match the specified compartment OCID.
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Mapping[str, Any]:
        """
        Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm)  Example: `{"Operations.CostCenter": "42"}`
        """
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The description of the private endpoint.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        A filter to return only resources that match the specified display name.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="endpointFqdn")
    def endpoint_fqdn(self) -> str:
        """
        The three-label fully qualified domain name (FQDN) of the private endpoint. The customer VCN's DNS records are updated with this FQDN.
        """
        return pulumi.get(self, "endpoint_fqdn")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Mapping[str, Any]:
        """
        Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm)  Example: `{"Department": "Finance"}`
        """
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The OCID of the Data Safe private endpoint.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="nsgIds")
    def nsg_ids(self) -> Sequence[str]:
        """
        The OCIDs of the network security groups that the private endpoint belongs to.
        """
        return pulumi.get(self, "nsg_ids")

    @property
    @pulumi.getter(name="privateEndpointId")
    def private_endpoint_id(self) -> str:
        """
        The OCID of the underlying private endpoint.
        """
        return pulumi.get(self, "private_endpoint_id")

    @property
    @pulumi.getter(name="privateEndpointIp")
    def private_endpoint_ip(self) -> str:
        """
        The private IP address of the private endpoint.
        """
        return pulumi.get(self, "private_endpoint_ip")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        A filter to return only resources that match the specified lifecycle state.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> str:
        """
        The OCID of the subnet.
        """
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Mapping[str, Any]:
        """
        System tags for this resource. Each key is predefined and scoped to a namespace. For more information, see Resource Tags. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        """
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> str:
        """
        The date and time the private endpoint was created, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
        """
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="vcnId")
    def vcn_id(self) -> str:
        """
        A filter to return only resources that match the specified VCN OCID.
        """
        return pulumi.get(self, "vcn_id")


@pulumi.output_type
class GetDataSafePrivateEndpointsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetOnPremConnectorsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetOnPremConnectorsOnPremConnectorResult(dict):
    def __init__(__self__, *,
                 available_version: str,
                 compartment_id: str,
                 created_version: str,
                 defined_tags: Mapping[str, Any],
                 description: str,
                 display_name: str,
                 freeform_tags: Mapping[str, Any],
                 id: str,
                 lifecycle_details: str,
                 state: str,
                 system_tags: Mapping[str, Any],
                 time_created: str):
        """
        :param str available_version: Latest available version of the on-premises connector.
        :param str compartment_id: A filter to return only resources that match the specified compartment OCID.
        :param str created_version: Created version of the on-premises connector.
        :param Mapping[str, Any] defined_tags: Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm)  Example: `{"Operations.CostCenter": "42"}`
        :param str description: The description of the on-premises connector.
        :param str display_name: A filter to return only resources that match the specified display name.
        :param Mapping[str, Any] freeform_tags: Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm)  Example: `{"Department": "Finance"}`
        :param str id: The OCID of the on-premises connector.
        :param str lifecycle_details: Details about the current state of the on-premises connector.
        :param str state: The current state of the on-premises connector.
        :param Mapping[str, Any] system_tags: System tags for this resource. Each key is predefined and scoped to a namespace. For more information, see Resource Tags. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        :param str time_created: The date and time the on-premises connector was created, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
        """
        pulumi.set(__self__, "available_version", available_version)
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "created_version", created_version)
        pulumi.set(__self__, "defined_tags", defined_tags)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "freeform_tags", freeform_tags)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "system_tags", system_tags)
        pulumi.set(__self__, "time_created", time_created)

    @property
    @pulumi.getter(name="availableVersion")
    def available_version(self) -> str:
        """
        Latest available version of the on-premises connector.
        """
        return pulumi.get(self, "available_version")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> str:
        """
        A filter to return only resources that match the specified compartment OCID.
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="createdVersion")
    def created_version(self) -> str:
        """
        Created version of the on-premises connector.
        """
        return pulumi.get(self, "created_version")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Mapping[str, Any]:
        """
        Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm)  Example: `{"Operations.CostCenter": "42"}`
        """
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The description of the on-premises connector.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        A filter to return only resources that match the specified display name.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Mapping[str, Any]:
        """
        Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm)  Example: `{"Department": "Finance"}`
        """
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The OCID of the on-premises connector.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> str:
        """
        Details about the current state of the on-premises connector.
        """
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        The current state of the on-premises connector.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Mapping[str, Any]:
        """
        System tags for this resource. Each key is predefined and scoped to a namespace. For more information, see Resource Tags. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        """
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> str:
        """
        The date and time the on-premises connector was created, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
        """
        return pulumi.get(self, "time_created")


@pulumi.output_type
class GetTargetDatabaseConnectionOptionResult(dict):
    def __init__(__self__, *,
                 connection_type: str,
                 datasafe_private_endpoint_id: str,
                 on_prem_connector_id: str):
        """
        :param str connection_type: The connection type used to connect to the database. Allowed values:
               * PRIVATE_ENDPOINT - Represents connection through private endpoint in Data Safe.
               * ONPREM_CONNECTOR - Represents connection through on-premises connector in Data Safe.
        :param str datasafe_private_endpoint_id: The OCID of the Data Safe private endpoint.
        :param str on_prem_connector_id: The OCID of the on-premises connector.
        """
        pulumi.set(__self__, "connection_type", connection_type)
        pulumi.set(__self__, "datasafe_private_endpoint_id", datasafe_private_endpoint_id)
        pulumi.set(__self__, "on_prem_connector_id", on_prem_connector_id)

    @property
    @pulumi.getter(name="connectionType")
    def connection_type(self) -> str:
        """
        The connection type used to connect to the database. Allowed values:
        * PRIVATE_ENDPOINT - Represents connection through private endpoint in Data Safe.
        * ONPREM_CONNECTOR - Represents connection through on-premises connector in Data Safe.
        """
        return pulumi.get(self, "connection_type")

    @property
    @pulumi.getter(name="datasafePrivateEndpointId")
    def datasafe_private_endpoint_id(self) -> str:
        """
        The OCID of the Data Safe private endpoint.
        """
        return pulumi.get(self, "datasafe_private_endpoint_id")

    @property
    @pulumi.getter(name="onPremConnectorId")
    def on_prem_connector_id(self) -> str:
        """
        The OCID of the on-premises connector.
        """
        return pulumi.get(self, "on_prem_connector_id")


@pulumi.output_type
class GetTargetDatabaseCredentialsResult(dict):
    def __init__(__self__, *,
                 password: str,
                 user_name: str):
        """
        :param str password: The password of the database user.
        :param str user_name: The database user name.
        """
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "user_name", user_name)

    @property
    @pulumi.getter
    def password(self) -> str:
        """
        The password of the database user.
        """
        return pulumi.get(self, "password")

    @property
    @pulumi.getter(name="userName")
    def user_name(self) -> str:
        """
        The database user name.
        """
        return pulumi.get(self, "user_name")


@pulumi.output_type
class GetTargetDatabaseDatabaseDetailsResult(dict):
    def __init__(__self__, *,
                 autonomous_database_id: str,
                 database_type: str,
                 db_system_id: str,
                 infrastructure_type: str,
                 instance_id: str,
                 ip_addresses: Sequence[str],
                 listener_port: int,
                 service_name: str,
                 vm_cluster_id: str):
        """
        :param str autonomous_database_id: The OCID of the autonomous database registered as a target database in Data Safe.
        :param str database_type: The database type.
        :param str db_system_id: The OCID of the cloud database system registered as a target database in Data Safe.
        :param str infrastructure_type: The infrastructure type the database is running on.
        :param str instance_id: The OCID of the compute instance on which the database is running.
        :param Sequence[str] ip_addresses: A List of either the IP Addresses or FQDN names of the database hosts.
        :param int listener_port: The port number of the database listener.
        :param str service_name: The service name of the database registered as target database.
        :param str vm_cluster_id: The OCID of the VM cluster in which the database is running.
        """
        pulumi.set(__self__, "autonomous_database_id", autonomous_database_id)
        pulumi.set(__self__, "database_type", database_type)
        pulumi.set(__self__, "db_system_id", db_system_id)
        pulumi.set(__self__, "infrastructure_type", infrastructure_type)
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "ip_addresses", ip_addresses)
        pulumi.set(__self__, "listener_port", listener_port)
        pulumi.set(__self__, "service_name", service_name)
        pulumi.set(__self__, "vm_cluster_id", vm_cluster_id)

    @property
    @pulumi.getter(name="autonomousDatabaseId")
    def autonomous_database_id(self) -> str:
        """
        The OCID of the autonomous database registered as a target database in Data Safe.
        """
        return pulumi.get(self, "autonomous_database_id")

    @property
    @pulumi.getter(name="databaseType")
    def database_type(self) -> str:
        """
        The database type.
        """
        return pulumi.get(self, "database_type")

    @property
    @pulumi.getter(name="dbSystemId")
    def db_system_id(self) -> str:
        """
        The OCID of the cloud database system registered as a target database in Data Safe.
        """
        return pulumi.get(self, "db_system_id")

    @property
    @pulumi.getter(name="infrastructureType")
    def infrastructure_type(self) -> str:
        """
        The infrastructure type the database is running on.
        """
        return pulumi.get(self, "infrastructure_type")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> str:
        """
        The OCID of the compute instance on which the database is running.
        """
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter(name="ipAddresses")
    def ip_addresses(self) -> Sequence[str]:
        """
        A List of either the IP Addresses or FQDN names of the database hosts.
        """
        return pulumi.get(self, "ip_addresses")

    @property
    @pulumi.getter(name="listenerPort")
    def listener_port(self) -> int:
        """
        The port number of the database listener.
        """
        return pulumi.get(self, "listener_port")

    @property
    @pulumi.getter(name="serviceName")
    def service_name(self) -> str:
        """
        The service name of the database registered as target database.
        """
        return pulumi.get(self, "service_name")

    @property
    @pulumi.getter(name="vmClusterId")
    def vm_cluster_id(self) -> str:
        """
        The OCID of the VM cluster in which the database is running.
        """
        return pulumi.get(self, "vm_cluster_id")


@pulumi.output_type
class GetTargetDatabaseTlsConfigResult(dict):
    def __init__(__self__, *,
                 certificate_store_type: str,
                 key_store_content: str,
                 status: str,
                 store_password: str,
                 trust_store_content: str):
        """
        :param str certificate_store_type: The format of the certificate store.
        :param str key_store_content: Base64 encoded string of key store file content.
        :param str status: Status to represent whether the database connection is TLS enabled or not.
        :param str store_password: The password to read the trust store and key store files, if they are password protected.
        :param str trust_store_content: Base64 encoded string of trust store file content.
        """
        pulumi.set(__self__, "certificate_store_type", certificate_store_type)
        pulumi.set(__self__, "key_store_content", key_store_content)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "store_password", store_password)
        pulumi.set(__self__, "trust_store_content", trust_store_content)

    @property
    @pulumi.getter(name="certificateStoreType")
    def certificate_store_type(self) -> str:
        """
        The format of the certificate store.
        """
        return pulumi.get(self, "certificate_store_type")

    @property
    @pulumi.getter(name="keyStoreContent")
    def key_store_content(self) -> str:
        """
        Base64 encoded string of key store file content.
        """
        return pulumi.get(self, "key_store_content")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        Status to represent whether the database connection is TLS enabled or not.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="storePassword")
    def store_password(self) -> str:
        """
        The password to read the trust store and key store files, if they are password protected.
        """
        return pulumi.get(self, "store_password")

    @property
    @pulumi.getter(name="trustStoreContent")
    def trust_store_content(self) -> str:
        """
        Base64 encoded string of trust store file content.
        """
        return pulumi.get(self, "trust_store_content")


@pulumi.output_type
class GetTargetDatabasesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetTargetDatabasesTargetDatabaseResult(dict):
    def __init__(__self__, *,
                 compartment_id: str,
                 connection_option: 'outputs.GetTargetDatabasesTargetDatabaseConnectionOptionResult',
                 credentials: 'outputs.GetTargetDatabasesTargetDatabaseCredentialsResult',
                 database_details: 'outputs.GetTargetDatabasesTargetDatabaseDatabaseDetailsResult',
                 defined_tags: Mapping[str, Any],
                 description: str,
                 display_name: str,
                 freeform_tags: Mapping[str, Any],
                 id: str,
                 lifecycle_details: str,
                 state: str,
                 system_tags: Mapping[str, Any],
                 time_created: str,
                 time_updated: str,
                 tls_config: 'outputs.GetTargetDatabasesTargetDatabaseTlsConfigResult'):
        """
        :param str compartment_id: A filter to return only resources that match the specified compartment OCID.
        :param 'GetTargetDatabasesTargetDatabaseConnectionOptionArgs' connection_option: Types of connection supported by Data Safe.
        :param 'GetTargetDatabasesTargetDatabaseCredentialsArgs' credentials: The database credentials required for Data Safe to connect to the database.
        :param 'GetTargetDatabasesTargetDatabaseDatabaseDetailsArgs' database_details: Details of the database for the registration in Data Safe. To choose applicable database type and infrastructure type refer to  https://confluence.oci.oraclecorp.com/display/DATASAFE/Target+V2+Design
        :param Mapping[str, Any] defined_tags: Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm)  Example: `{"Operations.CostCenter": "42"}`
        :param str description: The description of the target database in Data Safe.
        :param str display_name: A filter to return only resources that match the specified display name.
        :param Mapping[str, Any] freeform_tags: Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm)  Example: `{"Department": "Finance"}`
        :param str id: The OCID of the Data Safe target database.
        :param str lifecycle_details: Details about the current state of the target database in Data Safe.
        :param str state: A filter to return the target databases that matches the current state of the target database.
        :param Mapping[str, Any] system_tags: System tags for this resource. Each key is predefined and scoped to a namespace. For more information, see Resource Tags. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        :param str time_created: The date and time the database was registered in Data Safe and created as a target database in Data Safe.
        :param str time_updated: The date and time of the target database update in Data Safe.
        :param 'GetTargetDatabasesTargetDatabaseTlsConfigArgs' tls_config: The details required to establish a TLS enabled connection.
        """
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "connection_option", connection_option)
        pulumi.set(__self__, "credentials", credentials)
        pulumi.set(__self__, "database_details", database_details)
        pulumi.set(__self__, "defined_tags", defined_tags)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "freeform_tags", freeform_tags)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "system_tags", system_tags)
        pulumi.set(__self__, "time_created", time_created)
        pulumi.set(__self__, "time_updated", time_updated)
        pulumi.set(__self__, "tls_config", tls_config)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> str:
        """
        A filter to return only resources that match the specified compartment OCID.
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="connectionOption")
    def connection_option(self) -> 'outputs.GetTargetDatabasesTargetDatabaseConnectionOptionResult':
        """
        Types of connection supported by Data Safe.
        """
        return pulumi.get(self, "connection_option")

    @property
    @pulumi.getter
    def credentials(self) -> 'outputs.GetTargetDatabasesTargetDatabaseCredentialsResult':
        """
        The database credentials required for Data Safe to connect to the database.
        """
        return pulumi.get(self, "credentials")

    @property
    @pulumi.getter(name="databaseDetails")
    def database_details(self) -> 'outputs.GetTargetDatabasesTargetDatabaseDatabaseDetailsResult':
        """
        Details of the database for the registration in Data Safe. To choose applicable database type and infrastructure type refer to  https://confluence.oci.oraclecorp.com/display/DATASAFE/Target+V2+Design
        """
        return pulumi.get(self, "database_details")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Mapping[str, Any]:
        """
        Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm)  Example: `{"Operations.CostCenter": "42"}`
        """
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The description of the target database in Data Safe.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        A filter to return only resources that match the specified display name.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Mapping[str, Any]:
        """
        Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm)  Example: `{"Department": "Finance"}`
        """
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The OCID of the Data Safe target database.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> str:
        """
        Details about the current state of the target database in Data Safe.
        """
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        A filter to return the target databases that matches the current state of the target database.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Mapping[str, Any]:
        """
        System tags for this resource. Each key is predefined and scoped to a namespace. For more information, see Resource Tags. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        """
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> str:
        """
        The date and time the database was registered in Data Safe and created as a target database in Data Safe.
        """
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> str:
        """
        The date and time of the target database update in Data Safe.
        """
        return pulumi.get(self, "time_updated")

    @property
    @pulumi.getter(name="tlsConfig")
    def tls_config(self) -> 'outputs.GetTargetDatabasesTargetDatabaseTlsConfigResult':
        """
        The details required to establish a TLS enabled connection.
        """
        return pulumi.get(self, "tls_config")


@pulumi.output_type
class GetTargetDatabasesTargetDatabaseConnectionOptionResult(dict):
    def __init__(__self__, *,
                 connection_type: str,
                 datasafe_private_endpoint_id: str,
                 on_prem_connector_id: str):
        """
        :param str connection_type: The connection type used to connect to the database. Allowed values:
               * PRIVATE_ENDPOINT - Represents connection through private endpoint in Data Safe.
               * ONPREM_CONNECTOR - Represents connection through on-premises connector in Data Safe.
        :param str datasafe_private_endpoint_id: The OCID of the Data Safe private endpoint.
        :param str on_prem_connector_id: The OCID of the on-premises connector.
        """
        pulumi.set(__self__, "connection_type", connection_type)
        pulumi.set(__self__, "datasafe_private_endpoint_id", datasafe_private_endpoint_id)
        pulumi.set(__self__, "on_prem_connector_id", on_prem_connector_id)

    @property
    @pulumi.getter(name="connectionType")
    def connection_type(self) -> str:
        """
        The connection type used to connect to the database. Allowed values:
        * PRIVATE_ENDPOINT - Represents connection through private endpoint in Data Safe.
        * ONPREM_CONNECTOR - Represents connection through on-premises connector in Data Safe.
        """
        return pulumi.get(self, "connection_type")

    @property
    @pulumi.getter(name="datasafePrivateEndpointId")
    def datasafe_private_endpoint_id(self) -> str:
        """
        The OCID of the Data Safe private endpoint.
        """
        return pulumi.get(self, "datasafe_private_endpoint_id")

    @property
    @pulumi.getter(name="onPremConnectorId")
    def on_prem_connector_id(self) -> str:
        """
        The OCID of the on-premises connector.
        """
        return pulumi.get(self, "on_prem_connector_id")


@pulumi.output_type
class GetTargetDatabasesTargetDatabaseCredentialsResult(dict):
    def __init__(__self__, *,
                 password: str,
                 user_name: str):
        """
        :param str password: The password of the database user.
        :param str user_name: The database user name.
        """
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "user_name", user_name)

    @property
    @pulumi.getter
    def password(self) -> str:
        """
        The password of the database user.
        """
        return pulumi.get(self, "password")

    @property
    @pulumi.getter(name="userName")
    def user_name(self) -> str:
        """
        The database user name.
        """
        return pulumi.get(self, "user_name")


@pulumi.output_type
class GetTargetDatabasesTargetDatabaseDatabaseDetailsResult(dict):
    def __init__(__self__, *,
                 autonomous_database_id: str,
                 database_type: str,
                 db_system_id: str,
                 infrastructure_type: str,
                 instance_id: str,
                 ip_addresses: Sequence[str],
                 listener_port: int,
                 service_name: str,
                 vm_cluster_id: str):
        """
        :param str autonomous_database_id: The OCID of the autonomous database registered as a target database in Data Safe.
        :param str database_type: A filter to return target databases that match the database type of the target database.
        :param str db_system_id: The OCID of the cloud database system registered as a target database in Data Safe.
        :param str infrastructure_type: A filter to return target databases that match the infrastructure type of the target database.
        :param str instance_id: The OCID of the compute instance on which the database is running.
        :param Sequence[str] ip_addresses: A List of either the IP Addresses or FQDN names of the database hosts.
        :param int listener_port: The port number of the database listener.
        :param str service_name: The service name of the database registered as target database.
        :param str vm_cluster_id: The OCID of the VM cluster in which the database is running.
        """
        pulumi.set(__self__, "autonomous_database_id", autonomous_database_id)
        pulumi.set(__self__, "database_type", database_type)
        pulumi.set(__self__, "db_system_id", db_system_id)
        pulumi.set(__self__, "infrastructure_type", infrastructure_type)
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "ip_addresses", ip_addresses)
        pulumi.set(__self__, "listener_port", listener_port)
        pulumi.set(__self__, "service_name", service_name)
        pulumi.set(__self__, "vm_cluster_id", vm_cluster_id)

    @property
    @pulumi.getter(name="autonomousDatabaseId")
    def autonomous_database_id(self) -> str:
        """
        The OCID of the autonomous database registered as a target database in Data Safe.
        """
        return pulumi.get(self, "autonomous_database_id")

    @property
    @pulumi.getter(name="databaseType")
    def database_type(self) -> str:
        """
        A filter to return target databases that match the database type of the target database.
        """
        return pulumi.get(self, "database_type")

    @property
    @pulumi.getter(name="dbSystemId")
    def db_system_id(self) -> str:
        """
        The OCID of the cloud database system registered as a target database in Data Safe.
        """
        return pulumi.get(self, "db_system_id")

    @property
    @pulumi.getter(name="infrastructureType")
    def infrastructure_type(self) -> str:
        """
        A filter to return target databases that match the infrastructure type of the target database.
        """
        return pulumi.get(self, "infrastructure_type")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> str:
        """
        The OCID of the compute instance on which the database is running.
        """
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter(name="ipAddresses")
    def ip_addresses(self) -> Sequence[str]:
        """
        A List of either the IP Addresses or FQDN names of the database hosts.
        """
        return pulumi.get(self, "ip_addresses")

    @property
    @pulumi.getter(name="listenerPort")
    def listener_port(self) -> int:
        """
        The port number of the database listener.
        """
        return pulumi.get(self, "listener_port")

    @property
    @pulumi.getter(name="serviceName")
    def service_name(self) -> str:
        """
        The service name of the database registered as target database.
        """
        return pulumi.get(self, "service_name")

    @property
    @pulumi.getter(name="vmClusterId")
    def vm_cluster_id(self) -> str:
        """
        The OCID of the VM cluster in which the database is running.
        """
        return pulumi.get(self, "vm_cluster_id")


@pulumi.output_type
class GetTargetDatabasesTargetDatabaseTlsConfigResult(dict):
    def __init__(__self__, *,
                 certificate_store_type: str,
                 key_store_content: str,
                 status: str,
                 store_password: str,
                 trust_store_content: str):
        """
        :param str certificate_store_type: The format of the certificate store.
        :param str key_store_content: Base64 encoded string of key store file content.
        :param str status: Status to represent whether the database connection is TLS enabled or not.
        :param str store_password: The password to read the trust store and key store files, if they are password protected.
        :param str trust_store_content: Base64 encoded string of trust store file content.
        """
        pulumi.set(__self__, "certificate_store_type", certificate_store_type)
        pulumi.set(__self__, "key_store_content", key_store_content)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "store_password", store_password)
        pulumi.set(__self__, "trust_store_content", trust_store_content)

    @property
    @pulumi.getter(name="certificateStoreType")
    def certificate_store_type(self) -> str:
        """
        The format of the certificate store.
        """
        return pulumi.get(self, "certificate_store_type")

    @property
    @pulumi.getter(name="keyStoreContent")
    def key_store_content(self) -> str:
        """
        Base64 encoded string of key store file content.
        """
        return pulumi.get(self, "key_store_content")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        Status to represent whether the database connection is TLS enabled or not.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="storePassword")
    def store_password(self) -> str:
        """
        The password to read the trust store and key store files, if they are password protected.
        """
        return pulumi.get(self, "store_password")

    @property
    @pulumi.getter(name="trustStoreContent")
    def trust_store_content(self) -> str:
        """
        Base64 encoded string of trust store file content.
        """
        return pulumi.get(self, "trust_store_content")


