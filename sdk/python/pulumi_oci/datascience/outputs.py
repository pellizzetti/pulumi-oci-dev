# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'ModelCustomMetadataList',
    'ModelDefinedMetadataList',
    'ModelDeploymentCategoryLogDetails',
    'ModelDeploymentCategoryLogDetailsAccess',
    'ModelDeploymentCategoryLogDetailsPredict',
    'ModelDeploymentModelDeploymentConfigurationDetails',
    'ModelDeploymentModelDeploymentConfigurationDetailsModelConfigurationDetails',
    'ModelDeploymentModelDeploymentConfigurationDetailsModelConfigurationDetailsInstanceConfiguration',
    'ModelDeploymentModelDeploymentConfigurationDetailsModelConfigurationDetailsScalingPolicy',
    'NotebookSessionNotebookSessionConfigurationDetails',
    'NotebookSessionNotebookSessionConfigurationDetailsNotebookSessionShapeConfigDetails',
    'GetModelCustomMetadataListResult',
    'GetModelDefinedMetadataListResult',
    'GetModelDeploymentCategoryLogDetailsResult',
    'GetModelDeploymentCategoryLogDetailsAccessResult',
    'GetModelDeploymentCategoryLogDetailsPredictResult',
    'GetModelDeploymentModelDeploymentConfigurationDetailsResult',
    'GetModelDeploymentModelDeploymentConfigurationDetailsModelConfigurationDetailsResult',
    'GetModelDeploymentModelDeploymentConfigurationDetailsModelConfigurationDetailsInstanceConfigurationResult',
    'GetModelDeploymentModelDeploymentConfigurationDetailsModelConfigurationDetailsScalingPolicyResult',
    'GetModelDeploymentShapesFilterResult',
    'GetModelDeploymentShapesModelDeploymentShapeResult',
    'GetModelDeploymentsFilterResult',
    'GetModelDeploymentsModelDeploymentResult',
    'GetModelDeploymentsModelDeploymentCategoryLogDetailsResult',
    'GetModelDeploymentsModelDeploymentCategoryLogDetailsAccessResult',
    'GetModelDeploymentsModelDeploymentCategoryLogDetailsPredictResult',
    'GetModelDeploymentsModelDeploymentModelDeploymentConfigurationDetailsResult',
    'GetModelDeploymentsModelDeploymentModelDeploymentConfigurationDetailsModelConfigurationDetailsResult',
    'GetModelDeploymentsModelDeploymentModelDeploymentConfigurationDetailsModelConfigurationDetailsInstanceConfigurationResult',
    'GetModelDeploymentsModelDeploymentModelDeploymentConfigurationDetailsModelConfigurationDetailsScalingPolicyResult',
    'GetModelsFilterResult',
    'GetModelsModelResult',
    'GetModelsModelCustomMetadataListResult',
    'GetModelsModelDefinedMetadataListResult',
    'GetNotebookSessionNotebookSessionConfigurationDetailsResult',
    'GetNotebookSessionNotebookSessionConfigurationDetailsNotebookSessionShapeConfigDetailsResult',
    'GetNotebookSessionShapesFilterResult',
    'GetNotebookSessionShapesNotebookSessionShapeResult',
    'GetNotebookSessionsFilterResult',
    'GetNotebookSessionsNotebookSessionResult',
    'GetNotebookSessionsNotebookSessionNotebookSessionConfigurationDetailsResult',
    'GetNotebookSessionsNotebookSessionNotebookSessionConfigurationDetailsNotebookSessionShapeConfigDetailsResult',
    'GetProjectsFilterResult',
    'GetProjectsProjectResult',
]

@pulumi.output_type
class ModelCustomMetadataList(dict):
    def __init__(__self__, *,
                 category: Optional[str] = None,
                 description: Optional[str] = None,
                 key: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str category: (Updatable) Category of model metadata which should be null for defined metadata.For custom metadata is should be one of the following values "Performance,Training Profile,Training and Validation Datasets,Training Environment,other".
        :param str description: (Updatable) A short description of the model.
        :param str key: (Updatable) key of the model Metadata. This can be custom key(user defined) as well as Oracle Cloud Infrastructure defined. Example of Oracle defined keys - useCaseType, libraryName, libraryVersion, estimatorClass, hyperParameters. Example of user defined keys - BaseModel
        :param str value: (Updatable) Value of model metadata
        """
        if category is not None:
            pulumi.set(__self__, "category", category)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def category(self) -> Optional[str]:
        """
        (Updatable) Category of model metadata which should be null for defined metadata.For custom metadata is should be one of the following values "Performance,Training Profile,Training and Validation Datasets,Training Environment,other".
        """
        return pulumi.get(self, "category")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        (Updatable) A short description of the model.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        """
        (Updatable) key of the model Metadata. This can be custom key(user defined) as well as Oracle Cloud Infrastructure defined. Example of Oracle defined keys - useCaseType, libraryName, libraryVersion, estimatorClass, hyperParameters. Example of user defined keys - BaseModel
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        (Updatable) Value of model metadata
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ModelDefinedMetadataList(dict):
    def __init__(__self__, *,
                 category: Optional[str] = None,
                 description: Optional[str] = None,
                 key: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str category: (Updatable) Category of model metadata which should be null for defined metadata.For custom metadata is should be one of the following values "Performance,Training Profile,Training and Validation Datasets,Training Environment,other".
        :param str description: (Updatable) A short description of the model.
        :param str key: (Updatable) key of the model Metadata. This can be custom key(user defined) as well as Oracle Cloud Infrastructure defined. Example of Oracle defined keys - useCaseType, libraryName, libraryVersion, estimatorClass, hyperParameters. Example of user defined keys - BaseModel
        :param str value: (Updatable) Value of model metadata
        """
        if category is not None:
            pulumi.set(__self__, "category", category)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def category(self) -> Optional[str]:
        """
        (Updatable) Category of model metadata which should be null for defined metadata.For custom metadata is should be one of the following values "Performance,Training Profile,Training and Validation Datasets,Training Environment,other".
        """
        return pulumi.get(self, "category")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        (Updatable) A short description of the model.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        """
        (Updatable) key of the model Metadata. This can be custom key(user defined) as well as Oracle Cloud Infrastructure defined. Example of Oracle defined keys - useCaseType, libraryName, libraryVersion, estimatorClass, hyperParameters. Example of user defined keys - BaseModel
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        (Updatable) Value of model metadata
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ModelDeploymentCategoryLogDetails(dict):
    def __init__(__self__, *,
                 access: Optional['outputs.ModelDeploymentCategoryLogDetailsAccess'] = None,
                 predict: Optional['outputs.ModelDeploymentCategoryLogDetailsPredict'] = None):
        """
        :param 'ModelDeploymentCategoryLogDetailsAccessArgs' access: (Updatable) The log details.
        :param 'ModelDeploymentCategoryLogDetailsPredictArgs' predict: (Updatable) The log details.
        """
        if access is not None:
            pulumi.set(__self__, "access", access)
        if predict is not None:
            pulumi.set(__self__, "predict", predict)

    @property
    @pulumi.getter
    def access(self) -> Optional['outputs.ModelDeploymentCategoryLogDetailsAccess']:
        """
        (Updatable) The log details.
        """
        return pulumi.get(self, "access")

    @property
    @pulumi.getter
    def predict(self) -> Optional['outputs.ModelDeploymentCategoryLogDetailsPredict']:
        """
        (Updatable) The log details.
        """
        return pulumi.get(self, "predict")


@pulumi.output_type
class ModelDeploymentCategoryLogDetailsAccess(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "logGroupId":
            suggest = "log_group_id"
        elif key == "logId":
            suggest = "log_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ModelDeploymentCategoryLogDetailsAccess. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ModelDeploymentCategoryLogDetailsAccess.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ModelDeploymentCategoryLogDetailsAccess.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 log_group_id: str,
                 log_id: str):
        """
        :param str log_group_id: (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of a log group to work with.
        :param str log_id: (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of a log to work with.
        """
        pulumi.set(__self__, "log_group_id", log_group_id)
        pulumi.set(__self__, "log_id", log_id)

    @property
    @pulumi.getter(name="logGroupId")
    def log_group_id(self) -> str:
        """
        (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of a log group to work with.
        """
        return pulumi.get(self, "log_group_id")

    @property
    @pulumi.getter(name="logId")
    def log_id(self) -> str:
        """
        (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of a log to work with.
        """
        return pulumi.get(self, "log_id")


@pulumi.output_type
class ModelDeploymentCategoryLogDetailsPredict(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "logGroupId":
            suggest = "log_group_id"
        elif key == "logId":
            suggest = "log_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ModelDeploymentCategoryLogDetailsPredict. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ModelDeploymentCategoryLogDetailsPredict.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ModelDeploymentCategoryLogDetailsPredict.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 log_group_id: str,
                 log_id: str):
        """
        :param str log_group_id: (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of a log group to work with.
        :param str log_id: (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of a log to work with.
        """
        pulumi.set(__self__, "log_group_id", log_group_id)
        pulumi.set(__self__, "log_id", log_id)

    @property
    @pulumi.getter(name="logGroupId")
    def log_group_id(self) -> str:
        """
        (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of a log group to work with.
        """
        return pulumi.get(self, "log_group_id")

    @property
    @pulumi.getter(name="logId")
    def log_id(self) -> str:
        """
        (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of a log to work with.
        """
        return pulumi.get(self, "log_id")


@pulumi.output_type
class ModelDeploymentModelDeploymentConfigurationDetails(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "deploymentType":
            suggest = "deployment_type"
        elif key == "modelConfigurationDetails":
            suggest = "model_configuration_details"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ModelDeploymentModelDeploymentConfigurationDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ModelDeploymentModelDeploymentConfigurationDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ModelDeploymentModelDeploymentConfigurationDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 deployment_type: str,
                 model_configuration_details: 'outputs.ModelDeploymentModelDeploymentConfigurationDetailsModelConfigurationDetails'):
        """
        :param str deployment_type: (Updatable) The type of the model deployment.
        :param 'ModelDeploymentModelDeploymentConfigurationDetailsModelConfigurationDetailsArgs' model_configuration_details: (Updatable) The model configuration details.
        """
        pulumi.set(__self__, "deployment_type", deployment_type)
        pulumi.set(__self__, "model_configuration_details", model_configuration_details)

    @property
    @pulumi.getter(name="deploymentType")
    def deployment_type(self) -> str:
        """
        (Updatable) The type of the model deployment.
        """
        return pulumi.get(self, "deployment_type")

    @property
    @pulumi.getter(name="modelConfigurationDetails")
    def model_configuration_details(self) -> 'outputs.ModelDeploymentModelDeploymentConfigurationDetailsModelConfigurationDetails':
        """
        (Updatable) The model configuration details.
        """
        return pulumi.get(self, "model_configuration_details")


@pulumi.output_type
class ModelDeploymentModelDeploymentConfigurationDetailsModelConfigurationDetails(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "instanceConfiguration":
            suggest = "instance_configuration"
        elif key == "modelId":
            suggest = "model_id"
        elif key == "bandwidthMbps":
            suggest = "bandwidth_mbps"
        elif key == "scalingPolicy":
            suggest = "scaling_policy"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ModelDeploymentModelDeploymentConfigurationDetailsModelConfigurationDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ModelDeploymentModelDeploymentConfigurationDetailsModelConfigurationDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ModelDeploymentModelDeploymentConfigurationDetailsModelConfigurationDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 instance_configuration: 'outputs.ModelDeploymentModelDeploymentConfigurationDetailsModelConfigurationDetailsInstanceConfiguration',
                 model_id: str,
                 bandwidth_mbps: Optional[int] = None,
                 scaling_policy: Optional['outputs.ModelDeploymentModelDeploymentConfigurationDetailsModelConfigurationDetailsScalingPolicy'] = None):
        """
        :param 'ModelDeploymentModelDeploymentConfigurationDetailsModelConfigurationDetailsInstanceConfigurationArgs' instance_configuration: (Updatable) The model deployment instance configuration
        :param str model_id: (Updatable) The OCID of the model you want to deploy.
        :param int bandwidth_mbps: (Updatable) The network bandwidth for the model.
        :param 'ModelDeploymentModelDeploymentConfigurationDetailsModelConfigurationDetailsScalingPolicyArgs' scaling_policy: (Updatable) The scaling policy to apply to each model of the deployment.
        """
        pulumi.set(__self__, "instance_configuration", instance_configuration)
        pulumi.set(__self__, "model_id", model_id)
        if bandwidth_mbps is not None:
            pulumi.set(__self__, "bandwidth_mbps", bandwidth_mbps)
        if scaling_policy is not None:
            pulumi.set(__self__, "scaling_policy", scaling_policy)

    @property
    @pulumi.getter(name="instanceConfiguration")
    def instance_configuration(self) -> 'outputs.ModelDeploymentModelDeploymentConfigurationDetailsModelConfigurationDetailsInstanceConfiguration':
        """
        (Updatable) The model deployment instance configuration
        """
        return pulumi.get(self, "instance_configuration")

    @property
    @pulumi.getter(name="modelId")
    def model_id(self) -> str:
        """
        (Updatable) The OCID of the model you want to deploy.
        """
        return pulumi.get(self, "model_id")

    @property
    @pulumi.getter(name="bandwidthMbps")
    def bandwidth_mbps(self) -> Optional[int]:
        """
        (Updatable) The network bandwidth for the model.
        """
        return pulumi.get(self, "bandwidth_mbps")

    @property
    @pulumi.getter(name="scalingPolicy")
    def scaling_policy(self) -> Optional['outputs.ModelDeploymentModelDeploymentConfigurationDetailsModelConfigurationDetailsScalingPolicy']:
        """
        (Updatable) The scaling policy to apply to each model of the deployment.
        """
        return pulumi.get(self, "scaling_policy")


@pulumi.output_type
class ModelDeploymentModelDeploymentConfigurationDetailsModelConfigurationDetailsInstanceConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "instanceShapeName":
            suggest = "instance_shape_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ModelDeploymentModelDeploymentConfigurationDetailsModelConfigurationDetailsInstanceConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ModelDeploymentModelDeploymentConfigurationDetailsModelConfigurationDetailsInstanceConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ModelDeploymentModelDeploymentConfigurationDetailsModelConfigurationDetailsInstanceConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 instance_shape_name: str):
        """
        :param str instance_shape_name: (Updatable) The shape used to launch the model deployment instances.
        """
        pulumi.set(__self__, "instance_shape_name", instance_shape_name)

    @property
    @pulumi.getter(name="instanceShapeName")
    def instance_shape_name(self) -> str:
        """
        (Updatable) The shape used to launch the model deployment instances.
        """
        return pulumi.get(self, "instance_shape_name")


@pulumi.output_type
class ModelDeploymentModelDeploymentConfigurationDetailsModelConfigurationDetailsScalingPolicy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "instanceCount":
            suggest = "instance_count"
        elif key == "policyType":
            suggest = "policy_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ModelDeploymentModelDeploymentConfigurationDetailsModelConfigurationDetailsScalingPolicy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ModelDeploymentModelDeploymentConfigurationDetailsModelConfigurationDetailsScalingPolicy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ModelDeploymentModelDeploymentConfigurationDetailsModelConfigurationDetailsScalingPolicy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 instance_count: int,
                 policy_type: str):
        """
        :param int instance_count: (Updatable) The number of instances for the model deployment.
        :param str policy_type: (Updatable) The type of scaling policy.
        """
        pulumi.set(__self__, "instance_count", instance_count)
        pulumi.set(__self__, "policy_type", policy_type)

    @property
    @pulumi.getter(name="instanceCount")
    def instance_count(self) -> int:
        """
        (Updatable) The number of instances for the model deployment.
        """
        return pulumi.get(self, "instance_count")

    @property
    @pulumi.getter(name="policyType")
    def policy_type(self) -> str:
        """
        (Updatable) The type of scaling policy.
        """
        return pulumi.get(self, "policy_type")


@pulumi.output_type
class NotebookSessionNotebookSessionConfigurationDetails(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "subnetId":
            suggest = "subnet_id"
        elif key == "blockStorageSizeInGbs":
            suggest = "block_storage_size_in_gbs"
        elif key == "notebookSessionShapeConfigDetails":
            suggest = "notebook_session_shape_config_details"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NotebookSessionNotebookSessionConfigurationDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NotebookSessionNotebookSessionConfigurationDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NotebookSessionNotebookSessionConfigurationDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 shape: str,
                 subnet_id: str,
                 block_storage_size_in_gbs: Optional[int] = None,
                 notebook_session_shape_config_details: Optional['outputs.NotebookSessionNotebookSessionConfigurationDetailsNotebookSessionShapeConfigDetails'] = None):
        """
        :param str shape: (Updatable) The shape used to launch the notebook session compute instance.  The list of available shapes in a given compartment can be retrieved using the `ListNotebookSessionShapes` endpoint.
        :param str subnet_id: (Updatable) A notebook session instance is provided with a VNIC for network access.  This specifies the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the subnet to create a VNIC in.  The subnet should be in a VCN with a NAT gateway for egress to the internet.
        :param int block_storage_size_in_gbs: (Updatable) A notebook session instance is provided with a block storage volume. This specifies the size of the volume in GBs.
        :param 'NotebookSessionNotebookSessionConfigurationDetailsNotebookSessionShapeConfigDetailsArgs' notebook_session_shape_config_details: (Updatable) Details for the notebook session shape configuration.
        """
        pulumi.set(__self__, "shape", shape)
        pulumi.set(__self__, "subnet_id", subnet_id)
        if block_storage_size_in_gbs is not None:
            pulumi.set(__self__, "block_storage_size_in_gbs", block_storage_size_in_gbs)
        if notebook_session_shape_config_details is not None:
            pulumi.set(__self__, "notebook_session_shape_config_details", notebook_session_shape_config_details)

    @property
    @pulumi.getter
    def shape(self) -> str:
        """
        (Updatable) The shape used to launch the notebook session compute instance.  The list of available shapes in a given compartment can be retrieved using the `ListNotebookSessionShapes` endpoint.
        """
        return pulumi.get(self, "shape")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> str:
        """
        (Updatable) A notebook session instance is provided with a VNIC for network access.  This specifies the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the subnet to create a VNIC in.  The subnet should be in a VCN with a NAT gateway for egress to the internet.
        """
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter(name="blockStorageSizeInGbs")
    def block_storage_size_in_gbs(self) -> Optional[int]:
        """
        (Updatable) A notebook session instance is provided with a block storage volume. This specifies the size of the volume in GBs.
        """
        return pulumi.get(self, "block_storage_size_in_gbs")

    @property
    @pulumi.getter(name="notebookSessionShapeConfigDetails")
    def notebook_session_shape_config_details(self) -> Optional['outputs.NotebookSessionNotebookSessionConfigurationDetailsNotebookSessionShapeConfigDetails']:
        """
        (Updatable) Details for the notebook session shape configuration.
        """
        return pulumi.get(self, "notebook_session_shape_config_details")


@pulumi.output_type
class NotebookSessionNotebookSessionConfigurationDetailsNotebookSessionShapeConfigDetails(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "memoryInGbs":
            suggest = "memory_in_gbs"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NotebookSessionNotebookSessionConfigurationDetailsNotebookSessionShapeConfigDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NotebookSessionNotebookSessionConfigurationDetailsNotebookSessionShapeConfigDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NotebookSessionNotebookSessionConfigurationDetailsNotebookSessionShapeConfigDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 memory_in_gbs: Optional[float] = None,
                 ocpus: Optional[float] = None):
        """
        :param float memory_in_gbs: (Updatable) A notebook session instance of type VM.Standard.E3.Flex allows memory to be specified. This specifies the size of the memory in GBs.
        :param float ocpus: (Updatable) A notebook session instance of type VM.Standard.E3.Flex allows the ocpu count to be specified.
        """
        if memory_in_gbs is not None:
            pulumi.set(__self__, "memory_in_gbs", memory_in_gbs)
        if ocpus is not None:
            pulumi.set(__self__, "ocpus", ocpus)

    @property
    @pulumi.getter(name="memoryInGbs")
    def memory_in_gbs(self) -> Optional[float]:
        """
        (Updatable) A notebook session instance of type VM.Standard.E3.Flex allows memory to be specified. This specifies the size of the memory in GBs.
        """
        return pulumi.get(self, "memory_in_gbs")

    @property
    @pulumi.getter
    def ocpus(self) -> Optional[float]:
        """
        (Updatable) A notebook session instance of type VM.Standard.E3.Flex allows the ocpu count to be specified.
        """
        return pulumi.get(self, "ocpus")


@pulumi.output_type
class GetModelCustomMetadataListResult(dict):
    def __init__(__self__, *,
                 category: str,
                 description: str,
                 key: str,
                 value: str):
        """
        :param str category: Category of model metadata which should be null for defined metadata.For custom metadata is should be one of the following values "Performance,Training Profile,Training and Validation Datasets,Training Environment,other".
        :param str description: A short description of the model.
        :param str key: key of the model Metadata. This can be custom key(user defined) as well as Oracle Cloud Infrastructure defined. Example of Oracle defined keys - useCaseType, libraryName, libraryVersion, estimatorClass, hyperParameters. Example of user defined keys - BaseModel
        :param str value: Value of model metadata
        """
        pulumi.set(__self__, "category", category)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def category(self) -> str:
        """
        Category of model metadata which should be null for defined metadata.For custom metadata is should be one of the following values "Performance,Training Profile,Training and Validation Datasets,Training Environment,other".
        """
        return pulumi.get(self, "category")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        A short description of the model.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        key of the model Metadata. This can be custom key(user defined) as well as Oracle Cloud Infrastructure defined. Example of Oracle defined keys - useCaseType, libraryName, libraryVersion, estimatorClass, hyperParameters. Example of user defined keys - BaseModel
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Value of model metadata
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetModelDefinedMetadataListResult(dict):
    def __init__(__self__, *,
                 category: str,
                 description: str,
                 key: str,
                 value: str):
        """
        :param str category: Category of model metadata which should be null for defined metadata.For custom metadata is should be one of the following values "Performance,Training Profile,Training and Validation Datasets,Training Environment,other".
        :param str description: A short description of the model.
        :param str key: key of the model Metadata. This can be custom key(user defined) as well as Oracle Cloud Infrastructure defined. Example of Oracle defined keys - useCaseType, libraryName, libraryVersion, estimatorClass, hyperParameters. Example of user defined keys - BaseModel
        :param str value: Value of model metadata
        """
        pulumi.set(__self__, "category", category)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def category(self) -> str:
        """
        Category of model metadata which should be null for defined metadata.For custom metadata is should be one of the following values "Performance,Training Profile,Training and Validation Datasets,Training Environment,other".
        """
        return pulumi.get(self, "category")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        A short description of the model.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        key of the model Metadata. This can be custom key(user defined) as well as Oracle Cloud Infrastructure defined. Example of Oracle defined keys - useCaseType, libraryName, libraryVersion, estimatorClass, hyperParameters. Example of user defined keys - BaseModel
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Value of model metadata
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetModelDeploymentCategoryLogDetailsResult(dict):
    def __init__(__self__, *,
                 access: 'outputs.GetModelDeploymentCategoryLogDetailsAccessResult',
                 predict: 'outputs.GetModelDeploymentCategoryLogDetailsPredictResult'):
        """
        :param 'GetModelDeploymentCategoryLogDetailsAccessArgs' access: The log details.
        :param 'GetModelDeploymentCategoryLogDetailsPredictArgs' predict: The log details.
        """
        pulumi.set(__self__, "access", access)
        pulumi.set(__self__, "predict", predict)

    @property
    @pulumi.getter
    def access(self) -> 'outputs.GetModelDeploymentCategoryLogDetailsAccessResult':
        """
        The log details.
        """
        return pulumi.get(self, "access")

    @property
    @pulumi.getter
    def predict(self) -> 'outputs.GetModelDeploymentCategoryLogDetailsPredictResult':
        """
        The log details.
        """
        return pulumi.get(self, "predict")


@pulumi.output_type
class GetModelDeploymentCategoryLogDetailsAccessResult(dict):
    def __init__(__self__, *,
                 log_group_id: str,
                 log_id: str):
        """
        :param str log_group_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of a log group to work with.
        :param str log_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of a log to work with.
        """
        pulumi.set(__self__, "log_group_id", log_group_id)
        pulumi.set(__self__, "log_id", log_id)

    @property
    @pulumi.getter(name="logGroupId")
    def log_group_id(self) -> str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of a log group to work with.
        """
        return pulumi.get(self, "log_group_id")

    @property
    @pulumi.getter(name="logId")
    def log_id(self) -> str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of a log to work with.
        """
        return pulumi.get(self, "log_id")


@pulumi.output_type
class GetModelDeploymentCategoryLogDetailsPredictResult(dict):
    def __init__(__self__, *,
                 log_group_id: str,
                 log_id: str):
        """
        :param str log_group_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of a log group to work with.
        :param str log_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of a log to work with.
        """
        pulumi.set(__self__, "log_group_id", log_group_id)
        pulumi.set(__self__, "log_id", log_id)

    @property
    @pulumi.getter(name="logGroupId")
    def log_group_id(self) -> str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of a log group to work with.
        """
        return pulumi.get(self, "log_group_id")

    @property
    @pulumi.getter(name="logId")
    def log_id(self) -> str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of a log to work with.
        """
        return pulumi.get(self, "log_id")


@pulumi.output_type
class GetModelDeploymentModelDeploymentConfigurationDetailsResult(dict):
    def __init__(__self__, *,
                 deployment_type: str,
                 model_configuration_details: 'outputs.GetModelDeploymentModelDeploymentConfigurationDetailsModelConfigurationDetailsResult'):
        """
        :param str deployment_type: The type of the model deployment.
        :param 'GetModelDeploymentModelDeploymentConfigurationDetailsModelConfigurationDetailsArgs' model_configuration_details: The model configuration details.
        """
        pulumi.set(__self__, "deployment_type", deployment_type)
        pulumi.set(__self__, "model_configuration_details", model_configuration_details)

    @property
    @pulumi.getter(name="deploymentType")
    def deployment_type(self) -> str:
        """
        The type of the model deployment.
        """
        return pulumi.get(self, "deployment_type")

    @property
    @pulumi.getter(name="modelConfigurationDetails")
    def model_configuration_details(self) -> 'outputs.GetModelDeploymentModelDeploymentConfigurationDetailsModelConfigurationDetailsResult':
        """
        The model configuration details.
        """
        return pulumi.get(self, "model_configuration_details")


@pulumi.output_type
class GetModelDeploymentModelDeploymentConfigurationDetailsModelConfigurationDetailsResult(dict):
    def __init__(__self__, *,
                 bandwidth_mbps: int,
                 instance_configuration: 'outputs.GetModelDeploymentModelDeploymentConfigurationDetailsModelConfigurationDetailsInstanceConfigurationResult',
                 model_id: str,
                 scaling_policy: 'outputs.GetModelDeploymentModelDeploymentConfigurationDetailsModelConfigurationDetailsScalingPolicyResult'):
        """
        :param int bandwidth_mbps: The network bandwidth for the model.
        :param 'GetModelDeploymentModelDeploymentConfigurationDetailsModelConfigurationDetailsInstanceConfigurationArgs' instance_configuration: The model deployment instance configuration
        :param str model_id: The OCID of the model you want to deploy.
        :param 'GetModelDeploymentModelDeploymentConfigurationDetailsModelConfigurationDetailsScalingPolicyArgs' scaling_policy: The scaling policy to apply to each model of the deployment.
        """
        pulumi.set(__self__, "bandwidth_mbps", bandwidth_mbps)
        pulumi.set(__self__, "instance_configuration", instance_configuration)
        pulumi.set(__self__, "model_id", model_id)
        pulumi.set(__self__, "scaling_policy", scaling_policy)

    @property
    @pulumi.getter(name="bandwidthMbps")
    def bandwidth_mbps(self) -> int:
        """
        The network bandwidth for the model.
        """
        return pulumi.get(self, "bandwidth_mbps")

    @property
    @pulumi.getter(name="instanceConfiguration")
    def instance_configuration(self) -> 'outputs.GetModelDeploymentModelDeploymentConfigurationDetailsModelConfigurationDetailsInstanceConfigurationResult':
        """
        The model deployment instance configuration
        """
        return pulumi.get(self, "instance_configuration")

    @property
    @pulumi.getter(name="modelId")
    def model_id(self) -> str:
        """
        The OCID of the model you want to deploy.
        """
        return pulumi.get(self, "model_id")

    @property
    @pulumi.getter(name="scalingPolicy")
    def scaling_policy(self) -> 'outputs.GetModelDeploymentModelDeploymentConfigurationDetailsModelConfigurationDetailsScalingPolicyResult':
        """
        The scaling policy to apply to each model of the deployment.
        """
        return pulumi.get(self, "scaling_policy")


@pulumi.output_type
class GetModelDeploymentModelDeploymentConfigurationDetailsModelConfigurationDetailsInstanceConfigurationResult(dict):
    def __init__(__self__, *,
                 instance_shape_name: str):
        """
        :param str instance_shape_name: The shape used to launch the model deployment instances.
        """
        pulumi.set(__self__, "instance_shape_name", instance_shape_name)

    @property
    @pulumi.getter(name="instanceShapeName")
    def instance_shape_name(self) -> str:
        """
        The shape used to launch the model deployment instances.
        """
        return pulumi.get(self, "instance_shape_name")


@pulumi.output_type
class GetModelDeploymentModelDeploymentConfigurationDetailsModelConfigurationDetailsScalingPolicyResult(dict):
    def __init__(__self__, *,
                 instance_count: int,
                 policy_type: str):
        """
        :param int instance_count: The number of instances for the model deployment.
        :param str policy_type: The type of scaling policy.
        """
        pulumi.set(__self__, "instance_count", instance_count)
        pulumi.set(__self__, "policy_type", policy_type)

    @property
    @pulumi.getter(name="instanceCount")
    def instance_count(self) -> int:
        """
        The number of instances for the model deployment.
        """
        return pulumi.get(self, "instance_count")

    @property
    @pulumi.getter(name="policyType")
    def policy_type(self) -> str:
        """
        The type of scaling policy.
        """
        return pulumi.get(self, "policy_type")


@pulumi.output_type
class GetModelDeploymentShapesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        """
        :param str name: The name of the model deployment shape.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the model deployment shape.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetModelDeploymentShapesModelDeploymentShapeResult(dict):
    def __init__(__self__, *,
                 core_count: int,
                 memory_in_gbs: int,
                 name: str):
        """
        :param int core_count: The number of cores associated with this model deployment shape.
        :param int memory_in_gbs: The amount of memory in GBs associated with this model deployment shape.
        :param str name: The name of the model deployment shape.
        """
        pulumi.set(__self__, "core_count", core_count)
        pulumi.set(__self__, "memory_in_gbs", memory_in_gbs)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="coreCount")
    def core_count(self) -> int:
        """
        The number of cores associated with this model deployment shape.
        """
        return pulumi.get(self, "core_count")

    @property
    @pulumi.getter(name="memoryInGbs")
    def memory_in_gbs(self) -> int:
        """
        The amount of memory in GBs associated with this model deployment shape.
        """
        return pulumi.get(self, "memory_in_gbs")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the model deployment shape.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetModelDeploymentsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetModelDeploymentsModelDeploymentResult(dict):
    def __init__(__self__, *,
                 category_log_details: 'outputs.GetModelDeploymentsModelDeploymentCategoryLogDetailsResult',
                 compartment_id: str,
                 created_by: str,
                 defined_tags: Mapping[str, Any],
                 description: str,
                 display_name: str,
                 freeform_tags: Mapping[str, Any],
                 id: str,
                 lifecycle_details: str,
                 model_deployment_configuration_details: 'outputs.GetModelDeploymentsModelDeploymentModelDeploymentConfigurationDetailsResult',
                 model_deployment_url: str,
                 project_id: str,
                 state: str,
                 time_created: str):
        """
        :param 'GetModelDeploymentsModelDeploymentCategoryLogDetailsArgs' category_log_details: The log details for each category.
        :param str compartment_id: <b>Filter</b> results by the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
        :param str created_by: <b>Filter</b> results by the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the user who created the resource.
        :param Mapping[str, Any] defined_tags: Defined tags for this resource. Each key is predefined and scoped to a namespace. See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Operations.CostCenter": "42"}`
        :param str description: A short description of the model deployment.
        :param str display_name: <b>Filter</b> results by its user-friendly name.
        :param Mapping[str, Any] freeform_tags: Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Department": "Finance"}`
        :param str id: <b>Filter</b> results by [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm). Must be an OCID of the correct type for the resource type.
        :param str lifecycle_details: Details about the state of the model deployment.
        :param 'GetModelDeploymentsModelDeploymentModelDeploymentConfigurationDetailsArgs' model_deployment_configuration_details: The model deployment configuration details.
        :param str model_deployment_url: The URL to interact with the model deployment.
        :param str project_id: <b>Filter</b> results by the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the project.
        :param str state: <b>Filter</b> results by the specified lifecycle state. Must be a valid state for the resource type.
        :param str time_created: The date and time the resource was created, in the timestamp format defined by [RFC3339](https://tools.ietf.org/html/rfc3339). Example: 2019-08-25T21:10:29.41Z
        """
        pulumi.set(__self__, "category_log_details", category_log_details)
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "created_by", created_by)
        pulumi.set(__self__, "defined_tags", defined_tags)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "freeform_tags", freeform_tags)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        pulumi.set(__self__, "model_deployment_configuration_details", model_deployment_configuration_details)
        pulumi.set(__self__, "model_deployment_url", model_deployment_url)
        pulumi.set(__self__, "project_id", project_id)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "time_created", time_created)

    @property
    @pulumi.getter(name="categoryLogDetails")
    def category_log_details(self) -> 'outputs.GetModelDeploymentsModelDeploymentCategoryLogDetailsResult':
        """
        The log details for each category.
        """
        return pulumi.get(self, "category_log_details")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> str:
        """
        <b>Filter</b> results by the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> str:
        """
        <b>Filter</b> results by the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the user who created the resource.
        """
        return pulumi.get(self, "created_by")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Mapping[str, Any]:
        """
        Defined tags for this resource. Each key is predefined and scoped to a namespace. See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Operations.CostCenter": "42"}`
        """
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        A short description of the model deployment.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        <b>Filter</b> results by its user-friendly name.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Mapping[str, Any]:
        """
        Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Department": "Finance"}`
        """
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        <b>Filter</b> results by [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm). Must be an OCID of the correct type for the resource type.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> str:
        """
        Details about the state of the model deployment.
        """
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter(name="modelDeploymentConfigurationDetails")
    def model_deployment_configuration_details(self) -> 'outputs.GetModelDeploymentsModelDeploymentModelDeploymentConfigurationDetailsResult':
        """
        The model deployment configuration details.
        """
        return pulumi.get(self, "model_deployment_configuration_details")

    @property
    @pulumi.getter(name="modelDeploymentUrl")
    def model_deployment_url(self) -> str:
        """
        The URL to interact with the model deployment.
        """
        return pulumi.get(self, "model_deployment_url")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> str:
        """
        <b>Filter</b> results by the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the project.
        """
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        <b>Filter</b> results by the specified lifecycle state. Must be a valid state for the resource type.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> str:
        """
        The date and time the resource was created, in the timestamp format defined by [RFC3339](https://tools.ietf.org/html/rfc3339). Example: 2019-08-25T21:10:29.41Z
        """
        return pulumi.get(self, "time_created")


@pulumi.output_type
class GetModelDeploymentsModelDeploymentCategoryLogDetailsResult(dict):
    def __init__(__self__, *,
                 access: 'outputs.GetModelDeploymentsModelDeploymentCategoryLogDetailsAccessResult',
                 predict: 'outputs.GetModelDeploymentsModelDeploymentCategoryLogDetailsPredictResult'):
        """
        :param 'GetModelDeploymentsModelDeploymentCategoryLogDetailsAccessArgs' access: The log details.
        :param 'GetModelDeploymentsModelDeploymentCategoryLogDetailsPredictArgs' predict: The log details.
        """
        pulumi.set(__self__, "access", access)
        pulumi.set(__self__, "predict", predict)

    @property
    @pulumi.getter
    def access(self) -> 'outputs.GetModelDeploymentsModelDeploymentCategoryLogDetailsAccessResult':
        """
        The log details.
        """
        return pulumi.get(self, "access")

    @property
    @pulumi.getter
    def predict(self) -> 'outputs.GetModelDeploymentsModelDeploymentCategoryLogDetailsPredictResult':
        """
        The log details.
        """
        return pulumi.get(self, "predict")


@pulumi.output_type
class GetModelDeploymentsModelDeploymentCategoryLogDetailsAccessResult(dict):
    def __init__(__self__, *,
                 log_group_id: str,
                 log_id: str):
        """
        :param str log_group_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of a log group to work with.
        :param str log_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of a log to work with.
        """
        pulumi.set(__self__, "log_group_id", log_group_id)
        pulumi.set(__self__, "log_id", log_id)

    @property
    @pulumi.getter(name="logGroupId")
    def log_group_id(self) -> str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of a log group to work with.
        """
        return pulumi.get(self, "log_group_id")

    @property
    @pulumi.getter(name="logId")
    def log_id(self) -> str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of a log to work with.
        """
        return pulumi.get(self, "log_id")


@pulumi.output_type
class GetModelDeploymentsModelDeploymentCategoryLogDetailsPredictResult(dict):
    def __init__(__self__, *,
                 log_group_id: str,
                 log_id: str):
        """
        :param str log_group_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of a log group to work with.
        :param str log_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of a log to work with.
        """
        pulumi.set(__self__, "log_group_id", log_group_id)
        pulumi.set(__self__, "log_id", log_id)

    @property
    @pulumi.getter(name="logGroupId")
    def log_group_id(self) -> str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of a log group to work with.
        """
        return pulumi.get(self, "log_group_id")

    @property
    @pulumi.getter(name="logId")
    def log_id(self) -> str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of a log to work with.
        """
        return pulumi.get(self, "log_id")


@pulumi.output_type
class GetModelDeploymentsModelDeploymentModelDeploymentConfigurationDetailsResult(dict):
    def __init__(__self__, *,
                 deployment_type: str,
                 model_configuration_details: 'outputs.GetModelDeploymentsModelDeploymentModelDeploymentConfigurationDetailsModelConfigurationDetailsResult'):
        """
        :param str deployment_type: The type of the model deployment.
        :param 'GetModelDeploymentsModelDeploymentModelDeploymentConfigurationDetailsModelConfigurationDetailsArgs' model_configuration_details: The model configuration details.
        """
        pulumi.set(__self__, "deployment_type", deployment_type)
        pulumi.set(__self__, "model_configuration_details", model_configuration_details)

    @property
    @pulumi.getter(name="deploymentType")
    def deployment_type(self) -> str:
        """
        The type of the model deployment.
        """
        return pulumi.get(self, "deployment_type")

    @property
    @pulumi.getter(name="modelConfigurationDetails")
    def model_configuration_details(self) -> 'outputs.GetModelDeploymentsModelDeploymentModelDeploymentConfigurationDetailsModelConfigurationDetailsResult':
        """
        The model configuration details.
        """
        return pulumi.get(self, "model_configuration_details")


@pulumi.output_type
class GetModelDeploymentsModelDeploymentModelDeploymentConfigurationDetailsModelConfigurationDetailsResult(dict):
    def __init__(__self__, *,
                 bandwidth_mbps: int,
                 instance_configuration: 'outputs.GetModelDeploymentsModelDeploymentModelDeploymentConfigurationDetailsModelConfigurationDetailsInstanceConfigurationResult',
                 model_id: str,
                 scaling_policy: 'outputs.GetModelDeploymentsModelDeploymentModelDeploymentConfigurationDetailsModelConfigurationDetailsScalingPolicyResult'):
        """
        :param int bandwidth_mbps: The network bandwidth for the model.
        :param 'GetModelDeploymentsModelDeploymentModelDeploymentConfigurationDetailsModelConfigurationDetailsInstanceConfigurationArgs' instance_configuration: The model deployment instance configuration
        :param str model_id: The OCID of the model you want to deploy.
        :param 'GetModelDeploymentsModelDeploymentModelDeploymentConfigurationDetailsModelConfigurationDetailsScalingPolicyArgs' scaling_policy: The scaling policy to apply to each model of the deployment.
        """
        pulumi.set(__self__, "bandwidth_mbps", bandwidth_mbps)
        pulumi.set(__self__, "instance_configuration", instance_configuration)
        pulumi.set(__self__, "model_id", model_id)
        pulumi.set(__self__, "scaling_policy", scaling_policy)

    @property
    @pulumi.getter(name="bandwidthMbps")
    def bandwidth_mbps(self) -> int:
        """
        The network bandwidth for the model.
        """
        return pulumi.get(self, "bandwidth_mbps")

    @property
    @pulumi.getter(name="instanceConfiguration")
    def instance_configuration(self) -> 'outputs.GetModelDeploymentsModelDeploymentModelDeploymentConfigurationDetailsModelConfigurationDetailsInstanceConfigurationResult':
        """
        The model deployment instance configuration
        """
        return pulumi.get(self, "instance_configuration")

    @property
    @pulumi.getter(name="modelId")
    def model_id(self) -> str:
        """
        The OCID of the model you want to deploy.
        """
        return pulumi.get(self, "model_id")

    @property
    @pulumi.getter(name="scalingPolicy")
    def scaling_policy(self) -> 'outputs.GetModelDeploymentsModelDeploymentModelDeploymentConfigurationDetailsModelConfigurationDetailsScalingPolicyResult':
        """
        The scaling policy to apply to each model of the deployment.
        """
        return pulumi.get(self, "scaling_policy")


@pulumi.output_type
class GetModelDeploymentsModelDeploymentModelDeploymentConfigurationDetailsModelConfigurationDetailsInstanceConfigurationResult(dict):
    def __init__(__self__, *,
                 instance_shape_name: str):
        """
        :param str instance_shape_name: The shape used to launch the model deployment instances.
        """
        pulumi.set(__self__, "instance_shape_name", instance_shape_name)

    @property
    @pulumi.getter(name="instanceShapeName")
    def instance_shape_name(self) -> str:
        """
        The shape used to launch the model deployment instances.
        """
        return pulumi.get(self, "instance_shape_name")


@pulumi.output_type
class GetModelDeploymentsModelDeploymentModelDeploymentConfigurationDetailsModelConfigurationDetailsScalingPolicyResult(dict):
    def __init__(__self__, *,
                 instance_count: int,
                 policy_type: str):
        """
        :param int instance_count: The number of instances for the model deployment.
        :param str policy_type: The type of scaling policy.
        """
        pulumi.set(__self__, "instance_count", instance_count)
        pulumi.set(__self__, "policy_type", policy_type)

    @property
    @pulumi.getter(name="instanceCount")
    def instance_count(self) -> int:
        """
        The number of instances for the model deployment.
        """
        return pulumi.get(self, "instance_count")

    @property
    @pulumi.getter(name="policyType")
    def policy_type(self) -> str:
        """
        The type of scaling policy.
        """
        return pulumi.get(self, "policy_type")


@pulumi.output_type
class GetModelsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetModelsModelResult(dict):
    def __init__(__self__, *,
                 artifact_content_disposition: str,
                 artifact_content_length: str,
                 artifact_content_md5: str,
                 artifact_last_modified: str,
                 compartment_id: str,
                 created_by: str,
                 custom_metadata_lists: Sequence['outputs.GetModelsModelCustomMetadataListResult'],
                 defined_metadata_lists: Sequence['outputs.GetModelsModelDefinedMetadataListResult'],
                 defined_tags: Mapping[str, Any],
                 description: str,
                 display_name: str,
                 empty_model: bool,
                 freeform_tags: Mapping[str, Any],
                 id: str,
                 input_schema: str,
                 model_artifact: str,
                 output_schema: str,
                 project_id: str,
                 state: str,
                 time_created: str):
        """
        :param str compartment_id: <b>Filter</b> results by the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
        :param str created_by: <b>Filter</b> results by the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the user who created the resource.
        :param Sequence['GetModelsModelCustomMetadataListArgs'] custom_metadata_lists: An array of custom metadata details for the model.
        :param Sequence['GetModelsModelDefinedMetadataListArgs'] defined_metadata_lists: An array of defined metadata details for the model.
        :param Mapping[str, Any] defined_tags: Defined tags for this resource. Each key is predefined and scoped to a namespace. See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Operations.CostCenter": "42"}`
        :param str description: A short description of the model.
        :param str display_name: <b>Filter</b> results by its user-friendly name.
        :param Mapping[str, Any] freeform_tags: Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Department": "Finance"}`
        :param str id: <b>Filter</b> results by [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm). Must be an OCID of the correct type for the resource type.
        :param str input_schema: Input schema file content in String format
        :param str output_schema: Output schema file content in String format
        :param str project_id: <b>Filter</b> results by the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the project.
        :param str state: <b>Filter</b> results by the specified lifecycle state. Must be a valid state for the resource type.
        :param str time_created: The date and time the resource was created in the timestamp format defined by [RFC3339](https://tools.ietf.org/html/rfc3339). Example: 2019-08-25T21:10:29.41Z
        """
        pulumi.set(__self__, "artifact_content_disposition", artifact_content_disposition)
        pulumi.set(__self__, "artifact_content_length", artifact_content_length)
        pulumi.set(__self__, "artifact_content_md5", artifact_content_md5)
        pulumi.set(__self__, "artifact_last_modified", artifact_last_modified)
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "created_by", created_by)
        pulumi.set(__self__, "custom_metadata_lists", custom_metadata_lists)
        pulumi.set(__self__, "defined_metadata_lists", defined_metadata_lists)
        pulumi.set(__self__, "defined_tags", defined_tags)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "empty_model", empty_model)
        pulumi.set(__self__, "freeform_tags", freeform_tags)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "input_schema", input_schema)
        pulumi.set(__self__, "model_artifact", model_artifact)
        pulumi.set(__self__, "output_schema", output_schema)
        pulumi.set(__self__, "project_id", project_id)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "time_created", time_created)

    @property
    @pulumi.getter(name="artifactContentDisposition")
    def artifact_content_disposition(self) -> str:
        return pulumi.get(self, "artifact_content_disposition")

    @property
    @pulumi.getter(name="artifactContentLength")
    def artifact_content_length(self) -> str:
        return pulumi.get(self, "artifact_content_length")

    @property
    @pulumi.getter(name="artifactContentMd5")
    def artifact_content_md5(self) -> str:
        return pulumi.get(self, "artifact_content_md5")

    @property
    @pulumi.getter(name="artifactLastModified")
    def artifact_last_modified(self) -> str:
        return pulumi.get(self, "artifact_last_modified")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> str:
        """
        <b>Filter</b> results by the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> str:
        """
        <b>Filter</b> results by the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the user who created the resource.
        """
        return pulumi.get(self, "created_by")

    @property
    @pulumi.getter(name="customMetadataLists")
    def custom_metadata_lists(self) -> Sequence['outputs.GetModelsModelCustomMetadataListResult']:
        """
        An array of custom metadata details for the model.
        """
        return pulumi.get(self, "custom_metadata_lists")

    @property
    @pulumi.getter(name="definedMetadataLists")
    def defined_metadata_lists(self) -> Sequence['outputs.GetModelsModelDefinedMetadataListResult']:
        """
        An array of defined metadata details for the model.
        """
        return pulumi.get(self, "defined_metadata_lists")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Mapping[str, Any]:
        """
        Defined tags for this resource. Each key is predefined and scoped to a namespace. See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Operations.CostCenter": "42"}`
        """
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        A short description of the model.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        <b>Filter</b> results by its user-friendly name.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="emptyModel")
    def empty_model(self) -> bool:
        return pulumi.get(self, "empty_model")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Mapping[str, Any]:
        """
        Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Department": "Finance"}`
        """
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        <b>Filter</b> results by [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm). Must be an OCID of the correct type for the resource type.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="inputSchema")
    def input_schema(self) -> str:
        """
        Input schema file content in String format
        """
        return pulumi.get(self, "input_schema")

    @property
    @pulumi.getter(name="modelArtifact")
    def model_artifact(self) -> str:
        return pulumi.get(self, "model_artifact")

    @property
    @pulumi.getter(name="outputSchema")
    def output_schema(self) -> str:
        """
        Output schema file content in String format
        """
        return pulumi.get(self, "output_schema")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> str:
        """
        <b>Filter</b> results by the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the project.
        """
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        <b>Filter</b> results by the specified lifecycle state. Must be a valid state for the resource type.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> str:
        """
        The date and time the resource was created in the timestamp format defined by [RFC3339](https://tools.ietf.org/html/rfc3339). Example: 2019-08-25T21:10:29.41Z
        """
        return pulumi.get(self, "time_created")


@pulumi.output_type
class GetModelsModelCustomMetadataListResult(dict):
    def __init__(__self__, *,
                 category: str,
                 description: str,
                 key: str,
                 value: str):
        """
        :param str category: Category of model metadata which should be null for defined metadata.For custom metadata is should be one of the following values "Performance,Training Profile,Training and Validation Datasets,Training Environment,other".
        :param str description: A short description of the model.
        :param str key: key of the model Metadata. This can be custom key(user defined) as well as Oracle Cloud Infrastructure defined. Example of Oracle defined keys - useCaseType, libraryName, libraryVersion, estimatorClass, hyperParameters. Example of user defined keys - BaseModel
        :param str value: Value of model metadata
        """
        pulumi.set(__self__, "category", category)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def category(self) -> str:
        """
        Category of model metadata which should be null for defined metadata.For custom metadata is should be one of the following values "Performance,Training Profile,Training and Validation Datasets,Training Environment,other".
        """
        return pulumi.get(self, "category")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        A short description of the model.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        key of the model Metadata. This can be custom key(user defined) as well as Oracle Cloud Infrastructure defined. Example of Oracle defined keys - useCaseType, libraryName, libraryVersion, estimatorClass, hyperParameters. Example of user defined keys - BaseModel
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Value of model metadata
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetModelsModelDefinedMetadataListResult(dict):
    def __init__(__self__, *,
                 category: str,
                 description: str,
                 key: str,
                 value: str):
        """
        :param str category: Category of model metadata which should be null for defined metadata.For custom metadata is should be one of the following values "Performance,Training Profile,Training and Validation Datasets,Training Environment,other".
        :param str description: A short description of the model.
        :param str key: key of the model Metadata. This can be custom key(user defined) as well as Oracle Cloud Infrastructure defined. Example of Oracle defined keys - useCaseType, libraryName, libraryVersion, estimatorClass, hyperParameters. Example of user defined keys - BaseModel
        :param str value: Value of model metadata
        """
        pulumi.set(__self__, "category", category)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def category(self) -> str:
        """
        Category of model metadata which should be null for defined metadata.For custom metadata is should be one of the following values "Performance,Training Profile,Training and Validation Datasets,Training Environment,other".
        """
        return pulumi.get(self, "category")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        A short description of the model.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        key of the model Metadata. This can be custom key(user defined) as well as Oracle Cloud Infrastructure defined. Example of Oracle defined keys - useCaseType, libraryName, libraryVersion, estimatorClass, hyperParameters. Example of user defined keys - BaseModel
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Value of model metadata
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetNotebookSessionNotebookSessionConfigurationDetailsResult(dict):
    def __init__(__self__, *,
                 block_storage_size_in_gbs: int,
                 notebook_session_shape_config_details: 'outputs.GetNotebookSessionNotebookSessionConfigurationDetailsNotebookSessionShapeConfigDetailsResult',
                 shape: str,
                 subnet_id: str):
        """
        :param int block_storage_size_in_gbs: A notebook session instance is provided with a block storage volume. This specifies the size of the volume in GBs.
        :param 'GetNotebookSessionNotebookSessionConfigurationDetailsNotebookSessionShapeConfigDetailsArgs' notebook_session_shape_config_details: Details for the notebook session shape configuration.
        :param str shape: The shape used to launch the notebook session compute instance.  The list of available shapes in a given compartment can be retrieved using the `ListNotebookSessionShapes` endpoint.
        :param str subnet_id: A notebook session instance is provided with a VNIC for network access.  This specifies the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the subnet to create a VNIC in.  The subnet should be in a VCN with a NAT gateway for egress to the internet.
        """
        pulumi.set(__self__, "block_storage_size_in_gbs", block_storage_size_in_gbs)
        pulumi.set(__self__, "notebook_session_shape_config_details", notebook_session_shape_config_details)
        pulumi.set(__self__, "shape", shape)
        pulumi.set(__self__, "subnet_id", subnet_id)

    @property
    @pulumi.getter(name="blockStorageSizeInGbs")
    def block_storage_size_in_gbs(self) -> int:
        """
        A notebook session instance is provided with a block storage volume. This specifies the size of the volume in GBs.
        """
        return pulumi.get(self, "block_storage_size_in_gbs")

    @property
    @pulumi.getter(name="notebookSessionShapeConfigDetails")
    def notebook_session_shape_config_details(self) -> 'outputs.GetNotebookSessionNotebookSessionConfigurationDetailsNotebookSessionShapeConfigDetailsResult':
        """
        Details for the notebook session shape configuration.
        """
        return pulumi.get(self, "notebook_session_shape_config_details")

    @property
    @pulumi.getter
    def shape(self) -> str:
        """
        The shape used to launch the notebook session compute instance.  The list of available shapes in a given compartment can be retrieved using the `ListNotebookSessionShapes` endpoint.
        """
        return pulumi.get(self, "shape")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> str:
        """
        A notebook session instance is provided with a VNIC for network access.  This specifies the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the subnet to create a VNIC in.  The subnet should be in a VCN with a NAT gateway for egress to the internet.
        """
        return pulumi.get(self, "subnet_id")


@pulumi.output_type
class GetNotebookSessionNotebookSessionConfigurationDetailsNotebookSessionShapeConfigDetailsResult(dict):
    def __init__(__self__, *,
                 memory_in_gbs: float,
                 ocpus: float):
        """
        :param float memory_in_gbs: A notebook session instance of type VM.Standard.E3.Flex allows memory to be specified. This specifies the size of the memory in GBs.
        :param float ocpus: A notebook session instance of type VM.Standard.E3.Flex allows the ocpu count to be specified.
        """
        pulumi.set(__self__, "memory_in_gbs", memory_in_gbs)
        pulumi.set(__self__, "ocpus", ocpus)

    @property
    @pulumi.getter(name="memoryInGbs")
    def memory_in_gbs(self) -> float:
        """
        A notebook session instance of type VM.Standard.E3.Flex allows memory to be specified. This specifies the size of the memory in GBs.
        """
        return pulumi.get(self, "memory_in_gbs")

    @property
    @pulumi.getter
    def ocpus(self) -> float:
        """
        A notebook session instance of type VM.Standard.E3.Flex allows the ocpu count to be specified.
        """
        return pulumi.get(self, "ocpus")


@pulumi.output_type
class GetNotebookSessionShapesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        """
        :param str name: The name of the notebook session shape.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the notebook session shape.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetNotebookSessionShapesNotebookSessionShapeResult(dict):
    def __init__(__self__, *,
                 core_count: int,
                 memory_in_gbs: int,
                 name: str,
                 shape_series: str):
        """
        :param int core_count: The number of cores associated with this notebook session shape.
        :param int memory_in_gbs: The amount of memory in GBs associated with this notebook session shape.
        :param str name: The name of the notebook session shape.
        :param str shape_series: The family that the compute shape belongs to.
        """
        pulumi.set(__self__, "core_count", core_count)
        pulumi.set(__self__, "memory_in_gbs", memory_in_gbs)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "shape_series", shape_series)

    @property
    @pulumi.getter(name="coreCount")
    def core_count(self) -> int:
        """
        The number of cores associated with this notebook session shape.
        """
        return pulumi.get(self, "core_count")

    @property
    @pulumi.getter(name="memoryInGbs")
    def memory_in_gbs(self) -> int:
        """
        The amount of memory in GBs associated with this notebook session shape.
        """
        return pulumi.get(self, "memory_in_gbs")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the notebook session shape.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="shapeSeries")
    def shape_series(self) -> str:
        """
        The family that the compute shape belongs to.
        """
        return pulumi.get(self, "shape_series")


@pulumi.output_type
class GetNotebookSessionsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetNotebookSessionsNotebookSessionResult(dict):
    def __init__(__self__, *,
                 compartment_id: str,
                 created_by: str,
                 defined_tags: Mapping[str, Any],
                 display_name: str,
                 freeform_tags: Mapping[str, Any],
                 id: str,
                 lifecycle_details: str,
                 notebook_session_configuration_details: 'outputs.GetNotebookSessionsNotebookSessionNotebookSessionConfigurationDetailsResult',
                 notebook_session_url: str,
                 project_id: str,
                 state: str,
                 time_created: str):
        """
        :param str compartment_id: <b>Filter</b> results by the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
        :param str created_by: <b>Filter</b> results by the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the user who created the resource.
        :param Mapping[str, Any] defined_tags: Defined tags for this resource. Each key is predefined and scoped to a namespace. See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Operations.CostCenter": "42"}`
        :param str display_name: <b>Filter</b> results by its user-friendly name.
        :param Mapping[str, Any] freeform_tags: Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Department": "Finance"}`
        :param str id: <b>Filter</b> results by [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm). Must be an OCID of the correct type for the resource type.
        :param str lifecycle_details: Details about the state of the notebook session.
        :param 'GetNotebookSessionsNotebookSessionNotebookSessionConfigurationDetailsArgs' notebook_session_configuration_details: Details for the notebook session configuration.
        :param str notebook_session_url: The URL to interact with the notebook session.
        :param str project_id: <b>Filter</b> results by the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the project.
        :param str state: <b>Filter</b> results by the specified lifecycle state. Must be a valid state for the resource type.
        :param str time_created: The date and time the resource was created in the timestamp format defined by [RFC3339](https://tools.ietf.org/html/rfc3339). Example: 2019-08-25T21:10:29.41Z
        """
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "created_by", created_by)
        pulumi.set(__self__, "defined_tags", defined_tags)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "freeform_tags", freeform_tags)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        pulumi.set(__self__, "notebook_session_configuration_details", notebook_session_configuration_details)
        pulumi.set(__self__, "notebook_session_url", notebook_session_url)
        pulumi.set(__self__, "project_id", project_id)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "time_created", time_created)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> str:
        """
        <b>Filter</b> results by the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> str:
        """
        <b>Filter</b> results by the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the user who created the resource.
        """
        return pulumi.get(self, "created_by")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Mapping[str, Any]:
        """
        Defined tags for this resource. Each key is predefined and scoped to a namespace. See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Operations.CostCenter": "42"}`
        """
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        <b>Filter</b> results by its user-friendly name.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Mapping[str, Any]:
        """
        Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Department": "Finance"}`
        """
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        <b>Filter</b> results by [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm). Must be an OCID of the correct type for the resource type.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> str:
        """
        Details about the state of the notebook session.
        """
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter(name="notebookSessionConfigurationDetails")
    def notebook_session_configuration_details(self) -> 'outputs.GetNotebookSessionsNotebookSessionNotebookSessionConfigurationDetailsResult':
        """
        Details for the notebook session configuration.
        """
        return pulumi.get(self, "notebook_session_configuration_details")

    @property
    @pulumi.getter(name="notebookSessionUrl")
    def notebook_session_url(self) -> str:
        """
        The URL to interact with the notebook session.
        """
        return pulumi.get(self, "notebook_session_url")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> str:
        """
        <b>Filter</b> results by the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the project.
        """
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        <b>Filter</b> results by the specified lifecycle state. Must be a valid state for the resource type.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> str:
        """
        The date and time the resource was created in the timestamp format defined by [RFC3339](https://tools.ietf.org/html/rfc3339). Example: 2019-08-25T21:10:29.41Z
        """
        return pulumi.get(self, "time_created")


@pulumi.output_type
class GetNotebookSessionsNotebookSessionNotebookSessionConfigurationDetailsResult(dict):
    def __init__(__self__, *,
                 block_storage_size_in_gbs: int,
                 notebook_session_shape_config_details: 'outputs.GetNotebookSessionsNotebookSessionNotebookSessionConfigurationDetailsNotebookSessionShapeConfigDetailsResult',
                 shape: str,
                 subnet_id: str):
        """
        :param int block_storage_size_in_gbs: A notebook session instance is provided with a block storage volume. This specifies the size of the volume in GBs.
        :param 'GetNotebookSessionsNotebookSessionNotebookSessionConfigurationDetailsNotebookSessionShapeConfigDetailsArgs' notebook_session_shape_config_details: Details for the notebook session shape configuration.
        :param str shape: The shape used to launch the notebook session compute instance.  The list of available shapes in a given compartment can be retrieved using the `ListNotebookSessionShapes` endpoint.
        :param str subnet_id: A notebook session instance is provided with a VNIC for network access.  This specifies the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the subnet to create a VNIC in.  The subnet should be in a VCN with a NAT gateway for egress to the internet.
        """
        pulumi.set(__self__, "block_storage_size_in_gbs", block_storage_size_in_gbs)
        pulumi.set(__self__, "notebook_session_shape_config_details", notebook_session_shape_config_details)
        pulumi.set(__self__, "shape", shape)
        pulumi.set(__self__, "subnet_id", subnet_id)

    @property
    @pulumi.getter(name="blockStorageSizeInGbs")
    def block_storage_size_in_gbs(self) -> int:
        """
        A notebook session instance is provided with a block storage volume. This specifies the size of the volume in GBs.
        """
        return pulumi.get(self, "block_storage_size_in_gbs")

    @property
    @pulumi.getter(name="notebookSessionShapeConfigDetails")
    def notebook_session_shape_config_details(self) -> 'outputs.GetNotebookSessionsNotebookSessionNotebookSessionConfigurationDetailsNotebookSessionShapeConfigDetailsResult':
        """
        Details for the notebook session shape configuration.
        """
        return pulumi.get(self, "notebook_session_shape_config_details")

    @property
    @pulumi.getter
    def shape(self) -> str:
        """
        The shape used to launch the notebook session compute instance.  The list of available shapes in a given compartment can be retrieved using the `ListNotebookSessionShapes` endpoint.
        """
        return pulumi.get(self, "shape")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> str:
        """
        A notebook session instance is provided with a VNIC for network access.  This specifies the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the subnet to create a VNIC in.  The subnet should be in a VCN with a NAT gateway for egress to the internet.
        """
        return pulumi.get(self, "subnet_id")


@pulumi.output_type
class GetNotebookSessionsNotebookSessionNotebookSessionConfigurationDetailsNotebookSessionShapeConfigDetailsResult(dict):
    def __init__(__self__, *,
                 memory_in_gbs: float,
                 ocpus: float):
        """
        :param float memory_in_gbs: A notebook session instance of type VM.Standard.E3.Flex allows memory to be specified. This specifies the size of the memory in GBs.
        :param float ocpus: A notebook session instance of type VM.Standard.E3.Flex allows the ocpu count to be specified.
        """
        pulumi.set(__self__, "memory_in_gbs", memory_in_gbs)
        pulumi.set(__self__, "ocpus", ocpus)

    @property
    @pulumi.getter(name="memoryInGbs")
    def memory_in_gbs(self) -> float:
        """
        A notebook session instance of type VM.Standard.E3.Flex allows memory to be specified. This specifies the size of the memory in GBs.
        """
        return pulumi.get(self, "memory_in_gbs")

    @property
    @pulumi.getter
    def ocpus(self) -> float:
        """
        A notebook session instance of type VM.Standard.E3.Flex allows the ocpu count to be specified.
        """
        return pulumi.get(self, "ocpus")


@pulumi.output_type
class GetProjectsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetProjectsProjectResult(dict):
    def __init__(__self__, *,
                 compartment_id: str,
                 created_by: str,
                 defined_tags: Mapping[str, Any],
                 description: str,
                 display_name: str,
                 freeform_tags: Mapping[str, Any],
                 id: str,
                 state: str,
                 time_created: str):
        """
        :param str compartment_id: <b>Filter</b> results by the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
        :param str created_by: <b>Filter</b> results by the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the user who created the resource.
        :param Mapping[str, Any] defined_tags: Defined tags for this resource. Each key is predefined and scoped to a namespace. See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Operations.CostCenter": "42"}`
        :param str description: A short description of the project.
        :param str display_name: <b>Filter</b> results by its user-friendly name.
        :param Mapping[str, Any] freeform_tags: Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Department": "Finance"}`
        :param str id: <b>Filter</b> results by [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm). Must be an OCID of the correct type for the resource type.
        :param str state: <b>Filter</b> results by the specified lifecycle state. Must be a valid state for the resource type.
        :param str time_created: The date and time the resource was created in the timestamp format defined by [RFC3339](https://tools.ietf.org/html/rfc3339). Example: 2019-08-25T21:10:29.41Z
        """
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "created_by", created_by)
        pulumi.set(__self__, "defined_tags", defined_tags)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "freeform_tags", freeform_tags)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "time_created", time_created)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> str:
        """
        <b>Filter</b> results by the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> str:
        """
        <b>Filter</b> results by the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the user who created the resource.
        """
        return pulumi.get(self, "created_by")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Mapping[str, Any]:
        """
        Defined tags for this resource. Each key is predefined and scoped to a namespace. See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Operations.CostCenter": "42"}`
        """
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        A short description of the project.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        <b>Filter</b> results by its user-friendly name.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Mapping[str, Any]:
        """
        Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Department": "Finance"}`
        """
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        <b>Filter</b> results by [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm). Must be an OCID of the correct type for the resource type.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        <b>Filter</b> results by the specified lifecycle state. Must be a valid state for the resource type.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> str:
        """
        The date and time the resource was created in the timestamp format defined by [RFC3339](https://tools.ietf.org/html/rfc3339). Example: 2019-08-25T21:10:29.41Z
        """
        return pulumi.get(self, "time_created")


