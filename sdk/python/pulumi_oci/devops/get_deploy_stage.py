# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetDeployStageResult',
    'AwaitableGetDeployStageResult',
    'get_deploy_stage',
]

@pulumi.output_type
class GetDeployStageResult:
    """
    A collection of values returned by getDeployStage.
    """
    def __init__(__self__, approval_policy=None, blue_backend_ips=None, compartment_id=None, compute_instance_group_deploy_environment_id=None, config=None, defined_tags=None, deploy_artifact_id=None, deploy_artifact_ids=None, deploy_pipeline_id=None, deploy_stage_id=None, deploy_stage_predecessor_collection=None, deploy_stage_type=None, deployment_spec_deploy_artifact_id=None, description=None, display_name=None, docker_image_deploy_artifact_id=None, failure_policy=None, freeform_tags=None, function_deploy_environment_id=None, function_timeout_in_seconds=None, green_backend_ips=None, id=None, is_async=None, is_validation_enabled=None, kubernetes_manifest_deploy_artifact_ids=None, lifecycle_details=None, load_balancer_config=None, max_memory_in_mbs=None, namespace=None, oke_cluster_deploy_environment_id=None, project_id=None, rollback_policy=None, rollout_policy=None, state=None, system_tags=None, time_created=None, time_updated=None, traffic_shift_target=None, wait_criteria=None):
        if approval_policy and not isinstance(approval_policy, dict):
            raise TypeError("Expected argument 'approval_policy' to be a dict")
        pulumi.set(__self__, "approval_policy", approval_policy)
        if blue_backend_ips and not isinstance(blue_backend_ips, dict):
            raise TypeError("Expected argument 'blue_backend_ips' to be a dict")
        pulumi.set(__self__, "blue_backend_ips", blue_backend_ips)
        if compartment_id and not isinstance(compartment_id, str):
            raise TypeError("Expected argument 'compartment_id' to be a str")
        pulumi.set(__self__, "compartment_id", compartment_id)
        if compute_instance_group_deploy_environment_id and not isinstance(compute_instance_group_deploy_environment_id, str):
            raise TypeError("Expected argument 'compute_instance_group_deploy_environment_id' to be a str")
        pulumi.set(__self__, "compute_instance_group_deploy_environment_id", compute_instance_group_deploy_environment_id)
        if config and not isinstance(config, dict):
            raise TypeError("Expected argument 'config' to be a dict")
        pulumi.set(__self__, "config", config)
        if defined_tags and not isinstance(defined_tags, dict):
            raise TypeError("Expected argument 'defined_tags' to be a dict")
        pulumi.set(__self__, "defined_tags", defined_tags)
        if deploy_artifact_id and not isinstance(deploy_artifact_id, str):
            raise TypeError("Expected argument 'deploy_artifact_id' to be a str")
        pulumi.set(__self__, "deploy_artifact_id", deploy_artifact_id)
        if deploy_artifact_ids and not isinstance(deploy_artifact_ids, list):
            raise TypeError("Expected argument 'deploy_artifact_ids' to be a list")
        pulumi.set(__self__, "deploy_artifact_ids", deploy_artifact_ids)
        if deploy_pipeline_id and not isinstance(deploy_pipeline_id, str):
            raise TypeError("Expected argument 'deploy_pipeline_id' to be a str")
        pulumi.set(__self__, "deploy_pipeline_id", deploy_pipeline_id)
        if deploy_stage_id and not isinstance(deploy_stage_id, str):
            raise TypeError("Expected argument 'deploy_stage_id' to be a str")
        pulumi.set(__self__, "deploy_stage_id", deploy_stage_id)
        if deploy_stage_predecessor_collection and not isinstance(deploy_stage_predecessor_collection, dict):
            raise TypeError("Expected argument 'deploy_stage_predecessor_collection' to be a dict")
        pulumi.set(__self__, "deploy_stage_predecessor_collection", deploy_stage_predecessor_collection)
        if deploy_stage_type and not isinstance(deploy_stage_type, str):
            raise TypeError("Expected argument 'deploy_stage_type' to be a str")
        pulumi.set(__self__, "deploy_stage_type", deploy_stage_type)
        if deployment_spec_deploy_artifact_id and not isinstance(deployment_spec_deploy_artifact_id, str):
            raise TypeError("Expected argument 'deployment_spec_deploy_artifact_id' to be a str")
        pulumi.set(__self__, "deployment_spec_deploy_artifact_id", deployment_spec_deploy_artifact_id)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if display_name and not isinstance(display_name, str):
            raise TypeError("Expected argument 'display_name' to be a str")
        pulumi.set(__self__, "display_name", display_name)
        if docker_image_deploy_artifact_id and not isinstance(docker_image_deploy_artifact_id, str):
            raise TypeError("Expected argument 'docker_image_deploy_artifact_id' to be a str")
        pulumi.set(__self__, "docker_image_deploy_artifact_id", docker_image_deploy_artifact_id)
        if failure_policy and not isinstance(failure_policy, dict):
            raise TypeError("Expected argument 'failure_policy' to be a dict")
        pulumi.set(__self__, "failure_policy", failure_policy)
        if freeform_tags and not isinstance(freeform_tags, dict):
            raise TypeError("Expected argument 'freeform_tags' to be a dict")
        pulumi.set(__self__, "freeform_tags", freeform_tags)
        if function_deploy_environment_id and not isinstance(function_deploy_environment_id, str):
            raise TypeError("Expected argument 'function_deploy_environment_id' to be a str")
        pulumi.set(__self__, "function_deploy_environment_id", function_deploy_environment_id)
        if function_timeout_in_seconds and not isinstance(function_timeout_in_seconds, int):
            raise TypeError("Expected argument 'function_timeout_in_seconds' to be a int")
        pulumi.set(__self__, "function_timeout_in_seconds", function_timeout_in_seconds)
        if green_backend_ips and not isinstance(green_backend_ips, dict):
            raise TypeError("Expected argument 'green_backend_ips' to be a dict")
        pulumi.set(__self__, "green_backend_ips", green_backend_ips)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if is_async and not isinstance(is_async, bool):
            raise TypeError("Expected argument 'is_async' to be a bool")
        pulumi.set(__self__, "is_async", is_async)
        if is_validation_enabled and not isinstance(is_validation_enabled, bool):
            raise TypeError("Expected argument 'is_validation_enabled' to be a bool")
        pulumi.set(__self__, "is_validation_enabled", is_validation_enabled)
        if kubernetes_manifest_deploy_artifact_ids and not isinstance(kubernetes_manifest_deploy_artifact_ids, list):
            raise TypeError("Expected argument 'kubernetes_manifest_deploy_artifact_ids' to be a list")
        pulumi.set(__self__, "kubernetes_manifest_deploy_artifact_ids", kubernetes_manifest_deploy_artifact_ids)
        if lifecycle_details and not isinstance(lifecycle_details, str):
            raise TypeError("Expected argument 'lifecycle_details' to be a str")
        pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        if load_balancer_config and not isinstance(load_balancer_config, dict):
            raise TypeError("Expected argument 'load_balancer_config' to be a dict")
        pulumi.set(__self__, "load_balancer_config", load_balancer_config)
        if max_memory_in_mbs and not isinstance(max_memory_in_mbs, str):
            raise TypeError("Expected argument 'max_memory_in_mbs' to be a str")
        pulumi.set(__self__, "max_memory_in_mbs", max_memory_in_mbs)
        if namespace and not isinstance(namespace, str):
            raise TypeError("Expected argument 'namespace' to be a str")
        pulumi.set(__self__, "namespace", namespace)
        if oke_cluster_deploy_environment_id and not isinstance(oke_cluster_deploy_environment_id, str):
            raise TypeError("Expected argument 'oke_cluster_deploy_environment_id' to be a str")
        pulumi.set(__self__, "oke_cluster_deploy_environment_id", oke_cluster_deploy_environment_id)
        if project_id and not isinstance(project_id, str):
            raise TypeError("Expected argument 'project_id' to be a str")
        pulumi.set(__self__, "project_id", project_id)
        if rollback_policy and not isinstance(rollback_policy, dict):
            raise TypeError("Expected argument 'rollback_policy' to be a dict")
        pulumi.set(__self__, "rollback_policy", rollback_policy)
        if rollout_policy and not isinstance(rollout_policy, dict):
            raise TypeError("Expected argument 'rollout_policy' to be a dict")
        pulumi.set(__self__, "rollout_policy", rollout_policy)
        if state and not isinstance(state, str):
            raise TypeError("Expected argument 'state' to be a str")
        pulumi.set(__self__, "state", state)
        if system_tags and not isinstance(system_tags, dict):
            raise TypeError("Expected argument 'system_tags' to be a dict")
        pulumi.set(__self__, "system_tags", system_tags)
        if time_created and not isinstance(time_created, str):
            raise TypeError("Expected argument 'time_created' to be a str")
        pulumi.set(__self__, "time_created", time_created)
        if time_updated and not isinstance(time_updated, str):
            raise TypeError("Expected argument 'time_updated' to be a str")
        pulumi.set(__self__, "time_updated", time_updated)
        if traffic_shift_target and not isinstance(traffic_shift_target, str):
            raise TypeError("Expected argument 'traffic_shift_target' to be a str")
        pulumi.set(__self__, "traffic_shift_target", traffic_shift_target)
        if wait_criteria and not isinstance(wait_criteria, dict):
            raise TypeError("Expected argument 'wait_criteria' to be a dict")
        pulumi.set(__self__, "wait_criteria", wait_criteria)

    @property
    @pulumi.getter(name="approvalPolicy")
    def approval_policy(self) -> 'outputs.GetDeployStageApprovalPolicyResult':
        """
        Specifies the approval policy.
        """
        return pulumi.get(self, "approval_policy")

    @property
    @pulumi.getter(name="blueBackendIps")
    def blue_backend_ips(self) -> 'outputs.GetDeployStageBlueBackendIpsResult':
        """
        Collection of backend environment IP addresses.
        """
        return pulumi.get(self, "blue_backend_ips")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> str:
        """
        The OCID of a compartment.
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="computeInstanceGroupDeployEnvironmentId")
    def compute_instance_group_deploy_environment_id(self) -> str:
        """
        A compute instance group environment OCID for rolling deployment.
        """
        return pulumi.get(self, "compute_instance_group_deploy_environment_id")

    @property
    @pulumi.getter
    def config(self) -> Mapping[str, Any]:
        """
        User provided key and value pair configuration, which is assigned through constants or parameter.
        """
        return pulumi.get(self, "config")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Mapping[str, Any]:
        """
        Defined tags for this resource. Each key is predefined and scoped to a namespace. See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"foo-namespace.bar-key": "value"}`
        """
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="deployArtifactId")
    def deploy_artifact_id(self) -> str:
        """
        Optional binary artifact OCID user may provide to this stage.
        """
        return pulumi.get(self, "deploy_artifact_id")

    @property
    @pulumi.getter(name="deployArtifactIds")
    def deploy_artifact_ids(self) -> Sequence[str]:
        """
        Additional file artifact OCIDs.
        """
        return pulumi.get(self, "deploy_artifact_ids")

    @property
    @pulumi.getter(name="deployPipelineId")
    def deploy_pipeline_id(self) -> str:
        """
        The OCID of a pipeline.
        """
        return pulumi.get(self, "deploy_pipeline_id")

    @property
    @pulumi.getter(name="deployStageId")
    def deploy_stage_id(self) -> str:
        return pulumi.get(self, "deploy_stage_id")

    @property
    @pulumi.getter(name="deployStagePredecessorCollection")
    def deploy_stage_predecessor_collection(self) -> 'outputs.GetDeployStageDeployStagePredecessorCollectionResult':
        """
        Collection containing the predecessors of a stage.
        """
        return pulumi.get(self, "deploy_stage_predecessor_collection")

    @property
    @pulumi.getter(name="deployStageType")
    def deploy_stage_type(self) -> str:
        """
        Deployment stage type.
        """
        return pulumi.get(self, "deploy_stage_type")

    @property
    @pulumi.getter(name="deploymentSpecDeployArtifactId")
    def deployment_spec_deploy_artifact_id(self) -> str:
        """
        The OCID of the artifact that contains the deployment specification.
        """
        return pulumi.get(self, "deployment_spec_deploy_artifact_id")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Optional description about the deployment stage.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        Deployment stage display name, which can be renamed and is not necessarily unique. Avoid entering confidential information.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="dockerImageDeployArtifactId")
    def docker_image_deploy_artifact_id(self) -> str:
        """
        A Docker image artifact OCID.
        """
        return pulumi.get(self, "docker_image_deploy_artifact_id")

    @property
    @pulumi.getter(name="failurePolicy")
    def failure_policy(self) -> 'outputs.GetDeployStageFailurePolicyResult':
        """
        Specifies a failure policy for a compute instance group rolling deployment stage.
        """
        return pulumi.get(self, "failure_policy")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Mapping[str, Any]:
        """
        Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only.  See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"bar-key": "value"}`
        """
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter(name="functionDeployEnvironmentId")
    def function_deploy_environment_id(self) -> str:
        """
        Function environment OCID.
        """
        return pulumi.get(self, "function_deploy_environment_id")

    @property
    @pulumi.getter(name="functionTimeoutInSeconds")
    def function_timeout_in_seconds(self) -> int:
        """
        Timeout for execution of the Function. Value in seconds.
        """
        return pulumi.get(self, "function_timeout_in_seconds")

    @property
    @pulumi.getter(name="greenBackendIps")
    def green_backend_ips(self) -> 'outputs.GetDeployStageGreenBackendIpsResult':
        """
        Collection of backend environment IP addresses.
        """
        return pulumi.get(self, "green_backend_ips")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Unique identifier that is immutable on creation.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isAsync")
    def is_async(self) -> bool:
        """
        A boolean flag specifies whether this stage executes asynchronously.
        """
        return pulumi.get(self, "is_async")

    @property
    @pulumi.getter(name="isValidationEnabled")
    def is_validation_enabled(self) -> bool:
        """
        A boolean flag specifies whether the invoked function must be validated.
        """
        return pulumi.get(self, "is_validation_enabled")

    @property
    @pulumi.getter(name="kubernetesManifestDeployArtifactIds")
    def kubernetes_manifest_deploy_artifact_ids(self) -> Sequence[str]:
        """
        List of Kubernetes manifest artifact OCIDs, the manifests should not include any job resource.
        """
        return pulumi.get(self, "kubernetes_manifest_deploy_artifact_ids")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> str:
        """
        A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
        """
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter(name="loadBalancerConfig")
    def load_balancer_config(self) -> 'outputs.GetDeployStageLoadBalancerConfigResult':
        """
        Specifies config for load balancer traffic shift stages.
        """
        return pulumi.get(self, "load_balancer_config")

    @property
    @pulumi.getter(name="maxMemoryInMbs")
    def max_memory_in_mbs(self) -> str:
        """
        Maximum usable memory for the Function (in MB).
        """
        return pulumi.get(self, "max_memory_in_mbs")

    @property
    @pulumi.getter
    def namespace(self) -> str:
        """
        Default Namespace to be used for Kubernetes deployment when not specified in the manifest.
        """
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter(name="okeClusterDeployEnvironmentId")
    def oke_cluster_deploy_environment_id(self) -> str:
        """
        Kubernetes cluster environment OCID for deployment.
        """
        return pulumi.get(self, "oke_cluster_deploy_environment_id")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> str:
        """
        The OCID of a project.
        """
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter(name="rollbackPolicy")
    def rollback_policy(self) -> 'outputs.GetDeployStageRollbackPolicyResult':
        """
        Specifies the rollback policy. This is initiated on the failure of certain stage types.
        """
        return pulumi.get(self, "rollback_policy")

    @property
    @pulumi.getter(name="rolloutPolicy")
    def rollout_policy(self) -> 'outputs.GetDeployStageRolloutPolicyResult':
        """
        Description of rollout policy for load balancer traffic shift stage.
        """
        return pulumi.get(self, "rollout_policy")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        The current state of the deployment stage.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Mapping[str, Any]:
        """
        Usage of system tag keys. These predefined keys are scoped to namespaces. See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"orcl-cloud.free-tier-retained": "true"}`
        """
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> str:
        """
        Time the deployment stage was created. Format defined by [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339).
        """
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> str:
        """
        Time the deployment stage was updated. Format defined by [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339).
        """
        return pulumi.get(self, "time_updated")

    @property
    @pulumi.getter(name="trafficShiftTarget")
    def traffic_shift_target(self) -> str:
        """
        Specifies the target or destination backend set.
        """
        return pulumi.get(self, "traffic_shift_target")

    @property
    @pulumi.getter(name="waitCriteria")
    def wait_criteria(self) -> 'outputs.GetDeployStageWaitCriteriaResult':
        """
        Specifies wait criteria for the Wait stage.
        """
        return pulumi.get(self, "wait_criteria")


class AwaitableGetDeployStageResult(GetDeployStageResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetDeployStageResult(
            approval_policy=self.approval_policy,
            blue_backend_ips=self.blue_backend_ips,
            compartment_id=self.compartment_id,
            compute_instance_group_deploy_environment_id=self.compute_instance_group_deploy_environment_id,
            config=self.config,
            defined_tags=self.defined_tags,
            deploy_artifact_id=self.deploy_artifact_id,
            deploy_artifact_ids=self.deploy_artifact_ids,
            deploy_pipeline_id=self.deploy_pipeline_id,
            deploy_stage_id=self.deploy_stage_id,
            deploy_stage_predecessor_collection=self.deploy_stage_predecessor_collection,
            deploy_stage_type=self.deploy_stage_type,
            deployment_spec_deploy_artifact_id=self.deployment_spec_deploy_artifact_id,
            description=self.description,
            display_name=self.display_name,
            docker_image_deploy_artifact_id=self.docker_image_deploy_artifact_id,
            failure_policy=self.failure_policy,
            freeform_tags=self.freeform_tags,
            function_deploy_environment_id=self.function_deploy_environment_id,
            function_timeout_in_seconds=self.function_timeout_in_seconds,
            green_backend_ips=self.green_backend_ips,
            id=self.id,
            is_async=self.is_async,
            is_validation_enabled=self.is_validation_enabled,
            kubernetes_manifest_deploy_artifact_ids=self.kubernetes_manifest_deploy_artifact_ids,
            lifecycle_details=self.lifecycle_details,
            load_balancer_config=self.load_balancer_config,
            max_memory_in_mbs=self.max_memory_in_mbs,
            namespace=self.namespace,
            oke_cluster_deploy_environment_id=self.oke_cluster_deploy_environment_id,
            project_id=self.project_id,
            rollback_policy=self.rollback_policy,
            rollout_policy=self.rollout_policy,
            state=self.state,
            system_tags=self.system_tags,
            time_created=self.time_created,
            time_updated=self.time_updated,
            traffic_shift_target=self.traffic_shift_target,
            wait_criteria=self.wait_criteria)


def get_deploy_stage(deploy_stage_id: Optional[str] = None,
                     opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetDeployStageResult:
    """
    This data source provides details about a specific Deploy Stage resource in Oracle Cloud Infrastructure Devops service.

    Retrieves a deployment stage by identifier.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_oci as oci

    test_deploy_stage = oci.devops.get_deploy_stage(deploy_stage_id=oci_devops_deploy_stage["test_deploy_stage"]["id"])
    ```


    :param str deploy_stage_id: Unique stage identifier.
    """
    __args__ = dict()
    __args__['deployStageId'] = deploy_stage_id
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
    __ret__ = pulumi.runtime.invoke('oci:devops/getDeployStage:getDeployStage', __args__, opts=opts, typ=GetDeployStageResult).value

    return AwaitableGetDeployStageResult(
        approval_policy=__ret__.approval_policy,
        blue_backend_ips=__ret__.blue_backend_ips,
        compartment_id=__ret__.compartment_id,
        compute_instance_group_deploy_environment_id=__ret__.compute_instance_group_deploy_environment_id,
        config=__ret__.config,
        defined_tags=__ret__.defined_tags,
        deploy_artifact_id=__ret__.deploy_artifact_id,
        deploy_artifact_ids=__ret__.deploy_artifact_ids,
        deploy_pipeline_id=__ret__.deploy_pipeline_id,
        deploy_stage_id=__ret__.deploy_stage_id,
        deploy_stage_predecessor_collection=__ret__.deploy_stage_predecessor_collection,
        deploy_stage_type=__ret__.deploy_stage_type,
        deployment_spec_deploy_artifact_id=__ret__.deployment_spec_deploy_artifact_id,
        description=__ret__.description,
        display_name=__ret__.display_name,
        docker_image_deploy_artifact_id=__ret__.docker_image_deploy_artifact_id,
        failure_policy=__ret__.failure_policy,
        freeform_tags=__ret__.freeform_tags,
        function_deploy_environment_id=__ret__.function_deploy_environment_id,
        function_timeout_in_seconds=__ret__.function_timeout_in_seconds,
        green_backend_ips=__ret__.green_backend_ips,
        id=__ret__.id,
        is_async=__ret__.is_async,
        is_validation_enabled=__ret__.is_validation_enabled,
        kubernetes_manifest_deploy_artifact_ids=__ret__.kubernetes_manifest_deploy_artifact_ids,
        lifecycle_details=__ret__.lifecycle_details,
        load_balancer_config=__ret__.load_balancer_config,
        max_memory_in_mbs=__ret__.max_memory_in_mbs,
        namespace=__ret__.namespace,
        oke_cluster_deploy_environment_id=__ret__.oke_cluster_deploy_environment_id,
        project_id=__ret__.project_id,
        rollback_policy=__ret__.rollback_policy,
        rollout_policy=__ret__.rollout_policy,
        state=__ret__.state,
        system_tags=__ret__.system_tags,
        time_created=__ret__.time_created,
        time_updated=__ret__.time_updated,
        traffic_shift_target=__ret__.traffic_shift_target,
        wait_criteria=__ret__.wait_criteria)
