# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'DeployArtifactDeployArtifactSource',
    'DeployEnvironmentComputeInstanceGroupSelectors',
    'DeployEnvironmentComputeInstanceGroupSelectorsItem',
    'DeployPipelineDeployPipelineArtifacts',
    'DeployPipelineDeployPipelineArtifactsItem',
    'DeployPipelineDeployPipelineArtifactsItemDeployPipelineStages',
    'DeployPipelineDeployPipelineArtifactsItemDeployPipelineStagesItem',
    'DeployPipelineDeployPipelineEnvironments',
    'DeployPipelineDeployPipelineEnvironmentsItem',
    'DeployPipelineDeployPipelineEnvironmentsItemDeployPipelineStages',
    'DeployPipelineDeployPipelineEnvironmentsItemDeployPipelineStagesItem',
    'DeployPipelineDeployPipelineParameters',
    'DeployPipelineDeployPipelineParametersItem',
    'DeployStageApprovalPolicy',
    'DeployStageBlueBackendIps',
    'DeployStageDeployStagePredecessorCollection',
    'DeployStageDeployStagePredecessorCollectionItem',
    'DeployStageFailurePolicy',
    'DeployStageGreenBackendIps',
    'DeployStageLoadBalancerConfig',
    'DeployStageRollbackPolicy',
    'DeployStageRolloutPolicy',
    'DeployStageWaitCriteria',
    'DeploymentDeployArtifactOverrideArguments',
    'DeploymentDeployArtifactOverrideArgumentsItem',
    'DeploymentDeployPipelineArtifacts',
    'DeploymentDeployPipelineArtifactsItem',
    'DeploymentDeployPipelineArtifactsItemDeployPipelineStages',
    'DeploymentDeployPipelineArtifactsItemDeployPipelineStagesItem',
    'DeploymentDeployPipelineEnvironments',
    'DeploymentDeployPipelineEnvironmentsItem',
    'DeploymentDeployPipelineEnvironmentsItemDeployPipelineStages',
    'DeploymentDeployPipelineEnvironmentsItemDeployPipelineStagesItem',
    'DeploymentDeploymentArguments',
    'DeploymentDeploymentArgumentsItem',
    'DeploymentDeploymentExecutionProgress',
    'ProjectNotificationConfig',
    'GetDeployArtifactDeployArtifactSourceResult',
    'GetDeployArtifactsDeployArtifactCollectionResult',
    'GetDeployArtifactsDeployArtifactCollectionItemResult',
    'GetDeployArtifactsDeployArtifactCollectionItemDeployArtifactSourceResult',
    'GetDeployArtifactsFilterResult',
    'GetDeployEnvironmentComputeInstanceGroupSelectorsResult',
    'GetDeployEnvironmentComputeInstanceGroupSelectorsItemResult',
    'GetDeployEnvironmentsDeployEnvironmentCollectionResult',
    'GetDeployEnvironmentsDeployEnvironmentCollectionItemResult',
    'GetDeployEnvironmentsDeployEnvironmentCollectionItemComputeInstanceGroupSelectorsResult',
    'GetDeployEnvironmentsDeployEnvironmentCollectionItemComputeInstanceGroupSelectorsItemResult',
    'GetDeployEnvironmentsFilterResult',
    'GetDeployPipelineDeployPipelineArtifactsResult',
    'GetDeployPipelineDeployPipelineArtifactsItemResult',
    'GetDeployPipelineDeployPipelineArtifactsItemDeployPipelineStagesResult',
    'GetDeployPipelineDeployPipelineArtifactsItemDeployPipelineStagesItemResult',
    'GetDeployPipelineDeployPipelineEnvironmentsResult',
    'GetDeployPipelineDeployPipelineEnvironmentsItemResult',
    'GetDeployPipelineDeployPipelineEnvironmentsItemDeployPipelineStagesResult',
    'GetDeployPipelineDeployPipelineEnvironmentsItemDeployPipelineStagesItemResult',
    'GetDeployPipelineDeployPipelineParametersResult',
    'GetDeployPipelineDeployPipelineParametersItemResult',
    'GetDeployPipelinesDeployPipelineCollectionResult',
    'GetDeployPipelinesDeployPipelineCollectionItemResult',
    'GetDeployPipelinesDeployPipelineCollectionItemDeployPipelineArtifactsResult',
    'GetDeployPipelinesDeployPipelineCollectionItemDeployPipelineArtifactsItemResult',
    'GetDeployPipelinesDeployPipelineCollectionItemDeployPipelineArtifactsItemDeployPipelineStagesResult',
    'GetDeployPipelinesDeployPipelineCollectionItemDeployPipelineArtifactsItemDeployPipelineStagesItemResult',
    'GetDeployPipelinesDeployPipelineCollectionItemDeployPipelineEnvironmentsResult',
    'GetDeployPipelinesDeployPipelineCollectionItemDeployPipelineEnvironmentsItemResult',
    'GetDeployPipelinesDeployPipelineCollectionItemDeployPipelineEnvironmentsItemDeployPipelineStagesResult',
    'GetDeployPipelinesDeployPipelineCollectionItemDeployPipelineEnvironmentsItemDeployPipelineStagesItemResult',
    'GetDeployPipelinesDeployPipelineCollectionItemDeployPipelineParametersResult',
    'GetDeployPipelinesDeployPipelineCollectionItemDeployPipelineParametersItemResult',
    'GetDeployPipelinesFilterResult',
    'GetDeployStageApprovalPolicyResult',
    'GetDeployStageBlueBackendIpsResult',
    'GetDeployStageDeployStagePredecessorCollectionResult',
    'GetDeployStageDeployStagePredecessorCollectionItemResult',
    'GetDeployStageFailurePolicyResult',
    'GetDeployStageGreenBackendIpsResult',
    'GetDeployStageLoadBalancerConfigResult',
    'GetDeployStageRollbackPolicyResult',
    'GetDeployStageRolloutPolicyResult',
    'GetDeployStageWaitCriteriaResult',
    'GetDeployStagesDeployStageCollectionResult',
    'GetDeployStagesDeployStageCollectionItemResult',
    'GetDeployStagesDeployStageCollectionItemApprovalPolicyResult',
    'GetDeployStagesDeployStageCollectionItemBlueBackendIpsResult',
    'GetDeployStagesDeployStageCollectionItemDeployStagePredecessorCollectionResult',
    'GetDeployStagesDeployStageCollectionItemDeployStagePredecessorCollectionItemResult',
    'GetDeployStagesDeployStageCollectionItemFailurePolicyResult',
    'GetDeployStagesDeployStageCollectionItemGreenBackendIpsResult',
    'GetDeployStagesDeployStageCollectionItemLoadBalancerConfigResult',
    'GetDeployStagesDeployStageCollectionItemRollbackPolicyResult',
    'GetDeployStagesDeployStageCollectionItemRolloutPolicyResult',
    'GetDeployStagesDeployStageCollectionItemWaitCriteriaResult',
    'GetDeployStagesFilterResult',
    'GetDeploymentDeployArtifactOverrideArgumentsResult',
    'GetDeploymentDeployArtifactOverrideArgumentsItemResult',
    'GetDeploymentDeployPipelineArtifactsResult',
    'GetDeploymentDeployPipelineArtifactsItemResult',
    'GetDeploymentDeployPipelineArtifactsItemDeployPipelineStagesResult',
    'GetDeploymentDeployPipelineArtifactsItemDeployPipelineStagesItemResult',
    'GetDeploymentDeployPipelineEnvironmentsResult',
    'GetDeploymentDeployPipelineEnvironmentsItemResult',
    'GetDeploymentDeployPipelineEnvironmentsItemDeployPipelineStagesResult',
    'GetDeploymentDeployPipelineEnvironmentsItemDeployPipelineStagesItemResult',
    'GetDeploymentDeploymentArgumentsResult',
    'GetDeploymentDeploymentArgumentsItemResult',
    'GetDeploymentDeploymentExecutionProgressResult',
    'GetDeploymentsDeploymentCollectionResult',
    'GetDeploymentsDeploymentCollectionItemResult',
    'GetDeploymentsDeploymentCollectionItemDeployArtifactOverrideArgumentsResult',
    'GetDeploymentsDeploymentCollectionItemDeployArtifactOverrideArgumentsItemResult',
    'GetDeploymentsDeploymentCollectionItemDeployPipelineArtifactsResult',
    'GetDeploymentsDeploymentCollectionItemDeployPipelineArtifactsItemResult',
    'GetDeploymentsDeploymentCollectionItemDeployPipelineArtifactsItemDeployPipelineStagesResult',
    'GetDeploymentsDeploymentCollectionItemDeployPipelineArtifactsItemDeployPipelineStagesItemResult',
    'GetDeploymentsDeploymentCollectionItemDeployPipelineEnvironmentsResult',
    'GetDeploymentsDeploymentCollectionItemDeployPipelineEnvironmentsItemResult',
    'GetDeploymentsDeploymentCollectionItemDeployPipelineEnvironmentsItemDeployPipelineStagesResult',
    'GetDeploymentsDeploymentCollectionItemDeployPipelineEnvironmentsItemDeployPipelineStagesItemResult',
    'GetDeploymentsDeploymentCollectionItemDeploymentArgumentsResult',
    'GetDeploymentsDeploymentCollectionItemDeploymentArgumentsItemResult',
    'GetDeploymentsDeploymentCollectionItemDeploymentExecutionProgressResult',
    'GetDeploymentsFilterResult',
    'GetProjectNotificationConfigResult',
    'GetProjectsFilterResult',
    'GetProjectsProjectCollectionResult',
    'GetProjectsProjectCollectionItemResult',
    'GetProjectsProjectCollectionItemNotificationConfigResult',
]

@pulumi.output_type
class DeployArtifactDeployArtifactSource(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "deployArtifactSourceType":
            suggest = "deploy_artifact_source_type"
        elif key == "base64encodedContent":
            suggest = "base64encoded_content"
        elif key == "deployArtifactPath":
            suggest = "deploy_artifact_path"
        elif key == "deployArtifactVersion":
            suggest = "deploy_artifact_version"
        elif key == "imageDigest":
            suggest = "image_digest"
        elif key == "imageUri":
            suggest = "image_uri"
        elif key == "repositoryId":
            suggest = "repository_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeployArtifactDeployArtifactSource. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeployArtifactDeployArtifactSource.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeployArtifactDeployArtifactSource.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 deploy_artifact_source_type: str,
                 base64encoded_content: Optional[str] = None,
                 deploy_artifact_path: Optional[str] = None,
                 deploy_artifact_version: Optional[str] = None,
                 image_digest: Optional[str] = None,
                 image_uri: Optional[str] = None,
                 repository_id: Optional[str] = None):
        """
        :param str deploy_artifact_source_type: (Updatable) Specifies types of artifact sources.
        :param str base64encoded_content: (Updatable) base64 Encoded String
        :param str deploy_artifact_path: (Updatable) Specifies the artifact path in the repository.
        :param str deploy_artifact_version: (Updatable) Users can set this as a placeholder value that refers to a pipeline parameter, for example, ${appVersion}.
        :param str image_digest: (Updatable) Specifies image digest for the version of the image.
        :param str image_uri: (Updatable) Specifies OCIR Image Path - optionally include tag.
        :param str repository_id: (Updatable) The OCID of a repository
        """
        pulumi.set(__self__, "deploy_artifact_source_type", deploy_artifact_source_type)
        if base64encoded_content is not None:
            pulumi.set(__self__, "base64encoded_content", base64encoded_content)
        if deploy_artifact_path is not None:
            pulumi.set(__self__, "deploy_artifact_path", deploy_artifact_path)
        if deploy_artifact_version is not None:
            pulumi.set(__self__, "deploy_artifact_version", deploy_artifact_version)
        if image_digest is not None:
            pulumi.set(__self__, "image_digest", image_digest)
        if image_uri is not None:
            pulumi.set(__self__, "image_uri", image_uri)
        if repository_id is not None:
            pulumi.set(__self__, "repository_id", repository_id)

    @property
    @pulumi.getter(name="deployArtifactSourceType")
    def deploy_artifact_source_type(self) -> str:
        """
        (Updatable) Specifies types of artifact sources.
        """
        return pulumi.get(self, "deploy_artifact_source_type")

    @property
    @pulumi.getter(name="base64encodedContent")
    def base64encoded_content(self) -> Optional[str]:
        """
        (Updatable) base64 Encoded String
        """
        return pulumi.get(self, "base64encoded_content")

    @property
    @pulumi.getter(name="deployArtifactPath")
    def deploy_artifact_path(self) -> Optional[str]:
        """
        (Updatable) Specifies the artifact path in the repository.
        """
        return pulumi.get(self, "deploy_artifact_path")

    @property
    @pulumi.getter(name="deployArtifactVersion")
    def deploy_artifact_version(self) -> Optional[str]:
        """
        (Updatable) Users can set this as a placeholder value that refers to a pipeline parameter, for example, ${appVersion}.
        """
        return pulumi.get(self, "deploy_artifact_version")

    @property
    @pulumi.getter(name="imageDigest")
    def image_digest(self) -> Optional[str]:
        """
        (Updatable) Specifies image digest for the version of the image.
        """
        return pulumi.get(self, "image_digest")

    @property
    @pulumi.getter(name="imageUri")
    def image_uri(self) -> Optional[str]:
        """
        (Updatable) Specifies OCIR Image Path - optionally include tag.
        """
        return pulumi.get(self, "image_uri")

    @property
    @pulumi.getter(name="repositoryId")
    def repository_id(self) -> Optional[str]:
        """
        (Updatable) The OCID of a repository
        """
        return pulumi.get(self, "repository_id")


@pulumi.output_type
class DeployEnvironmentComputeInstanceGroupSelectors(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.DeployEnvironmentComputeInstanceGroupSelectorsItem']] = None):
        """
        :param Sequence['DeployEnvironmentComputeInstanceGroupSelectorsItemArgs'] items: (Updatable) A list of selectors for the instance group. UNION operator is used for combining the instances selected by each selector.
        """
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.DeployEnvironmentComputeInstanceGroupSelectorsItem']]:
        """
        (Updatable) A list of selectors for the instance group. UNION operator is used for combining the instances selected by each selector.
        """
        return pulumi.get(self, "items")


@pulumi.output_type
class DeployEnvironmentComputeInstanceGroupSelectorsItem(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "selectorType":
            suggest = "selector_type"
        elif key == "computeInstanceIds":
            suggest = "compute_instance_ids"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeployEnvironmentComputeInstanceGroupSelectorsItem. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeployEnvironmentComputeInstanceGroupSelectorsItem.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeployEnvironmentComputeInstanceGroupSelectorsItem.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 selector_type: str,
                 compute_instance_ids: Optional[Sequence[str]] = None,
                 query: Optional[str] = None,
                 region: Optional[str] = None):
        """
        :param str selector_type: (Updatable) Defines the type of the instance selector for the group.
        :param Sequence[str] compute_instance_ids: (Updatable) Compute instance OCID identifiers that are members of this group.
        :param str query: (Updatable) Query expression confirming to the Oracle Cloud Infrastructure Search Language syntax to select compute instances for the group. The language is documented at https://docs.oracle.com/en-us/iaas/Content/Search/Concepts/querysyntax.htm
        :param str region: (Updatable) Region identifier referred by the deployment environment. Region identifiers are listed at https://docs.oracle.com/en-us/iaas/Content/General/Concepts/regions.htm
        """
        pulumi.set(__self__, "selector_type", selector_type)
        if compute_instance_ids is not None:
            pulumi.set(__self__, "compute_instance_ids", compute_instance_ids)
        if query is not None:
            pulumi.set(__self__, "query", query)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter(name="selectorType")
    def selector_type(self) -> str:
        """
        (Updatable) Defines the type of the instance selector for the group.
        """
        return pulumi.get(self, "selector_type")

    @property
    @pulumi.getter(name="computeInstanceIds")
    def compute_instance_ids(self) -> Optional[Sequence[str]]:
        """
        (Updatable) Compute instance OCID identifiers that are members of this group.
        """
        return pulumi.get(self, "compute_instance_ids")

    @property
    @pulumi.getter
    def query(self) -> Optional[str]:
        """
        (Updatable) Query expression confirming to the Oracle Cloud Infrastructure Search Language syntax to select compute instances for the group. The language is documented at https://docs.oracle.com/en-us/iaas/Content/Search/Concepts/querysyntax.htm
        """
        return pulumi.get(self, "query")

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        """
        (Updatable) Region identifier referred by the deployment environment. Region identifiers are listed at https://docs.oracle.com/en-us/iaas/Content/General/Concepts/regions.htm
        """
        return pulumi.get(self, "region")


@pulumi.output_type
class DeployPipelineDeployPipelineArtifacts(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.DeployPipelineDeployPipelineArtifactsItem']] = None):
        """
        :param Sequence['DeployPipelineDeployPipelineArtifactsItemArgs'] items: (Updatable) List of parameters defined for a deployment pipeline.
        """
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.DeployPipelineDeployPipelineArtifactsItem']]:
        """
        (Updatable) List of parameters defined for a deployment pipeline.
        """
        return pulumi.get(self, "items")


@pulumi.output_type
class DeployPipelineDeployPipelineArtifactsItem(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "deployArtifactId":
            suggest = "deploy_artifact_id"
        elif key == "deployPipelineStages":
            suggest = "deploy_pipeline_stages"
        elif key == "displayName":
            suggest = "display_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeployPipelineDeployPipelineArtifactsItem. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeployPipelineDeployPipelineArtifactsItem.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeployPipelineDeployPipelineArtifactsItem.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 deploy_artifact_id: Optional[str] = None,
                 deploy_pipeline_stages: Optional['outputs.DeployPipelineDeployPipelineArtifactsItemDeployPipelineStages'] = None,
                 display_name: Optional[str] = None):
        """
        :param str deploy_artifact_id: The OCID of an artifact
        :param 'DeployPipelineDeployPipelineArtifactsItemDeployPipelineStagesArgs' deploy_pipeline_stages: List of stages.
        :param str display_name: (Updatable) Deployment pipeline display name. Avoid entering confidential information.
        """
        if deploy_artifact_id is not None:
            pulumi.set(__self__, "deploy_artifact_id", deploy_artifact_id)
        if deploy_pipeline_stages is not None:
            pulumi.set(__self__, "deploy_pipeline_stages", deploy_pipeline_stages)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)

    @property
    @pulumi.getter(name="deployArtifactId")
    def deploy_artifact_id(self) -> Optional[str]:
        """
        The OCID of an artifact
        """
        return pulumi.get(self, "deploy_artifact_id")

    @property
    @pulumi.getter(name="deployPipelineStages")
    def deploy_pipeline_stages(self) -> Optional['outputs.DeployPipelineDeployPipelineArtifactsItemDeployPipelineStages']:
        """
        List of stages.
        """
        return pulumi.get(self, "deploy_pipeline_stages")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        """
        (Updatable) Deployment pipeline display name. Avoid entering confidential information.
        """
        return pulumi.get(self, "display_name")


@pulumi.output_type
class DeployPipelineDeployPipelineArtifactsItemDeployPipelineStages(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.DeployPipelineDeployPipelineArtifactsItemDeployPipelineStagesItem']] = None):
        """
        :param Sequence['DeployPipelineDeployPipelineArtifactsItemDeployPipelineStagesItemArgs'] items: (Updatable) List of parameters defined for a deployment pipeline.
        """
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.DeployPipelineDeployPipelineArtifactsItemDeployPipelineStagesItem']]:
        """
        (Updatable) List of parameters defined for a deployment pipeline.
        """
        return pulumi.get(self, "items")


@pulumi.output_type
class DeployPipelineDeployPipelineArtifactsItemDeployPipelineStagesItem(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "deployStageId":
            suggest = "deploy_stage_id"
        elif key == "displayName":
            suggest = "display_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeployPipelineDeployPipelineArtifactsItemDeployPipelineStagesItem. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeployPipelineDeployPipelineArtifactsItemDeployPipelineStagesItem.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeployPipelineDeployPipelineArtifactsItemDeployPipelineStagesItem.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 deploy_stage_id: Optional[str] = None,
                 display_name: Optional[str] = None):
        """
        :param str deploy_stage_id: The OCID of a stage
        :param str display_name: (Updatable) Deployment pipeline display name. Avoid entering confidential information.
        """
        if deploy_stage_id is not None:
            pulumi.set(__self__, "deploy_stage_id", deploy_stage_id)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)

    @property
    @pulumi.getter(name="deployStageId")
    def deploy_stage_id(self) -> Optional[str]:
        """
        The OCID of a stage
        """
        return pulumi.get(self, "deploy_stage_id")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        """
        (Updatable) Deployment pipeline display name. Avoid entering confidential information.
        """
        return pulumi.get(self, "display_name")


@pulumi.output_type
class DeployPipelineDeployPipelineEnvironments(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.DeployPipelineDeployPipelineEnvironmentsItem']] = None):
        """
        :param Sequence['DeployPipelineDeployPipelineEnvironmentsItemArgs'] items: (Updatable) List of parameters defined for a deployment pipeline.
        """
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.DeployPipelineDeployPipelineEnvironmentsItem']]:
        """
        (Updatable) List of parameters defined for a deployment pipeline.
        """
        return pulumi.get(self, "items")


@pulumi.output_type
class DeployPipelineDeployPipelineEnvironmentsItem(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "deployEnvironmentId":
            suggest = "deploy_environment_id"
        elif key == "deployPipelineStages":
            suggest = "deploy_pipeline_stages"
        elif key == "displayName":
            suggest = "display_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeployPipelineDeployPipelineEnvironmentsItem. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeployPipelineDeployPipelineEnvironmentsItem.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeployPipelineDeployPipelineEnvironmentsItem.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 deploy_environment_id: Optional[str] = None,
                 deploy_pipeline_stages: Optional['outputs.DeployPipelineDeployPipelineEnvironmentsItemDeployPipelineStages'] = None,
                 display_name: Optional[str] = None):
        """
        :param str deploy_environment_id: The OCID of an Environment
        :param 'DeployPipelineDeployPipelineEnvironmentsItemDeployPipelineStagesArgs' deploy_pipeline_stages: List of stages.
        :param str display_name: (Updatable) Deployment pipeline display name. Avoid entering confidential information.
        """
        if deploy_environment_id is not None:
            pulumi.set(__self__, "deploy_environment_id", deploy_environment_id)
        if deploy_pipeline_stages is not None:
            pulumi.set(__self__, "deploy_pipeline_stages", deploy_pipeline_stages)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)

    @property
    @pulumi.getter(name="deployEnvironmentId")
    def deploy_environment_id(self) -> Optional[str]:
        """
        The OCID of an Environment
        """
        return pulumi.get(self, "deploy_environment_id")

    @property
    @pulumi.getter(name="deployPipelineStages")
    def deploy_pipeline_stages(self) -> Optional['outputs.DeployPipelineDeployPipelineEnvironmentsItemDeployPipelineStages']:
        """
        List of stages.
        """
        return pulumi.get(self, "deploy_pipeline_stages")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        """
        (Updatable) Deployment pipeline display name. Avoid entering confidential information.
        """
        return pulumi.get(self, "display_name")


@pulumi.output_type
class DeployPipelineDeployPipelineEnvironmentsItemDeployPipelineStages(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.DeployPipelineDeployPipelineEnvironmentsItemDeployPipelineStagesItem']] = None):
        """
        :param Sequence['DeployPipelineDeployPipelineEnvironmentsItemDeployPipelineStagesItemArgs'] items: (Updatable) List of parameters defined for a deployment pipeline.
        """
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.DeployPipelineDeployPipelineEnvironmentsItemDeployPipelineStagesItem']]:
        """
        (Updatable) List of parameters defined for a deployment pipeline.
        """
        return pulumi.get(self, "items")


@pulumi.output_type
class DeployPipelineDeployPipelineEnvironmentsItemDeployPipelineStagesItem(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "deployStageId":
            suggest = "deploy_stage_id"
        elif key == "displayName":
            suggest = "display_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeployPipelineDeployPipelineEnvironmentsItemDeployPipelineStagesItem. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeployPipelineDeployPipelineEnvironmentsItemDeployPipelineStagesItem.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeployPipelineDeployPipelineEnvironmentsItemDeployPipelineStagesItem.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 deploy_stage_id: Optional[str] = None,
                 display_name: Optional[str] = None):
        """
        :param str deploy_stage_id: The OCID of a stage
        :param str display_name: (Updatable) Deployment pipeline display name. Avoid entering confidential information.
        """
        if deploy_stage_id is not None:
            pulumi.set(__self__, "deploy_stage_id", deploy_stage_id)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)

    @property
    @pulumi.getter(name="deployStageId")
    def deploy_stage_id(self) -> Optional[str]:
        """
        The OCID of a stage
        """
        return pulumi.get(self, "deploy_stage_id")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        """
        (Updatable) Deployment pipeline display name. Avoid entering confidential information.
        """
        return pulumi.get(self, "display_name")


@pulumi.output_type
class DeployPipelineDeployPipelineParameters(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.DeployPipelineDeployPipelineParametersItem']):
        """
        :param Sequence['DeployPipelineDeployPipelineParametersItemArgs'] items: (Updatable) List of parameters defined for a deployment pipeline.
        """
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.DeployPipelineDeployPipelineParametersItem']:
        """
        (Updatable) List of parameters defined for a deployment pipeline.
        """
        return pulumi.get(self, "items")


@pulumi.output_type
class DeployPipelineDeployPipelineParametersItem(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "defaultValue":
            suggest = "default_value"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeployPipelineDeployPipelineParametersItem. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeployPipelineDeployPipelineParametersItem.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeployPipelineDeployPipelineParametersItem.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: str,
                 default_value: Optional[str] = None,
                 description: Optional[str] = None):
        """
        :param str name: (Updatable) Name of the parameter (case-sensitive). Parameter name must be ^[a-zA-Z][a-zA-Z_0-9]*$.
        :param str default_value: (Updatable) Default value of the parameter.
        :param str description: (Updatable) Optional description about the deployment pipeline.
        """
        pulumi.set(__self__, "name", name)
        if default_value is not None:
            pulumi.set(__self__, "default_value", default_value)
        if description is not None:
            pulumi.set(__self__, "description", description)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        (Updatable) Name of the parameter (case-sensitive). Parameter name must be ^[a-zA-Z][a-zA-Z_0-9]*$.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="defaultValue")
    def default_value(self) -> Optional[str]:
        """
        (Updatable) Default value of the parameter.
        """
        return pulumi.get(self, "default_value")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        (Updatable) Optional description about the deployment pipeline.
        """
        return pulumi.get(self, "description")


@pulumi.output_type
class DeployStageApprovalPolicy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "approvalPolicyType":
            suggest = "approval_policy_type"
        elif key == "numberOfApprovalsRequired":
            suggest = "number_of_approvals_required"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeployStageApprovalPolicy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeployStageApprovalPolicy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeployStageApprovalPolicy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 approval_policy_type: str,
                 number_of_approvals_required: int):
        """
        :param str approval_policy_type: (Updatable) Approval policy type.
        :param int number_of_approvals_required: (Updatable) A minimum number of approvals required for stage to proceed.
        """
        pulumi.set(__self__, "approval_policy_type", approval_policy_type)
        pulumi.set(__self__, "number_of_approvals_required", number_of_approvals_required)

    @property
    @pulumi.getter(name="approvalPolicyType")
    def approval_policy_type(self) -> str:
        """
        (Updatable) Approval policy type.
        """
        return pulumi.get(self, "approval_policy_type")

    @property
    @pulumi.getter(name="numberOfApprovalsRequired")
    def number_of_approvals_required(self) -> int:
        """
        (Updatable) A minimum number of approvals required for stage to proceed.
        """
        return pulumi.get(self, "number_of_approvals_required")


@pulumi.output_type
class DeployStageBlueBackendIps(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence[str]] = None):
        """
        :param Sequence[str] items: (Updatable) The IP address of the backend server. A server could be a compute instance or a load balancer.
        """
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence[str]]:
        """
        (Updatable) The IP address of the backend server. A server could be a compute instance or a load balancer.
        """
        return pulumi.get(self, "items")


@pulumi.output_type
class DeployStageDeployStagePredecessorCollection(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.DeployStageDeployStagePredecessorCollectionItem']):
        """
        :param Sequence['DeployStageDeployStagePredecessorCollectionItemArgs'] items: (Updatable) The IP address of the backend server. A server could be a compute instance or a load balancer.
        """
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.DeployStageDeployStagePredecessorCollectionItem']:
        """
        (Updatable) The IP address of the backend server. A server could be a compute instance or a load balancer.
        """
        return pulumi.get(self, "items")


@pulumi.output_type
class DeployStageDeployStagePredecessorCollectionItem(dict):
    def __init__(__self__, *,
                 id: str):
        """
        :param str id: (Updatable) The OCID of the predecessor stage. If a stage is the first stage in the pipeline, then the ID is the pipeline's OCID.
        """
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        (Updatable) The OCID of the predecessor stage. If a stage is the first stage in the pipeline, then the ID is the pipeline's OCID.
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class DeployStageFailurePolicy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "policyType":
            suggest = "policy_type"
        elif key == "failureCount":
            suggest = "failure_count"
        elif key == "failurePercentage":
            suggest = "failure_percentage"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeployStageFailurePolicy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeployStageFailurePolicy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeployStageFailurePolicy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 policy_type: str,
                 failure_count: Optional[int] = None,
                 failure_percentage: Optional[int] = None):
        """
        :param str policy_type: (Updatable) The type of policy used for rolling out a deployment stage.
        :param int failure_count: (Updatable) The threshold count of failed instances in the group, which when reached or exceeded sets the stage as FAILED.
        :param int failure_percentage: (Updatable) The failure percentage threshold, which when reached or exceeded sets the stage as FAILED. Percentage is computed as the ceiling value of the number of failed instances over the total count of the instances in the group.
        """
        pulumi.set(__self__, "policy_type", policy_type)
        if failure_count is not None:
            pulumi.set(__self__, "failure_count", failure_count)
        if failure_percentage is not None:
            pulumi.set(__self__, "failure_percentage", failure_percentage)

    @property
    @pulumi.getter(name="policyType")
    def policy_type(self) -> str:
        """
        (Updatable) The type of policy used for rolling out a deployment stage.
        """
        return pulumi.get(self, "policy_type")

    @property
    @pulumi.getter(name="failureCount")
    def failure_count(self) -> Optional[int]:
        """
        (Updatable) The threshold count of failed instances in the group, which when reached or exceeded sets the stage as FAILED.
        """
        return pulumi.get(self, "failure_count")

    @property
    @pulumi.getter(name="failurePercentage")
    def failure_percentage(self) -> Optional[int]:
        """
        (Updatable) The failure percentage threshold, which when reached or exceeded sets the stage as FAILED. Percentage is computed as the ceiling value of the number of failed instances over the total count of the instances in the group.
        """
        return pulumi.get(self, "failure_percentage")


@pulumi.output_type
class DeployStageGreenBackendIps(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence[str]] = None):
        """
        :param Sequence[str] items: (Updatable) The IP address of the backend server. A server could be a compute instance or a load balancer.
        """
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence[str]]:
        """
        (Updatable) The IP address of the backend server. A server could be a compute instance or a load balancer.
        """
        return pulumi.get(self, "items")


@pulumi.output_type
class DeployStageLoadBalancerConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "backendPort":
            suggest = "backend_port"
        elif key == "listenerName":
            suggest = "listener_name"
        elif key == "loadBalancerId":
            suggest = "load_balancer_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeployStageLoadBalancerConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeployStageLoadBalancerConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeployStageLoadBalancerConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 backend_port: Optional[int] = None,
                 listener_name: Optional[str] = None,
                 load_balancer_id: Optional[str] = None,
                 state: Optional[str] = None):
        """
        :param int backend_port: (Updatable) Listen port for the backend server.
        :param str listener_name: (Updatable) Name of the load balancer listener.
        :param str load_balancer_id: (Updatable) The OCID of the load balancer.
        :param str state: The current state of the deployment stage.
        """
        if backend_port is not None:
            pulumi.set(__self__, "backend_port", backend_port)
        if listener_name is not None:
            pulumi.set(__self__, "listener_name", listener_name)
        if load_balancer_id is not None:
            pulumi.set(__self__, "load_balancer_id", load_balancer_id)
        if state is not None:
            pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter(name="backendPort")
    def backend_port(self) -> Optional[int]:
        """
        (Updatable) Listen port for the backend server.
        """
        return pulumi.get(self, "backend_port")

    @property
    @pulumi.getter(name="listenerName")
    def listener_name(self) -> Optional[str]:
        """
        (Updatable) Name of the load balancer listener.
        """
        return pulumi.get(self, "listener_name")

    @property
    @pulumi.getter(name="loadBalancerId")
    def load_balancer_id(self) -> Optional[str]:
        """
        (Updatable) The OCID of the load balancer.
        """
        return pulumi.get(self, "load_balancer_id")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        """
        The current state of the deployment stage.
        """
        return pulumi.get(self, "state")


@pulumi.output_type
class DeployStageRollbackPolicy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "policyType":
            suggest = "policy_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeployStageRollbackPolicy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeployStageRollbackPolicy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeployStageRollbackPolicy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 policy_type: Optional[str] = None):
        """
        :param str policy_type: (Updatable) The type of policy used for rolling out a deployment stage.
        """
        if policy_type is not None:
            pulumi.set(__self__, "policy_type", policy_type)

    @property
    @pulumi.getter(name="policyType")
    def policy_type(self) -> Optional[str]:
        """
        (Updatable) The type of policy used for rolling out a deployment stage.
        """
        return pulumi.get(self, "policy_type")


@pulumi.output_type
class DeployStageRolloutPolicy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "policyType":
            suggest = "policy_type"
        elif key == "batchCount":
            suggest = "batch_count"
        elif key == "batchDelayInSeconds":
            suggest = "batch_delay_in_seconds"
        elif key == "batchPercentage":
            suggest = "batch_percentage"
        elif key == "rampLimitPercent":
            suggest = "ramp_limit_percent"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeployStageRolloutPolicy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeployStageRolloutPolicy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeployStageRolloutPolicy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 policy_type: str,
                 batch_count: Optional[int] = None,
                 batch_delay_in_seconds: Optional[int] = None,
                 batch_percentage: Optional[int] = None,
                 ramp_limit_percent: Optional[float] = None):
        """
        :param str policy_type: (Updatable) The type of policy used for rolling out a deployment stage.
        :param int batch_count: (Updatable) The number that will be used to determine how many instances will be deployed concurrently.
        :param int batch_delay_in_seconds: (Updatable) The duration of delay between batch rollout. The default delay is 1 minute.
        :param int batch_percentage: (Updatable) The percentage that will be used to determine how many instances will be deployed concurrently.
        :param float ramp_limit_percent: (Updatable) Indicates the criteria to stop.
        """
        pulumi.set(__self__, "policy_type", policy_type)
        if batch_count is not None:
            pulumi.set(__self__, "batch_count", batch_count)
        if batch_delay_in_seconds is not None:
            pulumi.set(__self__, "batch_delay_in_seconds", batch_delay_in_seconds)
        if batch_percentage is not None:
            pulumi.set(__self__, "batch_percentage", batch_percentage)
        if ramp_limit_percent is not None:
            pulumi.set(__self__, "ramp_limit_percent", ramp_limit_percent)

    @property
    @pulumi.getter(name="policyType")
    def policy_type(self) -> str:
        """
        (Updatable) The type of policy used for rolling out a deployment stage.
        """
        return pulumi.get(self, "policy_type")

    @property
    @pulumi.getter(name="batchCount")
    def batch_count(self) -> Optional[int]:
        """
        (Updatable) The number that will be used to determine how many instances will be deployed concurrently.
        """
        return pulumi.get(self, "batch_count")

    @property
    @pulumi.getter(name="batchDelayInSeconds")
    def batch_delay_in_seconds(self) -> Optional[int]:
        """
        (Updatable) The duration of delay between batch rollout. The default delay is 1 minute.
        """
        return pulumi.get(self, "batch_delay_in_seconds")

    @property
    @pulumi.getter(name="batchPercentage")
    def batch_percentage(self) -> Optional[int]:
        """
        (Updatable) The percentage that will be used to determine how many instances will be deployed concurrently.
        """
        return pulumi.get(self, "batch_percentage")

    @property
    @pulumi.getter(name="rampLimitPercent")
    def ramp_limit_percent(self) -> Optional[float]:
        """
        (Updatable) Indicates the criteria to stop.
        """
        return pulumi.get(self, "ramp_limit_percent")


@pulumi.output_type
class DeployStageWaitCriteria(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "waitDuration":
            suggest = "wait_duration"
        elif key == "waitType":
            suggest = "wait_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeployStageWaitCriteria. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeployStageWaitCriteria.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeployStageWaitCriteria.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 wait_duration: str,
                 wait_type: str):
        """
        :param str wait_duration: (Updatable) The absolute wait duration. An ISO 8601 formatted duration string. Minimum waitDuration should be 5 seconds. Maximum waitDuration can be up to 2 days.
        :param str wait_type: (Updatable) Wait criteria type.
        """
        pulumi.set(__self__, "wait_duration", wait_duration)
        pulumi.set(__self__, "wait_type", wait_type)

    @property
    @pulumi.getter(name="waitDuration")
    def wait_duration(self) -> str:
        """
        (Updatable) The absolute wait duration. An ISO 8601 formatted duration string. Minimum waitDuration should be 5 seconds. Maximum waitDuration can be up to 2 days.
        """
        return pulumi.get(self, "wait_duration")

    @property
    @pulumi.getter(name="waitType")
    def wait_type(self) -> str:
        """
        (Updatable) Wait criteria type.
        """
        return pulumi.get(self, "wait_type")


@pulumi.output_type
class DeploymentDeployArtifactOverrideArguments(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.DeploymentDeployArtifactOverrideArgumentsItem']] = None):
        """
        :param Sequence['DeploymentDeployArtifactOverrideArgumentsItemArgs'] items: List of arguments provided at the time of deployment.
        """
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.DeploymentDeployArtifactOverrideArgumentsItem']]:
        """
        List of arguments provided at the time of deployment.
        """
        return pulumi.get(self, "items")


@pulumi.output_type
class DeploymentDeployArtifactOverrideArgumentsItem(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "deployArtifactId":
            suggest = "deploy_artifact_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentDeployArtifactOverrideArgumentsItem. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentDeployArtifactOverrideArgumentsItem.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentDeployArtifactOverrideArgumentsItem.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 deploy_artifact_id: Optional[str] = None,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str deploy_artifact_id: The OCID of the artifact to which this parameter applies.
        :param str name: Name of the parameter (case-sensitive).
        :param str value: value of the argument.
        """
        if deploy_artifact_id is not None:
            pulumi.set(__self__, "deploy_artifact_id", deploy_artifact_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="deployArtifactId")
    def deploy_artifact_id(self) -> Optional[str]:
        """
        The OCID of the artifact to which this parameter applies.
        """
        return pulumi.get(self, "deploy_artifact_id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the parameter (case-sensitive).
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        value of the argument.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class DeploymentDeployPipelineArtifacts(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.DeploymentDeployPipelineArtifactsItem']] = None):
        """
        :param Sequence['DeploymentDeployPipelineArtifactsItemArgs'] items: List of arguments provided at the time of deployment.
        """
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.DeploymentDeployPipelineArtifactsItem']]:
        """
        List of arguments provided at the time of deployment.
        """
        return pulumi.get(self, "items")


@pulumi.output_type
class DeploymentDeployPipelineArtifactsItem(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "deployArtifactId":
            suggest = "deploy_artifact_id"
        elif key == "deployPipelineStages":
            suggest = "deploy_pipeline_stages"
        elif key == "displayName":
            suggest = "display_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentDeployPipelineArtifactsItem. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentDeployPipelineArtifactsItem.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentDeployPipelineArtifactsItem.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 deploy_artifact_id: Optional[str] = None,
                 deploy_pipeline_stages: Optional['outputs.DeploymentDeployPipelineArtifactsItemDeployPipelineStages'] = None,
                 display_name: Optional[str] = None):
        """
        :param str deploy_artifact_id: The OCID of the artifact to which this parameter applies.
        :param 'DeploymentDeployPipelineArtifactsItemDeployPipelineStagesArgs' deploy_pipeline_stages: List of stages.
        :param str display_name: (Updatable) Deployment display name. Avoid entering confidential information.
        """
        if deploy_artifact_id is not None:
            pulumi.set(__self__, "deploy_artifact_id", deploy_artifact_id)
        if deploy_pipeline_stages is not None:
            pulumi.set(__self__, "deploy_pipeline_stages", deploy_pipeline_stages)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)

    @property
    @pulumi.getter(name="deployArtifactId")
    def deploy_artifact_id(self) -> Optional[str]:
        """
        The OCID of the artifact to which this parameter applies.
        """
        return pulumi.get(self, "deploy_artifact_id")

    @property
    @pulumi.getter(name="deployPipelineStages")
    def deploy_pipeline_stages(self) -> Optional['outputs.DeploymentDeployPipelineArtifactsItemDeployPipelineStages']:
        """
        List of stages.
        """
        return pulumi.get(self, "deploy_pipeline_stages")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        """
        (Updatable) Deployment display name. Avoid entering confidential information.
        """
        return pulumi.get(self, "display_name")


@pulumi.output_type
class DeploymentDeployPipelineArtifactsItemDeployPipelineStages(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.DeploymentDeployPipelineArtifactsItemDeployPipelineStagesItem']] = None):
        """
        :param Sequence['DeploymentDeployPipelineArtifactsItemDeployPipelineStagesItemArgs'] items: List of arguments provided at the time of deployment.
        """
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.DeploymentDeployPipelineArtifactsItemDeployPipelineStagesItem']]:
        """
        List of arguments provided at the time of deployment.
        """
        return pulumi.get(self, "items")


@pulumi.output_type
class DeploymentDeployPipelineArtifactsItemDeployPipelineStagesItem(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "deployStageId":
            suggest = "deploy_stage_id"
        elif key == "displayName":
            suggest = "display_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentDeployPipelineArtifactsItemDeployPipelineStagesItem. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentDeployPipelineArtifactsItemDeployPipelineStagesItem.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentDeployPipelineArtifactsItemDeployPipelineStagesItem.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 deploy_stage_id: Optional[str] = None,
                 display_name: Optional[str] = None):
        """
        :param str deploy_stage_id: Specifies the OCID of the stage to be redeployed.
        :param str display_name: (Updatable) Deployment display name. Avoid entering confidential information.
        """
        if deploy_stage_id is not None:
            pulumi.set(__self__, "deploy_stage_id", deploy_stage_id)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)

    @property
    @pulumi.getter(name="deployStageId")
    def deploy_stage_id(self) -> Optional[str]:
        """
        Specifies the OCID of the stage to be redeployed.
        """
        return pulumi.get(self, "deploy_stage_id")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        """
        (Updatable) Deployment display name. Avoid entering confidential information.
        """
        return pulumi.get(self, "display_name")


@pulumi.output_type
class DeploymentDeployPipelineEnvironments(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.DeploymentDeployPipelineEnvironmentsItem']] = None):
        """
        :param Sequence['DeploymentDeployPipelineEnvironmentsItemArgs'] items: List of arguments provided at the time of deployment.
        """
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.DeploymentDeployPipelineEnvironmentsItem']]:
        """
        List of arguments provided at the time of deployment.
        """
        return pulumi.get(self, "items")


@pulumi.output_type
class DeploymentDeployPipelineEnvironmentsItem(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "deployEnvironmentId":
            suggest = "deploy_environment_id"
        elif key == "deployPipelineStages":
            suggest = "deploy_pipeline_stages"
        elif key == "displayName":
            suggest = "display_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentDeployPipelineEnvironmentsItem. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentDeployPipelineEnvironmentsItem.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentDeployPipelineEnvironmentsItem.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 deploy_environment_id: Optional[str] = None,
                 deploy_pipeline_stages: Optional['outputs.DeploymentDeployPipelineEnvironmentsItemDeployPipelineStages'] = None,
                 display_name: Optional[str] = None):
        """
        :param str deploy_environment_id: The OCID of an Environment
        :param 'DeploymentDeployPipelineEnvironmentsItemDeployPipelineStagesArgs' deploy_pipeline_stages: List of stages.
        :param str display_name: (Updatable) Deployment display name. Avoid entering confidential information.
        """
        if deploy_environment_id is not None:
            pulumi.set(__self__, "deploy_environment_id", deploy_environment_id)
        if deploy_pipeline_stages is not None:
            pulumi.set(__self__, "deploy_pipeline_stages", deploy_pipeline_stages)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)

    @property
    @pulumi.getter(name="deployEnvironmentId")
    def deploy_environment_id(self) -> Optional[str]:
        """
        The OCID of an Environment
        """
        return pulumi.get(self, "deploy_environment_id")

    @property
    @pulumi.getter(name="deployPipelineStages")
    def deploy_pipeline_stages(self) -> Optional['outputs.DeploymentDeployPipelineEnvironmentsItemDeployPipelineStages']:
        """
        List of stages.
        """
        return pulumi.get(self, "deploy_pipeline_stages")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        """
        (Updatable) Deployment display name. Avoid entering confidential information.
        """
        return pulumi.get(self, "display_name")


@pulumi.output_type
class DeploymentDeployPipelineEnvironmentsItemDeployPipelineStages(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.DeploymentDeployPipelineEnvironmentsItemDeployPipelineStagesItem']] = None):
        """
        :param Sequence['DeploymentDeployPipelineEnvironmentsItemDeployPipelineStagesItemArgs'] items: List of arguments provided at the time of deployment.
        """
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.DeploymentDeployPipelineEnvironmentsItemDeployPipelineStagesItem']]:
        """
        List of arguments provided at the time of deployment.
        """
        return pulumi.get(self, "items")


@pulumi.output_type
class DeploymentDeployPipelineEnvironmentsItemDeployPipelineStagesItem(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "deployStageId":
            suggest = "deploy_stage_id"
        elif key == "displayName":
            suggest = "display_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentDeployPipelineEnvironmentsItemDeployPipelineStagesItem. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentDeployPipelineEnvironmentsItemDeployPipelineStagesItem.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentDeployPipelineEnvironmentsItemDeployPipelineStagesItem.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 deploy_stage_id: Optional[str] = None,
                 display_name: Optional[str] = None):
        """
        :param str deploy_stage_id: Specifies the OCID of the stage to be redeployed.
        :param str display_name: (Updatable) Deployment display name. Avoid entering confidential information.
        """
        if deploy_stage_id is not None:
            pulumi.set(__self__, "deploy_stage_id", deploy_stage_id)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)

    @property
    @pulumi.getter(name="deployStageId")
    def deploy_stage_id(self) -> Optional[str]:
        """
        Specifies the OCID of the stage to be redeployed.
        """
        return pulumi.get(self, "deploy_stage_id")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        """
        (Updatable) Deployment display name. Avoid entering confidential information.
        """
        return pulumi.get(self, "display_name")


@pulumi.output_type
class DeploymentDeploymentArguments(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.DeploymentDeploymentArgumentsItem']] = None):
        """
        :param Sequence['DeploymentDeploymentArgumentsItemArgs'] items: List of arguments provided at the time of deployment.
        """
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.DeploymentDeploymentArgumentsItem']]:
        """
        List of arguments provided at the time of deployment.
        """
        return pulumi.get(self, "items")


@pulumi.output_type
class DeploymentDeploymentArgumentsItem(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str name: Name of the parameter (case-sensitive).
        :param str value: value of the argument.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the parameter (case-sensitive).
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        value of the argument.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class DeploymentDeploymentExecutionProgress(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "deployStageExecutionProgress":
            suggest = "deploy_stage_execution_progress"
        elif key == "timeFinished":
            suggest = "time_finished"
        elif key == "timeStarted":
            suggest = "time_started"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentDeploymentExecutionProgress. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentDeploymentExecutionProgress.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentDeploymentExecutionProgress.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 deploy_stage_execution_progress: Optional[Mapping[str, Any]] = None,
                 time_finished: Optional[str] = None,
                 time_started: Optional[str] = None):
        """
        :param Mapping[str, Any] deploy_stage_execution_progress: Map of stage OCIDs to deploy stage execution progress model.
        :param str time_finished: Time the deployment is finished. Format defined by [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339).
        :param str time_started: Time the deployment is started. Format defined by [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339).
        """
        if deploy_stage_execution_progress is not None:
            pulumi.set(__self__, "deploy_stage_execution_progress", deploy_stage_execution_progress)
        if time_finished is not None:
            pulumi.set(__self__, "time_finished", time_finished)
        if time_started is not None:
            pulumi.set(__self__, "time_started", time_started)

    @property
    @pulumi.getter(name="deployStageExecutionProgress")
    def deploy_stage_execution_progress(self) -> Optional[Mapping[str, Any]]:
        """
        Map of stage OCIDs to deploy stage execution progress model.
        """
        return pulumi.get(self, "deploy_stage_execution_progress")

    @property
    @pulumi.getter(name="timeFinished")
    def time_finished(self) -> Optional[str]:
        """
        Time the deployment is finished. Format defined by [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339).
        """
        return pulumi.get(self, "time_finished")

    @property
    @pulumi.getter(name="timeStarted")
    def time_started(self) -> Optional[str]:
        """
        Time the deployment is started. Format defined by [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339).
        """
        return pulumi.get(self, "time_started")


@pulumi.output_type
class ProjectNotificationConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "topicId":
            suggest = "topic_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProjectNotificationConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProjectNotificationConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProjectNotificationConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 topic_id: str):
        """
        :param str topic_id: (Updatable) The topic ID for notifications.
        """
        pulumi.set(__self__, "topic_id", topic_id)

    @property
    @pulumi.getter(name="topicId")
    def topic_id(self) -> str:
        """
        (Updatable) The topic ID for notifications.
        """
        return pulumi.get(self, "topic_id")


@pulumi.output_type
class GetDeployArtifactDeployArtifactSourceResult(dict):
    def __init__(__self__, *,
                 base64encoded_content: str,
                 deploy_artifact_path: str,
                 deploy_artifact_source_type: str,
                 deploy_artifact_version: str,
                 image_digest: str,
                 image_uri: str,
                 repository_id: str):
        """
        :param str base64encoded_content: base64 Encoded String
        :param str deploy_artifact_path: Specifies the artifact path in the repository.
        :param str deploy_artifact_source_type: Specifies types of artifact sources.
        :param str deploy_artifact_version: Users can set this as a placeholder value that refers to a pipeline parameter, for example, ${appVersion}.
        :param str image_digest: Specifies image digest for the version of the image.
        :param str image_uri: Specifies OCIR Image Path - optionally include tag.
        :param str repository_id: The OCID of a repository
        """
        pulumi.set(__self__, "base64encoded_content", base64encoded_content)
        pulumi.set(__self__, "deploy_artifact_path", deploy_artifact_path)
        pulumi.set(__self__, "deploy_artifact_source_type", deploy_artifact_source_type)
        pulumi.set(__self__, "deploy_artifact_version", deploy_artifact_version)
        pulumi.set(__self__, "image_digest", image_digest)
        pulumi.set(__self__, "image_uri", image_uri)
        pulumi.set(__self__, "repository_id", repository_id)

    @property
    @pulumi.getter(name="base64encodedContent")
    def base64encoded_content(self) -> str:
        """
        base64 Encoded String
        """
        return pulumi.get(self, "base64encoded_content")

    @property
    @pulumi.getter(name="deployArtifactPath")
    def deploy_artifact_path(self) -> str:
        """
        Specifies the artifact path in the repository.
        """
        return pulumi.get(self, "deploy_artifact_path")

    @property
    @pulumi.getter(name="deployArtifactSourceType")
    def deploy_artifact_source_type(self) -> str:
        """
        Specifies types of artifact sources.
        """
        return pulumi.get(self, "deploy_artifact_source_type")

    @property
    @pulumi.getter(name="deployArtifactVersion")
    def deploy_artifact_version(self) -> str:
        """
        Users can set this as a placeholder value that refers to a pipeline parameter, for example, ${appVersion}.
        """
        return pulumi.get(self, "deploy_artifact_version")

    @property
    @pulumi.getter(name="imageDigest")
    def image_digest(self) -> str:
        """
        Specifies image digest for the version of the image.
        """
        return pulumi.get(self, "image_digest")

    @property
    @pulumi.getter(name="imageUri")
    def image_uri(self) -> str:
        """
        Specifies OCIR Image Path - optionally include tag.
        """
        return pulumi.get(self, "image_uri")

    @property
    @pulumi.getter(name="repositoryId")
    def repository_id(self) -> str:
        """
        The OCID of a repository
        """
        return pulumi.get(self, "repository_id")


@pulumi.output_type
class GetDeployArtifactsDeployArtifactCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetDeployArtifactsDeployArtifactCollectionItemResult']):
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetDeployArtifactsDeployArtifactCollectionItemResult']:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetDeployArtifactsDeployArtifactCollectionItemResult(dict):
    def __init__(__self__, *,
                 argument_substitution_mode: str,
                 compartment_id: str,
                 defined_tags: Mapping[str, Any],
                 deploy_artifact_source: 'outputs.GetDeployArtifactsDeployArtifactCollectionItemDeployArtifactSourceResult',
                 deploy_artifact_type: str,
                 description: str,
                 display_name: str,
                 freeform_tags: Mapping[str, Any],
                 id: str,
                 lifecycle_details: str,
                 project_id: str,
                 state: str,
                 system_tags: Mapping[str, Any],
                 time_created: str,
                 time_updated: str):
        """
        :param str argument_substitution_mode: Mode for artifact parameter substitution.
        :param str compartment_id: The OCID of the compartment in which to list resources.
        :param Mapping[str, Any] defined_tags: Defined tags for this resource. Each key is predefined and scoped to a namespace. See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"foo-namespace.bar-key": "value"}`
        :param 'GetDeployArtifactsDeployArtifactCollectionItemDeployArtifactSourceArgs' deploy_artifact_source: Specifies source of an artifact.
        :param str deploy_artifact_type: Type of the deployment artifact.
        :param str description: Optional description about the artifact to be deployed.
        :param str display_name: A filter to return only resources that match the entire display name given.
        :param Mapping[str, Any] freeform_tags: Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only.  See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"bar-key": "value"}`
        :param str id: Unique identifier or OCID for listing a single resource by ID.
        :param str lifecycle_details: A detailed message describing the current state. For example, can be used to provide actionable information for a resource in Failed state.
        :param str project_id: unique project identifier
        :param str state: A filter to return only DeployArtifacts that matches the given lifecycleState.
        :param Mapping[str, Any] system_tags: Usage of system tag keys. These predefined keys are scoped to namespaces. See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"orcl-cloud.free-tier-retained": "true"}`
        :param str time_created: Time the deployment artifact was created. Format defined by [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339).
        :param str time_updated: Time the deployment artifact was updated. Format defined by [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339).
        """
        pulumi.set(__self__, "argument_substitution_mode", argument_substitution_mode)
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "defined_tags", defined_tags)
        pulumi.set(__self__, "deploy_artifact_source", deploy_artifact_source)
        pulumi.set(__self__, "deploy_artifact_type", deploy_artifact_type)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "freeform_tags", freeform_tags)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        pulumi.set(__self__, "project_id", project_id)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "system_tags", system_tags)
        pulumi.set(__self__, "time_created", time_created)
        pulumi.set(__self__, "time_updated", time_updated)

    @property
    @pulumi.getter(name="argumentSubstitutionMode")
    def argument_substitution_mode(self) -> str:
        """
        Mode for artifact parameter substitution.
        """
        return pulumi.get(self, "argument_substitution_mode")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> str:
        """
        The OCID of the compartment in which to list resources.
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Mapping[str, Any]:
        """
        Defined tags for this resource. Each key is predefined and scoped to a namespace. See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"foo-namespace.bar-key": "value"}`
        """
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="deployArtifactSource")
    def deploy_artifact_source(self) -> 'outputs.GetDeployArtifactsDeployArtifactCollectionItemDeployArtifactSourceResult':
        """
        Specifies source of an artifact.
        """
        return pulumi.get(self, "deploy_artifact_source")

    @property
    @pulumi.getter(name="deployArtifactType")
    def deploy_artifact_type(self) -> str:
        """
        Type of the deployment artifact.
        """
        return pulumi.get(self, "deploy_artifact_type")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Optional description about the artifact to be deployed.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        A filter to return only resources that match the entire display name given.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Mapping[str, Any]:
        """
        Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only.  See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"bar-key": "value"}`
        """
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Unique identifier or OCID for listing a single resource by ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> str:
        """
        A detailed message describing the current state. For example, can be used to provide actionable information for a resource in Failed state.
        """
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> str:
        """
        unique project identifier
        """
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        A filter to return only DeployArtifacts that matches the given lifecycleState.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Mapping[str, Any]:
        """
        Usage of system tag keys. These predefined keys are scoped to namespaces. See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"orcl-cloud.free-tier-retained": "true"}`
        """
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> str:
        """
        Time the deployment artifact was created. Format defined by [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339).
        """
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> str:
        """
        Time the deployment artifact was updated. Format defined by [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339).
        """
        return pulumi.get(self, "time_updated")


@pulumi.output_type
class GetDeployArtifactsDeployArtifactCollectionItemDeployArtifactSourceResult(dict):
    def __init__(__self__, *,
                 base64encoded_content: str,
                 deploy_artifact_path: str,
                 deploy_artifact_source_type: str,
                 deploy_artifact_version: str,
                 image_digest: str,
                 image_uri: str,
                 repository_id: str):
        """
        :param str base64encoded_content: base64 Encoded String
        :param str deploy_artifact_path: Specifies the artifact path in the repository.
        :param str deploy_artifact_source_type: Specifies types of artifact sources.
        :param str deploy_artifact_version: Users can set this as a placeholder value that refers to a pipeline parameter, for example, ${appVersion}.
        :param str image_digest: Specifies image digest for the version of the image.
        :param str image_uri: Specifies OCIR Image Path - optionally include tag.
        :param str repository_id: The OCID of a repository
        """
        pulumi.set(__self__, "base64encoded_content", base64encoded_content)
        pulumi.set(__self__, "deploy_artifact_path", deploy_artifact_path)
        pulumi.set(__self__, "deploy_artifact_source_type", deploy_artifact_source_type)
        pulumi.set(__self__, "deploy_artifact_version", deploy_artifact_version)
        pulumi.set(__self__, "image_digest", image_digest)
        pulumi.set(__self__, "image_uri", image_uri)
        pulumi.set(__self__, "repository_id", repository_id)

    @property
    @pulumi.getter(name="base64encodedContent")
    def base64encoded_content(self) -> str:
        """
        base64 Encoded String
        """
        return pulumi.get(self, "base64encoded_content")

    @property
    @pulumi.getter(name="deployArtifactPath")
    def deploy_artifact_path(self) -> str:
        """
        Specifies the artifact path in the repository.
        """
        return pulumi.get(self, "deploy_artifact_path")

    @property
    @pulumi.getter(name="deployArtifactSourceType")
    def deploy_artifact_source_type(self) -> str:
        """
        Specifies types of artifact sources.
        """
        return pulumi.get(self, "deploy_artifact_source_type")

    @property
    @pulumi.getter(name="deployArtifactVersion")
    def deploy_artifact_version(self) -> str:
        """
        Users can set this as a placeholder value that refers to a pipeline parameter, for example, ${appVersion}.
        """
        return pulumi.get(self, "deploy_artifact_version")

    @property
    @pulumi.getter(name="imageDigest")
    def image_digest(self) -> str:
        """
        Specifies image digest for the version of the image.
        """
        return pulumi.get(self, "image_digest")

    @property
    @pulumi.getter(name="imageUri")
    def image_uri(self) -> str:
        """
        Specifies OCIR Image Path - optionally include tag.
        """
        return pulumi.get(self, "image_uri")

    @property
    @pulumi.getter(name="repositoryId")
    def repository_id(self) -> str:
        """
        The OCID of a repository
        """
        return pulumi.get(self, "repository_id")


@pulumi.output_type
class GetDeployArtifactsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetDeployEnvironmentComputeInstanceGroupSelectorsResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetDeployEnvironmentComputeInstanceGroupSelectorsItemResult']):
        """
        :param Sequence['GetDeployEnvironmentComputeInstanceGroupSelectorsItemArgs'] items: A list of selectors for the instance group. UNION operator is used for combining the instances selected by each selector.
        """
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetDeployEnvironmentComputeInstanceGroupSelectorsItemResult']:
        """
        A list of selectors for the instance group. UNION operator is used for combining the instances selected by each selector.
        """
        return pulumi.get(self, "items")


@pulumi.output_type
class GetDeployEnvironmentComputeInstanceGroupSelectorsItemResult(dict):
    def __init__(__self__, *,
                 compute_instance_ids: Sequence[str],
                 query: str,
                 region: str,
                 selector_type: str):
        """
        :param Sequence[str] compute_instance_ids: Compute instance OCID identifiers that are members of this group.
        :param str query: Query expression confirming to the Oracle Cloud Infrastructure Search Language syntax to select compute instances for the group. The language is documented at https://docs.oracle.com/en-us/iaas/Content/Search/Concepts/querysyntax.htm
        :param str region: Region identifier referred by the deployment environment. Region identifiers are listed at https://docs.oracle.com/en-us/iaas/Content/General/Concepts/regions.htm
        :param str selector_type: Defines the type of the instance selector for the group.
        """
        pulumi.set(__self__, "compute_instance_ids", compute_instance_ids)
        pulumi.set(__self__, "query", query)
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "selector_type", selector_type)

    @property
    @pulumi.getter(name="computeInstanceIds")
    def compute_instance_ids(self) -> Sequence[str]:
        """
        Compute instance OCID identifiers that are members of this group.
        """
        return pulumi.get(self, "compute_instance_ids")

    @property
    @pulumi.getter
    def query(self) -> str:
        """
        Query expression confirming to the Oracle Cloud Infrastructure Search Language syntax to select compute instances for the group. The language is documented at https://docs.oracle.com/en-us/iaas/Content/Search/Concepts/querysyntax.htm
        """
        return pulumi.get(self, "query")

    @property
    @pulumi.getter
    def region(self) -> str:
        """
        Region identifier referred by the deployment environment. Region identifiers are listed at https://docs.oracle.com/en-us/iaas/Content/General/Concepts/regions.htm
        """
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="selectorType")
    def selector_type(self) -> str:
        """
        Defines the type of the instance selector for the group.
        """
        return pulumi.get(self, "selector_type")


@pulumi.output_type
class GetDeployEnvironmentsDeployEnvironmentCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetDeployEnvironmentsDeployEnvironmentCollectionItemResult']):
        """
        :param Sequence['GetDeployEnvironmentsDeployEnvironmentCollectionItemArgs'] items: A list of selectors for the instance group. UNION operator is used for combining the instances selected by each selector.
        """
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetDeployEnvironmentsDeployEnvironmentCollectionItemResult']:
        """
        A list of selectors for the instance group. UNION operator is used for combining the instances selected by each selector.
        """
        return pulumi.get(self, "items")


@pulumi.output_type
class GetDeployEnvironmentsDeployEnvironmentCollectionItemResult(dict):
    def __init__(__self__, *,
                 cluster_id: str,
                 compartment_id: str,
                 compute_instance_group_selectors: 'outputs.GetDeployEnvironmentsDeployEnvironmentCollectionItemComputeInstanceGroupSelectorsResult',
                 defined_tags: Mapping[str, Any],
                 deploy_environment_type: str,
                 description: str,
                 display_name: str,
                 freeform_tags: Mapping[str, Any],
                 function_id: str,
                 id: str,
                 lifecycle_details: str,
                 project_id: str,
                 state: str,
                 system_tags: Mapping[str, Any],
                 time_created: str,
                 time_updated: str):
        """
        :param str cluster_id: The OCID of the Kubernetes cluster.
        :param str compartment_id: The OCID of the compartment in which to list resources.
        :param 'GetDeployEnvironmentsDeployEnvironmentCollectionItemComputeInstanceGroupSelectorsArgs' compute_instance_group_selectors: A collection of selectors. The combination of instances matching the selectors are included in the instance group.
        :param Mapping[str, Any] defined_tags: Defined tags for this resource. Each key is predefined and scoped to a namespace. See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"foo-namespace.bar-key": "value"}`
        :param str deploy_environment_type: Deployment environment type.
        :param str description: Optional description about the deployment environment.
        :param str display_name: A filter to return only resources that match the entire display name given.
        :param Mapping[str, Any] freeform_tags: Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only.  See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"bar-key": "value"}`
        :param str function_id: The OCID of the Function.
        :param str id: Unique identifier or OCID for listing a single resource by ID.
        :param str lifecycle_details: A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
        :param str project_id: unique project identifier
        :param str state: A filter to return only DeployEnvironments that matches the given lifecycleState.
        :param Mapping[str, Any] system_tags: Usage of system tag keys. These predefined keys are scoped to namespaces. See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"orcl-cloud.free-tier-retained": "true"}`
        :param str time_created: Time the deployment environment was created. Format defined by [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339).
        :param str time_updated: Time the deployment environment was updated. Format defined by [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339).
        """
        pulumi.set(__self__, "cluster_id", cluster_id)
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "compute_instance_group_selectors", compute_instance_group_selectors)
        pulumi.set(__self__, "defined_tags", defined_tags)
        pulumi.set(__self__, "deploy_environment_type", deploy_environment_type)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "freeform_tags", freeform_tags)
        pulumi.set(__self__, "function_id", function_id)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        pulumi.set(__self__, "project_id", project_id)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "system_tags", system_tags)
        pulumi.set(__self__, "time_created", time_created)
        pulumi.set(__self__, "time_updated", time_updated)

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> str:
        """
        The OCID of the Kubernetes cluster.
        """
        return pulumi.get(self, "cluster_id")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> str:
        """
        The OCID of the compartment in which to list resources.
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="computeInstanceGroupSelectors")
    def compute_instance_group_selectors(self) -> 'outputs.GetDeployEnvironmentsDeployEnvironmentCollectionItemComputeInstanceGroupSelectorsResult':
        """
        A collection of selectors. The combination of instances matching the selectors are included in the instance group.
        """
        return pulumi.get(self, "compute_instance_group_selectors")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Mapping[str, Any]:
        """
        Defined tags for this resource. Each key is predefined and scoped to a namespace. See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"foo-namespace.bar-key": "value"}`
        """
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="deployEnvironmentType")
    def deploy_environment_type(self) -> str:
        """
        Deployment environment type.
        """
        return pulumi.get(self, "deploy_environment_type")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Optional description about the deployment environment.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        A filter to return only resources that match the entire display name given.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Mapping[str, Any]:
        """
        Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only.  See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"bar-key": "value"}`
        """
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter(name="functionId")
    def function_id(self) -> str:
        """
        The OCID of the Function.
        """
        return pulumi.get(self, "function_id")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Unique identifier or OCID for listing a single resource by ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> str:
        """
        A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
        """
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> str:
        """
        unique project identifier
        """
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        A filter to return only DeployEnvironments that matches the given lifecycleState.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Mapping[str, Any]:
        """
        Usage of system tag keys. These predefined keys are scoped to namespaces. See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"orcl-cloud.free-tier-retained": "true"}`
        """
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> str:
        """
        Time the deployment environment was created. Format defined by [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339).
        """
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> str:
        """
        Time the deployment environment was updated. Format defined by [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339).
        """
        return pulumi.get(self, "time_updated")


@pulumi.output_type
class GetDeployEnvironmentsDeployEnvironmentCollectionItemComputeInstanceGroupSelectorsResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetDeployEnvironmentsDeployEnvironmentCollectionItemComputeInstanceGroupSelectorsItemResult']):
        """
        :param Sequence['GetDeployEnvironmentsDeployEnvironmentCollectionItemComputeInstanceGroupSelectorsItemArgs'] items: A list of selectors for the instance group. UNION operator is used for combining the instances selected by each selector.
        """
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetDeployEnvironmentsDeployEnvironmentCollectionItemComputeInstanceGroupSelectorsItemResult']:
        """
        A list of selectors for the instance group. UNION operator is used for combining the instances selected by each selector.
        """
        return pulumi.get(self, "items")


@pulumi.output_type
class GetDeployEnvironmentsDeployEnvironmentCollectionItemComputeInstanceGroupSelectorsItemResult(dict):
    def __init__(__self__, *,
                 compute_instance_ids: Sequence[str],
                 query: str,
                 region: str,
                 selector_type: str):
        """
        :param Sequence[str] compute_instance_ids: Compute instance OCID identifiers that are members of this group.
        :param str query: Query expression confirming to the Oracle Cloud Infrastructure Search Language syntax to select compute instances for the group. The language is documented at https://docs.oracle.com/en-us/iaas/Content/Search/Concepts/querysyntax.htm
        :param str region: Region identifier referred by the deployment environment. Region identifiers are listed at https://docs.oracle.com/en-us/iaas/Content/General/Concepts/regions.htm
        :param str selector_type: Defines the type of the instance selector for the group.
        """
        pulumi.set(__self__, "compute_instance_ids", compute_instance_ids)
        pulumi.set(__self__, "query", query)
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "selector_type", selector_type)

    @property
    @pulumi.getter(name="computeInstanceIds")
    def compute_instance_ids(self) -> Sequence[str]:
        """
        Compute instance OCID identifiers that are members of this group.
        """
        return pulumi.get(self, "compute_instance_ids")

    @property
    @pulumi.getter
    def query(self) -> str:
        """
        Query expression confirming to the Oracle Cloud Infrastructure Search Language syntax to select compute instances for the group. The language is documented at https://docs.oracle.com/en-us/iaas/Content/Search/Concepts/querysyntax.htm
        """
        return pulumi.get(self, "query")

    @property
    @pulumi.getter
    def region(self) -> str:
        """
        Region identifier referred by the deployment environment. Region identifiers are listed at https://docs.oracle.com/en-us/iaas/Content/General/Concepts/regions.htm
        """
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="selectorType")
    def selector_type(self) -> str:
        """
        Defines the type of the instance selector for the group.
        """
        return pulumi.get(self, "selector_type")


@pulumi.output_type
class GetDeployEnvironmentsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetDeployPipelineDeployPipelineArtifactsResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetDeployPipelineDeployPipelineArtifactsItemResult']):
        """
        :param Sequence['GetDeployPipelineDeployPipelineArtifactsItemArgs'] items: List of parameters defined for a deployment pipeline.
        """
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetDeployPipelineDeployPipelineArtifactsItemResult']:
        """
        List of parameters defined for a deployment pipeline.
        """
        return pulumi.get(self, "items")


@pulumi.output_type
class GetDeployPipelineDeployPipelineArtifactsItemResult(dict):
    def __init__(__self__, *,
                 deploy_artifact_id: str,
                 deploy_pipeline_stages: 'outputs.GetDeployPipelineDeployPipelineArtifactsItemDeployPipelineStagesResult',
                 display_name: str):
        """
        :param str deploy_artifact_id: The OCID of an artifact
        :param 'GetDeployPipelineDeployPipelineArtifactsItemDeployPipelineStagesArgs' deploy_pipeline_stages: List of stages.
        :param str display_name: Deployment pipeline display name, which can be renamed and is not necessarily unique. Avoid entering confidential information.
        """
        pulumi.set(__self__, "deploy_artifact_id", deploy_artifact_id)
        pulumi.set(__self__, "deploy_pipeline_stages", deploy_pipeline_stages)
        pulumi.set(__self__, "display_name", display_name)

    @property
    @pulumi.getter(name="deployArtifactId")
    def deploy_artifact_id(self) -> str:
        """
        The OCID of an artifact
        """
        return pulumi.get(self, "deploy_artifact_id")

    @property
    @pulumi.getter(name="deployPipelineStages")
    def deploy_pipeline_stages(self) -> 'outputs.GetDeployPipelineDeployPipelineArtifactsItemDeployPipelineStagesResult':
        """
        List of stages.
        """
        return pulumi.get(self, "deploy_pipeline_stages")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        Deployment pipeline display name, which can be renamed and is not necessarily unique. Avoid entering confidential information.
        """
        return pulumi.get(self, "display_name")


@pulumi.output_type
class GetDeployPipelineDeployPipelineArtifactsItemDeployPipelineStagesResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetDeployPipelineDeployPipelineArtifactsItemDeployPipelineStagesItemResult']):
        """
        :param Sequence['GetDeployPipelineDeployPipelineArtifactsItemDeployPipelineStagesItemArgs'] items: List of parameters defined for a deployment pipeline.
        """
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetDeployPipelineDeployPipelineArtifactsItemDeployPipelineStagesItemResult']:
        """
        List of parameters defined for a deployment pipeline.
        """
        return pulumi.get(self, "items")


@pulumi.output_type
class GetDeployPipelineDeployPipelineArtifactsItemDeployPipelineStagesItemResult(dict):
    def __init__(__self__, *,
                 deploy_stage_id: str,
                 display_name: str):
        """
        :param str deploy_stage_id: The OCID of a stage
        :param str display_name: Deployment pipeline display name, which can be renamed and is not necessarily unique. Avoid entering confidential information.
        """
        pulumi.set(__self__, "deploy_stage_id", deploy_stage_id)
        pulumi.set(__self__, "display_name", display_name)

    @property
    @pulumi.getter(name="deployStageId")
    def deploy_stage_id(self) -> str:
        """
        The OCID of a stage
        """
        return pulumi.get(self, "deploy_stage_id")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        Deployment pipeline display name, which can be renamed and is not necessarily unique. Avoid entering confidential information.
        """
        return pulumi.get(self, "display_name")


@pulumi.output_type
class GetDeployPipelineDeployPipelineEnvironmentsResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetDeployPipelineDeployPipelineEnvironmentsItemResult']):
        """
        :param Sequence['GetDeployPipelineDeployPipelineEnvironmentsItemArgs'] items: List of parameters defined for a deployment pipeline.
        """
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetDeployPipelineDeployPipelineEnvironmentsItemResult']:
        """
        List of parameters defined for a deployment pipeline.
        """
        return pulumi.get(self, "items")


@pulumi.output_type
class GetDeployPipelineDeployPipelineEnvironmentsItemResult(dict):
    def __init__(__self__, *,
                 deploy_environment_id: str,
                 deploy_pipeline_stages: 'outputs.GetDeployPipelineDeployPipelineEnvironmentsItemDeployPipelineStagesResult',
                 display_name: str):
        """
        :param str deploy_environment_id: The OCID of an Environment
        :param 'GetDeployPipelineDeployPipelineEnvironmentsItemDeployPipelineStagesArgs' deploy_pipeline_stages: List of stages.
        :param str display_name: Deployment pipeline display name, which can be renamed and is not necessarily unique. Avoid entering confidential information.
        """
        pulumi.set(__self__, "deploy_environment_id", deploy_environment_id)
        pulumi.set(__self__, "deploy_pipeline_stages", deploy_pipeline_stages)
        pulumi.set(__self__, "display_name", display_name)

    @property
    @pulumi.getter(name="deployEnvironmentId")
    def deploy_environment_id(self) -> str:
        """
        The OCID of an Environment
        """
        return pulumi.get(self, "deploy_environment_id")

    @property
    @pulumi.getter(name="deployPipelineStages")
    def deploy_pipeline_stages(self) -> 'outputs.GetDeployPipelineDeployPipelineEnvironmentsItemDeployPipelineStagesResult':
        """
        List of stages.
        """
        return pulumi.get(self, "deploy_pipeline_stages")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        Deployment pipeline display name, which can be renamed and is not necessarily unique. Avoid entering confidential information.
        """
        return pulumi.get(self, "display_name")


@pulumi.output_type
class GetDeployPipelineDeployPipelineEnvironmentsItemDeployPipelineStagesResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetDeployPipelineDeployPipelineEnvironmentsItemDeployPipelineStagesItemResult']):
        """
        :param Sequence['GetDeployPipelineDeployPipelineEnvironmentsItemDeployPipelineStagesItemArgs'] items: List of parameters defined for a deployment pipeline.
        """
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetDeployPipelineDeployPipelineEnvironmentsItemDeployPipelineStagesItemResult']:
        """
        List of parameters defined for a deployment pipeline.
        """
        return pulumi.get(self, "items")


@pulumi.output_type
class GetDeployPipelineDeployPipelineEnvironmentsItemDeployPipelineStagesItemResult(dict):
    def __init__(__self__, *,
                 deploy_stage_id: str,
                 display_name: str):
        """
        :param str deploy_stage_id: The OCID of a stage
        :param str display_name: Deployment pipeline display name, which can be renamed and is not necessarily unique. Avoid entering confidential information.
        """
        pulumi.set(__self__, "deploy_stage_id", deploy_stage_id)
        pulumi.set(__self__, "display_name", display_name)

    @property
    @pulumi.getter(name="deployStageId")
    def deploy_stage_id(self) -> str:
        """
        The OCID of a stage
        """
        return pulumi.get(self, "deploy_stage_id")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        Deployment pipeline display name, which can be renamed and is not necessarily unique. Avoid entering confidential information.
        """
        return pulumi.get(self, "display_name")


@pulumi.output_type
class GetDeployPipelineDeployPipelineParametersResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetDeployPipelineDeployPipelineParametersItemResult']):
        """
        :param Sequence['GetDeployPipelineDeployPipelineParametersItemArgs'] items: List of parameters defined for a deployment pipeline.
        """
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetDeployPipelineDeployPipelineParametersItemResult']:
        """
        List of parameters defined for a deployment pipeline.
        """
        return pulumi.get(self, "items")


@pulumi.output_type
class GetDeployPipelineDeployPipelineParametersItemResult(dict):
    def __init__(__self__, *,
                 default_value: str,
                 description: str,
                 name: str):
        """
        :param str default_value: Default value of the parameter.
        :param str description: Optional description about the deployment pipeline.
        :param str name: Name of the parameter (case-sensitive). Parameter name must be ^[a-zA-Z][a-zA-Z_0-9]*$.
        """
        pulumi.set(__self__, "default_value", default_value)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="defaultValue")
    def default_value(self) -> str:
        """
        Default value of the parameter.
        """
        return pulumi.get(self, "default_value")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Optional description about the deployment pipeline.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the parameter (case-sensitive). Parameter name must be ^[a-zA-Z][a-zA-Z_0-9]*$.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetDeployPipelinesDeployPipelineCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetDeployPipelinesDeployPipelineCollectionItemResult']):
        """
        :param Sequence['GetDeployPipelinesDeployPipelineCollectionItemArgs'] items: List of parameters defined for a deployment pipeline.
        """
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetDeployPipelinesDeployPipelineCollectionItemResult']:
        """
        List of parameters defined for a deployment pipeline.
        """
        return pulumi.get(self, "items")


@pulumi.output_type
class GetDeployPipelinesDeployPipelineCollectionItemResult(dict):
    def __init__(__self__, *,
                 compartment_id: str,
                 defined_tags: Mapping[str, Any],
                 deploy_pipeline_artifacts: 'outputs.GetDeployPipelinesDeployPipelineCollectionItemDeployPipelineArtifactsResult',
                 deploy_pipeline_environments: 'outputs.GetDeployPipelinesDeployPipelineCollectionItemDeployPipelineEnvironmentsResult',
                 deploy_pipeline_parameters: 'outputs.GetDeployPipelinesDeployPipelineCollectionItemDeployPipelineParametersResult',
                 description: str,
                 display_name: str,
                 freeform_tags: Mapping[str, Any],
                 id: str,
                 lifecycle_details: str,
                 project_id: str,
                 state: str,
                 system_tags: Mapping[str, Any],
                 time_created: str,
                 time_updated: str):
        """
        :param str compartment_id: The OCID of the compartment in which to list resources.
        :param Mapping[str, Any] defined_tags: Defined tags for this resource. Each key is predefined and scoped to a namespace. See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"foo-namespace.bar-key": "value"}`
        :param 'GetDeployPipelinesDeployPipelineCollectionItemDeployPipelineArtifactsArgs' deploy_pipeline_artifacts: List of all artifacts used in the pipeline.
        :param 'GetDeployPipelinesDeployPipelineCollectionItemDeployPipelineEnvironmentsArgs' deploy_pipeline_environments: List of all environments used in the pipeline.
        :param 'GetDeployPipelinesDeployPipelineCollectionItemDeployPipelineParametersArgs' deploy_pipeline_parameters: Specifies list of parameters present in the deployment pipeline. In case of Update operation, replaces existing parameters list. Merging with existing parameters is not supported.
        :param str description: Optional description about the deployment pipeline.
        :param str display_name: A filter to return only resources that match the entire display name given.
        :param Mapping[str, Any] freeform_tags: Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only.  See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"bar-key": "value"}`
        :param str id: Unique identifier or OCID for listing a single resource by ID.
        :param str lifecycle_details: A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
        :param str project_id: unique project identifier
        :param str state: A filter to return only DeployPipelines that matches the given lifecycleState.
        :param Mapping[str, Any] system_tags: Usage of system tag keys. These predefined keys are scoped to namespaces. See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"orcl-cloud.free-tier-retained": "true"}`
        :param str time_created: Time the deployment pipeline was created. Format defined by [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339).
        :param str time_updated: Time the deployment pipeline was updated. Format defined by [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339).
        """
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "defined_tags", defined_tags)
        pulumi.set(__self__, "deploy_pipeline_artifacts", deploy_pipeline_artifacts)
        pulumi.set(__self__, "deploy_pipeline_environments", deploy_pipeline_environments)
        pulumi.set(__self__, "deploy_pipeline_parameters", deploy_pipeline_parameters)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "freeform_tags", freeform_tags)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        pulumi.set(__self__, "project_id", project_id)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "system_tags", system_tags)
        pulumi.set(__self__, "time_created", time_created)
        pulumi.set(__self__, "time_updated", time_updated)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> str:
        """
        The OCID of the compartment in which to list resources.
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Mapping[str, Any]:
        """
        Defined tags for this resource. Each key is predefined and scoped to a namespace. See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"foo-namespace.bar-key": "value"}`
        """
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="deployPipelineArtifacts")
    def deploy_pipeline_artifacts(self) -> 'outputs.GetDeployPipelinesDeployPipelineCollectionItemDeployPipelineArtifactsResult':
        """
        List of all artifacts used in the pipeline.
        """
        return pulumi.get(self, "deploy_pipeline_artifacts")

    @property
    @pulumi.getter(name="deployPipelineEnvironments")
    def deploy_pipeline_environments(self) -> 'outputs.GetDeployPipelinesDeployPipelineCollectionItemDeployPipelineEnvironmentsResult':
        """
        List of all environments used in the pipeline.
        """
        return pulumi.get(self, "deploy_pipeline_environments")

    @property
    @pulumi.getter(name="deployPipelineParameters")
    def deploy_pipeline_parameters(self) -> 'outputs.GetDeployPipelinesDeployPipelineCollectionItemDeployPipelineParametersResult':
        """
        Specifies list of parameters present in the deployment pipeline. In case of Update operation, replaces existing parameters list. Merging with existing parameters is not supported.
        """
        return pulumi.get(self, "deploy_pipeline_parameters")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Optional description about the deployment pipeline.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        A filter to return only resources that match the entire display name given.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Mapping[str, Any]:
        """
        Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only.  See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"bar-key": "value"}`
        """
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Unique identifier or OCID for listing a single resource by ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> str:
        """
        A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
        """
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> str:
        """
        unique project identifier
        """
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        A filter to return only DeployPipelines that matches the given lifecycleState.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Mapping[str, Any]:
        """
        Usage of system tag keys. These predefined keys are scoped to namespaces. See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"orcl-cloud.free-tier-retained": "true"}`
        """
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> str:
        """
        Time the deployment pipeline was created. Format defined by [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339).
        """
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> str:
        """
        Time the deployment pipeline was updated. Format defined by [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339).
        """
        return pulumi.get(self, "time_updated")


@pulumi.output_type
class GetDeployPipelinesDeployPipelineCollectionItemDeployPipelineArtifactsResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetDeployPipelinesDeployPipelineCollectionItemDeployPipelineArtifactsItemResult']):
        """
        :param Sequence['GetDeployPipelinesDeployPipelineCollectionItemDeployPipelineArtifactsItemArgs'] items: List of parameters defined for a deployment pipeline.
        """
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetDeployPipelinesDeployPipelineCollectionItemDeployPipelineArtifactsItemResult']:
        """
        List of parameters defined for a deployment pipeline.
        """
        return pulumi.get(self, "items")


@pulumi.output_type
class GetDeployPipelinesDeployPipelineCollectionItemDeployPipelineArtifactsItemResult(dict):
    def __init__(__self__, *,
                 deploy_artifact_id: str,
                 deploy_pipeline_stages: 'outputs.GetDeployPipelinesDeployPipelineCollectionItemDeployPipelineArtifactsItemDeployPipelineStagesResult',
                 display_name: str):
        """
        :param str deploy_artifact_id: The OCID of an artifact
        :param 'GetDeployPipelinesDeployPipelineCollectionItemDeployPipelineArtifactsItemDeployPipelineStagesArgs' deploy_pipeline_stages: List of stages.
        :param str display_name: A filter to return only resources that match the entire display name given.
        """
        pulumi.set(__self__, "deploy_artifact_id", deploy_artifact_id)
        pulumi.set(__self__, "deploy_pipeline_stages", deploy_pipeline_stages)
        pulumi.set(__self__, "display_name", display_name)

    @property
    @pulumi.getter(name="deployArtifactId")
    def deploy_artifact_id(self) -> str:
        """
        The OCID of an artifact
        """
        return pulumi.get(self, "deploy_artifact_id")

    @property
    @pulumi.getter(name="deployPipelineStages")
    def deploy_pipeline_stages(self) -> 'outputs.GetDeployPipelinesDeployPipelineCollectionItemDeployPipelineArtifactsItemDeployPipelineStagesResult':
        """
        List of stages.
        """
        return pulumi.get(self, "deploy_pipeline_stages")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        A filter to return only resources that match the entire display name given.
        """
        return pulumi.get(self, "display_name")


@pulumi.output_type
class GetDeployPipelinesDeployPipelineCollectionItemDeployPipelineArtifactsItemDeployPipelineStagesResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetDeployPipelinesDeployPipelineCollectionItemDeployPipelineArtifactsItemDeployPipelineStagesItemResult']):
        """
        :param Sequence['GetDeployPipelinesDeployPipelineCollectionItemDeployPipelineArtifactsItemDeployPipelineStagesItemArgs'] items: List of parameters defined for a deployment pipeline.
        """
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetDeployPipelinesDeployPipelineCollectionItemDeployPipelineArtifactsItemDeployPipelineStagesItemResult']:
        """
        List of parameters defined for a deployment pipeline.
        """
        return pulumi.get(self, "items")


@pulumi.output_type
class GetDeployPipelinesDeployPipelineCollectionItemDeployPipelineArtifactsItemDeployPipelineStagesItemResult(dict):
    def __init__(__self__, *,
                 deploy_stage_id: str,
                 display_name: str):
        """
        :param str deploy_stage_id: The OCID of a stage
        :param str display_name: A filter to return only resources that match the entire display name given.
        """
        pulumi.set(__self__, "deploy_stage_id", deploy_stage_id)
        pulumi.set(__self__, "display_name", display_name)

    @property
    @pulumi.getter(name="deployStageId")
    def deploy_stage_id(self) -> str:
        """
        The OCID of a stage
        """
        return pulumi.get(self, "deploy_stage_id")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        A filter to return only resources that match the entire display name given.
        """
        return pulumi.get(self, "display_name")


@pulumi.output_type
class GetDeployPipelinesDeployPipelineCollectionItemDeployPipelineEnvironmentsResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetDeployPipelinesDeployPipelineCollectionItemDeployPipelineEnvironmentsItemResult']):
        """
        :param Sequence['GetDeployPipelinesDeployPipelineCollectionItemDeployPipelineEnvironmentsItemArgs'] items: List of parameters defined for a deployment pipeline.
        """
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetDeployPipelinesDeployPipelineCollectionItemDeployPipelineEnvironmentsItemResult']:
        """
        List of parameters defined for a deployment pipeline.
        """
        return pulumi.get(self, "items")


@pulumi.output_type
class GetDeployPipelinesDeployPipelineCollectionItemDeployPipelineEnvironmentsItemResult(dict):
    def __init__(__self__, *,
                 deploy_environment_id: str,
                 deploy_pipeline_stages: 'outputs.GetDeployPipelinesDeployPipelineCollectionItemDeployPipelineEnvironmentsItemDeployPipelineStagesResult',
                 display_name: str):
        """
        :param str deploy_environment_id: The OCID of an Environment
        :param 'GetDeployPipelinesDeployPipelineCollectionItemDeployPipelineEnvironmentsItemDeployPipelineStagesArgs' deploy_pipeline_stages: List of stages.
        :param str display_name: A filter to return only resources that match the entire display name given.
        """
        pulumi.set(__self__, "deploy_environment_id", deploy_environment_id)
        pulumi.set(__self__, "deploy_pipeline_stages", deploy_pipeline_stages)
        pulumi.set(__self__, "display_name", display_name)

    @property
    @pulumi.getter(name="deployEnvironmentId")
    def deploy_environment_id(self) -> str:
        """
        The OCID of an Environment
        """
        return pulumi.get(self, "deploy_environment_id")

    @property
    @pulumi.getter(name="deployPipelineStages")
    def deploy_pipeline_stages(self) -> 'outputs.GetDeployPipelinesDeployPipelineCollectionItemDeployPipelineEnvironmentsItemDeployPipelineStagesResult':
        """
        List of stages.
        """
        return pulumi.get(self, "deploy_pipeline_stages")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        A filter to return only resources that match the entire display name given.
        """
        return pulumi.get(self, "display_name")


@pulumi.output_type
class GetDeployPipelinesDeployPipelineCollectionItemDeployPipelineEnvironmentsItemDeployPipelineStagesResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetDeployPipelinesDeployPipelineCollectionItemDeployPipelineEnvironmentsItemDeployPipelineStagesItemResult']):
        """
        :param Sequence['GetDeployPipelinesDeployPipelineCollectionItemDeployPipelineEnvironmentsItemDeployPipelineStagesItemArgs'] items: List of parameters defined for a deployment pipeline.
        """
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetDeployPipelinesDeployPipelineCollectionItemDeployPipelineEnvironmentsItemDeployPipelineStagesItemResult']:
        """
        List of parameters defined for a deployment pipeline.
        """
        return pulumi.get(self, "items")


@pulumi.output_type
class GetDeployPipelinesDeployPipelineCollectionItemDeployPipelineEnvironmentsItemDeployPipelineStagesItemResult(dict):
    def __init__(__self__, *,
                 deploy_stage_id: str,
                 display_name: str):
        """
        :param str deploy_stage_id: The OCID of a stage
        :param str display_name: A filter to return only resources that match the entire display name given.
        """
        pulumi.set(__self__, "deploy_stage_id", deploy_stage_id)
        pulumi.set(__self__, "display_name", display_name)

    @property
    @pulumi.getter(name="deployStageId")
    def deploy_stage_id(self) -> str:
        """
        The OCID of a stage
        """
        return pulumi.get(self, "deploy_stage_id")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        A filter to return only resources that match the entire display name given.
        """
        return pulumi.get(self, "display_name")


@pulumi.output_type
class GetDeployPipelinesDeployPipelineCollectionItemDeployPipelineParametersResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetDeployPipelinesDeployPipelineCollectionItemDeployPipelineParametersItemResult']):
        """
        :param Sequence['GetDeployPipelinesDeployPipelineCollectionItemDeployPipelineParametersItemArgs'] items: List of parameters defined for a deployment pipeline.
        """
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetDeployPipelinesDeployPipelineCollectionItemDeployPipelineParametersItemResult']:
        """
        List of parameters defined for a deployment pipeline.
        """
        return pulumi.get(self, "items")


@pulumi.output_type
class GetDeployPipelinesDeployPipelineCollectionItemDeployPipelineParametersItemResult(dict):
    def __init__(__self__, *,
                 default_value: str,
                 description: str,
                 name: str):
        """
        :param str default_value: Default value of the parameter.
        :param str description: Optional description about the deployment pipeline.
        :param str name: Name of the parameter (case-sensitive). Parameter name must be ^[a-zA-Z][a-zA-Z_0-9]*$.
        """
        pulumi.set(__self__, "default_value", default_value)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="defaultValue")
    def default_value(self) -> str:
        """
        Default value of the parameter.
        """
        return pulumi.get(self, "default_value")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Optional description about the deployment pipeline.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the parameter (case-sensitive). Parameter name must be ^[a-zA-Z][a-zA-Z_0-9]*$.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetDeployPipelinesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        """
        :param str name: Name of the parameter (case-sensitive). Parameter name must be ^[a-zA-Z][a-zA-Z_0-9]*$.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the parameter (case-sensitive). Parameter name must be ^[a-zA-Z][a-zA-Z_0-9]*$.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetDeployStageApprovalPolicyResult(dict):
    def __init__(__self__, *,
                 approval_policy_type: str,
                 number_of_approvals_required: int):
        """
        :param str approval_policy_type: Approval policy type.
        :param int number_of_approvals_required: A minimum number of approvals required for stage to proceed.
        """
        pulumi.set(__self__, "approval_policy_type", approval_policy_type)
        pulumi.set(__self__, "number_of_approvals_required", number_of_approvals_required)

    @property
    @pulumi.getter(name="approvalPolicyType")
    def approval_policy_type(self) -> str:
        """
        Approval policy type.
        """
        return pulumi.get(self, "approval_policy_type")

    @property
    @pulumi.getter(name="numberOfApprovalsRequired")
    def number_of_approvals_required(self) -> int:
        """
        A minimum number of approvals required for stage to proceed.
        """
        return pulumi.get(self, "number_of_approvals_required")


@pulumi.output_type
class GetDeployStageBlueBackendIpsResult(dict):
    def __init__(__self__, *,
                 items: Sequence[str]):
        """
        :param Sequence[str] items: The IP address of the backend server. A server could be a compute instance or a load balancer.
        """
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence[str]:
        """
        The IP address of the backend server. A server could be a compute instance or a load balancer.
        """
        return pulumi.get(self, "items")


@pulumi.output_type
class GetDeployStageDeployStagePredecessorCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetDeployStageDeployStagePredecessorCollectionItemResult']):
        """
        :param Sequence['GetDeployStageDeployStagePredecessorCollectionItemArgs'] items: The IP address of the backend server. A server could be a compute instance or a load balancer.
        """
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetDeployStageDeployStagePredecessorCollectionItemResult']:
        """
        The IP address of the backend server. A server could be a compute instance or a load balancer.
        """
        return pulumi.get(self, "items")


@pulumi.output_type
class GetDeployStageDeployStagePredecessorCollectionItemResult(dict):
    def __init__(__self__, *,
                 id: str):
        """
        :param str id: Unique identifier that is immutable on creation.
        """
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Unique identifier that is immutable on creation.
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class GetDeployStageFailurePolicyResult(dict):
    def __init__(__self__, *,
                 failure_count: int,
                 failure_percentage: int,
                 policy_type: str):
        """
        :param int failure_count: The threshold count of failed instances in the group, which when reached or exceeded sets the stage as FAILED.
        :param int failure_percentage: The failure percentage threshold, which when reached or exceeded sets the stage as FAILED. Percentage is computed as the ceiling value of the number of failed instances over the total count of the instances in the group.
        :param str policy_type: The type of policy used for rolling out a deployment stage.
        """
        pulumi.set(__self__, "failure_count", failure_count)
        pulumi.set(__self__, "failure_percentage", failure_percentage)
        pulumi.set(__self__, "policy_type", policy_type)

    @property
    @pulumi.getter(name="failureCount")
    def failure_count(self) -> int:
        """
        The threshold count of failed instances in the group, which when reached or exceeded sets the stage as FAILED.
        """
        return pulumi.get(self, "failure_count")

    @property
    @pulumi.getter(name="failurePercentage")
    def failure_percentage(self) -> int:
        """
        The failure percentage threshold, which when reached or exceeded sets the stage as FAILED. Percentage is computed as the ceiling value of the number of failed instances over the total count of the instances in the group.
        """
        return pulumi.get(self, "failure_percentage")

    @property
    @pulumi.getter(name="policyType")
    def policy_type(self) -> str:
        """
        The type of policy used for rolling out a deployment stage.
        """
        return pulumi.get(self, "policy_type")


@pulumi.output_type
class GetDeployStageGreenBackendIpsResult(dict):
    def __init__(__self__, *,
                 items: Sequence[str]):
        """
        :param Sequence[str] items: The IP address of the backend server. A server could be a compute instance or a load balancer.
        """
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence[str]:
        """
        The IP address of the backend server. A server could be a compute instance or a load balancer.
        """
        return pulumi.get(self, "items")


@pulumi.output_type
class GetDeployStageLoadBalancerConfigResult(dict):
    def __init__(__self__, *,
                 backend_port: int,
                 listener_name: str,
                 load_balancer_id: str,
                 state: str):
        """
        :param int backend_port: Listen port for the backend server.
        :param str listener_name: Name of the load balancer listener.
        :param str load_balancer_id: The OCID of the load balancer.
        :param str state: The current state of the deployment stage.
        """
        pulumi.set(__self__, "backend_port", backend_port)
        pulumi.set(__self__, "listener_name", listener_name)
        pulumi.set(__self__, "load_balancer_id", load_balancer_id)
        pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter(name="backendPort")
    def backend_port(self) -> int:
        """
        Listen port for the backend server.
        """
        return pulumi.get(self, "backend_port")

    @property
    @pulumi.getter(name="listenerName")
    def listener_name(self) -> str:
        """
        Name of the load balancer listener.
        """
        return pulumi.get(self, "listener_name")

    @property
    @pulumi.getter(name="loadBalancerId")
    def load_balancer_id(self) -> str:
        """
        The OCID of the load balancer.
        """
        return pulumi.get(self, "load_balancer_id")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        The current state of the deployment stage.
        """
        return pulumi.get(self, "state")


@pulumi.output_type
class GetDeployStageRollbackPolicyResult(dict):
    def __init__(__self__, *,
                 policy_type: str):
        """
        :param str policy_type: The type of policy used for rolling out a deployment stage.
        """
        pulumi.set(__self__, "policy_type", policy_type)

    @property
    @pulumi.getter(name="policyType")
    def policy_type(self) -> str:
        """
        The type of policy used for rolling out a deployment stage.
        """
        return pulumi.get(self, "policy_type")


@pulumi.output_type
class GetDeployStageRolloutPolicyResult(dict):
    def __init__(__self__, *,
                 batch_count: int,
                 batch_delay_in_seconds: int,
                 batch_percentage: int,
                 policy_type: str,
                 ramp_limit_percent: float):
        """
        :param int batch_count: The number that will be used to determine how many instances will be deployed concurrently.
        :param int batch_delay_in_seconds: The duration of delay between batch rollout. The default delay is 1 minute.
        :param int batch_percentage: The percentage that will be used to determine how many instances will be deployed concurrently.
        :param str policy_type: The type of policy used for rolling out a deployment stage.
        :param float ramp_limit_percent: Indicates the criteria to stop.
        """
        pulumi.set(__self__, "batch_count", batch_count)
        pulumi.set(__self__, "batch_delay_in_seconds", batch_delay_in_seconds)
        pulumi.set(__self__, "batch_percentage", batch_percentage)
        pulumi.set(__self__, "policy_type", policy_type)
        pulumi.set(__self__, "ramp_limit_percent", ramp_limit_percent)

    @property
    @pulumi.getter(name="batchCount")
    def batch_count(self) -> int:
        """
        The number that will be used to determine how many instances will be deployed concurrently.
        """
        return pulumi.get(self, "batch_count")

    @property
    @pulumi.getter(name="batchDelayInSeconds")
    def batch_delay_in_seconds(self) -> int:
        """
        The duration of delay between batch rollout. The default delay is 1 minute.
        """
        return pulumi.get(self, "batch_delay_in_seconds")

    @property
    @pulumi.getter(name="batchPercentage")
    def batch_percentage(self) -> int:
        """
        The percentage that will be used to determine how many instances will be deployed concurrently.
        """
        return pulumi.get(self, "batch_percentage")

    @property
    @pulumi.getter(name="policyType")
    def policy_type(self) -> str:
        """
        The type of policy used for rolling out a deployment stage.
        """
        return pulumi.get(self, "policy_type")

    @property
    @pulumi.getter(name="rampLimitPercent")
    def ramp_limit_percent(self) -> float:
        """
        Indicates the criteria to stop.
        """
        return pulumi.get(self, "ramp_limit_percent")


@pulumi.output_type
class GetDeployStageWaitCriteriaResult(dict):
    def __init__(__self__, *,
                 wait_duration: str,
                 wait_type: str):
        """
        :param str wait_duration: The absolute wait duration. An ISO 8601 formatted duration string. Minimum waitDuration should be 5 seconds. Maximum waitDuration can be up to 2 days.
        :param str wait_type: Wait criteria type.
        """
        pulumi.set(__self__, "wait_duration", wait_duration)
        pulumi.set(__self__, "wait_type", wait_type)

    @property
    @pulumi.getter(name="waitDuration")
    def wait_duration(self) -> str:
        """
        The absolute wait duration. An ISO 8601 formatted duration string. Minimum waitDuration should be 5 seconds. Maximum waitDuration can be up to 2 days.
        """
        return pulumi.get(self, "wait_duration")

    @property
    @pulumi.getter(name="waitType")
    def wait_type(self) -> str:
        """
        Wait criteria type.
        """
        return pulumi.get(self, "wait_type")


@pulumi.output_type
class GetDeployStagesDeployStageCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetDeployStagesDeployStageCollectionItemResult']):
        """
        :param Sequence['GetDeployStagesDeployStageCollectionItemArgs'] items: The IP address of the backend server. A server could be a compute instance or a load balancer.
        """
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetDeployStagesDeployStageCollectionItemResult']:
        """
        The IP address of the backend server. A server could be a compute instance or a load balancer.
        """
        return pulumi.get(self, "items")


@pulumi.output_type
class GetDeployStagesDeployStageCollectionItemResult(dict):
    def __init__(__self__, *,
                 approval_policy: 'outputs.GetDeployStagesDeployStageCollectionItemApprovalPolicyResult',
                 blue_backend_ips: 'outputs.GetDeployStagesDeployStageCollectionItemBlueBackendIpsResult',
                 compartment_id: str,
                 compute_instance_group_deploy_environment_id: str,
                 config: Mapping[str, Any],
                 defined_tags: Mapping[str, Any],
                 deploy_artifact_id: str,
                 deploy_artifact_ids: Sequence[str],
                 deploy_pipeline_id: str,
                 deploy_stage_predecessor_collection: 'outputs.GetDeployStagesDeployStageCollectionItemDeployStagePredecessorCollectionResult',
                 deploy_stage_type: str,
                 deployment_spec_deploy_artifact_id: str,
                 description: str,
                 display_name: str,
                 docker_image_deploy_artifact_id: str,
                 failure_policy: 'outputs.GetDeployStagesDeployStageCollectionItemFailurePolicyResult',
                 freeform_tags: Mapping[str, Any],
                 function_deploy_environment_id: str,
                 function_timeout_in_seconds: int,
                 green_backend_ips: 'outputs.GetDeployStagesDeployStageCollectionItemGreenBackendIpsResult',
                 id: str,
                 is_async: bool,
                 is_validation_enabled: bool,
                 kubernetes_manifest_deploy_artifact_ids: Sequence[str],
                 lifecycle_details: str,
                 load_balancer_config: 'outputs.GetDeployStagesDeployStageCollectionItemLoadBalancerConfigResult',
                 max_memory_in_mbs: str,
                 namespace: str,
                 oke_cluster_deploy_environment_id: str,
                 project_id: str,
                 rollback_policy: 'outputs.GetDeployStagesDeployStageCollectionItemRollbackPolicyResult',
                 rollout_policy: 'outputs.GetDeployStagesDeployStageCollectionItemRolloutPolicyResult',
                 state: str,
                 system_tags: Mapping[str, Any],
                 time_created: str,
                 time_updated: str,
                 traffic_shift_target: str,
                 wait_criteria: 'outputs.GetDeployStagesDeployStageCollectionItemWaitCriteriaResult'):
        """
        :param 'GetDeployStagesDeployStageCollectionItemApprovalPolicyArgs' approval_policy: Specifies the approval policy.
        :param 'GetDeployStagesDeployStageCollectionItemBlueBackendIpsArgs' blue_backend_ips: Collection of backend environment IP addresses.
        :param str compartment_id: The OCID of the compartment in which to list resources.
        :param str compute_instance_group_deploy_environment_id: A compute instance group environment OCID for rolling deployment.
        :param Mapping[str, Any] config: User provided key and value pair configuration, which is assigned through constants or parameter.
        :param Mapping[str, Any] defined_tags: Defined tags for this resource. Each key is predefined and scoped to a namespace. See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"foo-namespace.bar-key": "value"}`
        :param str deploy_artifact_id: Optional binary artifact OCID user may provide to this stage.
        :param Sequence[str] deploy_artifact_ids: Additional file artifact OCIDs.
        :param str deploy_pipeline_id: The ID of the parent pipeline.
        :param 'GetDeployStagesDeployStageCollectionItemDeployStagePredecessorCollectionArgs' deploy_stage_predecessor_collection: Collection containing the predecessors of a stage.
        :param str deploy_stage_type: Deployment stage type.
        :param str deployment_spec_deploy_artifact_id: The OCID of the artifact that contains the deployment specification.
        :param str description: Optional description about the deployment stage.
        :param str display_name: A filter to return only resources that match the entire display name given.
        :param str docker_image_deploy_artifact_id: A Docker image artifact OCID.
        :param 'GetDeployStagesDeployStageCollectionItemFailurePolicyArgs' failure_policy: Specifies a failure policy for a compute instance group rolling deployment stage.
        :param Mapping[str, Any] freeform_tags: Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only.  See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"bar-key": "value"}`
        :param str function_deploy_environment_id: Function environment OCID.
        :param int function_timeout_in_seconds: Timeout for execution of the Function. Value in seconds.
        :param 'GetDeployStagesDeployStageCollectionItemGreenBackendIpsArgs' green_backend_ips: Collection of backend environment IP addresses.
        :param str id: Unique identifier or OCID for listing a single resource by ID.
        :param bool is_async: A boolean flag specifies whether this stage executes asynchronously.
        :param bool is_validation_enabled: A boolean flag specifies whether the invoked function must be validated.
        :param Sequence[str] kubernetes_manifest_deploy_artifact_ids: List of Kubernetes manifest artifact OCIDs, the manifests should not include any job resource.
        :param str lifecycle_details: A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
        :param 'GetDeployStagesDeployStageCollectionItemLoadBalancerConfigArgs' load_balancer_config: Specifies config for load balancer traffic shift stages.
        :param str max_memory_in_mbs: Maximum usable memory for the Function (in MB).
        :param str namespace: Default Namespace to be used for Kubernetes deployment when not specified in the manifest.
        :param str oke_cluster_deploy_environment_id: Kubernetes cluster environment OCID for deployment.
        :param str project_id: The OCID of a project.
        :param 'GetDeployStagesDeployStageCollectionItemRollbackPolicyArgs' rollback_policy: Specifies the rollback policy. This is initiated on the failure of certain stage types.
        :param 'GetDeployStagesDeployStageCollectionItemRolloutPolicyArgs' rollout_policy: Description of rollout policy for load balancer traffic shift stage.
        :param str state: A filter to return only deployment stages that matches the given lifecycle state.
        :param Mapping[str, Any] system_tags: Usage of system tag keys. These predefined keys are scoped to namespaces. See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"orcl-cloud.free-tier-retained": "true"}`
        :param str time_created: Time the deployment stage was created. Format defined by [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339).
        :param str time_updated: Time the deployment stage was updated. Format defined by [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339).
        :param str traffic_shift_target: Specifies the target or destination backend set.
        :param 'GetDeployStagesDeployStageCollectionItemWaitCriteriaArgs' wait_criteria: Specifies wait criteria for the Wait stage.
        """
        pulumi.set(__self__, "approval_policy", approval_policy)
        pulumi.set(__self__, "blue_backend_ips", blue_backend_ips)
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "compute_instance_group_deploy_environment_id", compute_instance_group_deploy_environment_id)
        pulumi.set(__self__, "config", config)
        pulumi.set(__self__, "defined_tags", defined_tags)
        pulumi.set(__self__, "deploy_artifact_id", deploy_artifact_id)
        pulumi.set(__self__, "deploy_artifact_ids", deploy_artifact_ids)
        pulumi.set(__self__, "deploy_pipeline_id", deploy_pipeline_id)
        pulumi.set(__self__, "deploy_stage_predecessor_collection", deploy_stage_predecessor_collection)
        pulumi.set(__self__, "deploy_stage_type", deploy_stage_type)
        pulumi.set(__self__, "deployment_spec_deploy_artifact_id", deployment_spec_deploy_artifact_id)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "docker_image_deploy_artifact_id", docker_image_deploy_artifact_id)
        pulumi.set(__self__, "failure_policy", failure_policy)
        pulumi.set(__self__, "freeform_tags", freeform_tags)
        pulumi.set(__self__, "function_deploy_environment_id", function_deploy_environment_id)
        pulumi.set(__self__, "function_timeout_in_seconds", function_timeout_in_seconds)
        pulumi.set(__self__, "green_backend_ips", green_backend_ips)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "is_async", is_async)
        pulumi.set(__self__, "is_validation_enabled", is_validation_enabled)
        pulumi.set(__self__, "kubernetes_manifest_deploy_artifact_ids", kubernetes_manifest_deploy_artifact_ids)
        pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        pulumi.set(__self__, "load_balancer_config", load_balancer_config)
        pulumi.set(__self__, "max_memory_in_mbs", max_memory_in_mbs)
        pulumi.set(__self__, "namespace", namespace)
        pulumi.set(__self__, "oke_cluster_deploy_environment_id", oke_cluster_deploy_environment_id)
        pulumi.set(__self__, "project_id", project_id)
        pulumi.set(__self__, "rollback_policy", rollback_policy)
        pulumi.set(__self__, "rollout_policy", rollout_policy)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "system_tags", system_tags)
        pulumi.set(__self__, "time_created", time_created)
        pulumi.set(__self__, "time_updated", time_updated)
        pulumi.set(__self__, "traffic_shift_target", traffic_shift_target)
        pulumi.set(__self__, "wait_criteria", wait_criteria)

    @property
    @pulumi.getter(name="approvalPolicy")
    def approval_policy(self) -> 'outputs.GetDeployStagesDeployStageCollectionItemApprovalPolicyResult':
        """
        Specifies the approval policy.
        """
        return pulumi.get(self, "approval_policy")

    @property
    @pulumi.getter(name="blueBackendIps")
    def blue_backend_ips(self) -> 'outputs.GetDeployStagesDeployStageCollectionItemBlueBackendIpsResult':
        """
        Collection of backend environment IP addresses.
        """
        return pulumi.get(self, "blue_backend_ips")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> str:
        """
        The OCID of the compartment in which to list resources.
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="computeInstanceGroupDeployEnvironmentId")
    def compute_instance_group_deploy_environment_id(self) -> str:
        """
        A compute instance group environment OCID for rolling deployment.
        """
        return pulumi.get(self, "compute_instance_group_deploy_environment_id")

    @property
    @pulumi.getter
    def config(self) -> Mapping[str, Any]:
        """
        User provided key and value pair configuration, which is assigned through constants or parameter.
        """
        return pulumi.get(self, "config")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Mapping[str, Any]:
        """
        Defined tags for this resource. Each key is predefined and scoped to a namespace. See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"foo-namespace.bar-key": "value"}`
        """
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="deployArtifactId")
    def deploy_artifact_id(self) -> str:
        """
        Optional binary artifact OCID user may provide to this stage.
        """
        return pulumi.get(self, "deploy_artifact_id")

    @property
    @pulumi.getter(name="deployArtifactIds")
    def deploy_artifact_ids(self) -> Sequence[str]:
        """
        Additional file artifact OCIDs.
        """
        return pulumi.get(self, "deploy_artifact_ids")

    @property
    @pulumi.getter(name="deployPipelineId")
    def deploy_pipeline_id(self) -> str:
        """
        The ID of the parent pipeline.
        """
        return pulumi.get(self, "deploy_pipeline_id")

    @property
    @pulumi.getter(name="deployStagePredecessorCollection")
    def deploy_stage_predecessor_collection(self) -> 'outputs.GetDeployStagesDeployStageCollectionItemDeployStagePredecessorCollectionResult':
        """
        Collection containing the predecessors of a stage.
        """
        return pulumi.get(self, "deploy_stage_predecessor_collection")

    @property
    @pulumi.getter(name="deployStageType")
    def deploy_stage_type(self) -> str:
        """
        Deployment stage type.
        """
        return pulumi.get(self, "deploy_stage_type")

    @property
    @pulumi.getter(name="deploymentSpecDeployArtifactId")
    def deployment_spec_deploy_artifact_id(self) -> str:
        """
        The OCID of the artifact that contains the deployment specification.
        """
        return pulumi.get(self, "deployment_spec_deploy_artifact_id")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Optional description about the deployment stage.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        A filter to return only resources that match the entire display name given.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="dockerImageDeployArtifactId")
    def docker_image_deploy_artifact_id(self) -> str:
        """
        A Docker image artifact OCID.
        """
        return pulumi.get(self, "docker_image_deploy_artifact_id")

    @property
    @pulumi.getter(name="failurePolicy")
    def failure_policy(self) -> 'outputs.GetDeployStagesDeployStageCollectionItemFailurePolicyResult':
        """
        Specifies a failure policy for a compute instance group rolling deployment stage.
        """
        return pulumi.get(self, "failure_policy")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Mapping[str, Any]:
        """
        Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only.  See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"bar-key": "value"}`
        """
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter(name="functionDeployEnvironmentId")
    def function_deploy_environment_id(self) -> str:
        """
        Function environment OCID.
        """
        return pulumi.get(self, "function_deploy_environment_id")

    @property
    @pulumi.getter(name="functionTimeoutInSeconds")
    def function_timeout_in_seconds(self) -> int:
        """
        Timeout for execution of the Function. Value in seconds.
        """
        return pulumi.get(self, "function_timeout_in_seconds")

    @property
    @pulumi.getter(name="greenBackendIps")
    def green_backend_ips(self) -> 'outputs.GetDeployStagesDeployStageCollectionItemGreenBackendIpsResult':
        """
        Collection of backend environment IP addresses.
        """
        return pulumi.get(self, "green_backend_ips")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Unique identifier or OCID for listing a single resource by ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isAsync")
    def is_async(self) -> bool:
        """
        A boolean flag specifies whether this stage executes asynchronously.
        """
        return pulumi.get(self, "is_async")

    @property
    @pulumi.getter(name="isValidationEnabled")
    def is_validation_enabled(self) -> bool:
        """
        A boolean flag specifies whether the invoked function must be validated.
        """
        return pulumi.get(self, "is_validation_enabled")

    @property
    @pulumi.getter(name="kubernetesManifestDeployArtifactIds")
    def kubernetes_manifest_deploy_artifact_ids(self) -> Sequence[str]:
        """
        List of Kubernetes manifest artifact OCIDs, the manifests should not include any job resource.
        """
        return pulumi.get(self, "kubernetes_manifest_deploy_artifact_ids")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> str:
        """
        A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
        """
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter(name="loadBalancerConfig")
    def load_balancer_config(self) -> 'outputs.GetDeployStagesDeployStageCollectionItemLoadBalancerConfigResult':
        """
        Specifies config for load balancer traffic shift stages.
        """
        return pulumi.get(self, "load_balancer_config")

    @property
    @pulumi.getter(name="maxMemoryInMbs")
    def max_memory_in_mbs(self) -> str:
        """
        Maximum usable memory for the Function (in MB).
        """
        return pulumi.get(self, "max_memory_in_mbs")

    @property
    @pulumi.getter
    def namespace(self) -> str:
        """
        Default Namespace to be used for Kubernetes deployment when not specified in the manifest.
        """
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter(name="okeClusterDeployEnvironmentId")
    def oke_cluster_deploy_environment_id(self) -> str:
        """
        Kubernetes cluster environment OCID for deployment.
        """
        return pulumi.get(self, "oke_cluster_deploy_environment_id")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> str:
        """
        The OCID of a project.
        """
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter(name="rollbackPolicy")
    def rollback_policy(self) -> 'outputs.GetDeployStagesDeployStageCollectionItemRollbackPolicyResult':
        """
        Specifies the rollback policy. This is initiated on the failure of certain stage types.
        """
        return pulumi.get(self, "rollback_policy")

    @property
    @pulumi.getter(name="rolloutPolicy")
    def rollout_policy(self) -> 'outputs.GetDeployStagesDeployStageCollectionItemRolloutPolicyResult':
        """
        Description of rollout policy for load balancer traffic shift stage.
        """
        return pulumi.get(self, "rollout_policy")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        A filter to return only deployment stages that matches the given lifecycle state.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Mapping[str, Any]:
        """
        Usage of system tag keys. These predefined keys are scoped to namespaces. See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"orcl-cloud.free-tier-retained": "true"}`
        """
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> str:
        """
        Time the deployment stage was created. Format defined by [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339).
        """
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> str:
        """
        Time the deployment stage was updated. Format defined by [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339).
        """
        return pulumi.get(self, "time_updated")

    @property
    @pulumi.getter(name="trafficShiftTarget")
    def traffic_shift_target(self) -> str:
        """
        Specifies the target or destination backend set.
        """
        return pulumi.get(self, "traffic_shift_target")

    @property
    @pulumi.getter(name="waitCriteria")
    def wait_criteria(self) -> 'outputs.GetDeployStagesDeployStageCollectionItemWaitCriteriaResult':
        """
        Specifies wait criteria for the Wait stage.
        """
        return pulumi.get(self, "wait_criteria")


@pulumi.output_type
class GetDeployStagesDeployStageCollectionItemApprovalPolicyResult(dict):
    def __init__(__self__, *,
                 approval_policy_type: str,
                 number_of_approvals_required: int):
        """
        :param str approval_policy_type: Approval policy type.
        :param int number_of_approvals_required: A minimum number of approvals required for stage to proceed.
        """
        pulumi.set(__self__, "approval_policy_type", approval_policy_type)
        pulumi.set(__self__, "number_of_approvals_required", number_of_approvals_required)

    @property
    @pulumi.getter(name="approvalPolicyType")
    def approval_policy_type(self) -> str:
        """
        Approval policy type.
        """
        return pulumi.get(self, "approval_policy_type")

    @property
    @pulumi.getter(name="numberOfApprovalsRequired")
    def number_of_approvals_required(self) -> int:
        """
        A minimum number of approvals required for stage to proceed.
        """
        return pulumi.get(self, "number_of_approvals_required")


@pulumi.output_type
class GetDeployStagesDeployStageCollectionItemBlueBackendIpsResult(dict):
    def __init__(__self__, *,
                 items: Sequence[str]):
        """
        :param Sequence[str] items: The IP address of the backend server. A server could be a compute instance or a load balancer.
        """
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence[str]:
        """
        The IP address of the backend server. A server could be a compute instance or a load balancer.
        """
        return pulumi.get(self, "items")


@pulumi.output_type
class GetDeployStagesDeployStageCollectionItemDeployStagePredecessorCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetDeployStagesDeployStageCollectionItemDeployStagePredecessorCollectionItemResult']):
        """
        :param Sequence['GetDeployStagesDeployStageCollectionItemDeployStagePredecessorCollectionItemArgs'] items: The IP address of the backend server. A server could be a compute instance or a load balancer.
        """
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetDeployStagesDeployStageCollectionItemDeployStagePredecessorCollectionItemResult']:
        """
        The IP address of the backend server. A server could be a compute instance or a load balancer.
        """
        return pulumi.get(self, "items")


@pulumi.output_type
class GetDeployStagesDeployStageCollectionItemDeployStagePredecessorCollectionItemResult(dict):
    def __init__(__self__, *,
                 id: str):
        """
        :param str id: Unique identifier or OCID for listing a single resource by ID.
        """
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Unique identifier or OCID for listing a single resource by ID.
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class GetDeployStagesDeployStageCollectionItemFailurePolicyResult(dict):
    def __init__(__self__, *,
                 failure_count: int,
                 failure_percentage: int,
                 policy_type: str):
        """
        :param int failure_count: The threshold count of failed instances in the group, which when reached or exceeded sets the stage as FAILED.
        :param int failure_percentage: The failure percentage threshold, which when reached or exceeded sets the stage as FAILED. Percentage is computed as the ceiling value of the number of failed instances over the total count of the instances in the group.
        :param str policy_type: The type of policy used for rolling out a deployment stage.
        """
        pulumi.set(__self__, "failure_count", failure_count)
        pulumi.set(__self__, "failure_percentage", failure_percentage)
        pulumi.set(__self__, "policy_type", policy_type)

    @property
    @pulumi.getter(name="failureCount")
    def failure_count(self) -> int:
        """
        The threshold count of failed instances in the group, which when reached or exceeded sets the stage as FAILED.
        """
        return pulumi.get(self, "failure_count")

    @property
    @pulumi.getter(name="failurePercentage")
    def failure_percentage(self) -> int:
        """
        The failure percentage threshold, which when reached or exceeded sets the stage as FAILED. Percentage is computed as the ceiling value of the number of failed instances over the total count of the instances in the group.
        """
        return pulumi.get(self, "failure_percentage")

    @property
    @pulumi.getter(name="policyType")
    def policy_type(self) -> str:
        """
        The type of policy used for rolling out a deployment stage.
        """
        return pulumi.get(self, "policy_type")


@pulumi.output_type
class GetDeployStagesDeployStageCollectionItemGreenBackendIpsResult(dict):
    def __init__(__self__, *,
                 items: Sequence[str]):
        """
        :param Sequence[str] items: The IP address of the backend server. A server could be a compute instance or a load balancer.
        """
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence[str]:
        """
        The IP address of the backend server. A server could be a compute instance or a load balancer.
        """
        return pulumi.get(self, "items")


@pulumi.output_type
class GetDeployStagesDeployStageCollectionItemLoadBalancerConfigResult(dict):
    def __init__(__self__, *,
                 backend_port: int,
                 listener_name: str,
                 load_balancer_id: str,
                 state: str):
        """
        :param int backend_port: Listen port for the backend server.
        :param str listener_name: Name of the load balancer listener.
        :param str load_balancer_id: The OCID of the load balancer.
        :param str state: A filter to return only deployment stages that matches the given lifecycle state.
        """
        pulumi.set(__self__, "backend_port", backend_port)
        pulumi.set(__self__, "listener_name", listener_name)
        pulumi.set(__self__, "load_balancer_id", load_balancer_id)
        pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter(name="backendPort")
    def backend_port(self) -> int:
        """
        Listen port for the backend server.
        """
        return pulumi.get(self, "backend_port")

    @property
    @pulumi.getter(name="listenerName")
    def listener_name(self) -> str:
        """
        Name of the load balancer listener.
        """
        return pulumi.get(self, "listener_name")

    @property
    @pulumi.getter(name="loadBalancerId")
    def load_balancer_id(self) -> str:
        """
        The OCID of the load balancer.
        """
        return pulumi.get(self, "load_balancer_id")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        A filter to return only deployment stages that matches the given lifecycle state.
        """
        return pulumi.get(self, "state")


@pulumi.output_type
class GetDeployStagesDeployStageCollectionItemRollbackPolicyResult(dict):
    def __init__(__self__, *,
                 policy_type: str):
        """
        :param str policy_type: The type of policy used for rolling out a deployment stage.
        """
        pulumi.set(__self__, "policy_type", policy_type)

    @property
    @pulumi.getter(name="policyType")
    def policy_type(self) -> str:
        """
        The type of policy used for rolling out a deployment stage.
        """
        return pulumi.get(self, "policy_type")


@pulumi.output_type
class GetDeployStagesDeployStageCollectionItemRolloutPolicyResult(dict):
    def __init__(__self__, *,
                 batch_count: int,
                 batch_delay_in_seconds: int,
                 batch_percentage: int,
                 policy_type: str,
                 ramp_limit_percent: float):
        """
        :param int batch_count: The number that will be used to determine how many instances will be deployed concurrently.
        :param int batch_delay_in_seconds: The duration of delay between batch rollout. The default delay is 1 minute.
        :param int batch_percentage: The percentage that will be used to determine how many instances will be deployed concurrently.
        :param str policy_type: The type of policy used for rolling out a deployment stage.
        :param float ramp_limit_percent: Indicates the criteria to stop.
        """
        pulumi.set(__self__, "batch_count", batch_count)
        pulumi.set(__self__, "batch_delay_in_seconds", batch_delay_in_seconds)
        pulumi.set(__self__, "batch_percentage", batch_percentage)
        pulumi.set(__self__, "policy_type", policy_type)
        pulumi.set(__self__, "ramp_limit_percent", ramp_limit_percent)

    @property
    @pulumi.getter(name="batchCount")
    def batch_count(self) -> int:
        """
        The number that will be used to determine how many instances will be deployed concurrently.
        """
        return pulumi.get(self, "batch_count")

    @property
    @pulumi.getter(name="batchDelayInSeconds")
    def batch_delay_in_seconds(self) -> int:
        """
        The duration of delay between batch rollout. The default delay is 1 minute.
        """
        return pulumi.get(self, "batch_delay_in_seconds")

    @property
    @pulumi.getter(name="batchPercentage")
    def batch_percentage(self) -> int:
        """
        The percentage that will be used to determine how many instances will be deployed concurrently.
        """
        return pulumi.get(self, "batch_percentage")

    @property
    @pulumi.getter(name="policyType")
    def policy_type(self) -> str:
        """
        The type of policy used for rolling out a deployment stage.
        """
        return pulumi.get(self, "policy_type")

    @property
    @pulumi.getter(name="rampLimitPercent")
    def ramp_limit_percent(self) -> float:
        """
        Indicates the criteria to stop.
        """
        return pulumi.get(self, "ramp_limit_percent")


@pulumi.output_type
class GetDeployStagesDeployStageCollectionItemWaitCriteriaResult(dict):
    def __init__(__self__, *,
                 wait_duration: str,
                 wait_type: str):
        """
        :param str wait_duration: The absolute wait duration. An ISO 8601 formatted duration string. Minimum waitDuration should be 5 seconds. Maximum waitDuration can be up to 2 days.
        :param str wait_type: Wait criteria type.
        """
        pulumi.set(__self__, "wait_duration", wait_duration)
        pulumi.set(__self__, "wait_type", wait_type)

    @property
    @pulumi.getter(name="waitDuration")
    def wait_duration(self) -> str:
        """
        The absolute wait duration. An ISO 8601 formatted duration string. Minimum waitDuration should be 5 seconds. Maximum waitDuration can be up to 2 days.
        """
        return pulumi.get(self, "wait_duration")

    @property
    @pulumi.getter(name="waitType")
    def wait_type(self) -> str:
        """
        Wait criteria type.
        """
        return pulumi.get(self, "wait_type")


@pulumi.output_type
class GetDeployStagesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetDeploymentDeployArtifactOverrideArgumentsResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetDeploymentDeployArtifactOverrideArgumentsItemResult']):
        """
        :param Sequence['GetDeploymentDeployArtifactOverrideArgumentsItemArgs'] items: A list of stage predecessors for a stage.
        """
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetDeploymentDeployArtifactOverrideArgumentsItemResult']:
        """
        A list of stage predecessors for a stage.
        """
        return pulumi.get(self, "items")


@pulumi.output_type
class GetDeploymentDeployArtifactOverrideArgumentsItemResult(dict):
    def __init__(__self__, *,
                 deploy_artifact_id: str,
                 name: str,
                 value: str):
        """
        :param str deploy_artifact_id: The OCID of an artifact
        :param str name: Name of the step.
        :param str value: value of the argument.
        """
        pulumi.set(__self__, "deploy_artifact_id", deploy_artifact_id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="deployArtifactId")
    def deploy_artifact_id(self) -> str:
        """
        The OCID of an artifact
        """
        return pulumi.get(self, "deploy_artifact_id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the step.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        value of the argument.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDeploymentDeployPipelineArtifactsResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetDeploymentDeployPipelineArtifactsItemResult']):
        """
        :param Sequence['GetDeploymentDeployPipelineArtifactsItemArgs'] items: A list of stage predecessors for a stage.
        """
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetDeploymentDeployPipelineArtifactsItemResult']:
        """
        A list of stage predecessors for a stage.
        """
        return pulumi.get(self, "items")


@pulumi.output_type
class GetDeploymentDeployPipelineArtifactsItemResult(dict):
    def __init__(__self__, *,
                 deploy_artifact_id: str,
                 deploy_pipeline_stages: 'outputs.GetDeploymentDeployPipelineArtifactsItemDeployPipelineStagesResult',
                 display_name: str):
        """
        :param str deploy_artifact_id: The OCID of an artifact
        :param 'GetDeploymentDeployPipelineArtifactsItemDeployPipelineStagesArgs' deploy_pipeline_stages: List of stages.
        :param str display_name: Deployment identifier which can be renamed and is not necessarily unique. Avoid entering confidential information.
        """
        pulumi.set(__self__, "deploy_artifact_id", deploy_artifact_id)
        pulumi.set(__self__, "deploy_pipeline_stages", deploy_pipeline_stages)
        pulumi.set(__self__, "display_name", display_name)

    @property
    @pulumi.getter(name="deployArtifactId")
    def deploy_artifact_id(self) -> str:
        """
        The OCID of an artifact
        """
        return pulumi.get(self, "deploy_artifact_id")

    @property
    @pulumi.getter(name="deployPipelineStages")
    def deploy_pipeline_stages(self) -> 'outputs.GetDeploymentDeployPipelineArtifactsItemDeployPipelineStagesResult':
        """
        List of stages.
        """
        return pulumi.get(self, "deploy_pipeline_stages")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        Deployment identifier which can be renamed and is not necessarily unique. Avoid entering confidential information.
        """
        return pulumi.get(self, "display_name")


@pulumi.output_type
class GetDeploymentDeployPipelineArtifactsItemDeployPipelineStagesResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetDeploymentDeployPipelineArtifactsItemDeployPipelineStagesItemResult']):
        """
        :param Sequence['GetDeploymentDeployPipelineArtifactsItemDeployPipelineStagesItemArgs'] items: A list of stage predecessors for a stage.
        """
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetDeploymentDeployPipelineArtifactsItemDeployPipelineStagesItemResult']:
        """
        A list of stage predecessors for a stage.
        """
        return pulumi.get(self, "items")


@pulumi.output_type
class GetDeploymentDeployPipelineArtifactsItemDeployPipelineStagesItemResult(dict):
    def __init__(__self__, *,
                 deploy_stage_id: str,
                 display_name: str):
        """
        :param str deploy_stage_id: The OCID of the stage.
        :param str display_name: Deployment identifier which can be renamed and is not necessarily unique. Avoid entering confidential information.
        """
        pulumi.set(__self__, "deploy_stage_id", deploy_stage_id)
        pulumi.set(__self__, "display_name", display_name)

    @property
    @pulumi.getter(name="deployStageId")
    def deploy_stage_id(self) -> str:
        """
        The OCID of the stage.
        """
        return pulumi.get(self, "deploy_stage_id")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        Deployment identifier which can be renamed and is not necessarily unique. Avoid entering confidential information.
        """
        return pulumi.get(self, "display_name")


@pulumi.output_type
class GetDeploymentDeployPipelineEnvironmentsResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetDeploymentDeployPipelineEnvironmentsItemResult']):
        """
        :param Sequence['GetDeploymentDeployPipelineEnvironmentsItemArgs'] items: A list of stage predecessors for a stage.
        """
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetDeploymentDeployPipelineEnvironmentsItemResult']:
        """
        A list of stage predecessors for a stage.
        """
        return pulumi.get(self, "items")


@pulumi.output_type
class GetDeploymentDeployPipelineEnvironmentsItemResult(dict):
    def __init__(__self__, *,
                 deploy_environment_id: str,
                 deploy_pipeline_stages: 'outputs.GetDeploymentDeployPipelineEnvironmentsItemDeployPipelineStagesResult',
                 display_name: str):
        """
        :param str deploy_environment_id: The OCID of an Environment
        :param 'GetDeploymentDeployPipelineEnvironmentsItemDeployPipelineStagesArgs' deploy_pipeline_stages: List of stages.
        :param str display_name: Deployment identifier which can be renamed and is not necessarily unique. Avoid entering confidential information.
        """
        pulumi.set(__self__, "deploy_environment_id", deploy_environment_id)
        pulumi.set(__self__, "deploy_pipeline_stages", deploy_pipeline_stages)
        pulumi.set(__self__, "display_name", display_name)

    @property
    @pulumi.getter(name="deployEnvironmentId")
    def deploy_environment_id(self) -> str:
        """
        The OCID of an Environment
        """
        return pulumi.get(self, "deploy_environment_id")

    @property
    @pulumi.getter(name="deployPipelineStages")
    def deploy_pipeline_stages(self) -> 'outputs.GetDeploymentDeployPipelineEnvironmentsItemDeployPipelineStagesResult':
        """
        List of stages.
        """
        return pulumi.get(self, "deploy_pipeline_stages")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        Deployment identifier which can be renamed and is not necessarily unique. Avoid entering confidential information.
        """
        return pulumi.get(self, "display_name")


@pulumi.output_type
class GetDeploymentDeployPipelineEnvironmentsItemDeployPipelineStagesResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetDeploymentDeployPipelineEnvironmentsItemDeployPipelineStagesItemResult']):
        """
        :param Sequence['GetDeploymentDeployPipelineEnvironmentsItemDeployPipelineStagesItemArgs'] items: A list of stage predecessors for a stage.
        """
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetDeploymentDeployPipelineEnvironmentsItemDeployPipelineStagesItemResult']:
        """
        A list of stage predecessors for a stage.
        """
        return pulumi.get(self, "items")


@pulumi.output_type
class GetDeploymentDeployPipelineEnvironmentsItemDeployPipelineStagesItemResult(dict):
    def __init__(__self__, *,
                 deploy_stage_id: str,
                 display_name: str):
        """
        :param str deploy_stage_id: The OCID of the stage.
        :param str display_name: Deployment identifier which can be renamed and is not necessarily unique. Avoid entering confidential information.
        """
        pulumi.set(__self__, "deploy_stage_id", deploy_stage_id)
        pulumi.set(__self__, "display_name", display_name)

    @property
    @pulumi.getter(name="deployStageId")
    def deploy_stage_id(self) -> str:
        """
        The OCID of the stage.
        """
        return pulumi.get(self, "deploy_stage_id")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        Deployment identifier which can be renamed and is not necessarily unique. Avoid entering confidential information.
        """
        return pulumi.get(self, "display_name")


@pulumi.output_type
class GetDeploymentDeploymentArgumentsResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetDeploymentDeploymentArgumentsItemResult']):
        """
        :param Sequence['GetDeploymentDeploymentArgumentsItemArgs'] items: A list of stage predecessors for a stage.
        """
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetDeploymentDeploymentArgumentsItemResult']:
        """
        A list of stage predecessors for a stage.
        """
        return pulumi.get(self, "items")


@pulumi.output_type
class GetDeploymentDeploymentArgumentsItemResult(dict):
    def __init__(__self__, *,
                 name: str,
                 value: str):
        """
        :param str name: Name of the step.
        :param str value: value of the argument.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the step.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        value of the argument.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDeploymentDeploymentExecutionProgressResult(dict):
    def __init__(__self__, *,
                 deploy_stage_execution_progress: Mapping[str, Any],
                 time_finished: str,
                 time_started: str):
        """
        :param Mapping[str, Any] deploy_stage_execution_progress: Map of stage OCIDs to deploy stage execution progress model.
        :param str time_finished: Time the deployment is finished. Format defined by [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339).
        :param str time_started: Time the deployment is started. Format defined by [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339).
        """
        pulumi.set(__self__, "deploy_stage_execution_progress", deploy_stage_execution_progress)
        pulumi.set(__self__, "time_finished", time_finished)
        pulumi.set(__self__, "time_started", time_started)

    @property
    @pulumi.getter(name="deployStageExecutionProgress")
    def deploy_stage_execution_progress(self) -> Mapping[str, Any]:
        """
        Map of stage OCIDs to deploy stage execution progress model.
        """
        return pulumi.get(self, "deploy_stage_execution_progress")

    @property
    @pulumi.getter(name="timeFinished")
    def time_finished(self) -> str:
        """
        Time the deployment is finished. Format defined by [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339).
        """
        return pulumi.get(self, "time_finished")

    @property
    @pulumi.getter(name="timeStarted")
    def time_started(self) -> str:
        """
        Time the deployment is started. Format defined by [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339).
        """
        return pulumi.get(self, "time_started")


@pulumi.output_type
class GetDeploymentsDeploymentCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetDeploymentsDeploymentCollectionItemResult']):
        """
        :param Sequence['GetDeploymentsDeploymentCollectionItemArgs'] items: A list of stage predecessors for a stage.
        """
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetDeploymentsDeploymentCollectionItemResult']:
        """
        A list of stage predecessors for a stage.
        """
        return pulumi.get(self, "items")


@pulumi.output_type
class GetDeploymentsDeploymentCollectionItemResult(dict):
    def __init__(__self__, *,
                 compartment_id: str,
                 defined_tags: Mapping[str, Any],
                 deploy_artifact_override_arguments: 'outputs.GetDeploymentsDeploymentCollectionItemDeployArtifactOverrideArgumentsResult',
                 deploy_pipeline_artifacts: 'outputs.GetDeploymentsDeploymentCollectionItemDeployPipelineArtifactsResult',
                 deploy_pipeline_environments: 'outputs.GetDeploymentsDeploymentCollectionItemDeployPipelineEnvironmentsResult',
                 deploy_pipeline_id: str,
                 deploy_stage_id: str,
                 deployment_arguments: 'outputs.GetDeploymentsDeploymentCollectionItemDeploymentArgumentsResult',
                 deployment_execution_progress: 'outputs.GetDeploymentsDeploymentCollectionItemDeploymentExecutionProgressResult',
                 deployment_type: str,
                 display_name: str,
                 freeform_tags: Mapping[str, Any],
                 id: str,
                 lifecycle_details: str,
                 previous_deployment_id: str,
                 project_id: str,
                 state: str,
                 system_tags: Mapping[str, Any],
                 time_created: str,
                 time_updated: str):
        """
        :param str compartment_id: The OCID of the compartment in which to list resources.
        :param Mapping[str, Any] defined_tags: Defined tags for this resource. Each key is predefined and scoped to a namespace. See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"foo-namespace.bar-key": "value"}`
        :param 'GetDeploymentsDeploymentCollectionItemDeployArtifactOverrideArgumentsArgs' deploy_artifact_override_arguments: Specifies the list of artifact override arguments at the time of deployment.
        :param 'GetDeploymentsDeploymentCollectionItemDeployPipelineArtifactsArgs' deploy_pipeline_artifacts: List of all artifacts used in the pipeline.
        :param 'GetDeploymentsDeploymentCollectionItemDeployPipelineEnvironmentsArgs' deploy_pipeline_environments: List of all environments used in the pipeline.
        :param str deploy_pipeline_id: The ID of the parent pipeline.
        :param str deploy_stage_id: The OCID of the stage.
        :param 'GetDeploymentsDeploymentCollectionItemDeploymentArgumentsArgs' deployment_arguments: Specifies list of arguments passed along with the deployment.
        :param 'GetDeploymentsDeploymentCollectionItemDeploymentExecutionProgressArgs' deployment_execution_progress: The execution progress details of a deployment.
        :param str deployment_type: Specifies type of Deployment
        :param str display_name: A filter to return only resources that match the entire display name given.
        :param Mapping[str, Any] freeform_tags: Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only.  See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"bar-key": "value"}`
        :param str id: Unique identifier or OCID for listing a single resource by ID.
        :param str lifecycle_details: A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
        :param str previous_deployment_id: Specifies the OCID of the previous deployment to be redeployed.
        :param str project_id: unique project identifier
        :param str state: A filter to return only Deployments that matches the given lifecycleState.
        :param Mapping[str, Any] system_tags: Usage of system tag keys. These predefined keys are scoped to namespaces. See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"orcl-cloud.free-tier-retained": "true"}`
        :param str time_created: Time the deployment was created. Format defined by [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339).
        :param str time_updated: Time the deployment was updated. Format defined by [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339).
        """
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "defined_tags", defined_tags)
        pulumi.set(__self__, "deploy_artifact_override_arguments", deploy_artifact_override_arguments)
        pulumi.set(__self__, "deploy_pipeline_artifacts", deploy_pipeline_artifacts)
        pulumi.set(__self__, "deploy_pipeline_environments", deploy_pipeline_environments)
        pulumi.set(__self__, "deploy_pipeline_id", deploy_pipeline_id)
        pulumi.set(__self__, "deploy_stage_id", deploy_stage_id)
        pulumi.set(__self__, "deployment_arguments", deployment_arguments)
        pulumi.set(__self__, "deployment_execution_progress", deployment_execution_progress)
        pulumi.set(__self__, "deployment_type", deployment_type)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "freeform_tags", freeform_tags)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        pulumi.set(__self__, "previous_deployment_id", previous_deployment_id)
        pulumi.set(__self__, "project_id", project_id)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "system_tags", system_tags)
        pulumi.set(__self__, "time_created", time_created)
        pulumi.set(__self__, "time_updated", time_updated)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> str:
        """
        The OCID of the compartment in which to list resources.
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Mapping[str, Any]:
        """
        Defined tags for this resource. Each key is predefined and scoped to a namespace. See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"foo-namespace.bar-key": "value"}`
        """
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="deployArtifactOverrideArguments")
    def deploy_artifact_override_arguments(self) -> 'outputs.GetDeploymentsDeploymentCollectionItemDeployArtifactOverrideArgumentsResult':
        """
        Specifies the list of artifact override arguments at the time of deployment.
        """
        return pulumi.get(self, "deploy_artifact_override_arguments")

    @property
    @pulumi.getter(name="deployPipelineArtifacts")
    def deploy_pipeline_artifacts(self) -> 'outputs.GetDeploymentsDeploymentCollectionItemDeployPipelineArtifactsResult':
        """
        List of all artifacts used in the pipeline.
        """
        return pulumi.get(self, "deploy_pipeline_artifacts")

    @property
    @pulumi.getter(name="deployPipelineEnvironments")
    def deploy_pipeline_environments(self) -> 'outputs.GetDeploymentsDeploymentCollectionItemDeployPipelineEnvironmentsResult':
        """
        List of all environments used in the pipeline.
        """
        return pulumi.get(self, "deploy_pipeline_environments")

    @property
    @pulumi.getter(name="deployPipelineId")
    def deploy_pipeline_id(self) -> str:
        """
        The ID of the parent pipeline.
        """
        return pulumi.get(self, "deploy_pipeline_id")

    @property
    @pulumi.getter(name="deployStageId")
    def deploy_stage_id(self) -> str:
        """
        The OCID of the stage.
        """
        return pulumi.get(self, "deploy_stage_id")

    @property
    @pulumi.getter(name="deploymentArguments")
    def deployment_arguments(self) -> 'outputs.GetDeploymentsDeploymentCollectionItemDeploymentArgumentsResult':
        """
        Specifies list of arguments passed along with the deployment.
        """
        return pulumi.get(self, "deployment_arguments")

    @property
    @pulumi.getter(name="deploymentExecutionProgress")
    def deployment_execution_progress(self) -> 'outputs.GetDeploymentsDeploymentCollectionItemDeploymentExecutionProgressResult':
        """
        The execution progress details of a deployment.
        """
        return pulumi.get(self, "deployment_execution_progress")

    @property
    @pulumi.getter(name="deploymentType")
    def deployment_type(self) -> str:
        """
        Specifies type of Deployment
        """
        return pulumi.get(self, "deployment_type")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        A filter to return only resources that match the entire display name given.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Mapping[str, Any]:
        """
        Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only.  See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"bar-key": "value"}`
        """
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Unique identifier or OCID for listing a single resource by ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> str:
        """
        A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
        """
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter(name="previousDeploymentId")
    def previous_deployment_id(self) -> str:
        """
        Specifies the OCID of the previous deployment to be redeployed.
        """
        return pulumi.get(self, "previous_deployment_id")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> str:
        """
        unique project identifier
        """
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        A filter to return only Deployments that matches the given lifecycleState.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Mapping[str, Any]:
        """
        Usage of system tag keys. These predefined keys are scoped to namespaces. See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"orcl-cloud.free-tier-retained": "true"}`
        """
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> str:
        """
        Time the deployment was created. Format defined by [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339).
        """
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> str:
        """
        Time the deployment was updated. Format defined by [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339).
        """
        return pulumi.get(self, "time_updated")


@pulumi.output_type
class GetDeploymentsDeploymentCollectionItemDeployArtifactOverrideArgumentsResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetDeploymentsDeploymentCollectionItemDeployArtifactOverrideArgumentsItemResult']):
        """
        :param Sequence['GetDeploymentsDeploymentCollectionItemDeployArtifactOverrideArgumentsItemArgs'] items: A list of stage predecessors for a stage.
        """
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetDeploymentsDeploymentCollectionItemDeployArtifactOverrideArgumentsItemResult']:
        """
        A list of stage predecessors for a stage.
        """
        return pulumi.get(self, "items")


@pulumi.output_type
class GetDeploymentsDeploymentCollectionItemDeployArtifactOverrideArgumentsItemResult(dict):
    def __init__(__self__, *,
                 deploy_artifact_id: str,
                 name: str,
                 value: str):
        """
        :param str deploy_artifact_id: The OCID of an artifact
        :param str name: Name of the step.
        :param str value: value of the argument.
        """
        pulumi.set(__self__, "deploy_artifact_id", deploy_artifact_id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="deployArtifactId")
    def deploy_artifact_id(self) -> str:
        """
        The OCID of an artifact
        """
        return pulumi.get(self, "deploy_artifact_id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the step.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        value of the argument.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDeploymentsDeploymentCollectionItemDeployPipelineArtifactsResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetDeploymentsDeploymentCollectionItemDeployPipelineArtifactsItemResult']):
        """
        :param Sequence['GetDeploymentsDeploymentCollectionItemDeployPipelineArtifactsItemArgs'] items: A list of stage predecessors for a stage.
        """
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetDeploymentsDeploymentCollectionItemDeployPipelineArtifactsItemResult']:
        """
        A list of stage predecessors for a stage.
        """
        return pulumi.get(self, "items")


@pulumi.output_type
class GetDeploymentsDeploymentCollectionItemDeployPipelineArtifactsItemResult(dict):
    def __init__(__self__, *,
                 deploy_artifact_id: str,
                 deploy_pipeline_stages: 'outputs.GetDeploymentsDeploymentCollectionItemDeployPipelineArtifactsItemDeployPipelineStagesResult',
                 display_name: str):
        """
        :param str deploy_artifact_id: The OCID of an artifact
        :param 'GetDeploymentsDeploymentCollectionItemDeployPipelineArtifactsItemDeployPipelineStagesArgs' deploy_pipeline_stages: List of stages.
        :param str display_name: A filter to return only resources that match the entire display name given.
        """
        pulumi.set(__self__, "deploy_artifact_id", deploy_artifact_id)
        pulumi.set(__self__, "deploy_pipeline_stages", deploy_pipeline_stages)
        pulumi.set(__self__, "display_name", display_name)

    @property
    @pulumi.getter(name="deployArtifactId")
    def deploy_artifact_id(self) -> str:
        """
        The OCID of an artifact
        """
        return pulumi.get(self, "deploy_artifact_id")

    @property
    @pulumi.getter(name="deployPipelineStages")
    def deploy_pipeline_stages(self) -> 'outputs.GetDeploymentsDeploymentCollectionItemDeployPipelineArtifactsItemDeployPipelineStagesResult':
        """
        List of stages.
        """
        return pulumi.get(self, "deploy_pipeline_stages")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        A filter to return only resources that match the entire display name given.
        """
        return pulumi.get(self, "display_name")


@pulumi.output_type
class GetDeploymentsDeploymentCollectionItemDeployPipelineArtifactsItemDeployPipelineStagesResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetDeploymentsDeploymentCollectionItemDeployPipelineArtifactsItemDeployPipelineStagesItemResult']):
        """
        :param Sequence['GetDeploymentsDeploymentCollectionItemDeployPipelineArtifactsItemDeployPipelineStagesItemArgs'] items: A list of stage predecessors for a stage.
        """
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetDeploymentsDeploymentCollectionItemDeployPipelineArtifactsItemDeployPipelineStagesItemResult']:
        """
        A list of stage predecessors for a stage.
        """
        return pulumi.get(self, "items")


@pulumi.output_type
class GetDeploymentsDeploymentCollectionItemDeployPipelineArtifactsItemDeployPipelineStagesItemResult(dict):
    def __init__(__self__, *,
                 deploy_stage_id: str,
                 display_name: str):
        """
        :param str deploy_stage_id: The OCID of the stage.
        :param str display_name: A filter to return only resources that match the entire display name given.
        """
        pulumi.set(__self__, "deploy_stage_id", deploy_stage_id)
        pulumi.set(__self__, "display_name", display_name)

    @property
    @pulumi.getter(name="deployStageId")
    def deploy_stage_id(self) -> str:
        """
        The OCID of the stage.
        """
        return pulumi.get(self, "deploy_stage_id")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        A filter to return only resources that match the entire display name given.
        """
        return pulumi.get(self, "display_name")


@pulumi.output_type
class GetDeploymentsDeploymentCollectionItemDeployPipelineEnvironmentsResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetDeploymentsDeploymentCollectionItemDeployPipelineEnvironmentsItemResult']):
        """
        :param Sequence['GetDeploymentsDeploymentCollectionItemDeployPipelineEnvironmentsItemArgs'] items: A list of stage predecessors for a stage.
        """
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetDeploymentsDeploymentCollectionItemDeployPipelineEnvironmentsItemResult']:
        """
        A list of stage predecessors for a stage.
        """
        return pulumi.get(self, "items")


@pulumi.output_type
class GetDeploymentsDeploymentCollectionItemDeployPipelineEnvironmentsItemResult(dict):
    def __init__(__self__, *,
                 deploy_environment_id: str,
                 deploy_pipeline_stages: 'outputs.GetDeploymentsDeploymentCollectionItemDeployPipelineEnvironmentsItemDeployPipelineStagesResult',
                 display_name: str):
        """
        :param str deploy_environment_id: The OCID of an Environment
        :param 'GetDeploymentsDeploymentCollectionItemDeployPipelineEnvironmentsItemDeployPipelineStagesArgs' deploy_pipeline_stages: List of stages.
        :param str display_name: A filter to return only resources that match the entire display name given.
        """
        pulumi.set(__self__, "deploy_environment_id", deploy_environment_id)
        pulumi.set(__self__, "deploy_pipeline_stages", deploy_pipeline_stages)
        pulumi.set(__self__, "display_name", display_name)

    @property
    @pulumi.getter(name="deployEnvironmentId")
    def deploy_environment_id(self) -> str:
        """
        The OCID of an Environment
        """
        return pulumi.get(self, "deploy_environment_id")

    @property
    @pulumi.getter(name="deployPipelineStages")
    def deploy_pipeline_stages(self) -> 'outputs.GetDeploymentsDeploymentCollectionItemDeployPipelineEnvironmentsItemDeployPipelineStagesResult':
        """
        List of stages.
        """
        return pulumi.get(self, "deploy_pipeline_stages")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        A filter to return only resources that match the entire display name given.
        """
        return pulumi.get(self, "display_name")


@pulumi.output_type
class GetDeploymentsDeploymentCollectionItemDeployPipelineEnvironmentsItemDeployPipelineStagesResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetDeploymentsDeploymentCollectionItemDeployPipelineEnvironmentsItemDeployPipelineStagesItemResult']):
        """
        :param Sequence['GetDeploymentsDeploymentCollectionItemDeployPipelineEnvironmentsItemDeployPipelineStagesItemArgs'] items: A list of stage predecessors for a stage.
        """
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetDeploymentsDeploymentCollectionItemDeployPipelineEnvironmentsItemDeployPipelineStagesItemResult']:
        """
        A list of stage predecessors for a stage.
        """
        return pulumi.get(self, "items")


@pulumi.output_type
class GetDeploymentsDeploymentCollectionItemDeployPipelineEnvironmentsItemDeployPipelineStagesItemResult(dict):
    def __init__(__self__, *,
                 deploy_stage_id: str,
                 display_name: str):
        """
        :param str deploy_stage_id: The OCID of the stage.
        :param str display_name: A filter to return only resources that match the entire display name given.
        """
        pulumi.set(__self__, "deploy_stage_id", deploy_stage_id)
        pulumi.set(__self__, "display_name", display_name)

    @property
    @pulumi.getter(name="deployStageId")
    def deploy_stage_id(self) -> str:
        """
        The OCID of the stage.
        """
        return pulumi.get(self, "deploy_stage_id")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        A filter to return only resources that match the entire display name given.
        """
        return pulumi.get(self, "display_name")


@pulumi.output_type
class GetDeploymentsDeploymentCollectionItemDeploymentArgumentsResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetDeploymentsDeploymentCollectionItemDeploymentArgumentsItemResult']):
        """
        :param Sequence['GetDeploymentsDeploymentCollectionItemDeploymentArgumentsItemArgs'] items: A list of stage predecessors for a stage.
        """
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetDeploymentsDeploymentCollectionItemDeploymentArgumentsItemResult']:
        """
        A list of stage predecessors for a stage.
        """
        return pulumi.get(self, "items")


@pulumi.output_type
class GetDeploymentsDeploymentCollectionItemDeploymentArgumentsItemResult(dict):
    def __init__(__self__, *,
                 name: str,
                 value: str):
        """
        :param str name: Name of the step.
        :param str value: value of the argument.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the step.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        value of the argument.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDeploymentsDeploymentCollectionItemDeploymentExecutionProgressResult(dict):
    def __init__(__self__, *,
                 deploy_stage_execution_progress: Mapping[str, Any],
                 time_finished: str,
                 time_started: str):
        """
        :param Mapping[str, Any] deploy_stage_execution_progress: Map of stage OCIDs to deploy stage execution progress model.
        :param str time_finished: Time the deployment is finished. Format defined by [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339).
        :param str time_started: Time the deployment is started. Format defined by [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339).
        """
        pulumi.set(__self__, "deploy_stage_execution_progress", deploy_stage_execution_progress)
        pulumi.set(__self__, "time_finished", time_finished)
        pulumi.set(__self__, "time_started", time_started)

    @property
    @pulumi.getter(name="deployStageExecutionProgress")
    def deploy_stage_execution_progress(self) -> Mapping[str, Any]:
        """
        Map of stage OCIDs to deploy stage execution progress model.
        """
        return pulumi.get(self, "deploy_stage_execution_progress")

    @property
    @pulumi.getter(name="timeFinished")
    def time_finished(self) -> str:
        """
        Time the deployment is finished. Format defined by [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339).
        """
        return pulumi.get(self, "time_finished")

    @property
    @pulumi.getter(name="timeStarted")
    def time_started(self) -> str:
        """
        Time the deployment is started. Format defined by [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339).
        """
        return pulumi.get(self, "time_started")


@pulumi.output_type
class GetDeploymentsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        """
        :param str name: Name of the step.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the step.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetProjectNotificationConfigResult(dict):
    def __init__(__self__, *,
                 topic_id: str):
        """
        :param str topic_id: The topic ID for notifications.
        """
        pulumi.set(__self__, "topic_id", topic_id)

    @property
    @pulumi.getter(name="topicId")
    def topic_id(self) -> str:
        """
        The topic ID for notifications.
        """
        return pulumi.get(self, "topic_id")


@pulumi.output_type
class GetProjectsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        """
        :param str name: A filter to return only resources that match the entire name given.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        A filter to return only resources that match the entire name given.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetProjectsProjectCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetProjectsProjectCollectionItemResult']):
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetProjectsProjectCollectionItemResult']:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetProjectsProjectCollectionItemResult(dict):
    def __init__(__self__, *,
                 compartment_id: str,
                 defined_tags: Mapping[str, Any],
                 description: str,
                 freeform_tags: Mapping[str, Any],
                 id: str,
                 lifecycle_details: str,
                 name: str,
                 namespace: str,
                 notification_config: 'outputs.GetProjectsProjectCollectionItemNotificationConfigResult',
                 state: str,
                 system_tags: Mapping[str, Any],
                 time_created: str,
                 time_updated: str):
        """
        :param str compartment_id: The OCID of the compartment in which to list resources.
        :param Mapping[str, Any] defined_tags: Defined tags for this resource. Each key is predefined and scoped to a namespace. See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"foo-namespace.bar-key": "value"}`
        :param str description: Project description.
        :param Mapping[str, Any] freeform_tags: Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only.  See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"bar-key": "value"}`
        :param str id: Unique identifier or OCID for listing a single resource by ID.
        :param str lifecycle_details: A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
        :param str name: A filter to return only resources that match the entire name given.
        :param str namespace: Namespace associated with the project.
        :param 'GetProjectsProjectCollectionItemNotificationConfigArgs' notification_config: Notification configuration for the project.
        :param str state: A filter to return only Projects that matches the given lifecycleState.
        :param Mapping[str, Any] system_tags: Usage of system tag keys. These predefined keys are scoped to namespaces. See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"orcl-cloud.free-tier-retained": "true"}`
        :param str time_created: Time the project was created. Format defined by [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339).
        :param str time_updated: Time the project was updated. Format defined by [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339).
        """
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "defined_tags", defined_tags)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "freeform_tags", freeform_tags)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "namespace", namespace)
        pulumi.set(__self__, "notification_config", notification_config)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "system_tags", system_tags)
        pulumi.set(__self__, "time_created", time_created)
        pulumi.set(__self__, "time_updated", time_updated)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> str:
        """
        The OCID of the compartment in which to list resources.
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Mapping[str, Any]:
        """
        Defined tags for this resource. Each key is predefined and scoped to a namespace. See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"foo-namespace.bar-key": "value"}`
        """
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Project description.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Mapping[str, Any]:
        """
        Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only.  See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"bar-key": "value"}`
        """
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Unique identifier or OCID for listing a single resource by ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> str:
        """
        A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
        """
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        A filter to return only resources that match the entire name given.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def namespace(self) -> str:
        """
        Namespace associated with the project.
        """
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter(name="notificationConfig")
    def notification_config(self) -> 'outputs.GetProjectsProjectCollectionItemNotificationConfigResult':
        """
        Notification configuration for the project.
        """
        return pulumi.get(self, "notification_config")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        A filter to return only Projects that matches the given lifecycleState.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Mapping[str, Any]:
        """
        Usage of system tag keys. These predefined keys are scoped to namespaces. See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"orcl-cloud.free-tier-retained": "true"}`
        """
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> str:
        """
        Time the project was created. Format defined by [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339).
        """
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> str:
        """
        Time the project was updated. Format defined by [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339).
        """
        return pulumi.get(self, "time_updated")


@pulumi.output_type
class GetProjectsProjectCollectionItemNotificationConfigResult(dict):
    def __init__(__self__, *,
                 topic_id: str):
        """
        :param str topic_id: The topic ID for notifications.
        """
        pulumi.set(__self__, "topic_id", topic_id)

    @property
    @pulumi.getter(name="topicId")
    def topic_id(self) -> str:
        """
        The topic ID for notifications.
        """
        return pulumi.get(self, "topic_id")


