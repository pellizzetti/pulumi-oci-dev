# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetAuthenticationPolicyResult',
    'AwaitableGetAuthenticationPolicyResult',
    'get_authentication_policy',
]

@pulumi.output_type
class GetAuthenticationPolicyResult:
    """
    A collection of values returned by getAuthenticationPolicy.
    """
    def __init__(__self__, compartment_id=None, id=None, network_policy=None, password_policy=None):
        if compartment_id and not isinstance(compartment_id, str):
            raise TypeError("Expected argument 'compartment_id' to be a str")
        pulumi.set(__self__, "compartment_id", compartment_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if network_policy and not isinstance(network_policy, dict):
            raise TypeError("Expected argument 'network_policy' to be a dict")
        pulumi.set(__self__, "network_policy", network_policy)
        if password_policy and not isinstance(password_policy, dict):
            raise TypeError("Expected argument 'password_policy' to be a dict")
        pulumi.set(__self__, "password_policy", password_policy)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> str:
        """
        Compartment OCID.
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="networkPolicy")
    def network_policy(self) -> 'outputs.GetAuthenticationPolicyNetworkPolicyResult':
        """
        Network policy, Consists of a list of Network Source ids.
        """
        return pulumi.get(self, "network_policy")

    @property
    @pulumi.getter(name="passwordPolicy")
    def password_policy(self) -> 'outputs.GetAuthenticationPolicyPasswordPolicyResult':
        """
        Password policy, currently set for the given compartment.
        """
        return pulumi.get(self, "password_policy")


class AwaitableGetAuthenticationPolicyResult(GetAuthenticationPolicyResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetAuthenticationPolicyResult(
            compartment_id=self.compartment_id,
            id=self.id,
            network_policy=self.network_policy,
            password_policy=self.password_policy)


def get_authentication_policy(compartment_id: Optional[str] = None,
                              opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetAuthenticationPolicyResult:
    """
    This data source provides details about a specific Authentication Policy resource in Oracle Cloud Infrastructure Identity service.

    Gets the authentication policy for the given tenancy. You must specify your tenantâ€™s OCID as the value for
    the compartment ID (remember that the tenancy is simply the root compartment).

    ## Example Usage

    ```python
    import pulumi
    import pulumi_oci as oci

    test_authentication_policy = oci.identity.get_authentication_policy(compartment_id=var["tenancy_ocid"])
    ```


    :param str compartment_id: The OCID of the compartment.
    """
    __args__ = dict()
    __args__['compartmentId'] = compartment_id
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
    __ret__ = pulumi.runtime.invoke('oci:identity/getAuthenticationPolicy:getAuthenticationPolicy', __args__, opts=opts, typ=GetAuthenticationPolicyResult).value

    return AwaitableGetAuthenticationPolicyResult(
        compartment_id=__ret__.compartment_id,
        id=__ret__.id,
        network_policy=__ret__.network_policy,
        password_policy=__ret__.password_policy)
