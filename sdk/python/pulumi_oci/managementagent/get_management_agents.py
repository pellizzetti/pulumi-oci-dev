# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetManagementAgentsResult',
    'AwaitableGetManagementAgentsResult',
    'get_management_agents',
]

@pulumi.output_type
class GetManagementAgentsResult:
    """
    A collection of values returned by getManagementAgents.
    """
    def __init__(__self__, compartment_id=None, display_name=None, filters=None, id=None, management_agents=None, state=None):
        if compartment_id and not isinstance(compartment_id, str):
            raise TypeError("Expected argument 'compartment_id' to be a str")
        pulumi.set(__self__, "compartment_id", compartment_id)
        if display_name and not isinstance(display_name, str):
            raise TypeError("Expected argument 'display_name' to be a str")
        pulumi.set(__self__, "display_name", display_name)
        if filters and not isinstance(filters, list):
            raise TypeError("Expected argument 'filters' to be a list")
        pulumi.set(__self__, "filters", filters)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if management_agents and not isinstance(management_agents, list):
            raise TypeError("Expected argument 'management_agents' to be a list")
        pulumi.set(__self__, "management_agents", management_agents)
        if state and not isinstance(state, str):
            raise TypeError("Expected argument 'state' to be a str")
        pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> str:
        """
        Compartment Identifier
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        """
        Management Agent Name
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def filters(self) -> Optional[Sequence['outputs.GetManagementAgentsFilterResult']]:
        return pulumi.get(self, "filters")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="managementAgents")
    def management_agents(self) -> Sequence['outputs.GetManagementAgentsManagementAgentResult']:
        """
        The list of management_agents.
        """
        return pulumi.get(self, "management_agents")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        """
        The current state of managementAgent
        """
        return pulumi.get(self, "state")


class AwaitableGetManagementAgentsResult(GetManagementAgentsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetManagementAgentsResult(
            compartment_id=self.compartment_id,
            display_name=self.display_name,
            filters=self.filters,
            id=self.id,
            management_agents=self.management_agents,
            state=self.state)


def get_management_agents(compartment_id: Optional[str] = None,
                          display_name: Optional[str] = None,
                          filters: Optional[Sequence[pulumi.InputType['GetManagementAgentsFilterArgs']]] = None,
                          state: Optional[str] = None,
                          opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetManagementAgentsResult:
    """
    This data source provides the list of Management Agents in Oracle Cloud Infrastructure Management Agent service.

    Returns a list of Management Agent.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_oci as oci

    test_management_agents = oci.managementagent.get_management_agents(compartment_id=var["compartment_id"],
        display_name=var["management_agent_display_name"],
        platform_type=var["management_agent_platform_type"],
        plugin_name=var["management_agent_plugin_name"],
        state=var["management_agent_state"],
        version=var["management_agent_version"])
    ```


    :param str compartment_id: The ID of the compartment from which the Management Agents to be listed.
    :param str display_name: Filter to return only Management Agents having the particular display name.
    :param str state: Filter to return only Management Agents in the particular lifecycle state.
    """
    __args__ = dict()
    __args__['compartmentId'] = compartment_id
    __args__['displayName'] = display_name
    __args__['filters'] = filters
    __args__['state'] = state
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
    __ret__ = pulumi.runtime.invoke('oci:managementagent/getManagementAgents:getManagementAgents', __args__, opts=opts, typ=GetManagementAgentsResult).value

    return AwaitableGetManagementAgentsResult(
        compartment_id=__ret__.compartment_id,
        display_name=__ret__.display_name,
        filters=__ret__.filters,
        id=__ret__.id,
        management_agents=__ret__.management_agents,
        state=__ret__.state)
