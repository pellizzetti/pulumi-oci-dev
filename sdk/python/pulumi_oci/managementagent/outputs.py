# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'ManagementAgentPluginList',
    'GetManagementAgentAvailableHistoriesAvailabilityHistoryResult',
    'GetManagementAgentAvailableHistoriesFilterResult',
    'GetManagementAgentImagesFilterResult',
    'GetManagementAgentImagesManagementAgentImageResult',
    'GetManagementAgentInstallKeysFilterResult',
    'GetManagementAgentInstallKeysManagementAgentInstallKeyResult',
    'GetManagementAgentPluginListResult',
    'GetManagementAgentPluginsFilterResult',
    'GetManagementAgentPluginsManagementAgentPluginResult',
    'GetManagementAgentsFilterResult',
    'GetManagementAgentsManagementAgentResult',
    'GetManagementAgentsManagementAgentPluginListResult',
]

@pulumi.output_type
class ManagementAgentPluginList(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "pluginDisplayName":
            suggest = "plugin_display_name"
        elif key == "pluginId":
            suggest = "plugin_id"
        elif key == "pluginName":
            suggest = "plugin_name"
        elif key == "pluginVersion":
            suggest = "plugin_version"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ManagementAgentPluginList. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ManagementAgentPluginList.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ManagementAgentPluginList.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 plugin_display_name: Optional[str] = None,
                 plugin_id: Optional[str] = None,
                 plugin_name: Optional[str] = None,
                 plugin_version: Optional[str] = None):
        """
        :param str plugin_display_name: Management Agent Plugin Identifier, can be renamed
        :param str plugin_id: Plugin Id
        :param str plugin_name: Management Agent Plugin Name
        :param str plugin_version: Plugin Version
        """
        if plugin_display_name is not None:
            pulumi.set(__self__, "plugin_display_name", plugin_display_name)
        if plugin_id is not None:
            pulumi.set(__self__, "plugin_id", plugin_id)
        if plugin_name is not None:
            pulumi.set(__self__, "plugin_name", plugin_name)
        if plugin_version is not None:
            pulumi.set(__self__, "plugin_version", plugin_version)

    @property
    @pulumi.getter(name="pluginDisplayName")
    def plugin_display_name(self) -> Optional[str]:
        """
        Management Agent Plugin Identifier, can be renamed
        """
        return pulumi.get(self, "plugin_display_name")

    @property
    @pulumi.getter(name="pluginId")
    def plugin_id(self) -> Optional[str]:
        """
        Plugin Id
        """
        return pulumi.get(self, "plugin_id")

    @property
    @pulumi.getter(name="pluginName")
    def plugin_name(self) -> Optional[str]:
        """
        Management Agent Plugin Name
        """
        return pulumi.get(self, "plugin_name")

    @property
    @pulumi.getter(name="pluginVersion")
    def plugin_version(self) -> Optional[str]:
        """
        Plugin Version
        """
        return pulumi.get(self, "plugin_version")


@pulumi.output_type
class GetManagementAgentAvailableHistoriesAvailabilityHistoryResult(dict):
    def __init__(__self__, *,
                 availability_status: str,
                 management_agent_id: str,
                 time_availability_status_ended: str,
                 time_availability_status_started: str):
        """
        :param str availability_status: The availability status of managementAgent
        :param str management_agent_id: Unique Management Agent identifier
        :param str time_availability_status_ended: The time till which the Management Agent was known to be in the availability status. An RFC3339 formatted datetime string
        :param str time_availability_status_started: The time at which the Management Agent moved to the availability status. An RFC3339 formatted datetime string
        """
        pulumi.set(__self__, "availability_status", availability_status)
        pulumi.set(__self__, "management_agent_id", management_agent_id)
        pulumi.set(__self__, "time_availability_status_ended", time_availability_status_ended)
        pulumi.set(__self__, "time_availability_status_started", time_availability_status_started)

    @property
    @pulumi.getter(name="availabilityStatus")
    def availability_status(self) -> str:
        """
        The availability status of managementAgent
        """
        return pulumi.get(self, "availability_status")

    @property
    @pulumi.getter(name="managementAgentId")
    def management_agent_id(self) -> str:
        """
        Unique Management Agent identifier
        """
        return pulumi.get(self, "management_agent_id")

    @property
    @pulumi.getter(name="timeAvailabilityStatusEnded")
    def time_availability_status_ended(self) -> str:
        """
        The time till which the Management Agent was known to be in the availability status. An RFC3339 formatted datetime string
        """
        return pulumi.get(self, "time_availability_status_ended")

    @property
    @pulumi.getter(name="timeAvailabilityStatusStarted")
    def time_availability_status_started(self) -> str:
        """
        The time at which the Management Agent moved to the availability status. An RFC3339 formatted datetime string
        """
        return pulumi.get(self, "time_availability_status_started")


@pulumi.output_type
class GetManagementAgentAvailableHistoriesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetManagementAgentImagesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        """
        :param str name: A filter to return only resources that match the entire platform name given.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        A filter to return only resources that match the entire platform name given.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetManagementAgentImagesManagementAgentImageResult(dict):
    def __init__(__self__, *,
                 checksum: str,
                 id: str,
                 object_url: str,
                 platform_name: str,
                 platform_type: str,
                 size: float,
                 state: str,
                 version: str):
        """
        :param str checksum: Agent image content SHA256 Hash
        :param str id: Agent image resource id
        :param str object_url: Object storage URL for download
        :param str platform_name: Agent image platform display name
        :param str platform_type: Agent image platform type
        :param float size: Agent image size in bytes
        :param str state: Filter to return only Management Agents in the particular lifecycle state.
        :param str version: Agent image version
        """
        pulumi.set(__self__, "checksum", checksum)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "object_url", object_url)
        pulumi.set(__self__, "platform_name", platform_name)
        pulumi.set(__self__, "platform_type", platform_type)
        pulumi.set(__self__, "size", size)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def checksum(self) -> str:
        """
        Agent image content SHA256 Hash
        """
        return pulumi.get(self, "checksum")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Agent image resource id
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="objectUrl")
    def object_url(self) -> str:
        """
        Object storage URL for download
        """
        return pulumi.get(self, "object_url")

    @property
    @pulumi.getter(name="platformName")
    def platform_name(self) -> str:
        """
        Agent image platform display name
        """
        return pulumi.get(self, "platform_name")

    @property
    @pulumi.getter(name="platformType")
    def platform_type(self) -> str:
        """
        Agent image platform type
        """
        return pulumi.get(self, "platform_type")

    @property
    @pulumi.getter
    def size(self) -> float:
        """
        Agent image size in bytes
        """
        return pulumi.get(self, "size")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        Filter to return only Management Agents in the particular lifecycle state.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter
    def version(self) -> str:
        """
        Agent image version
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class GetManagementAgentInstallKeysFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetManagementAgentInstallKeysManagementAgentInstallKeyResult(dict):
    def __init__(__self__, *,
                 allowed_key_install_count: int,
                 compartment_id: str,
                 created_by_principal_id: str,
                 current_key_install_count: int,
                 display_name: str,
                 id: str,
                 key: str,
                 lifecycle_details: str,
                 state: str,
                 time_created: str,
                 time_expires: str,
                 time_updated: str):
        """
        :param int allowed_key_install_count: Total number of install for this keys
        :param str compartment_id: The ID of the compartment from which the Management Agents to be listed.
        :param str created_by_principal_id: Principal id of user who created the Agent Install key
        :param int current_key_install_count: Total number of install for this keys
        :param str display_name: The display name for which the Key needs to be listed.
        :param str id: Agent install Key identifier
        :param str key: Management Agent Install Key
        :param str lifecycle_details: A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
        :param str state: Filter to return only Management Agents in the particular lifecycle state.
        :param str time_created: The time when Management Agent install Key was created. An RFC3339 formatted date time string
        :param str time_expires: date after which key would expire after creation
        :param str time_updated: The time when Management Agent install Key was updated. An RFC3339 formatted date time string
        """
        pulumi.set(__self__, "allowed_key_install_count", allowed_key_install_count)
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "created_by_principal_id", created_by_principal_id)
        pulumi.set(__self__, "current_key_install_count", current_key_install_count)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "time_created", time_created)
        pulumi.set(__self__, "time_expires", time_expires)
        pulumi.set(__self__, "time_updated", time_updated)

    @property
    @pulumi.getter(name="allowedKeyInstallCount")
    def allowed_key_install_count(self) -> int:
        """
        Total number of install for this keys
        """
        return pulumi.get(self, "allowed_key_install_count")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> str:
        """
        The ID of the compartment from which the Management Agents to be listed.
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="createdByPrincipalId")
    def created_by_principal_id(self) -> str:
        """
        Principal id of user who created the Agent Install key
        """
        return pulumi.get(self, "created_by_principal_id")

    @property
    @pulumi.getter(name="currentKeyInstallCount")
    def current_key_install_count(self) -> int:
        """
        Total number of install for this keys
        """
        return pulumi.get(self, "current_key_install_count")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        The display name for which the Key needs to be listed.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Agent install Key identifier
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        Management Agent Install Key
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> str:
        """
        A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
        """
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        Filter to return only Management Agents in the particular lifecycle state.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> str:
        """
        The time when Management Agent install Key was created. An RFC3339 formatted date time string
        """
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeExpires")
    def time_expires(self) -> str:
        """
        date after which key would expire after creation
        """
        return pulumi.get(self, "time_expires")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> str:
        """
        The time when Management Agent install Key was updated. An RFC3339 formatted date time string
        """
        return pulumi.get(self, "time_updated")


@pulumi.output_type
class GetManagementAgentPluginListResult(dict):
    def __init__(__self__, *,
                 plugin_display_name: str,
                 plugin_id: str,
                 plugin_name: str,
                 plugin_version: str):
        """
        :param str plugin_display_name: Management Agent Plugin Identifier, can be renamed
        :param str plugin_id: Plugin Id
        :param str plugin_name: Management Agent Plugin Name
        :param str plugin_version: Plugin Version
        """
        pulumi.set(__self__, "plugin_display_name", plugin_display_name)
        pulumi.set(__self__, "plugin_id", plugin_id)
        pulumi.set(__self__, "plugin_name", plugin_name)
        pulumi.set(__self__, "plugin_version", plugin_version)

    @property
    @pulumi.getter(name="pluginDisplayName")
    def plugin_display_name(self) -> str:
        """
        Management Agent Plugin Identifier, can be renamed
        """
        return pulumi.get(self, "plugin_display_name")

    @property
    @pulumi.getter(name="pluginId")
    def plugin_id(self) -> str:
        """
        Plugin Id
        """
        return pulumi.get(self, "plugin_id")

    @property
    @pulumi.getter(name="pluginName")
    def plugin_name(self) -> str:
        """
        Management Agent Plugin Name
        """
        return pulumi.get(self, "plugin_name")

    @property
    @pulumi.getter(name="pluginVersion")
    def plugin_version(self) -> str:
        """
        Plugin Version
        """
        return pulumi.get(self, "plugin_version")


@pulumi.output_type
class GetManagementAgentPluginsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        """
        :param str name: Management Agent Plugin Name
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Management Agent Plugin Name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetManagementAgentPluginsManagementAgentPluginResult(dict):
    def __init__(__self__, *,
                 description: str,
                 display_name: str,
                 id: str,
                 is_console_deployable: bool,
                 name: str,
                 state: str,
                 supported_platform_types: Sequence[str],
                 version: int):
        """
        :param str description: Management Agent Plugin description
        :param str display_name: Filter to return only Management Agent Plugins having the particular display name.
        :param str id: Management Agent Plugin Id
        :param bool is_console_deployable: A flag to indicate whether a given plugin can be deployed from Agent Console UI or not.
        :param str name: Management Agent Plugin Name
        :param str state: Filter to return only Management Agents in the particular lifecycle state.
        :param Sequence[str] supported_platform_types: Supported Platform Types
        :param int version: Management Agent Plugin Version
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "is_console_deployable", is_console_deployable)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "supported_platform_types", supported_platform_types)
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Management Agent Plugin description
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        Filter to return only Management Agent Plugins having the particular display name.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Management Agent Plugin Id
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isConsoleDeployable")
    def is_console_deployable(self) -> bool:
        """
        A flag to indicate whether a given plugin can be deployed from Agent Console UI or not.
        """
        return pulumi.get(self, "is_console_deployable")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Management Agent Plugin Name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        Filter to return only Management Agents in the particular lifecycle state.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="supportedPlatformTypes")
    def supported_platform_types(self) -> Sequence[str]:
        """
        Supported Platform Types
        """
        return pulumi.get(self, "supported_platform_types")

    @property
    @pulumi.getter
    def version(self) -> int:
        """
        Management Agent Plugin Version
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class GetManagementAgentsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetManagementAgentsManagementAgentResult(dict):
    def __init__(__self__, *,
                 availability_status: str,
                 compartment_id: str,
                 defined_tags: Mapping[str, Any],
                 deploy_plugins_ids: Sequence[str],
                 display_name: str,
                 freeform_tags: Mapping[str, Any],
                 host: str,
                 id: str,
                 install_key_id: str,
                 install_path: str,
                 is_agent_auto_upgradable: bool,
                 lifecycle_details: str,
                 managed_agent_id: str,
                 platform_name: str,
                 platform_type: str,
                 platform_version: str,
                 plugin_lists: Sequence['outputs.GetManagementAgentsManagementAgentPluginListResult'],
                 state: str,
                 time_created: str,
                 time_last_heartbeat: str,
                 time_updated: str,
                 version: str):
        """
        :param str availability_status: The current availability status of managementAgent
        :param str compartment_id: The ID of the compartment from which the Management Agents to be listed.
        :param Mapping[str, Any] defined_tags: Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        :param str display_name: Filter to return only Management Agents having the particular display name.
        :param Mapping[str, Any] freeform_tags: Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        :param str host: Management Agent host machine name
        :param str id: agent identifier
        :param str install_key_id: agent install key identifier
        :param str install_path: Path where Management Agent is installed
        :param bool is_agent_auto_upgradable: true if the agent can be upgraded automatically; false if it must be upgraded manually. true is currently unsupported.
        :param str lifecycle_details: A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
        :param str platform_name: Platform Name
        :param str platform_type: Filter to return only Management Agents having the particular platform type.
        :param str platform_version: Platform Version
        :param Sequence['GetManagementAgentsManagementAgentPluginListArgs'] plugin_lists: list of managementAgentPlugins associated with the agent
        :param str state: Filter to return only Management Agents in the particular lifecycle state.
        :param str time_created: The time the Management Agent was created. An RFC3339 formatted datetime string
        :param str time_last_heartbeat: The time the Management Agent has last recorded its health status in telemetry. This value will be null if the agent has not recorded its health status in last 7 days. An RFC3339 formatted datetime string
        :param str time_updated: The time the Management Agent was updated. An RFC3339 formatted datetime string
        :param str version: Filter to return only Management Agents having the particular agent version.
        """
        pulumi.set(__self__, "availability_status", availability_status)
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "defined_tags", defined_tags)
        pulumi.set(__self__, "deploy_plugins_ids", deploy_plugins_ids)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "freeform_tags", freeform_tags)
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "install_key_id", install_key_id)
        pulumi.set(__self__, "install_path", install_path)
        pulumi.set(__self__, "is_agent_auto_upgradable", is_agent_auto_upgradable)
        pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        pulumi.set(__self__, "managed_agent_id", managed_agent_id)
        pulumi.set(__self__, "platform_name", platform_name)
        pulumi.set(__self__, "platform_type", platform_type)
        pulumi.set(__self__, "platform_version", platform_version)
        pulumi.set(__self__, "plugin_lists", plugin_lists)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "time_created", time_created)
        pulumi.set(__self__, "time_last_heartbeat", time_last_heartbeat)
        pulumi.set(__self__, "time_updated", time_updated)
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="availabilityStatus")
    def availability_status(self) -> str:
        """
        The current availability status of managementAgent
        """
        return pulumi.get(self, "availability_status")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> str:
        """
        The ID of the compartment from which the Management Agents to be listed.
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Mapping[str, Any]:
        """
        Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        """
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="deployPluginsIds")
    def deploy_plugins_ids(self) -> Sequence[str]:
        return pulumi.get(self, "deploy_plugins_ids")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        Filter to return only Management Agents having the particular display name.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Mapping[str, Any]:
        """
        Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        """
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def host(self) -> str:
        """
        Management Agent host machine name
        """
        return pulumi.get(self, "host")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        agent identifier
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="installKeyId")
    def install_key_id(self) -> str:
        """
        agent install key identifier
        """
        return pulumi.get(self, "install_key_id")

    @property
    @pulumi.getter(name="installPath")
    def install_path(self) -> str:
        """
        Path where Management Agent is installed
        """
        return pulumi.get(self, "install_path")

    @property
    @pulumi.getter(name="isAgentAutoUpgradable")
    def is_agent_auto_upgradable(self) -> bool:
        """
        true if the agent can be upgraded automatically; false if it must be upgraded manually. true is currently unsupported.
        """
        return pulumi.get(self, "is_agent_auto_upgradable")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> str:
        """
        A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
        """
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter(name="managedAgentId")
    def managed_agent_id(self) -> str:
        return pulumi.get(self, "managed_agent_id")

    @property
    @pulumi.getter(name="platformName")
    def platform_name(self) -> str:
        """
        Platform Name
        """
        return pulumi.get(self, "platform_name")

    @property
    @pulumi.getter(name="platformType")
    def platform_type(self) -> str:
        """
        Filter to return only Management Agents having the particular platform type.
        """
        return pulumi.get(self, "platform_type")

    @property
    @pulumi.getter(name="platformVersion")
    def platform_version(self) -> str:
        """
        Platform Version
        """
        return pulumi.get(self, "platform_version")

    @property
    @pulumi.getter(name="pluginLists")
    def plugin_lists(self) -> Sequence['outputs.GetManagementAgentsManagementAgentPluginListResult']:
        """
        list of managementAgentPlugins associated with the agent
        """
        return pulumi.get(self, "plugin_lists")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        Filter to return only Management Agents in the particular lifecycle state.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> str:
        """
        The time the Management Agent was created. An RFC3339 formatted datetime string
        """
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeLastHeartbeat")
    def time_last_heartbeat(self) -> str:
        """
        The time the Management Agent has last recorded its health status in telemetry. This value will be null if the agent has not recorded its health status in last 7 days. An RFC3339 formatted datetime string
        """
        return pulumi.get(self, "time_last_heartbeat")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> str:
        """
        The time the Management Agent was updated. An RFC3339 formatted datetime string
        """
        return pulumi.get(self, "time_updated")

    @property
    @pulumi.getter
    def version(self) -> str:
        """
        Filter to return only Management Agents having the particular agent version.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class GetManagementAgentsManagementAgentPluginListResult(dict):
    def __init__(__self__, *,
                 plugin_display_name: str,
                 plugin_id: str,
                 plugin_name: str,
                 plugin_version: str):
        """
        :param str plugin_display_name: Management Agent Plugin Identifier, can be renamed
        :param str plugin_id: Plugin Id
        :param str plugin_name: Filter to return only Management Agents having the particular Plugin installed.
        :param str plugin_version: Plugin Version
        """
        pulumi.set(__self__, "plugin_display_name", plugin_display_name)
        pulumi.set(__self__, "plugin_id", plugin_id)
        pulumi.set(__self__, "plugin_name", plugin_name)
        pulumi.set(__self__, "plugin_version", plugin_version)

    @property
    @pulumi.getter(name="pluginDisplayName")
    def plugin_display_name(self) -> str:
        """
        Management Agent Plugin Identifier, can be renamed
        """
        return pulumi.get(self, "plugin_display_name")

    @property
    @pulumi.getter(name="pluginId")
    def plugin_id(self) -> str:
        """
        Plugin Id
        """
        return pulumi.get(self, "plugin_id")

    @property
    @pulumi.getter(name="pluginName")
    def plugin_name(self) -> str:
        """
        Filter to return only Management Agents having the particular Plugin installed.
        """
        return pulumi.get(self, "plugin_name")

    @property
    @pulumi.getter(name="pluginVersion")
    def plugin_version(self) -> str:
        """
        Plugin Version
        """
        return pulumi.get(self, "plugin_version")


