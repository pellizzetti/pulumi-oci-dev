# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'ProfileLevelsConfiguration',
    'ProfileLevelsConfigurationItem',
    'ProfileTargetCompartments',
    'ProfileTargetTags',
    'ProfileTargetTagsItem',
    'RecommendationResourceCount',
    'RecommendationSupportedLevels',
    'RecommendationSupportedLevelsItem',
    'ResourceActionAction',
    'GetCategoriesCategoryCollectionResult',
    'GetCategoriesCategoryCollectionItemResult',
    'GetCategoriesCategoryCollectionItemRecommendationCountResult',
    'GetCategoriesCategoryCollectionItemResourceCountResult',
    'GetCategoriesFilterResult',
    'GetCategoryRecommendationCountResult',
    'GetCategoryResourceCountResult',
    'GetEnrollmentStatusesEnrollmentStatusCollectionResult',
    'GetEnrollmentStatusesEnrollmentStatusCollectionItemResult',
    'GetEnrollmentStatusesFilterResult',
    'GetHistoriesFilterResult',
    'GetHistoriesHistoryCollectionResult',
    'GetHistoriesHistoryCollectionItemResult',
    'GetHistoriesHistoryCollectionItemActionResult',
    'GetProfileLevelsConfigurationResult',
    'GetProfileLevelsConfigurationItemResult',
    'GetProfileTargetCompartmentsResult',
    'GetProfileTargetTagsResult',
    'GetProfileTargetTagsItemResult',
    'GetProfilesFilterResult',
    'GetProfilesProfileCollectionResult',
    'GetProfilesProfileCollectionItemResult',
    'GetProfilesProfileCollectionItemLevelsConfigurationResult',
    'GetProfilesProfileCollectionItemLevelsConfigurationItemResult',
    'GetProfilesProfileCollectionItemTargetCompartmentsResult',
    'GetProfilesProfileCollectionItemTargetTagsResult',
    'GetProfilesProfileCollectionItemTargetTagsItemResult',
    'GetRecommendationResourceCountResult',
    'GetRecommendationSupportedLevelsResult',
    'GetRecommendationSupportedLevelsItemResult',
    'GetRecommendationsFilterResult',
    'GetRecommendationsRecommendationCollectionResult',
    'GetRecommendationsRecommendationCollectionItemResult',
    'GetRecommendationsRecommendationCollectionItemResourceCountResult',
    'GetRecommendationsRecommendationCollectionItemSupportedLevelsResult',
    'GetRecommendationsRecommendationCollectionItemSupportedLevelsItemResult',
    'GetResourceActionActionResult',
    'GetResourceActionsFilterResult',
    'GetResourceActionsResourceActionCollectionResult',
    'GetResourceActionsResourceActionCollectionItemResult',
    'GetResourceActionsResourceActionCollectionItemActionResult',
]

@pulumi.output_type
class ProfileLevelsConfiguration(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.ProfileLevelsConfigurationItem']] = None):
        """
        :param Sequence['ProfileLevelsConfigurationItemArgs'] items: (Updatable) The list of target tags attached to the current profile override.
        """
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.ProfileLevelsConfigurationItem']]:
        """
        (Updatable) The list of target tags attached to the current profile override.
        """
        return pulumi.get(self, "items")


@pulumi.output_type
class ProfileLevelsConfigurationItem(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "recommendationId":
            suggest = "recommendation_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProfileLevelsConfigurationItem. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProfileLevelsConfigurationItem.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProfileLevelsConfigurationItem.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 level: Optional[str] = None,
                 recommendation_id: Optional[str] = None):
        """
        :param str level: (Updatable) The pre-defined profile level.
        :param str recommendation_id: (Updatable) The unique OCID of the recommendation.
        """
        if level is not None:
            pulumi.set(__self__, "level", level)
        if recommendation_id is not None:
            pulumi.set(__self__, "recommendation_id", recommendation_id)

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        """
        (Updatable) The pre-defined profile level.
        """
        return pulumi.get(self, "level")

    @property
    @pulumi.getter(name="recommendationId")
    def recommendation_id(self) -> Optional[str]:
        """
        (Updatable) The unique OCID of the recommendation.
        """
        return pulumi.get(self, "recommendation_id")


@pulumi.output_type
class ProfileTargetCompartments(dict):
    def __init__(__self__, *,
                 items: Sequence[str]):
        """
        :param Sequence[str] items: (Updatable) The list of target tags attached to the current profile override.
        """
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence[str]:
        """
        (Updatable) The list of target tags attached to the current profile override.
        """
        return pulumi.get(self, "items")


@pulumi.output_type
class ProfileTargetTags(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.ProfileTargetTagsItem']):
        """
        :param Sequence['ProfileTargetTagsItemArgs'] items: (Updatable) The list of target tags attached to the current profile override.
        """
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.ProfileTargetTagsItem']:
        """
        (Updatable) The list of target tags attached to the current profile override.
        """
        return pulumi.get(self, "items")


@pulumi.output_type
class ProfileTargetTagsItem(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "tagDefinitionName":
            suggest = "tag_definition_name"
        elif key == "tagNamespaceName":
            suggest = "tag_namespace_name"
        elif key == "tagValueType":
            suggest = "tag_value_type"
        elif key == "tagValues":
            suggest = "tag_values"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProfileTargetTagsItem. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProfileTargetTagsItem.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProfileTargetTagsItem.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 tag_definition_name: str,
                 tag_namespace_name: str,
                 tag_value_type: str,
                 tag_values: Optional[Sequence[str]] = None):
        """
        :param str tag_definition_name: (Updatable) The name of the tag definition.
        :param str tag_namespace_name: (Updatable) The name of the tag namespace.
        :param str tag_value_type: (Updatable) The tag value type.
        :param Sequence[str] tag_values: (Updatable) The list of tag values.
        """
        pulumi.set(__self__, "tag_definition_name", tag_definition_name)
        pulumi.set(__self__, "tag_namespace_name", tag_namespace_name)
        pulumi.set(__self__, "tag_value_type", tag_value_type)
        if tag_values is not None:
            pulumi.set(__self__, "tag_values", tag_values)

    @property
    @pulumi.getter(name="tagDefinitionName")
    def tag_definition_name(self) -> str:
        """
        (Updatable) The name of the tag definition.
        """
        return pulumi.get(self, "tag_definition_name")

    @property
    @pulumi.getter(name="tagNamespaceName")
    def tag_namespace_name(self) -> str:
        """
        (Updatable) The name of the tag namespace.
        """
        return pulumi.get(self, "tag_namespace_name")

    @property
    @pulumi.getter(name="tagValueType")
    def tag_value_type(self) -> str:
        """
        (Updatable) The tag value type.
        """
        return pulumi.get(self, "tag_value_type")

    @property
    @pulumi.getter(name="tagValues")
    def tag_values(self) -> Optional[Sequence[str]]:
        """
        (Updatable) The list of tag values.
        """
        return pulumi.get(self, "tag_values")


@pulumi.output_type
class RecommendationResourceCount(dict):
    def __init__(__self__, *,
                 count: Optional[int] = None,
                 status: Optional[str] = None):
        """
        :param int count: The count of resources.
        :param str status: (Updatable) The status of the recommendation.
        """
        if count is not None:
            pulumi.set(__self__, "count", count)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def count(self) -> Optional[int]:
        """
        The count of resources.
        """
        return pulumi.get(self, "count")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        """
        (Updatable) The status of the recommendation.
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class RecommendationSupportedLevels(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.RecommendationSupportedLevelsItem']] = None):
        """
        :param Sequence['RecommendationSupportedLevelsItemArgs'] items: The list of supported levels.
        """
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.RecommendationSupportedLevelsItem']]:
        """
        The list of supported levels.
        """
        return pulumi.get(self, "items")


@pulumi.output_type
class RecommendationSupportedLevelsItem(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        """
        :param str name: The name of the profile level.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        The name of the profile level.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class ResourceActionAction(dict):
    def __init__(__self__, *,
                 description: Optional[str] = None,
                 type: Optional[str] = None,
                 url: Optional[str] = None):
        """
        :param str description: Text describing the recommended action.
        :param str type: The status of the resource action.
        :param str url: The URL path to documentation that explains how to perform the action.
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if url is not None:
            pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        Text describing the recommended action.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        The status of the resource action.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def url(self) -> Optional[str]:
        """
        The URL path to documentation that explains how to perform the action.
        """
        return pulumi.get(self, "url")


@pulumi.output_type
class GetCategoriesCategoryCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetCategoriesCategoryCollectionItemResult']):
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetCategoriesCategoryCollectionItemResult']:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetCategoriesCategoryCollectionItemResult(dict):
    def __init__(__self__, *,
                 compartment_id: str,
                 description: str,
                 estimated_cost_saving: float,
                 id: str,
                 name: str,
                 recommendation_counts: Sequence['outputs.GetCategoriesCategoryCollectionItemRecommendationCountResult'],
                 resource_counts: Sequence['outputs.GetCategoriesCategoryCollectionItemResourceCountResult'],
                 state: str,
                 time_created: str,
                 time_updated: str):
        """
        :param str compartment_id: The OCID of the compartment.
        :param str description: Text describing the category. Avoid entering confidential information.
        :param float estimated_cost_saving: The estimated cost savings, in dollars, for the category.
        :param str id: The unique OCID of the category.
        :param str name: Optional. A filter that returns results that match the name specified.
        :param Sequence['GetCategoriesCategoryCollectionItemRecommendationCountArgs'] recommendation_counts: An array of `RecommendationCount` objects grouped by the level of importance assigned to the recommendation.
        :param Sequence['GetCategoriesCategoryCollectionItemResourceCountArgs'] resource_counts: An array of `ResourceCount` objects grouped by the status of the recommendation.
        :param str state: A filter that returns results that match the lifecycle state specified.
        :param str time_created: The date and time the category details were created, in the format defined by RFC3339.
        :param str time_updated: The date and time the category details were last updated, in the format defined by RFC3339.
        """
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "estimated_cost_saving", estimated_cost_saving)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "recommendation_counts", recommendation_counts)
        pulumi.set(__self__, "resource_counts", resource_counts)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "time_created", time_created)
        pulumi.set(__self__, "time_updated", time_updated)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> str:
        """
        The OCID of the compartment.
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Text describing the category. Avoid entering confidential information.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="estimatedCostSaving")
    def estimated_cost_saving(self) -> float:
        """
        The estimated cost savings, in dollars, for the category.
        """
        return pulumi.get(self, "estimated_cost_saving")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The unique OCID of the category.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Optional. A filter that returns results that match the name specified.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="recommendationCounts")
    def recommendation_counts(self) -> Sequence['outputs.GetCategoriesCategoryCollectionItemRecommendationCountResult']:
        """
        An array of `RecommendationCount` objects grouped by the level of importance assigned to the recommendation.
        """
        return pulumi.get(self, "recommendation_counts")

    @property
    @pulumi.getter(name="resourceCounts")
    def resource_counts(self) -> Sequence['outputs.GetCategoriesCategoryCollectionItemResourceCountResult']:
        """
        An array of `ResourceCount` objects grouped by the status of the recommendation.
        """
        return pulumi.get(self, "resource_counts")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        A filter that returns results that match the lifecycle state specified.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> str:
        """
        The date and time the category details were created, in the format defined by RFC3339.
        """
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> str:
        """
        The date and time the category details were last updated, in the format defined by RFC3339.
        """
        return pulumi.get(self, "time_updated")


@pulumi.output_type
class GetCategoriesCategoryCollectionItemRecommendationCountResult(dict):
    def __init__(__self__, *,
                 count: int,
                 importance: str):
        """
        :param int count: The count of resources.
        :param str importance: The level of importance assigned to the recommendation.
        """
        pulumi.set(__self__, "count", count)
        pulumi.set(__self__, "importance", importance)

    @property
    @pulumi.getter
    def count(self) -> int:
        """
        The count of resources.
        """
        return pulumi.get(self, "count")

    @property
    @pulumi.getter
    def importance(self) -> str:
        """
        The level of importance assigned to the recommendation.
        """
        return pulumi.get(self, "importance")


@pulumi.output_type
class GetCategoriesCategoryCollectionItemResourceCountResult(dict):
    def __init__(__self__, *,
                 count: int,
                 status: str):
        """
        :param int count: The count of resources.
        :param str status: The recommendation status of the resource.
        """
        pulumi.set(__self__, "count", count)
        pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def count(self) -> int:
        """
        The count of resources.
        """
        return pulumi.get(self, "count")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        The recommendation status of the resource.
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class GetCategoriesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        """
        :param str name: Optional. A filter that returns results that match the name specified.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Optional. A filter that returns results that match the name specified.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetCategoryRecommendationCountResult(dict):
    def __init__(__self__, *,
                 count: int,
                 importance: str):
        """
        :param int count: The count of resources.
        :param str importance: The level of importance assigned to the recommendation.
        """
        pulumi.set(__self__, "count", count)
        pulumi.set(__self__, "importance", importance)

    @property
    @pulumi.getter
    def count(self) -> int:
        """
        The count of resources.
        """
        return pulumi.get(self, "count")

    @property
    @pulumi.getter
    def importance(self) -> str:
        """
        The level of importance assigned to the recommendation.
        """
        return pulumi.get(self, "importance")


@pulumi.output_type
class GetCategoryResourceCountResult(dict):
    def __init__(__self__, *,
                 count: int,
                 status: str):
        """
        :param int count: The count of resources.
        :param str status: The recommendation status of the resource.
        """
        pulumi.set(__self__, "count", count)
        pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def count(self) -> int:
        """
        The count of resources.
        """
        return pulumi.get(self, "count")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        The recommendation status of the resource.
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class GetEnrollmentStatusesEnrollmentStatusCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetEnrollmentStatusesEnrollmentStatusCollectionItemResult']):
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetEnrollmentStatusesEnrollmentStatusCollectionItemResult']:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetEnrollmentStatusesEnrollmentStatusCollectionItemResult(dict):
    def __init__(__self__, *,
                 compartment_id: str,
                 enrollment_status_id: str,
                 id: str,
                 state: str,
                 status: str,
                 status_reason: str,
                 time_created: str,
                 time_updated: str):
        """
        :param str compartment_id: The OCID of the compartment.
        :param str id: The OCID of the enrollment status.
        :param str state: A filter that returns results that match the lifecycle state specified.
        :param str status: A filter that returns results that match the Cloud Advisor enrollment status specified.
        :param str status_reason: The reason for the enrollment status of the tenancy.
        :param str time_created: The date and time the enrollment status was created, in the format defined by RFC3339.
        :param str time_updated: The date and time the enrollment status was last updated, in the format defined by RFC3339.
        """
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "enrollment_status_id", enrollment_status_id)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "status_reason", status_reason)
        pulumi.set(__self__, "time_created", time_created)
        pulumi.set(__self__, "time_updated", time_updated)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> str:
        """
        The OCID of the compartment.
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="enrollmentStatusId")
    def enrollment_status_id(self) -> str:
        return pulumi.get(self, "enrollment_status_id")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The OCID of the enrollment status.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        A filter that returns results that match the lifecycle state specified.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        A filter that returns results that match the Cloud Advisor enrollment status specified.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="statusReason")
    def status_reason(self) -> str:
        """
        The reason for the enrollment status of the tenancy.
        """
        return pulumi.get(self, "status_reason")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> str:
        """
        The date and time the enrollment status was created, in the format defined by RFC3339.
        """
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> str:
        """
        The date and time the enrollment status was last updated, in the format defined by RFC3339.
        """
        return pulumi.get(self, "time_updated")


@pulumi.output_type
class GetEnrollmentStatusesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetHistoriesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        """
        :param str name: Optional. A filter that returns results that match the name specified.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Optional. A filter that returns results that match the name specified.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetHistoriesHistoryCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetHistoriesHistoryCollectionItemResult']):
        """
        :param Sequence['GetHistoriesHistoryCollectionItemArgs'] items: A collection of history summaries.
        """
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetHistoriesHistoryCollectionItemResult']:
        """
        A collection of history summaries.
        """
        return pulumi.get(self, "items")


@pulumi.output_type
class GetHistoriesHistoryCollectionItemResult(dict):
    def __init__(__self__, *,
                 actions: Sequence['outputs.GetHistoriesHistoryCollectionItemActionResult'],
                 category_id: str,
                 compartment_id: str,
                 compartment_name: str,
                 estimated_cost_saving: float,
                 extended_metadata: Mapping[str, Any],
                 id: str,
                 metadata: Mapping[str, Any],
                 name: str,
                 recommendation_id: str,
                 recommendation_name: str,
                 resource_action_id: str,
                 resource_id: str,
                 resource_type: str,
                 state: str,
                 status: str,
                 time_created: str):
        """
        :param Sequence['GetHistoriesHistoryCollectionItemActionArgs'] actions: Details about the recommended action.
        :param str category_id: The unique OCID associated with the category.
        :param str compartment_id: The OCID of the compartment.
        :param str compartment_name: The name assigned to the compartment.
        :param float estimated_cost_saving: The estimated cost savings, in dollars, for the resource action.
        :param Mapping[str, Any] extended_metadata: Additional metadata key/value pairs that you provide. They serve the same purpose and functionality as fields in the `metadata` object.
        :param str id: The unique OCID associated with the recommendation history.
        :param Mapping[str, Any] metadata: Custom metadata key/value pairs for the resource action.
        :param str name: Optional. A filter that returns results that match the name specified.
        :param str recommendation_id: The unique OCID associated with the recommendation.
        :param str recommendation_name: Optional. A filter that returns results that match the recommendation name specified.
        :param str resource_action_id: The unique OCID associated with the resource action.
        :param str resource_id: The unique OCID associated with the resource.
        :param str resource_type: Optional. A filter that returns results that match the resource type specified.
        :param str state: A filter that returns results that match the lifecycle state specified.
        :param str status: A filter that returns recommendations that match the status specified.
        :param str time_created: The date and time the recommendation history was created, in the format defined by RFC3339.
        """
        pulumi.set(__self__, "actions", actions)
        pulumi.set(__self__, "category_id", category_id)
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "compartment_name", compartment_name)
        pulumi.set(__self__, "estimated_cost_saving", estimated_cost_saving)
        pulumi.set(__self__, "extended_metadata", extended_metadata)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "metadata", metadata)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "recommendation_id", recommendation_id)
        pulumi.set(__self__, "recommendation_name", recommendation_name)
        pulumi.set(__self__, "resource_action_id", resource_action_id)
        pulumi.set(__self__, "resource_id", resource_id)
        pulumi.set(__self__, "resource_type", resource_type)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "time_created", time_created)

    @property
    @pulumi.getter
    def actions(self) -> Sequence['outputs.GetHistoriesHistoryCollectionItemActionResult']:
        """
        Details about the recommended action.
        """
        return pulumi.get(self, "actions")

    @property
    @pulumi.getter(name="categoryId")
    def category_id(self) -> str:
        """
        The unique OCID associated with the category.
        """
        return pulumi.get(self, "category_id")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> str:
        """
        The OCID of the compartment.
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="compartmentName")
    def compartment_name(self) -> str:
        """
        The name assigned to the compartment.
        """
        return pulumi.get(self, "compartment_name")

    @property
    @pulumi.getter(name="estimatedCostSaving")
    def estimated_cost_saving(self) -> float:
        """
        The estimated cost savings, in dollars, for the resource action.
        """
        return pulumi.get(self, "estimated_cost_saving")

    @property
    @pulumi.getter(name="extendedMetadata")
    def extended_metadata(self) -> Mapping[str, Any]:
        """
        Additional metadata key/value pairs that you provide. They serve the same purpose and functionality as fields in the `metadata` object.
        """
        return pulumi.get(self, "extended_metadata")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The unique OCID associated with the recommendation history.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def metadata(self) -> Mapping[str, Any]:
        """
        Custom metadata key/value pairs for the resource action.
        """
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Optional. A filter that returns results that match the name specified.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="recommendationId")
    def recommendation_id(self) -> str:
        """
        The unique OCID associated with the recommendation.
        """
        return pulumi.get(self, "recommendation_id")

    @property
    @pulumi.getter(name="recommendationName")
    def recommendation_name(self) -> str:
        """
        Optional. A filter that returns results that match the recommendation name specified.
        """
        return pulumi.get(self, "recommendation_name")

    @property
    @pulumi.getter(name="resourceActionId")
    def resource_action_id(self) -> str:
        """
        The unique OCID associated with the resource action.
        """
        return pulumi.get(self, "resource_action_id")

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> str:
        """
        The unique OCID associated with the resource.
        """
        return pulumi.get(self, "resource_id")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> str:
        """
        Optional. A filter that returns results that match the resource type specified.
        """
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        A filter that returns results that match the lifecycle state specified.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        A filter that returns recommendations that match the status specified.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> str:
        """
        The date and time the recommendation history was created, in the format defined by RFC3339.
        """
        return pulumi.get(self, "time_created")


@pulumi.output_type
class GetHistoriesHistoryCollectionItemActionResult(dict):
    def __init__(__self__, *,
                 description: str,
                 type: str,
                 url: str):
        """
        :param str description: Text describing the recommended action.
        :param str type: The status of the resource action.
        :param str url: The URL path to documentation that explains how to perform the action.
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Text describing the recommended action.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The status of the resource action.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def url(self) -> str:
        """
        The URL path to documentation that explains how to perform the action.
        """
        return pulumi.get(self, "url")


@pulumi.output_type
class GetProfileLevelsConfigurationResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetProfileLevelsConfigurationItemResult']):
        """
        :param Sequence['GetProfileLevelsConfigurationItemArgs'] items: The list of target tags attached to the current profile override.
        """
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetProfileLevelsConfigurationItemResult']:
        """
        The list of target tags attached to the current profile override.
        """
        return pulumi.get(self, "items")


@pulumi.output_type
class GetProfileLevelsConfigurationItemResult(dict):
    def __init__(__self__, *,
                 level: str,
                 recommendation_id: str):
        """
        :param str level: The pre-defined profile level.
        :param str recommendation_id: The unique OCID of the recommendation.
        """
        pulumi.set(__self__, "level", level)
        pulumi.set(__self__, "recommendation_id", recommendation_id)

    @property
    @pulumi.getter
    def level(self) -> str:
        """
        The pre-defined profile level.
        """
        return pulumi.get(self, "level")

    @property
    @pulumi.getter(name="recommendationId")
    def recommendation_id(self) -> str:
        """
        The unique OCID of the recommendation.
        """
        return pulumi.get(self, "recommendation_id")


@pulumi.output_type
class GetProfileTargetCompartmentsResult(dict):
    def __init__(__self__, *,
                 items: Sequence[str]):
        """
        :param Sequence[str] items: The list of target tags attached to the current profile override.
        """
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence[str]:
        """
        The list of target tags attached to the current profile override.
        """
        return pulumi.get(self, "items")


@pulumi.output_type
class GetProfileTargetTagsResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetProfileTargetTagsItemResult']):
        """
        :param Sequence['GetProfileTargetTagsItemArgs'] items: The list of target tags attached to the current profile override.
        """
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetProfileTargetTagsItemResult']:
        """
        The list of target tags attached to the current profile override.
        """
        return pulumi.get(self, "items")


@pulumi.output_type
class GetProfileTargetTagsItemResult(dict):
    def __init__(__self__, *,
                 tag_definition_name: str,
                 tag_namespace_name: str,
                 tag_value_type: str,
                 tag_values: Sequence[str]):
        """
        :param str tag_definition_name: The name of the tag definition.
        :param str tag_namespace_name: The name of the tag namespace.
        :param str tag_value_type: The tag value type.
        :param Sequence[str] tag_values: The list of tag values.
        """
        pulumi.set(__self__, "tag_definition_name", tag_definition_name)
        pulumi.set(__self__, "tag_namespace_name", tag_namespace_name)
        pulumi.set(__self__, "tag_value_type", tag_value_type)
        pulumi.set(__self__, "tag_values", tag_values)

    @property
    @pulumi.getter(name="tagDefinitionName")
    def tag_definition_name(self) -> str:
        """
        The name of the tag definition.
        """
        return pulumi.get(self, "tag_definition_name")

    @property
    @pulumi.getter(name="tagNamespaceName")
    def tag_namespace_name(self) -> str:
        """
        The name of the tag namespace.
        """
        return pulumi.get(self, "tag_namespace_name")

    @property
    @pulumi.getter(name="tagValueType")
    def tag_value_type(self) -> str:
        """
        The tag value type.
        """
        return pulumi.get(self, "tag_value_type")

    @property
    @pulumi.getter(name="tagValues")
    def tag_values(self) -> Sequence[str]:
        """
        The list of tag values.
        """
        return pulumi.get(self, "tag_values")


@pulumi.output_type
class GetProfilesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        """
        :param str name: Optional. A filter that returns results that match the name specified.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Optional. A filter that returns results that match the name specified.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetProfilesProfileCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetProfilesProfileCollectionItemResult']):
        """
        :param Sequence['GetProfilesProfileCollectionItemArgs'] items: The list of target tags attached to the current profile override.
        """
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetProfilesProfileCollectionItemResult']:
        """
        The list of target tags attached to the current profile override.
        """
        return pulumi.get(self, "items")


@pulumi.output_type
class GetProfilesProfileCollectionItemResult(dict):
    def __init__(__self__, *,
                 compartment_id: str,
                 defined_tags: Mapping[str, Any],
                 description: str,
                 freeform_tags: Mapping[str, Any],
                 id: str,
                 levels_configuration: 'outputs.GetProfilesProfileCollectionItemLevelsConfigurationResult',
                 name: str,
                 state: str,
                 target_compartments: 'outputs.GetProfilesProfileCollectionItemTargetCompartmentsResult',
                 target_tags: 'outputs.GetProfilesProfileCollectionItemTargetTagsResult',
                 time_created: str,
                 time_updated: str):
        """
        :param str compartment_id: The OCID of the compartment.
        :param Mapping[str, Any] defined_tags: Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"foo-namespace.bar-key": "value"}`
        :param str description: Text describing the profile. Avoid entering confidential information.
        :param Mapping[str, Any] freeform_tags: Simple key-value pair applied without any predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Exists for cross-compatibility only.  Example: `{"bar-key": "value"}`
        :param str id: The unique OCID of the profile.
        :param 'GetProfilesProfileCollectionItemLevelsConfigurationArgs' levels_configuration: A list of configuration levels for each recommendation.
        :param str name: Optional. A filter that returns results that match the name specified.
        :param str state: A filter that returns results that match the lifecycle state specified.
        :param 'GetProfilesProfileCollectionItemTargetCompartmentsArgs' target_compartments: Optional. The target compartments supported by a profile override for a recommendation.
        :param 'GetProfilesProfileCollectionItemTargetTagsArgs' target_tags: Optional. The target tags supported by a profile override for a recommendation.
        :param str time_created: The date and time the profile was created, in the format defined by RFC3339.
        :param str time_updated: The date and time the profile was last updated, in the format defined by RFC3339.
        """
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "defined_tags", defined_tags)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "freeform_tags", freeform_tags)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "levels_configuration", levels_configuration)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "target_compartments", target_compartments)
        pulumi.set(__self__, "target_tags", target_tags)
        pulumi.set(__self__, "time_created", time_created)
        pulumi.set(__self__, "time_updated", time_updated)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> str:
        """
        The OCID of the compartment.
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Mapping[str, Any]:
        """
        Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"foo-namespace.bar-key": "value"}`
        """
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Text describing the profile. Avoid entering confidential information.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Mapping[str, Any]:
        """
        Simple key-value pair applied without any predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Exists for cross-compatibility only.  Example: `{"bar-key": "value"}`
        """
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The unique OCID of the profile.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="levelsConfiguration")
    def levels_configuration(self) -> 'outputs.GetProfilesProfileCollectionItemLevelsConfigurationResult':
        """
        A list of configuration levels for each recommendation.
        """
        return pulumi.get(self, "levels_configuration")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Optional. A filter that returns results that match the name specified.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        A filter that returns results that match the lifecycle state specified.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="targetCompartments")
    def target_compartments(self) -> 'outputs.GetProfilesProfileCollectionItemTargetCompartmentsResult':
        """
        Optional. The target compartments supported by a profile override for a recommendation.
        """
        return pulumi.get(self, "target_compartments")

    @property
    @pulumi.getter(name="targetTags")
    def target_tags(self) -> 'outputs.GetProfilesProfileCollectionItemTargetTagsResult':
        """
        Optional. The target tags supported by a profile override for a recommendation.
        """
        return pulumi.get(self, "target_tags")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> str:
        """
        The date and time the profile was created, in the format defined by RFC3339.
        """
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> str:
        """
        The date and time the profile was last updated, in the format defined by RFC3339.
        """
        return pulumi.get(self, "time_updated")


@pulumi.output_type
class GetProfilesProfileCollectionItemLevelsConfigurationResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetProfilesProfileCollectionItemLevelsConfigurationItemResult']):
        """
        :param Sequence['GetProfilesProfileCollectionItemLevelsConfigurationItemArgs'] items: The list of target tags attached to the current profile override.
        """
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetProfilesProfileCollectionItemLevelsConfigurationItemResult']:
        """
        The list of target tags attached to the current profile override.
        """
        return pulumi.get(self, "items")


@pulumi.output_type
class GetProfilesProfileCollectionItemLevelsConfigurationItemResult(dict):
    def __init__(__self__, *,
                 level: str,
                 recommendation_id: str):
        """
        :param str level: The pre-defined profile level.
        :param str recommendation_id: The unique OCID of the recommendation.
        """
        pulumi.set(__self__, "level", level)
        pulumi.set(__self__, "recommendation_id", recommendation_id)

    @property
    @pulumi.getter
    def level(self) -> str:
        """
        The pre-defined profile level.
        """
        return pulumi.get(self, "level")

    @property
    @pulumi.getter(name="recommendationId")
    def recommendation_id(self) -> str:
        """
        The unique OCID of the recommendation.
        """
        return pulumi.get(self, "recommendation_id")


@pulumi.output_type
class GetProfilesProfileCollectionItemTargetCompartmentsResult(dict):
    def __init__(__self__, *,
                 items: Sequence[str]):
        """
        :param Sequence[str] items: The list of target tags attached to the current profile override.
        """
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence[str]:
        """
        The list of target tags attached to the current profile override.
        """
        return pulumi.get(self, "items")


@pulumi.output_type
class GetProfilesProfileCollectionItemTargetTagsResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetProfilesProfileCollectionItemTargetTagsItemResult']):
        """
        :param Sequence['GetProfilesProfileCollectionItemTargetTagsItemArgs'] items: The list of target tags attached to the current profile override.
        """
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetProfilesProfileCollectionItemTargetTagsItemResult']:
        """
        The list of target tags attached to the current profile override.
        """
        return pulumi.get(self, "items")


@pulumi.output_type
class GetProfilesProfileCollectionItemTargetTagsItemResult(dict):
    def __init__(__self__, *,
                 tag_definition_name: str,
                 tag_namespace_name: str,
                 tag_value_type: str,
                 tag_values: Sequence[str]):
        """
        :param str tag_definition_name: The name of the tag definition.
        :param str tag_namespace_name: The name of the tag namespace.
        :param str tag_value_type: The tag value type.
        :param Sequence[str] tag_values: The list of tag values.
        """
        pulumi.set(__self__, "tag_definition_name", tag_definition_name)
        pulumi.set(__self__, "tag_namespace_name", tag_namespace_name)
        pulumi.set(__self__, "tag_value_type", tag_value_type)
        pulumi.set(__self__, "tag_values", tag_values)

    @property
    @pulumi.getter(name="tagDefinitionName")
    def tag_definition_name(self) -> str:
        """
        The name of the tag definition.
        """
        return pulumi.get(self, "tag_definition_name")

    @property
    @pulumi.getter(name="tagNamespaceName")
    def tag_namespace_name(self) -> str:
        """
        The name of the tag namespace.
        """
        return pulumi.get(self, "tag_namespace_name")

    @property
    @pulumi.getter(name="tagValueType")
    def tag_value_type(self) -> str:
        """
        The tag value type.
        """
        return pulumi.get(self, "tag_value_type")

    @property
    @pulumi.getter(name="tagValues")
    def tag_values(self) -> Sequence[str]:
        """
        The list of tag values.
        """
        return pulumi.get(self, "tag_values")


@pulumi.output_type
class GetRecommendationResourceCountResult(dict):
    def __init__(__self__, *,
                 count: int,
                 status: str):
        """
        :param int count: The count of resources.
        :param str status: The current status of the recommendation.
        """
        pulumi.set(__self__, "count", count)
        pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def count(self) -> int:
        """
        The count of resources.
        """
        return pulumi.get(self, "count")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        The current status of the recommendation.
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class GetRecommendationSupportedLevelsResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetRecommendationSupportedLevelsItemResult']):
        """
        :param Sequence['GetRecommendationSupportedLevelsItemArgs'] items: The list of supported levels.
        """
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetRecommendationSupportedLevelsItemResult']:
        """
        The list of supported levels.
        """
        return pulumi.get(self, "items")


@pulumi.output_type
class GetRecommendationSupportedLevelsItemResult(dict):
    def __init__(__self__, *,
                 name: str):
        """
        :param str name: The name of the profile level.
        """
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the profile level.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetRecommendationsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        """
        :param str name: Optional. A filter that returns results that match the name specified.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Optional. A filter that returns results that match the name specified.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetRecommendationsRecommendationCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetRecommendationsRecommendationCollectionItemResult']):
        """
        :param Sequence['GetRecommendationsRecommendationCollectionItemArgs'] items: The list of supported levels.
        """
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetRecommendationsRecommendationCollectionItemResult']:
        """
        The list of supported levels.
        """
        return pulumi.get(self, "items")


@pulumi.output_type
class GetRecommendationsRecommendationCollectionItemResult(dict):
    def __init__(__self__, *,
                 category_id: str,
                 compartment_id: str,
                 description: str,
                 estimated_cost_saving: float,
                 id: str,
                 importance: str,
                 name: str,
                 recommendation_id: str,
                 resource_counts: Sequence['outputs.GetRecommendationsRecommendationCollectionItemResourceCountResult'],
                 state: str,
                 status: str,
                 supported_levels: 'outputs.GetRecommendationsRecommendationCollectionItemSupportedLevelsResult',
                 time_created: str,
                 time_status_begin: str,
                 time_status_end: str,
                 time_updated: str):
        """
        :param str category_id: The unique OCID associated with the category.
        :param str compartment_id: The OCID of the compartment.
        :param str description: Text describing the recommendation.
        :param float estimated_cost_saving: The estimated cost savings, in dollars, for the recommendation.
        :param str id: The unique OCID associated with the recommendation.
        :param str importance: The level of importance assigned to the recommendation.
        :param str name: Optional. A filter that returns results that match the name specified.
        :param Sequence['GetRecommendationsRecommendationCollectionItemResourceCountArgs'] resource_counts: An array of `ResourceCount` objects grouped by the status of the resource actions.
        :param str state: A filter that returns results that match the lifecycle state specified.
        :param str status: A filter that returns recommendations that match the status specified.
        :param 'GetRecommendationsRecommendationCollectionItemSupportedLevelsArgs' supported_levels: Optional. The profile levels supported by a recommendation. For example, profile level values could be `Low`, `Medium`, and `High`. Not all recommendations support this field.
        :param str time_created: The date and time the recommendation details were created, in the format defined by RFC3339.
        :param str time_status_begin: The date and time that the recommendation entered its current status. The format is defined by RFC3339.
        :param str time_status_end: The date and time the current status will change. The format is defined by RFC3339.
        :param str time_updated: The date and time the recommendation details were last updated, in the format defined by RFC3339.
        """
        pulumi.set(__self__, "category_id", category_id)
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "estimated_cost_saving", estimated_cost_saving)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "importance", importance)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "recommendation_id", recommendation_id)
        pulumi.set(__self__, "resource_counts", resource_counts)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "supported_levels", supported_levels)
        pulumi.set(__self__, "time_created", time_created)
        pulumi.set(__self__, "time_status_begin", time_status_begin)
        pulumi.set(__self__, "time_status_end", time_status_end)
        pulumi.set(__self__, "time_updated", time_updated)

    @property
    @pulumi.getter(name="categoryId")
    def category_id(self) -> str:
        """
        The unique OCID associated with the category.
        """
        return pulumi.get(self, "category_id")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> str:
        """
        The OCID of the compartment.
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Text describing the recommendation.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="estimatedCostSaving")
    def estimated_cost_saving(self) -> float:
        """
        The estimated cost savings, in dollars, for the recommendation.
        """
        return pulumi.get(self, "estimated_cost_saving")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The unique OCID associated with the recommendation.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def importance(self) -> str:
        """
        The level of importance assigned to the recommendation.
        """
        return pulumi.get(self, "importance")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Optional. A filter that returns results that match the name specified.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="recommendationId")
    def recommendation_id(self) -> str:
        return pulumi.get(self, "recommendation_id")

    @property
    @pulumi.getter(name="resourceCounts")
    def resource_counts(self) -> Sequence['outputs.GetRecommendationsRecommendationCollectionItemResourceCountResult']:
        """
        An array of `ResourceCount` objects grouped by the status of the resource actions.
        """
        return pulumi.get(self, "resource_counts")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        A filter that returns results that match the lifecycle state specified.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        A filter that returns recommendations that match the status specified.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="supportedLevels")
    def supported_levels(self) -> 'outputs.GetRecommendationsRecommendationCollectionItemSupportedLevelsResult':
        """
        Optional. The profile levels supported by a recommendation. For example, profile level values could be `Low`, `Medium`, and `High`. Not all recommendations support this field.
        """
        return pulumi.get(self, "supported_levels")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> str:
        """
        The date and time the recommendation details were created, in the format defined by RFC3339.
        """
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeStatusBegin")
    def time_status_begin(self) -> str:
        """
        The date and time that the recommendation entered its current status. The format is defined by RFC3339.
        """
        return pulumi.get(self, "time_status_begin")

    @property
    @pulumi.getter(name="timeStatusEnd")
    def time_status_end(self) -> str:
        """
        The date and time the current status will change. The format is defined by RFC3339.
        """
        return pulumi.get(self, "time_status_end")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> str:
        """
        The date and time the recommendation details were last updated, in the format defined by RFC3339.
        """
        return pulumi.get(self, "time_updated")


@pulumi.output_type
class GetRecommendationsRecommendationCollectionItemResourceCountResult(dict):
    def __init__(__self__, *,
                 count: int,
                 status: str):
        """
        :param int count: The count of resources.
        :param str status: A filter that returns recommendations that match the status specified.
        """
        pulumi.set(__self__, "count", count)
        pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def count(self) -> int:
        """
        The count of resources.
        """
        return pulumi.get(self, "count")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        A filter that returns recommendations that match the status specified.
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class GetRecommendationsRecommendationCollectionItemSupportedLevelsResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetRecommendationsRecommendationCollectionItemSupportedLevelsItemResult']):
        """
        :param Sequence['GetRecommendationsRecommendationCollectionItemSupportedLevelsItemArgs'] items: The list of supported levels.
        """
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetRecommendationsRecommendationCollectionItemSupportedLevelsItemResult']:
        """
        The list of supported levels.
        """
        return pulumi.get(self, "items")


@pulumi.output_type
class GetRecommendationsRecommendationCollectionItemSupportedLevelsItemResult(dict):
    def __init__(__self__, *,
                 name: str):
        """
        :param str name: Optional. A filter that returns results that match the name specified.
        """
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Optional. A filter that returns results that match the name specified.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetResourceActionActionResult(dict):
    def __init__(__self__, *,
                 description: str,
                 type: str,
                 url: str):
        """
        :param str description: Text describing the recommended action.
        :param str type: The status of the resource action.
        :param str url: The URL path to documentation that explains how to perform the action.
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Text describing the recommended action.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The status of the resource action.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def url(self) -> str:
        """
        The URL path to documentation that explains how to perform the action.
        """
        return pulumi.get(self, "url")


@pulumi.output_type
class GetResourceActionsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        """
        :param str name: Optional. A filter that returns results that match the name specified.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Optional. A filter that returns results that match the name specified.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetResourceActionsResourceActionCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetResourceActionsResourceActionCollectionItemResult']):
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetResourceActionsResourceActionCollectionItemResult']:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetResourceActionsResourceActionCollectionItemResult(dict):
    def __init__(__self__, *,
                 action: 'outputs.GetResourceActionsResourceActionCollectionItemActionResult',
                 category_id: str,
                 compartment_id: str,
                 compartment_name: str,
                 estimated_cost_saving: float,
                 extended_metadata: Mapping[str, Any],
                 id: str,
                 metadata: Mapping[str, Any],
                 name: str,
                 recommendation_id: str,
                 resource_action_id: str,
                 resource_id: str,
                 resource_type: str,
                 state: str,
                 status: str,
                 time_created: str,
                 time_status_begin: str,
                 time_status_end: str,
                 time_updated: str):
        """
        :param 'GetResourceActionsResourceActionCollectionItemActionArgs' action: Details about the recommended action.
        :param str category_id: The unique OCID associated with the category.
        :param str compartment_id: The OCID of the compartment.
        :param str compartment_name: The name associated with the compartment.
        :param float estimated_cost_saving: The estimated cost savings, in dollars, for the resource action.
        :param Mapping[str, Any] extended_metadata: Additional metadata key/value pairs that you provide. They serve the same purpose and functionality as fields in the `metadata` object.
        :param str id: The unique OCID associated with the resource action.
        :param Mapping[str, Any] metadata: Custom metadata key/value pairs for the resource action.
        :param str name: Optional. A filter that returns results that match the name specified.
        :param str recommendation_id: The unique OCID associated with the recommendation.
        :param str resource_id: The unique OCID associated with the resource.
        :param str resource_type: Optional. A filter that returns results that match the resource type specified.
        :param str state: A filter that returns results that match the lifecycle state specified.
        :param str status: A filter that returns recommendations that match the status specified.
        :param str time_created: The date and time the resource action details were created, in the format defined by RFC3339.
        :param str time_status_begin: The date and time that the resource action entered its current status. The format is defined by RFC3339.
        :param str time_status_end: The date and time the current status will change. The format is defined by RFC3339.
        :param str time_updated: The date and time the resource action details were last updated, in the format defined by RFC3339.
        """
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "category_id", category_id)
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "compartment_name", compartment_name)
        pulumi.set(__self__, "estimated_cost_saving", estimated_cost_saving)
        pulumi.set(__self__, "extended_metadata", extended_metadata)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "metadata", metadata)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "recommendation_id", recommendation_id)
        pulumi.set(__self__, "resource_action_id", resource_action_id)
        pulumi.set(__self__, "resource_id", resource_id)
        pulumi.set(__self__, "resource_type", resource_type)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "time_created", time_created)
        pulumi.set(__self__, "time_status_begin", time_status_begin)
        pulumi.set(__self__, "time_status_end", time_status_end)
        pulumi.set(__self__, "time_updated", time_updated)

    @property
    @pulumi.getter
    def action(self) -> 'outputs.GetResourceActionsResourceActionCollectionItemActionResult':
        """
        Details about the recommended action.
        """
        return pulumi.get(self, "action")

    @property
    @pulumi.getter(name="categoryId")
    def category_id(self) -> str:
        """
        The unique OCID associated with the category.
        """
        return pulumi.get(self, "category_id")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> str:
        """
        The OCID of the compartment.
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="compartmentName")
    def compartment_name(self) -> str:
        """
        The name associated with the compartment.
        """
        return pulumi.get(self, "compartment_name")

    @property
    @pulumi.getter(name="estimatedCostSaving")
    def estimated_cost_saving(self) -> float:
        """
        The estimated cost savings, in dollars, for the resource action.
        """
        return pulumi.get(self, "estimated_cost_saving")

    @property
    @pulumi.getter(name="extendedMetadata")
    def extended_metadata(self) -> Mapping[str, Any]:
        """
        Additional metadata key/value pairs that you provide. They serve the same purpose and functionality as fields in the `metadata` object.
        """
        return pulumi.get(self, "extended_metadata")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The unique OCID associated with the resource action.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def metadata(self) -> Mapping[str, Any]:
        """
        Custom metadata key/value pairs for the resource action.
        """
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Optional. A filter that returns results that match the name specified.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="recommendationId")
    def recommendation_id(self) -> str:
        """
        The unique OCID associated with the recommendation.
        """
        return pulumi.get(self, "recommendation_id")

    @property
    @pulumi.getter(name="resourceActionId")
    def resource_action_id(self) -> str:
        return pulumi.get(self, "resource_action_id")

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> str:
        """
        The unique OCID associated with the resource.
        """
        return pulumi.get(self, "resource_id")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> str:
        """
        Optional. A filter that returns results that match the resource type specified.
        """
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        A filter that returns results that match the lifecycle state specified.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        A filter that returns recommendations that match the status specified.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> str:
        """
        The date and time the resource action details were created, in the format defined by RFC3339.
        """
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeStatusBegin")
    def time_status_begin(self) -> str:
        """
        The date and time that the resource action entered its current status. The format is defined by RFC3339.
        """
        return pulumi.get(self, "time_status_begin")

    @property
    @pulumi.getter(name="timeStatusEnd")
    def time_status_end(self) -> str:
        """
        The date and time the current status will change. The format is defined by RFC3339.
        """
        return pulumi.get(self, "time_status_end")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> str:
        """
        The date and time the resource action details were last updated, in the format defined by RFC3339.
        """
        return pulumi.get(self, "time_updated")


@pulumi.output_type
class GetResourceActionsResourceActionCollectionItemActionResult(dict):
    def __init__(__self__, *,
                 description: str,
                 type: str,
                 url: str):
        """
        :param str description: Text describing the recommended action.
        :param str type: The status of the resource action.
        :param str url: The URL path to documentation that explains how to perform the action.
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Text describing the recommended action.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The status of the resource action.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def url(self) -> str:
        """
        The URL path to documentation that explains how to perform the action.
        """
        return pulumi.get(self, "url")


